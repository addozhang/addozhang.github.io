<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>源码 on 乱世浮生</title><link>https://atbug.com/tags/%E6%BA%90%E7%A0%81/</link><description>Recent content in 源码 on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 08 Dec 2020 20:53:39 +0800</lastBuildDate><atom:link href="https://atbug.com/tags/%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 cLion 阅读 envoy 源码</title><link>https://atbug.com/read-envoy-source-code-in-clion/</link><pubDate>Tue, 08 Dec 2020 20:53:39 +0800</pubDate><guid>https://atbug.com/read-envoy-source-code-in-clion/</guid><description>
&lt;p>虽然不写 C++，但是看点代码还是能看懂。Envoy 的功能配置复杂，有时候处理问题还是需要看下源码的。&lt;/p>
&lt;p>Vim 或者 Code 就算了，我只是阅读源码需要关联跳转就行。在 Clion 中，代码的关联跳转需要一个CMakeLists.txt 文件。&lt;/p>
&lt;p>我将生成的内容挂在了 &lt;a href="https://gist.github.com/addozhang/82b172a4276acd073329e5deab272f18">gist&lt;/a> 上了，不想花费时间生成的可以直接复制。&lt;/p>
&lt;h2 id="准备环境">准备环境&lt;/h2>
&lt;h3 id="1-安装依赖的工具">1. 安装依赖的工具&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">brew install coreutils wget cmake libtool go automake ninja clang-format
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-bazel">2. bazel&lt;/h3>
&lt;p>使用 homebrew 进行安装： &lt;code>brew install bazel&lt;/code> 即可&lt;/p>
&lt;p>安装问运行编译测试下：&lt;code>bazel build //source/exe:envoy-static&lt;/code>，提示版本太高。&lt;/p>
&lt;p>现在 homebrew 安装的版本是&lt;code>3.7.1&lt;/code>，而 envoy 需要&lt;code>3.4.1&lt;/code>。&lt;/p>
&lt;p>按照提示下载&lt;code>3.4.1&lt;/code>的版本：&lt;code>cd &amp;quot;/usr/local/Cellar/bazel/3.7.1/libexec/bin&amp;quot; &amp;amp;&amp;amp; curl -fLO https://releases.bazel.build/3.4.1/release/bazel-3.4.1-darwin-x86_64 &amp;amp;&amp;amp; chmod +x bazel-3.4.1-darwin-x86_64&lt;/code>，然后 &lt;em>进到目录里进行下替换&lt;/em> 。&lt;/p>
&lt;p>&lt;strong>注意：编译耗时很长，吃 cpu。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">INFO: Elapsed time: 1844.351s, Critical Path: 336.48s
INFO: &lt;span class="m">4918&lt;/span> processes: &lt;span class="m">4918&lt;/span> darwin-sandbox.
INFO: Build completed successfully, &lt;span class="m">6088&lt;/span> total actions
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/12/08/16074319425868.jpg" alt="">&lt;/p>
&lt;h3 id="3-生成cmakeliststxt文件">3. 生成&lt;code>CMakeLists.txt&lt;/code>文件&lt;/h3>
&lt;p>这就是为什么上面需要安装编译工具了，clone &lt;code>git@github.com:lizan/bazel-cmakelists.git&lt;/code> 这个仓库。&lt;/p>
&lt;p>只要&lt;code>bazel&lt;/code>编译能通过，就可以使用这个工具生成文件了。&lt;/p>
&lt;p>在 envoy 源码根目录执行命令：&lt;code>/path_to_bazel-cmakelists/bazel-cmakelists //source/exe:envoy-static&lt;/code>。&lt;/p>
&lt;p>执行结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">CMakeLists.txt generated in following directory:
/Users/addo/Workspaces/github_w/envoyproxy/envoy
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-clion-刷新">4. Clion 刷新&lt;/h3>
&lt;p>Clion 检测到 CMakeLists.txt 之后就会自动刷新 workspace，自此就可以在 Clion 中愉快的阅读源码了。&lt;/p></description></item><item><title>Spring Cloud - Eureka Client源码分析</title><link>https://atbug.com/spring-cloud-eureka-client-source-code-analysis/</link><pubDate>Sat, 14 Oct 2017 22:04:59 +0000</pubDate><guid>https://atbug.com/spring-cloud-eureka-client-source-code-analysis/</guid><description>
&lt;p>准备做个Spring Cloud源码分析系列, 作为Spring Cloud的源码分析笔记.&lt;/p>
&lt;p>这一篇是Eureka的客户端.&lt;/p>
&lt;h2 id="客户端">客户端&lt;/h2>
&lt;p>两种方式, 最终的实现基本一样.&lt;/p>
&lt;h3 id="显示指定服务发现的实现类型">显示指定服务发现的实现类型&lt;/h3>
&lt;p>使用&lt;code>@EnableEurekaClient&lt;/code>注解显示的指定使用Eureka作为服务发现的实现, 并实例化&lt;code>EurekaClient&lt;/code>实例. 实际上使用的是&lt;code>@EnableDiscoveryClient&lt;/code>注解.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Target&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ElementType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TYPE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Retention&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetentionPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RUNTIME&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Documented&lt;/span>
&lt;span class="nd">@Inherited&lt;/span>
&lt;span class="nd">@EnableDiscoveryClient&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nd">@interface&lt;/span> &lt;span class="n">EnableEurekaClient&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="动态配置实现">动态配置实现&lt;/h3>
&lt;p>使用&lt;code>@EnableDiscoveryClient&lt;/code>注解来配置服务发现的实现.&lt;/p>
&lt;h4 id="源码分析">源码分析&lt;/h4>
&lt;p>&lt;strong>EnableDiscoveryClient&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Target&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ElementType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TYPE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Retention&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetentionPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RUNTIME&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Documented&lt;/span>
&lt;span class="nd">@Inherited&lt;/span>
&lt;span class="nd">@Import&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EnableDiscoveryClientImportSelector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nd">@interface&lt;/span> &lt;span class="n">EnableDiscoveryClient&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>EnableDiscoveryClient&lt;/code>注解的作用主要是用来引入&lt;code>EnableDiscoveryClientImportSelector&lt;/code>&lt;/p>
&lt;p>&lt;strong>EnableDiscoveryClientImportSelector&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Order&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Ordered&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LOWEST_PRECEDENCE&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">100&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EnableDiscoveryClientImportSelector&lt;/span>
&lt;span class="kd">extends&lt;/span> &lt;span class="n">SpringFactoryImportSelector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">EnableDiscoveryClient&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEnabled&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RelaxedPropertyResolver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getEnvironment&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="s">&amp;#34;spring.cloud.discovery.enabled&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Boolean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Boolean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TRUE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">hasDefaultFactory&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>EnableDiscoveryClientImportSelector&lt;/code>继承了&lt;code>SpringFactoryImportSelector&lt;/code>并指定了泛型&lt;code>EnableDiscoveryClient&lt;/code>. &lt;strong>这里的泛型是重点&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>SpringFactoryImportSelector&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SpringFactoryImportSelector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kd">implements&lt;/span> &lt;span class="n">DeferredImportSelector&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BeanClassLoaderAware&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EnvironmentAware&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ClassLoader&lt;/span> &lt;span class="n">beanClassLoader&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">annotationClass&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="nf">SpringFactoryImportSelector&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">annotationClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;)&lt;/span> &lt;span class="n">GenericTypeResolver&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">resolveTypeArgument&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">SpringFactoryImportSelector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">selectImports&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AnnotationMetadata&lt;/span> &lt;span class="n">metadata&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里只截取了部分变量和方法
&lt;code>SpringFactoryImportSelector&lt;/code>是spring cloud common包中的一个抽象类, 主要作用是检查泛型T是否有指定的factory实现, 即spring.factories中有对应类的配置.&lt;/p>
&lt;p>&lt;strong>spring.factories&lt;/strong>&lt;/p>
&lt;p>在&lt;code>spring-cloud-netflix-eureka-client.jar!/META-INF/spring.factories&lt;/code>中&lt;code>EnableDiscoveryClient&lt;/code>的指定factory实现是&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.springframework.cloud.netflix.eureka.config.EurekaClientConfigServerAutoConfiguration,\
org.springframework.cloud.netflix.eureka.config.EurekaDiscoveryClientConfigServiceAutoConfiguration,\
org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration,\
org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration
org.springframework.cloud.bootstrap.BootstrapConfiguration=\
org.springframework.cloud.netflix.eureka.config.EurekaDiscoveryClientConfigServiceBootstrapConfiguration
org.springframework.cloud.client.discovery.EnableDiscoveryClient=\
org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时&lt;code>EnableAutoConfiguration&lt;/code>中包含了&lt;code>org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration&lt;/code>, &lt;code>EurekaClientAutoConfiguration&lt;/code>会为&lt;code>EurekaDiscoveryClientConfiguration&lt;/code>的实例依赖进行初始化, 如EurekaClient. EurekaClient在构造时会启动一个HeartBeat线程, 线程在运行的时候会做renew的操作, 将Application的信息注册更新到Eureka的服务端.&lt;/p>
&lt;p>&lt;strong>EurekaDiscoveryClientConfiguration&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@EnableConfigurationProperties&lt;/span>
&lt;span class="nd">@ConditionalOnClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EurekaClientConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@ConditionalOnProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;eureka.client.enabled&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">matchIfMissing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@CommonsLog&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EurekaDiscoveryClientConfiguration&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">SmartLifecycle&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Ordered&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>