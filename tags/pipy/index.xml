<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pipy on 乱世浮生</title><link>https://atbug.com/tags/pipy/</link><description>Recent content in Pipy on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 23 Jun 2021 00:43:39 +0800</lastBuildDate><atom:link href="https://atbug.com/tags/pipy/index.xml" rel="self" type="application/rss+xml"/><item><title>启动与 web 控制台的使用</title><link>https://atbug.com/pipy-console-introduction/</link><pubDate>Wed, 23 Jun 2021 00:43:39 +0800</pubDate><guid>https://atbug.com/pipy-console-introduction/</guid><description>
&lt;h2 id="启动">启动&lt;/h2>
&lt;p>Pipy 编译之后的 &lt;code>bin&lt;/code> 目录中只有一个 11 Mb 大小的可执行文件。&lt;/p>
&lt;p>启动也很简单，只需要指定 javascript 脚本文件即可：&lt;code>bin/pipy path_to_js_file&lt;/code>。&lt;/p>
&lt;p>比如：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; /tmp/pipy.js &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">pipy()
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s">.listen(6080)
&lt;/span>&lt;span class="s"> .decodeHttpRequest()
&lt;/span>&lt;span class="s"> .replaceMessage(
&lt;/span>&lt;span class="s"> new Message(&amp;#39;Hello!\n&amp;#39;)
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> .encodeHttpResponse()
&lt;/span>&lt;span class="s">EOF&lt;/span>
$ bin/pipy /tmp/pipy.js
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span>
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> Module /pipy.js
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="o">===============&lt;/span>
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span>
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>Listen on 0.0.0.0:6080&lt;span class="o">]&lt;/span>
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> -----&amp;gt;&lt;span class="p">|&lt;/span>
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> decodeHttpRequest
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> replaceMessage
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> encodeHttpResponse
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &amp;lt;-----&lt;span class="p">|&lt;/span>
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span>
2021-06-23 00:01:29 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>listener&lt;span class="o">]&lt;/span> Listening on 0.0.0.0:6080
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行完上面两条命令，即可监听本地的 &lt;code>6080&lt;/code> 端口，尝试发起一个请求：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl http://127.0.0.1:6080
Hello!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此外，可以通过指定 &lt;code>-h&lt;/code> 选项，可以查看 Pipy 的帮助信息。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ bin/pipy -h
Usage: pipy &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span> &amp;lt;script filename&amp;gt;
Options:
-h, -help, --help Show &lt;span class="nb">help&lt;/span> information
-v, -version, --version Show version information
--list-filters List all filters
--help-filters Show detailed usage information &lt;span class="k">for&lt;/span> all filters
--log-level&lt;span class="o">=&lt;/span>&amp;lt;debug&lt;span class="p">|&lt;/span>info&lt;span class="p">|&lt;/span>warn&lt;span class="p">|&lt;/span>error&amp;gt; Set the level of log output
--verify Verify configuration only
--reuse-port Enable kernel load balancing &lt;span class="k">for&lt;/span> all listening ports
--gui-port&lt;span class="o">=&lt;/span>&amp;lt;port&amp;gt; Enable web GUI on the specified port
&lt;/code>&lt;/pre>&lt;/div>&lt;p>前面的示例中，我们在 &lt;code>pipy.js&lt;/code> 文件中键入了几行代码（具体代码在后续教程中进行说明）实现了简单的请求/响应。假如要修改响应的内容要怎么办？比如返回 “Hello World!”&lt;/p>
&lt;ol>
&lt;li>&lt;code>CTRL+C&lt;/code>退出进程&lt;/li>
&lt;li>修改脚本文件里的响应内容&lt;/li>
&lt;li>重新启动 Pipy&lt;/li>
&lt;/ol>
&lt;p>有没有更简单的方法？有！&lt;/p>
&lt;h2 id="web-控制台">web 控制台&lt;/h2>
&lt;p>Pipy 人性化地提供了一个内置的 web 控制台，方便对脚本进行编辑和调试。&lt;/p>
&lt;p>web 控制台的启动也同样简单，前面查看 Pipy 的帮助信息时有看到 &lt;code>--gui-port=&amp;lt;port&amp;gt; Enable web GUI on the specified port&lt;/code>。&lt;/p>
&lt;p>我们调整下前面的命令，加上 &lt;code>--gui-port=6060&lt;/code> 选项：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ bin/pipy --gui-port&lt;span class="o">=&lt;/span>&lt;span class="m">6060&lt;/span> /tmp/pipy.js
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>gui&lt;span class="o">]&lt;/span> Starting GUI service...
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>listener&lt;span class="o">]&lt;/span> Listening on 0.0.0.0:6060
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span>
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> Module /pipy.js
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="o">===============&lt;/span>
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span>
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>Listen on 0.0.0.0:6080&lt;span class="o">]&lt;/span>
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> -----&amp;gt;&lt;span class="p">|&lt;/span>
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> decodeHttpRequest
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> replaceMessage
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> encodeHttpResponse
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &amp;lt;-----&lt;span class="p">|&lt;/span>
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span>
2021-06-23 00:24:49 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>listener&lt;span class="o">]&lt;/span> Listening on 0.0.0.0:6080
&lt;/code>&lt;/pre>&lt;/div>&lt;p>命令输出中说明了 GUI 监听在 &lt;code>6060&lt;/code> 端口。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/23/20210623001852.png" alt="首页">&lt;/p>
&lt;p>从左到右依次为：导航栏、当前生效的模块及 Pipeline、选中的 Pipeline 的结构、日志。&lt;/p>
&lt;p>导航栏从上到下依次为：首页、脚本编辑器、日志。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/23/20210623002620.png" alt="Pipeline 结构">&lt;/p>
&lt;p>选中一个 Pipeline 知乎，第三栏中会展示出该 Pipeline 所使用的过滤器。&lt;/p>
&lt;p>前面我们提出了问题：如何快速的修改脚本并调试。打开脚本编辑器，选中我们的脚本文件：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/23/20210623003220.png" alt="脚本编辑器">&lt;/p>
&lt;p>脚本编辑器上方的工具栏中从左到右依次为：增加脚本、删除脚本、保存、启动、停止、重载、打开/关闭日志面板。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/23/20210623003600.png" alt="修改响应内容">&lt;/p>
&lt;p>修改响应内容后，可以看到工具栏的保存按钮高亮了，这里需要点击进行保存。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ curl http://127.0.0.1:6080
Hello!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>只保存还不够，需要点击重载按钮。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ curl http://127.0.0.1:6080
Hello World!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>假如我们注释掉了 &lt;code>replaceMessage&lt;/code> 过滤器的部分，然后保存、重载。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/23/20210623003904.png" alt="删除过滤器">&lt;/p>
&lt;p>可以看到最右侧的 Pipeline 结构也更新了：&lt;code>replaceMessage&lt;/code> 过滤器被移除。再次发起请求，这次没有任何内容返回。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ curl http://127.0.0.1:6080
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>可编程网关 Pipy 第二弹：编程实现 Metrics 及源码解读</title><link>https://atbug.com/programming-archive-metrics-with-pipy/</link><pubDate>Fri, 11 Jun 2021 08:27:36 +0800</pubDate><guid>https://atbug.com/programming-archive-metrics-with-pipy/</guid><description>
&lt;p>由于要给团队做一下关于 Flomesh 的分享，准备下材料。&lt;/p>
&lt;p>“分享是最好的学习方法。”&lt;/p>
&lt;p>上一回&lt;a href="https://mp.weixin.qq.com/s/l8JzYRn350fjuCAOoo8pcg">初探可编程网关 Pipy&lt;/a>，领略了 Pipy 的“风骚”。从 Pipy 的 GUI 交互深入了解了 Pipy 的配置加载流程。&lt;/p>
&lt;p>今天看一下 Pipy 如何实现 Metrics 的功能，顺便看下数据如何在多个 Pipeline 中进行流转。&lt;/p>
&lt;h2 id="前置">前置&lt;/h2>
&lt;p>首先，需要对 Pipy 有一定的了解，如果不了解看一下&lt;a href="https://mp.weixin.qq.com/s/l8JzYRn350fjuCAOoo8pcg">上一篇文章&lt;/a>。&lt;/p>
&lt;p>其次构建好 Pipy 环境，关于构建还是去看上一篇文章。&lt;/p>
&lt;h2 id="metrics-功能实现">Metrics 功能实现&lt;/h2>
&lt;p>至于 Pipy 实现 Metrics 的方式，源码中就有，位于 &lt;code>test/006-metrics/pipy.js&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610202734.png" alt="">&lt;/p>
&lt;ul>
&lt;li>代理监听 &lt;code>6080&lt;/code> 端口，后端服务在 &lt;code>8080&lt;/code> 端口，Metrics 在 &lt;code>9090&lt;/code> 端口&lt;/li>
&lt;li>共有 5 个 Pipeline：3 个 listen 类型，2 个 Pipeline 类型&lt;/li>
&lt;li>7 种过滤器：&lt;code>fork&lt;/code>、&lt;code>connect&lt;/code>、&lt;code>decodeHttpRequest&lt;/code>、&lt;code>onMessageStart&lt;/code>、&lt;code>decodeHttpResponse&lt;/code>、&lt;code>encodeHttpRespnse&lt;/code>、&lt;code>replaceMessage&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>贴一下源码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">pipy&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">_metrics&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">count&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">_statuses&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="nx">_latencies&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">25&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">70&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">90&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">300&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Number&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">POSITIVE_INFINITY&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">_buckets&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;span class="nx">_timestamp&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6080&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">fork&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;in&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;127.0.0.1:8080&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">fork&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;out&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Extract request info
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipeline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;in&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">onMessageStart&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">_timestamp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="nx">_metrics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Extract response info
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipeline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;out&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">onMessageStart&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">e&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="p">((&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">latency&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">latency&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">_timestamp&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">_latencies&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findIndex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">latency&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="nx">t&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">_buckets&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">_statuses&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">_statuses&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">))()&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Expose as Prometheus metrics
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">9090&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceMessage&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">sum&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Message&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">[&lt;/span>
&lt;span class="sb">`count &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">_metrics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">...&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">entries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">_statuses&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">([&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`status{code=&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">&amp;#34;} &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">...&lt;/span>&lt;span class="nx">_buckets&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`bucket{le=&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">_latencies&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">&amp;#34;} &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">))(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">encodeHttpResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">// Mock service on port 8080
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8080&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceMessage&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">Message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello!\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">encodeHttpResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;p>使用 ab 做请求模拟 &lt;code>ab -n 2000 -c 10 http://localhost:6080/&lt;/code>，然后检查下记录的指标。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http :9090 --body
count &lt;span class="m">2000&lt;/span>
status&lt;span class="o">{&lt;/span>&lt;span class="nv">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;200&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">2000&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1762&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1989&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;5&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1994&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;7&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1999&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;10&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">2000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="分析">分析&lt;/h2>
&lt;p>&lt;strong>TL;DR：本次示例的核心是 &lt;code>fork&lt;/code>，从字面意思就很容易理解：新开一个处理分支（Pipeline），与主线并行执行。&lt;/strong>&lt;/p>
&lt;p>在 &lt;code>src/inbound.cpp:104 109&lt;/code> 处，Pipy 接收一个新的连接。
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610210104.png" alt="">&lt;/p>
&lt;p>创建 &lt;code>Context&lt;/code> 和 &lt;code>Session&lt;/code>，并在 L178 处注册事件的处理器，然后在 L187 处开始接收数据。
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610210414.png" alt="">&lt;/p>
&lt;p>在 &lt;code>#receive&lt;/code> 方法中，定义了数据接收处理器：将读到的数据写入 &lt;code>buffer&lt;/code> 中。这个 &lt;code>buffer&lt;/code> 存储的是 &lt;code>Event&lt;/code>类型数据。（所以说 Pipy 是基于数据流事件，将一些封装成了事件）&lt;/p>
&lt;p>接着调用 &lt;code>Session#input&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610211221.png" alt="">&lt;/p>
&lt;p>实际上调用的是 &lt;code>ReusableSession#input&lt;/code>，调用 &lt;code>m_filters&lt;/code> 的 &lt;code>#process&lt;/code> 方法。&lt;code>m_filters&lt;/code> 实际上是 &lt;code>Filter&lt;/code> 类型。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610212917.png" alt="">&lt;/p>
&lt;p>为什么只有一个 &lt;code>Filter&lt;/code>？重点来了，看下 &lt;code>ReusableSession&lt;/code> 的构造过程就能明白了（这里用了个反向迭代器）。&lt;code>output&lt;/code> 是当前 &lt;code>Filter&lt;/code> 处理完要执行的，实现类似链式的执行。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610213338.png" alt="">&lt;/p>
&lt;p>再回头看上面的示例，可以想象 &lt;code>fork&lt;/code> 就是 &lt;code>Session&lt;/code> 的 &lt;code>m_filters&lt;/code>。&lt;/p>
&lt;p>&lt;code>src/filters/fork.cpp:85&lt;/code>，在 &lt;code>fork&lt;/code> 过滤器中，在 &lt;em>1&lt;/em> 处从 &lt;code>module&lt;/code> 中获取到目标 &lt;code>Pipeline&lt;/code>，并在 &lt;em>3&lt;/em> 和 &lt;em>4&lt;/em> 处 创建了新的 &lt;code>Session&lt;/code> 并保存原 &lt;code>Session&lt;/code> 的数据。&lt;/p>
&lt;p>然后在 &lt;em>5&lt;/em> 处将原 &lt;code>Event&lt;/code> 输入到新的 &lt;code>Session&lt;/code> 中，触发目标 &lt;code>Pipeline&lt;/code> 的 &lt;code>Filter&lt;/code> 链。&lt;strong>值得注意的是，这里是基于事件的处理，并不是阻塞的。这就意味着，&lt;code>fork&lt;/code> 的目标 &lt;code>pipline&lt;/code>，与 &lt;code>fork&lt;/code> 所在的 pipeline 是并行执行的。&lt;/strong> 在示例中，就是 &lt;code>Pipeline&lt;/code> ‘in’ 与 主 &lt;code>Pipeline&lt;/code> 的 &lt;code>connect&lt;/code> 是并行执行的。&lt;/p>
&lt;p>最终在 &lt;em>6&lt;/em> 处，继续使用原 &lt;code>Session&lt;/code> 的 &lt;code>Filter&lt;/code> 链。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610214811.png" alt="">&lt;/p></description></item></channel></rss>