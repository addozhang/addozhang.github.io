<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pipy on 乱世浮生</title><link>https://atbug.com/tags/pipy/</link><description>Recent content in Pipy on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 18 Aug 2021 09:50:28 +0800</lastBuildDate><atom:link href="https://atbug.com/tags/pipy/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Flomesh 进行 Dubbo 服务治理</title><link>https://atbug.com/enhance-dubbo-service-governance-with-flomesh/</link><pubDate>Wed, 18 Aug 2021 09:50:28 +0800</pubDate><guid>https://atbug.com/enhance-dubbo-service-governance-with-flomesh/</guid><description>
&lt;h2 id="写在最前">写在最前&lt;/h2>
&lt;p>和上一篇&lt;a href="https://mp.weixin.qq.com/s/QnKWpXwe8Ex_CrUuAEjZ1Q">《使用 Flomesh 强化 Spring Cloud 服务治理》&lt;/a>一样，这次同样是在无代码侵入的情况下对 Dubbo 服务治理的提升。&lt;/p>
&lt;p>更多治理场景陆续添加中，有兴趣的可关注 &lt;a href="https://github.com/flomesh-io/service-mesh-dubbo-demo">https://github.com/flomesh-io/service-mesh-dubbo-demo&lt;/a>。&lt;/p>
&lt;p>开源的 Pipy 作为 Flomesh 的核心，得益于其轻量及灵活性可以通过编程的方式轻松快速的支持多中平台的服务发现机制，比如 Eureka、Consul、Nacos 等。&lt;/p>
&lt;h2 id="概览">概览&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/08/18/16292498443406.jpg" alt="">&lt;/p>
&lt;h2 id="细节">细节&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/08/18/16292498964245.jpg" alt="">&lt;/p>
&lt;h2 id="环境搭建">环境搭建&lt;/h2>
&lt;p>搭建 Kubernetes 环境，可以选择 kubeadm 进行集群搭建。也可以选择 minikube、k3s、Kind 等，本文使用 k3s。&lt;/p>
&lt;p>使用 &lt;a href="https://k3d.io/">k3d&lt;/a> 安装 &lt;a href="https://github.com/k3s-io/k3s">k3s&lt;/a>。k3d 将在 Docker 容器中运行 k3s，因此需要保证已经安装了 Docker。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ k3d cluster create dubbo-demo -p &lt;span class="s2">&amp;#34;80:80@loadbalancer&amp;#34;&lt;/span> --k3s-server-arg &lt;span class="s1">&amp;#39;--no-deploy=traefik&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装-flomesh">安装 Flomesh&lt;/h2>
&lt;p>从仓库 &lt;code>https://github.com/flomesh-io/service-mesh-dubbo-demo&lt;/code> 克隆代码。进入到 &lt;code>release&lt;/code>目录。&lt;/p>
&lt;p>所有 Flomesh 组件以及用于 demo 的 yamls 文件都位于这个目录中。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f artifacts/cert-manager-v1.3.1.yaml
customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created
namespace/cert-manager created
serviceaccount/cert-manager-cainjector created
serviceaccount/cert-manager created
serviceaccount/cert-manager-webhook created
clusterrole.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
clusterrole.rbac.authorization.k8s.io/cert-manager-view created
clusterrole.rbac.authorization.k8s.io/cert-manager-edit created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created
clusterrole.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created
role.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
role.rbac.authorization.k8s.io/cert-manager:leaderelection created
role.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
rolebinding.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
service/cert-manager created
service/cert-manager-webhook created
deployment.apps/cert-manager-cainjector created
deployment.apps/cert-manager created
deployment.apps/cert-manager-webhook created
mutatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created
validatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意: 要保证 &lt;code>cert-manager&lt;/code> 命名空间中所有的 pod 都正常运行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -n cert-manager
NAME READY STATUS RESTARTS AGE
cert-manager-cainjector-59f76f7fff-ggmdm 1/1 Running &lt;span class="m">0&lt;/span> 32s
cert-manager-59f6c76f4b-r2h5r 1/1 Running &lt;span class="m">0&lt;/span> 32s
cert-manager-webhook-56fdcbb848-sdnxb 1/1 Running &lt;span class="m">0&lt;/span> 32s
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-pipy-operator">安装 Pipy Operator&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f artifacts/pipy-operator.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行完命令后会看到类似的结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">namespace/flomesh created
customresourcedefinition.apiextensions.k8s.io/proxies.flomesh.io created
customresourcedefinition.apiextensions.k8s.io/proxyprofiles.flomesh.io created
serviceaccount/operator-manager created
role.rbac.authorization.k8s.io/leader-election-role created
clusterrole.rbac.authorization.k8s.io/manager-role created
clusterrole.rbac.authorization.k8s.io/metrics-reader created
clusterrole.rbac.authorization.k8s.io/proxy-role created
rolebinding.rbac.authorization.k8s.io/leader-election-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/manager-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/proxy-rolebinding created
configmap/manager-config created
service/operator-manager-metrics-service created
service/proxy-injector-svc created
service/webhook-service created
deployment.apps/operator-manager created
deployment.apps/proxy-injector created
certificate.cert-manager.io/serving-cert created
issuer.cert-manager.io/selfsigned-issuer created
mutatingwebhookconfiguration.admissionregistration.k8s.io/mutating-webhook-configuration created
mutatingwebhookconfiguration.admissionregistration.k8s.io/proxy-injector-webhook-cfg created
validatingwebhookconfiguration.admissionregistration.k8s.io/validating-webhook-configuration created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：要保证 &lt;code>flomesh&lt;/code> 命名空间中所有的 pod 都正常运行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -n flomesh
NAME READY STATUS RESTARTS AGE
proxy-injector-6d5c774bc-rspmc 1/1 Running &lt;span class="m">0&lt;/span> 21s
operator-manager-c95cd449-xxc77 0/1 Running &lt;span class="m">0&lt;/span> 38s
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-ingress-控制器ingress-pipy">安装 Ingress 控制器：ingress-pipy&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f artifacts/ingress-pipy.yaml
namespace/ingress-pipy created
customresourcedefinition.apiextensions.k8s.io/ingressglobalhooks.flomesh.io created
customresourcedefinition.apiextensions.k8s.io/ingressrules.flomesh.io created
serviceaccount/ingress-pipy created
role.rbac.authorization.k8s.io/ingress-pipy-leader-election-role created
clusterrole.rbac.authorization.k8s.io/ingress-pipy-role created
rolebinding.rbac.authorization.k8s.io/ingress-pipy-leader-election-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/ingress-pipy-rolebinding created
configmap/ingress-config created
service/ingress-pipy-cfg created
service/ingress-pipy-controller created
service/ingress-pipy-defaultbackend created
service/webhook-service created
deployment.apps/ingress-pipy-cfg created
deployment.apps/ingress-pipy-controller created
deployment.apps/ingress-pipy-manager created
certificate.cert-manager.io/serving-cert created
issuer.cert-manager.io/selfsigned-issuer created
mutatingwebhookconfiguration.admissionregistration.k8s.io/mutating-webhook-configuration configured
validatingwebhookconfiguration.admissionregistration.k8s.io/validating-webhook-configuration configured
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查 &lt;code>ingress-pipy&lt;/code> 命名空间下 pod 的状态：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -n ingress-pipy
NAME READY STATUS RESTARTS AGE
svclb-ingress-pipy-controller-qwbk9 1/1 Running &lt;span class="m">0&lt;/span> 90s
ingress-pipy-cfg-6c54d5b9b6-6s7lz 1/1 Running &lt;span class="m">0&lt;/span> 90s
ingress-pipy-manager-7988dfbf4f-lxr4b 1/1 Running &lt;span class="m">0&lt;/span> 90s
ingress-pipy-controller-9d4698887-zrpfd 1/1 Running &lt;span class="m">0&lt;/span> 90s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此，你已经成功安装 Flomesh 的所有组件，包括 operator 和 ingress 控制器。&lt;/p>
&lt;h2 id="运行-demo">运行 Demo&lt;/h2>
&lt;h3 id="创建命名空间">创建命名空间&lt;/h3>
&lt;p>Demo 运行在另一个独立的命名空间 &lt;code>flomesh-dubbo&lt;/code> 中，执行命令 &lt;code>kubectl apply -f dubbo-mesh/templates/namespace.yaml&lt;/code> 来创建该命名空间。如果你 &lt;code>describe&lt;/code> 该命名空间你会发现其使用了 &lt;code>flomesh.io/inject=true&lt;/code> 标签。&lt;/p>
&lt;p>这个标签告知 operator 的 admission webHook 拦截标注的命名空间下 pod 的创建。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl describe ns flomesh-dubbo
Name: flomesh-dubbo
Labels: app.kubernetes.io/managed-by&lt;span class="o">=&lt;/span>Helm
app.kubernetes.io/name&lt;span class="o">=&lt;/span>dubbo-mesh
app.kubernetes.io/version&lt;span class="o">=&lt;/span>1.19.0
flomesh.io/inject&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
helm.sh/chart&lt;span class="o">=&lt;/span>dubbo-mesh-0.1.0
kubernetes.io/metadata.name&lt;span class="o">=&lt;/span>flomesh-dubbo
Annotations: &amp;lt;none&amp;gt;
Status: Active
No resource quota.
No LimitRange resource.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建-proxyprofile-资源">创建 ProxyProfile 资源&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubectl apply -f artifacts/proxy-profile.yaml
proxyprofile.flomesh.io/poc-pf-dubbo created
proxyprofile.flomesh.io/poc-pf-http created
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建-mock-服务">创建 mock 服务&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f dubbo-mesh/templates/configmap-mock.yaml
$ kubectl apply -f dubbo-mesh/templates/configmap-proxychains.yaml
$ kubectl apply -f dubbo-mesh/templates/deployment-mock.yaml
$ kubectl apply -f dubbo-mesh/templates/service-mock.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署服务">部署服务&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f artifacts/deployment.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;h3 id="准备">准备&lt;/h3>
&lt;p>访问 demo 服务都要通过 ingress 控制器。因此需要先获取 LB 的 ip 地址。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">//Obtain the controller IP
//Here, we append port.
&lt;span class="nv">ingressAddr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>kubectl get svc ingress-pipy-controller -n ingress-pipy -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.spec.clusterIP}&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>:80
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里我们使用了是 k3d 创建的 k3s，命令中加入了 &lt;code>-p 80:80@loadbalancer&lt;/code> 选项。我们可以使用 &lt;code>127.0.0.1:80&lt;/code> 来访问 ingress 控制器。这里执行命令 &lt;code>ingressAddr=127.0.0.1:80&lt;/code>。&lt;/p>
&lt;p>Ingress 规则中，我们为每个规则指定了 &lt;code>host&lt;/code>，因此每个请求中需要通过 HTTP 请求头 &lt;code>Host&lt;/code> 提供对应的 &lt;code>host&lt;/code>。&lt;/p>
&lt;p>或者在 &lt;code>/etc/hosts&lt;/code> 添加记录：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get ing ingress-canary-router -n flomesh-dubbo -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{range .spec.rules[*]}{.host}{&amp;#39;\n&amp;#39;}&amp;#34;&lt;/span>
dubbo.demo.flomesh.cn
//添加记录到 /etc/hosts
127.0.0.1 dubbo.demo.flomesh.cn
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="灰度">灰度&lt;/h3>
&lt;p>v1、v2 服务只能访问对应版本的服务。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ curl --location --request POST &lt;span class="s1">&amp;#39;http://127.0.0.1:80/hello&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--header &lt;span class="s1">&amp;#39;Host: dubbo.demo.flomesh.cn&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--header &lt;span class="s1">&amp;#39;x-canary-version: v1&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--header &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--data-raw &lt;span class="s1">&amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;Flomesh&amp;#34;}&amp;#39;&lt;/span>
V1-&lt;span class="o">[&lt;/span>hello-service&lt;span class="o">]&lt;/span> : Hello, Flomesh, Today is &lt;span class="o">(&lt;/span>2021-08-17&lt;span class="o">)&lt;/span>, Time is &lt;span class="o">(&lt;/span>04:06:56.823&lt;span class="o">)&lt;/span>
$ curl --location --request POST &lt;span class="s1">&amp;#39;http://127.0.0.1:80/hello&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--header &lt;span class="s1">&amp;#39;Host: dubbo.demo.flomesh.cn&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--header &lt;span class="s1">&amp;#39;x-canary-version: v2&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--header &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--data-raw &lt;span class="s1">&amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;Flomesh&amp;#34;}&amp;#39;&lt;/span>
V2-&lt;span class="o">[&lt;/span>hello-service&lt;span class="o">]&lt;/span> : Hello, Flomesh, Today is &lt;span class="o">(&lt;/span>Tue, 2021-Aug-17&lt;span class="o">)&lt;/span>, Time is &lt;span class="o">(&lt;/span>04:06:37 +0000&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>使用 Flomesh 强化 Spring Cloud 服务治理</title><link>https://atbug.com/enhance-springcloud-service-governance-with-flomesh/</link><pubDate>Tue, 17 Aug 2021 18:47:33 +0800</pubDate><guid>https://atbug.com/enhance-springcloud-service-governance-with-flomesh/</guid><description>
&lt;h2 id="写在最前">写在最前&lt;/h2>
&lt;p>这篇是关于如何使用 &lt;a href="https://flomesh.cn/">Flomesh&lt;/a> 服务网格来强化 Spring Cloud 的服务治理能力，降低 Spring Cloud 微服务架构落地服务网格的门槛，实现“自主可控”。&lt;/p>
&lt;p>文档在 &lt;a href="https://github.com/flomesh-io/flomesh-bookinfo-demo">github&lt;/a> 上持续更新，欢迎大家一起讨论：https://github.com/flomesh-io/flomesh-bookinfo-demo。&lt;/p>
&lt;hr>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/08/17/springdemotypology.png" alt="Architect">&lt;/p>
&lt;h2 id="环境搭建">环境搭建&lt;/h2>
&lt;p>搭建 Kubernetes 环境，可以选择 kubeadm 进行集群搭建。也可以选择 minikube、k3s、Kind 等，本文使用 k3s。&lt;/p>
&lt;p>使用 &lt;a href="https://k3d.io/">k3d&lt;/a> 安装 &lt;a href="https://github.com/k3s-io/k3s">k3s&lt;/a>。k3d 将在 Docker 容器中运行 k3s，因此需要保证已经安装了 Docker。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ k3d cluster create spring-demo -p &lt;span class="s2">&amp;#34;81:80@loadbalancer&amp;#34;&lt;/span> --k3s-server-arg &lt;span class="s1">&amp;#39;--no-deploy=traefik&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装-flomesh">安装 Flomesh&lt;/h2>
&lt;p>从仓库 &lt;code>https://github.com/flomesh-io/flomesh-bookinfo-demo.git&lt;/code> 克隆代码。进入到 &lt;code>flomesh-bookinfo-demo/kubernetes&lt;/code>目录。&lt;/p>
&lt;p>所有 Flomesh 组件以及用于 demo 的 yamls 文件都位于这个目录中。&lt;/p>
&lt;h3 id="安装-cert-manager">安装 Cert Manager&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f artifacts/cert-manager-v1.3.1.yaml
customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created
namespace/cert-manager created
serviceaccount/cert-manager-cainjector created
serviceaccount/cert-manager created
serviceaccount/cert-manager-webhook created
clusterrole.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
clusterrole.rbac.authorization.k8s.io/cert-manager-view created
clusterrole.rbac.authorization.k8s.io/cert-manager-edit created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created
clusterrole.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created
role.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
role.rbac.authorization.k8s.io/cert-manager:leaderelection created
role.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
rolebinding.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
service/cert-manager created
service/cert-manager-webhook created
deployment.apps/cert-manager-cainjector created
deployment.apps/cert-manager created
deployment.apps/cert-manager-webhook created
mutatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created
validatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意: 要保证 &lt;code>cert-manager&lt;/code> 命名空间中所有的 pod 都正常运行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -n cert-manager
NAME READY STATUS RESTARTS AGE
cert-manager-webhook-56fdcbb848-q7fn5 1/1 Running &lt;span class="m">0&lt;/span> 98s
cert-manager-59f6c76f4b-z5lgf 1/1 Running &lt;span class="m">0&lt;/span> 98s
cert-manager-cainjector-59f76f7fff-flrr7 1/1 Running &lt;span class="m">0&lt;/span> 98s
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-pipy-operator">安装 Pipy Operator&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f artifacts/pipy-operator.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行完命令后会看到类似的结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">namespace/flomesh created
customresourcedefinition.apiextensions.k8s.io/proxies.flomesh.io created
customresourcedefinition.apiextensions.k8s.io/proxyprofiles.flomesh.io created
serviceaccount/operator-manager created
role.rbac.authorization.k8s.io/leader-election-role created
clusterrole.rbac.authorization.k8s.io/manager-role created
clusterrole.rbac.authorization.k8s.io/metrics-reader created
clusterrole.rbac.authorization.k8s.io/proxy-role created
rolebinding.rbac.authorization.k8s.io/leader-election-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/manager-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/proxy-rolebinding created
configmap/manager-config created
service/operator-manager-metrics-service created
service/proxy-injector-svc created
service/webhook-service created
deployment.apps/operator-manager created
deployment.apps/proxy-injector created
certificate.cert-manager.io/serving-cert created
issuer.cert-manager.io/selfsigned-issuer created
mutatingwebhookconfiguration.admissionregistration.k8s.io/mutating-webhook-configuration created
mutatingwebhookconfiguration.admissionregistration.k8s.io/proxy-injector-webhook-cfg created
validatingwebhookconfiguration.admissionregistration.k8s.io/validating-webhook-configuration created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：要保证 &lt;code>flomesh&lt;/code> 命名空间中所有的 pod 都正常运行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -n flomesh
NAME READY STATUS RESTARTS AGE
proxy-injector-5bccc96595-spl6h 1/1 Running &lt;span class="m">0&lt;/span> 39s
operator-manager-c78bf8d5f-wqgb4 1/1 Running &lt;span class="m">0&lt;/span> 39s
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-ingress-控制器ingress-pipy">安装 Ingress 控制器：ingress-pipy&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f ingress/ingress-pipy.yaml
namespace/ingress-pipy created
customresourcedefinition.apiextensions.k8s.io/ingressparameters.flomesh.io created
serviceaccount/ingress-pipy created
role.rbac.authorization.k8s.io/ingress-pipy-leader-election-role created
clusterrole.rbac.authorization.k8s.io/ingress-pipy-role created
rolebinding.rbac.authorization.k8s.io/ingress-pipy-leader-election-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/ingress-pipy-rolebinding created
configmap/ingress-config created
service/ingress-pipy-cfg created
service/ingress-pipy-controller created
service/ingress-pipy-defaultbackend created
service/webhook-service created
deployment.apps/ingress-pipy-cfg created
deployment.apps/ingress-pipy-controller created
deployment.apps/ingress-pipy-manager created
certificate.cert-manager.io/serving-cert created
issuer.cert-manager.io/selfsigned-issuer created
mutatingwebhookconfiguration.admissionregistration.k8s.io/mutating-webhook-configuration configured
validatingwebhookconfiguration.admissionregistration.k8s.io/validating-webhook-configuration configured
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查 &lt;code>ingress-pipy&lt;/code> 命名空间下 pod 的状态：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -n ingress-pipy
NAME READY STATUS RESTARTS AGE
svclb-ingress-pipy-controller-8pk8k 1/1 Running &lt;span class="m">0&lt;/span> 71s
ingress-pipy-cfg-6bc649cfc7-8njk7 1/1 Running &lt;span class="m">0&lt;/span> 71s
ingress-pipy-controller-76cd866d78-m7gfp 1/1 Running &lt;span class="m">0&lt;/span> 71s
ingress-pipy-manager-5f568ff988-tw5w6 0/1 Running &lt;span class="m">0&lt;/span> 70s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此，你已经成功安装 Flomesh 的所有组件，包括 operator 和 ingress 控制器。&lt;/p>
&lt;h2 id="中间件">中间件&lt;/h2>
&lt;p>Demo 需要用到中间件完成日志和统计数据的存储，这里为了方便使用 pipy 进行 mock：直接在控制台中打印数据。&lt;/p>
&lt;p>另外，服务治理相关的配置有 mock 的 pipy config 服务提供。&lt;/p>
&lt;h3 id="log--metrics">log &amp;amp; metrics&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; middleware.js &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">pipy()
&lt;/span>&lt;span class="s">.listen(8123)
&lt;/span>&lt;span class="s"> .link(&amp;#39;mock&amp;#39;)
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s">.listen(9001)
&lt;/span>&lt;span class="s"> .link(&amp;#39;mock&amp;#39;)
&lt;/span>&lt;span class="s">.pipeline(&amp;#39;mock&amp;#39;)
&lt;/span>&lt;span class="s"> .decodeHttpRequest()
&lt;/span>&lt;span class="s"> .replaceMessage(
&lt;/span>&lt;span class="s"> req =&amp;gt; (
&lt;/span>&lt;span class="s"> console.log(req.body.toString()),
&lt;/span>&lt;span class="s"> new Message(&amp;#39;OK&amp;#39;)
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> .encodeHttpResponse()
&lt;/span>&lt;span class="s">EOF&lt;/span>
$ docker run --rm --name middleware --entrypoint &lt;span class="s2">&amp;#34;pipy&amp;#34;&lt;/span> -v &lt;span class="si">${&lt;/span>&lt;span class="nv">PWD&lt;/span>&lt;span class="si">}&lt;/span>:/script -p 8123:8123 -p 9001:9001 flomesh/pipy-pjs:0.4.0-118 /script/middleware.js
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pipy-config">pipy config&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; mock-config.json &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">{
&lt;/span>&lt;span class="s"> &amp;#34;ingress&amp;#34;: {},
&lt;/span>&lt;span class="s"> &amp;#34;inbound&amp;#34;: {
&lt;/span>&lt;span class="s"> &amp;#34;rateLimit&amp;#34;: -1,
&lt;/span>&lt;span class="s"> &amp;#34;dataLimit&amp;#34;: -1,
&lt;/span>&lt;span class="s"> &amp;#34;circuitBreak&amp;#34;: false,
&lt;/span>&lt;span class="s"> &amp;#34;blacklist&amp;#34;: []
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s"> &amp;#34;outbound&amp;#34;: {
&lt;/span>&lt;span class="s"> &amp;#34;rateLimit&amp;#34;: -1,
&lt;/span>&lt;span class="s"> &amp;#34;dataLimit&amp;#34;: -1
&lt;/span>&lt;span class="s"> }
&lt;/span>&lt;span class="s">}
&lt;/span>&lt;span class="s">EOF&lt;/span>
$ cat &amp;gt; mock.js &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">pipy({
&lt;/span>&lt;span class="s"> _CONFIG_FILENAME: &amp;#39;mock-config.json&amp;#39;,
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s"> _serveFile: (req, filename, type) =&amp;gt; (
&lt;/span>&lt;span class="s"> new Message(
&lt;/span>&lt;span class="s"> {
&lt;/span>&lt;span class="s"> bodiless: req.head.method === &amp;#39;HEAD&amp;#39;,
&lt;/span>&lt;span class="s"> headers: {
&lt;/span>&lt;span class="s"> &amp;#39;etag&amp;#39;: os.stat(filename)?.mtime | 0,
&lt;/span>&lt;span class="s"> &amp;#39;content-type&amp;#39;: type,
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s"> req.head.method === &amp;#39;HEAD&amp;#39; ? null : os.readFile(filename),
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> ),
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s"> _router: new algo.URLRouter({
&lt;/span>&lt;span class="s"> &amp;#39;/config&amp;#39;: req =&amp;gt; _serveFile(req, _CONFIG_FILENAME, &amp;#39;application/json&amp;#39;),
&lt;/span>&lt;span class="s"> &amp;#39;/*&amp;#39;: () =&amp;gt; new Message({ status: 404 }, &amp;#39;Not found&amp;#39;),
&lt;/span>&lt;span class="s"> }),
&lt;/span>&lt;span class="s">})
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s">// Config
&lt;/span>&lt;span class="s">.listen(9000)
&lt;/span>&lt;span class="s"> .decodeHttpRequest()
&lt;/span>&lt;span class="s"> .replaceMessage(
&lt;/span>&lt;span class="s"> req =&amp;gt; (
&lt;/span>&lt;span class="s"> _router.find(req.head.path)(req)
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> .encodeHttpResponse()
&lt;/span>&lt;span class="s">EOF&lt;/span>
$ docker run --rm --name mock --entrypoint &lt;span class="s2">&amp;#34;pipy&amp;#34;&lt;/span> -v &lt;span class="si">${&lt;/span>&lt;span class="nv">PWD&lt;/span>&lt;span class="si">}&lt;/span>:/script -p 9000:9000 flomesh/pipy-pjs:0.4.0-118 /script/mock.js
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运行-demo">运行 Demo&lt;/h2>
&lt;p>Demo 运行在另一个独立的命名空间 &lt;code>flomesh-spring&lt;/code> 中，执行命令 &lt;code>kubectl apply -f base/namespace.yaml&lt;/code> 来创建该命名空间。如果你 &lt;code>describe&lt;/code> 该命名空间你会发现其使用了 &lt;code>flomesh.io/inject=true&lt;/code> 标签。&lt;/p>
&lt;p>这个标签告知 operator 的 admission webHook 拦截标注的命名空间下 pod 的创建。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl describe ns flomesh-spring
Name: flomesh-spring
Labels: app.kubernetes.io/name&lt;span class="o">=&lt;/span>spring-mesh
app.kubernetes.io/version&lt;span class="o">=&lt;/span>1.19.0
flomesh.io/inject&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
kubernetes.io/metadata.name&lt;span class="o">=&lt;/span>flomesh-spring
Annotations: &amp;lt;none&amp;gt;
Status: Active
No resource quota.
No LimitRange resource.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们首先看下 Flomesh 提供的 CRD &lt;code>ProxyProfile&lt;/code>。这个 demo 中，其定义了 sidecar 容器片段以及所使用的的脚本。检查 &lt;code>sidecar/proxy-profile.yaml&lt;/code> 获取更多信息。执行下面的命令，创建 CRD 资源。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f sidecar/proxy-profile.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否创建成功：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pf -o wide
NAME NAMESPACE DISABLED SELECTOR CONFIG AGE
proxy-profile-002-bookinfo flomesh-spring &lt;span class="nb">false&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;matchLabels&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;sys&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;bookinfo-samples&amp;#34;&lt;/span>&lt;span class="o">}}&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;flomesh-spring&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;proxy-profile-002-bookinfo-fsmcm-b67a9e39-0418&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> 27s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As the services has startup dependencies, you need to deploy it one by one following the strict order. Before starting, check the &lt;strong>Endpoints&lt;/strong> section of &lt;strong>base/clickhouse.yaml&lt;/strong>.&lt;/p>
&lt;p>提供中间件的访问 endpoid，将 &lt;code>base/clickhouse.yaml&lt;/code>、&lt;code>base/metrics.yaml&lt;/code> 和 &lt;code>base/config.yaml&lt;/code> 中的 ip 地址改为本机的 ip 地址（不是 127.0.0.1）。&lt;/p>
&lt;p>修改之后，执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f base/clickhouse.yaml
$ kubectl apply -f base/metrics.yaml
$ kubectl apply -f base/config.yaml
$ kubectl get endpoints samples-clickhouse samples-metrics samples-config
NAME ENDPOINTS AGE
samples-clickhouse 192.168.1.101:8123 3m
samples-metrics 192.168.1.101:9001 3s
samples-config 192.168.1.101:9000 3m
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署注册中心">部署注册中心&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f base/discovery-server.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查注册中心 pod 的状态，确保 3 个容器都运行正常。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod
NAME READY STATUS RESTARTS AGE
samples-discovery-server-v1-85798c47d4-dr72k 3/3 Running &lt;span class="m">0&lt;/span> 96s
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署配置中心">部署配置中心&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f base/config-service.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署-api-网关以及-bookinfo-相关的服务">部署 API 网关以及 bookinfo 相关的服务&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f base/bookinfo-v1.yaml
$ kubectl apply -f base/bookinfo-v2.yaml
$ kubectl apply -f base/productpage-v1.yaml
$ kubectl apply -f base/productpage-v2.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查 pod 状态，可以看到所有 pod 都注入了容器。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pods
samples-discovery-server-v1-85798c47d4-p6zpb 3/3 Running &lt;span class="m">0&lt;/span> 19h
samples-config-service-v1-84888bfb5b-8bcw9 1/1 Running &lt;span class="m">0&lt;/span> 19h
samples-api-gateway-v1-75bb6456d6-nt2nl 3/3 Running &lt;span class="m">0&lt;/span> 6h43m
samples-bookinfo-ratings-v1-6d557dd894-cbrv7 3/3 Running &lt;span class="m">0&lt;/span> 6h43m
samples-bookinfo-details-v1-756bb89448-dxk66 3/3 Running &lt;span class="m">0&lt;/span> 6h43m
samples-bookinfo-reviews-v1-7778cdb45b-pbknp 3/3 Running &lt;span class="m">0&lt;/span> 6h43m
samples-api-gateway-v2-7ddb5d7fd9-8jgms 3/3 Running &lt;span class="m">0&lt;/span> 6h37m
samples-bookinfo-ratings-v2-845d95fb7-txcxs 3/3 Running &lt;span class="m">0&lt;/span> 6h37m
samples-bookinfo-reviews-v2-79b4c67b77-ddkm2 3/3 Running &lt;span class="m">0&lt;/span> 6h37m
samples-bookinfo-details-v2-7dfb4d7c-jfq4j 3/3 Running &lt;span class="m">0&lt;/span> 6h37m
samples-bookinfo-productpage-v1-854675b56-8n2xd 1/1 Running &lt;span class="m">0&lt;/span> 7m1s
samples-bookinfo-productpage-v2-669bd8d9c7-8wxsf 1/1 Running &lt;span class="m">0&lt;/span> 6m57s
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加-ingress-规则">添加 Ingress 规则&lt;/h3>
&lt;p>执行如下命令添加 Ingress 规则。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f ingress/ingress.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="测试前的准备">测试前的准备&lt;/h3>
&lt;p>访问 demo 服务都要通过 ingress 控制器。因此需要先获取 LB 的 ip 地址。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">//Obtain the controller IP
//Here, we append port.
&lt;span class="nv">ingressAddr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>kubectl get svc ingress-pipy-controller -n ingress-pipy -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.spec.clusterIP}&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>:81
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里我们使用了是 k3d 创建的 k3s，命令中加入了 &lt;code>-p 81:80@loadbalancer&lt;/code> 选项。我们可以使用 &lt;code>127.0.0.1:81&lt;/code> 来访问 ingress 控制器。这里执行命令 &lt;code>ingressAddr=127.0.0.1:81&lt;/code>。&lt;/p>
&lt;p>Ingress 规则中，我们为每个规则指定了 &lt;code>host&lt;/code>，因此每个请求中需要通过 HTTP 请求头 &lt;code>Host&lt;/code> 提供对应的 &lt;code>host&lt;/code>。&lt;/p>
&lt;p>或者在 &lt;code>/etc/hosts&lt;/code> 添加记录：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get ing ingress-pipy-bookinfo -n flomesh-spring -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{range .spec.rules[*]}{.host}{&amp;#39;\n&amp;#39;}&amp;#34;&lt;/span>
api-v1.flomesh.cn
api-v2.flomesh.cn
fe-v1.flomesh.cn
fe-v2.flomesh.cn
//添加记录到 /etc/hosts
127.0.0.1 api-v1.flomesh.cn api-v2.flomesh.cn fe-v1.flomesh.cn fe-v2.flomesh.cn
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="验证">验证&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ curl http://127.0.0.1:81/actuator/health -H &lt;span class="s1">&amp;#39;Host: api-v1.flomesh.cn&amp;#39;&lt;/span>
&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;status&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;UP&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;groups&amp;#34;&lt;/span>:&lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;liveness&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;readiness&amp;#34;&lt;/span>&lt;span class="o">]}&lt;/span>
//OR
$ curl http://api-v1.flomesh.cn:81/actuator/health
&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;status&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;UP&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;groups&amp;#34;&lt;/span>:&lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;liveness&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;readiness&amp;#34;&lt;/span>&lt;span class="o">]}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;h3 id="灰度">灰度&lt;/h3>
&lt;p>在 v1 版本的服务中，我们为 book 添加 rating 和 review。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># rate a book&lt;/span>
$ curl -X POST http://&lt;span class="nv">$ingressAddr&lt;/span>/bookinfo-ratings/ratings &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -H &lt;span class="s2">&amp;#34;Host: api-v1.flomesh.cn&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -d &lt;span class="s1">&amp;#39;{&amp;#34;reviewerId&amp;#34;:&amp;#34;9bc908be-0717-4eab-bb51-ea14f669ef20&amp;#34;,&amp;#34;productId&amp;#34;:&amp;#34;2099a055-1e21-46ef-825e-9e0de93554ea&amp;#34;,&amp;#34;rating&amp;#34;:3}&amp;#39;&lt;/span>
$ curl http://&lt;span class="nv">$ingressAddr&lt;/span>/bookinfo-ratings/ratings/2099a055-1e21-46ef-825e-9e0de93554ea -H &lt;span class="s2">&amp;#34;Host: api-v1.flomesh.cn&amp;#34;&lt;/span>
&lt;span class="c1"># review a book&lt;/span>
$ curl -X POST http://&lt;span class="nv">$ingressAddr&lt;/span>/bookinfo-reviews/reviews &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -H &lt;span class="s2">&amp;#34;Host: api-v1.flomesh.cn&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -d &lt;span class="s1">&amp;#39;{&amp;#34;reviewerId&amp;#34;:&amp;#34;9bc908be-0717-4eab-bb51-ea14f669ef20&amp;#34;,&amp;#34;productId&amp;#34;:&amp;#34;2099a055-1e21-46ef-825e-9e0de93554ea&amp;#34;,&amp;#34;review&amp;#34;:&amp;#34;This was OK.&amp;#34;,&amp;#34;rating&amp;#34;:3}&amp;#39;&lt;/span>
$ curl http://&lt;span class="nv">$ingressAddr&lt;/span>/bookinfo-reviews/reviews/2099a055-1e21-46ef-825e-9e0de93554ea -H &lt;span class="s2">&amp;#34;Host: api-v1.flomesh.cn&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行上面的命令之后，我们可以在浏览器中访问前端服务（&lt;code>http://fe-v1.flomesh.cn:81/productpage?u=normal&lt;/code>、 &lt;code>http://fe-v2.flomesh.cn:81/productpage?u=normal&lt;/code>），只有 v1 版本的前端中才能看到刚才添加的记录。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/08/13/20210813174155.png" alt="v1">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/08/13/20210813174207.png" alt="v2">&lt;/p>
&lt;h3 id="熔断">熔断&lt;/h3>
&lt;p>这里熔断我们通过修改 &lt;code>mock-config.json&lt;/code> 中的 &lt;code>inbound.circuitBreak&lt;/code> 为 &lt;code>true&lt;/code>，来将服务强制开启熔断：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;ingress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="nt">&amp;#34;inbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;rateLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;dataLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;circuitBreak&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">//here&lt;/span>
&lt;span class="nt">&amp;#34;blacklist&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;outbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;rateLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;dataLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ curl http://&lt;span class="nv">$ingressAddr&lt;/span>/actuator/health -H &lt;span class="s1">&amp;#39;Host: api-v1.flomesh.cn&amp;#39;&lt;/span>
HTTP/1.1 &lt;span class="m">503&lt;/span> Service Unavailable
Connection: keep-alive
Content-Length: &lt;span class="m">27&lt;/span>
Service Circuit Break Open
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="限流">限流&lt;/h3>
&lt;p>修改 pipy config 的配置，将 &lt;code>inbound.rateLimit&lt;/code> 设置为 1。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;ingress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="nt">&amp;#34;inbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;rateLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">//here&lt;/span>
&lt;span class="nt">&amp;#34;dataLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;circuitBreak&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;blacklist&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;outbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;rateLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;dataLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们使用 &lt;code>wrk&lt;/code> 模拟发送请求，20 个连接、20 个请求、持续 30s：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ wrk -t20 -c20 -d30s --latency http://&lt;span class="nv">$ingressAddr&lt;/span>/actuator/health -H &lt;span class="s1">&amp;#39;Host: api-v1.flomesh.cn&amp;#39;&lt;/span>
Running 30s &lt;span class="nb">test&lt;/span> @ http://127.0.0.1:81/actuator/health
&lt;span class="m">20&lt;/span> threads and &lt;span class="m">20&lt;/span> connections
Thread Stats Avg Stdev Max +/- Stdev
Latency 951.51ms 206.23ms 1.04s 93.55%
Req/Sec 0.61 1.71 10.00 93.55%
Latency Distribution
50% 1.00s
75% 1.01s
90% 1.02s
99% 1.03s
&lt;span class="m">620&lt;/span> requests in 30.10s, 141.07KB &lt;span class="nb">read&lt;/span>
Requests/sec: 20.60
Transfer/sec: 4.69KB
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从结果来看 20.60 req/s，即每个连接 1 req/s。&lt;/p>
&lt;h3 id="黑白名单">黑白名单&lt;/h3>
&lt;p>将 pipy config 的 &lt;code>mock-config.json&lt;/code> 做如下修改：ip 地址使用的是 ingress controller 的 pod ip。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kgpo -n ingress-pipy ingress-pipy-controller-76cd866d78-4cqqn -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.status.podIP}&amp;#39;&lt;/span>
10.42.0.78
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;ingress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="nt">&amp;#34;inbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;rateLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;dataLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;circuitBreak&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;blacklist&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;10.42.0.78&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">//here&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;outbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;rateLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;dataLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>还是访问网关的接口&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl http://&lt;span class="nv">$ingressAddr&lt;/span>/actuator/health -H &lt;span class="s1">&amp;#39;Host: api-v1.flomesh.cn&amp;#39;&lt;/span>
HTTP/1.1 &lt;span class="m">503&lt;/span> Service Unavailable
content-type: text/plain
Connection: keep-alive
Content-Length: &lt;span class="m">20&lt;/span>
Service Unavailable
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Rego 不好用？用 Pipy 实现 OPA</title><link>https://atbug.com/pipy-implement-kubernetes-admission-control/</link><pubDate>Tue, 13 Jul 2021 08:44:56 +0800</pubDate><guid>https://atbug.com/pipy-implement-kubernetes-admission-control/</guid><description>
&lt;p>还不知道 Pipy 是什么的同学可以看下 &lt;a href="https://github.com/flomesh-io/pipy">GitHub&lt;/a> 。&lt;/p>
&lt;blockquote>
&lt;p>Pipy 是一个轻量级、高性能、高稳定、可编程的网络代理。Pipy 核心框架使用 C++ 开发，网络 IO 采用 ASIO 库。 Pipy 的可执行文件仅有 5M 左右，运行期的内存占用 10M 左右，因此 Pipy 非常适合做 Sidecar proxy。&lt;/p>
&lt;p>Pipy 内置了自研的 pjs 作为脚本扩展，使得Pipy 可以用 JS 脚本根据特定需求快速定制逻辑与功能。&lt;/p>
&lt;p>Pipy 采用了模块化、链式的处理架构，用顺序执行的模块来对网络数据块进行处理。这种简单的架构使得 Pipy 底层简单可靠，同时具备了动态编排流量的能力，兼顾了简单和灵活。通过使用 REUSE_PORT 的机制（主流 Linux 和 BSD 版本都支持该功能），Pipy 可以以多进程模式运行，使得 Pipy 不仅适用于 Sidecar 模式，也适用于大规模的流量处理场景。 在实践中，Pipy 独立部署的时候用作“软负载”，可以在低延迟的情况下，实现媲美硬件的负载均衡吞吐能力，同时具有灵活的扩展性。&lt;/p>
&lt;/blockquote>
&lt;p>在玩过几次 Pipy 并探究其工作原理后，又有了更多的想法。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/l8JzYRn350fjuCAOoo8pcg">初探可编程网关 Pipy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/_IeRXp9EJnVsvDfg8tUr1A">可编程网关 Pipy 第二弹：编程实现 Metrics 及源码解读&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/iQWunpazsw86X3kEkB1rJw">可编程网关 Pipy 第三弹：事件模型设计&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>在使用OPA的时候，一直觉得Rego不是那么顺手，使用pipy js来写规则的想法油然而生。今天就一起试试这个思路。果然，不试不知道，一试发现太多的惊喜～Pipy不止于“代理”，更有很多可以适用的场景：&lt;/p>
&lt;ul>
&lt;li>极小的单一可执行文件（single binary）使得 pipy 可能是最好的 “云原生 sidecar”&lt;/li>
&lt;li>sidecar 不仅仅是代理，还可以做控制器，做运算单元&lt;/li>
&lt;li>proxy 的串路结构适合各种管控类的操作，比如访问控制&lt;/li>
&lt;li>Pipy js 的扩展能力和快速编程能力，很适合做 “规则引擎”，或者用最近流行的说法 “云原生的规则引擎”。对比 OPA 我认为它完全够格做一个 “羽量级规则执行引擎”&lt;/li>
&lt;/ul>
&lt;p>现在我更倾向于定义 pipy 是一个 “云原生的流量编程框架”，代理只是其底层的核心能力，叠加了 pipy js 以后，上层可以做的事情很多，“流量滋养万物”。&lt;/p>
&lt;p>在 &lt;a href="https://mp.weixin.qq.com/s/RvqCVAhClJY3o_46ALu1bQ">使用 Open Policy Agent 实现可信镜像仓库检查&lt;/a> 之后，就在想 Pipy 是否一样可以做到，将内核替换成 Pipy + 规则。所以今天大部分内容和上面这篇是相似的。&lt;/p>
&lt;p>来，一起看看这个“不务正业”的 Pipy 如何实现 Kubernetes 的准入控制器 来做镜像的检查。&lt;/p>
&lt;h2 id="环境">环境&lt;/h2>
&lt;p>继续使用 minikube&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube start
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建部署-pipy-的命名空间">创建部署 Pipy 的命名空间&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create namespace pipy
kubens pipy
kubectl label ns pipy pipy/webhook&lt;span class="o">=&lt;/span>ignore &lt;span class="c1">#后面解释&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="规则">规则&lt;/h2>
&lt;p>在 OPA 中，通过 &lt;code>kube-mgmt&lt;/code> 容器监控 &lt;code>configmap&lt;/code> 的改动，将 Policy 推送到同 pod 的 opa 容器中。&lt;/p>
&lt;p>对于 Pipy 为了渐变，直接使用挂载的方式将保存了规则的 &lt;code>configmap&lt;/code> 挂载到 Pipy
的容器中。&lt;/p>
&lt;p>&lt;em>实际的使用中，Pipy 支持轮训的方式检查控制平面中规则的变更，并实时加载；也可以实现与 OPA 的 kube-mgmt 同样的逻辑。&lt;/em>&lt;/p>
&lt;p>实现了&lt;a href="https://atbug.com/image-trusted-repository-with-open-policy-agent/">上一讲功能&lt;/a>的 pipy 规则如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat &amp;gt; pipy-rule.js &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">pipy({
&lt;/span>&lt;span class="s"> _repoPrefix: &amp;#39;192.168.64.1&amp;#39;, //192.168.64.1:5000 是笔者本地容器运行的一个私有仓库。
&lt;/span>&lt;span class="s"> _tagSuffix: &amp;#39;:latest&amp;#39;,
&lt;/span>&lt;span class="s">})
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s">.listen(6443, {
&lt;/span>&lt;span class="s"> tls: {
&lt;/span>&lt;span class="s"> cert: os.readFile(&amp;#39;/certs/tls.crt&amp;#39;).toString(),
&lt;/span>&lt;span class="s"> key: os.readFile(&amp;#39;/certs/tls.key&amp;#39;).toString(),
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s">})
&lt;/span>&lt;span class="s"> .decodeHttpRequest()
&lt;/span>&lt;span class="s"> .replaceMessage(
&lt;/span>&lt;span class="s"> msg =&amp;gt; (
&lt;/span>&lt;span class="s"> ((req, result, invalids, reason) =&amp;gt; (
&lt;/span>&lt;span class="s"> req = JSON.decode(msg.body),
&lt;/span>&lt;span class="s"> invalids = req.request.object.spec.containers.find(container =&amp;gt; (
&lt;/span>&lt;span class="s"> (!container.image.startsWith(_repoPrefix) ? (
&lt;/span>&lt;span class="s"> reason = `${container.image} repo not start with ${_repoPrefix}`,
&lt;/span>&lt;span class="s"> console.log(reason),
&lt;/span>&lt;span class="s"> true
&lt;/span>&lt;span class="s"> ) : (false))
&lt;/span>&lt;span class="s"> ||
&lt;/span>&lt;span class="s"> (container.image.endsWith(_tagSuffix) ? (
&lt;/span>&lt;span class="s"> reason = `${container.image} tag end with ${_tagSuffix}`,
&lt;/span>&lt;span class="s"> console.log(reason),
&lt;/span>&lt;span class="s"> true
&lt;/span>&lt;span class="s"> ) : (false)
&lt;/span>&lt;span class="s"> ))),
&lt;/span>&lt;span class="s"> invalids != undefined ? (
&lt;/span>&lt;span class="s"> result = {
&lt;/span>&lt;span class="s"> &amp;#34;apiVersion&amp;#34;: &amp;#34;admission.k8s.io/v1beta1&amp;#34;,
&lt;/span>&lt;span class="s"> &amp;#34;kind&amp;#34;: &amp;#34;AdmissionReview&amp;#34;,
&lt;/span>&lt;span class="s"> &amp;#34;response&amp;#34;: {
&lt;/span>&lt;span class="s"> &amp;#34;allowed&amp;#34;: false,
&lt;/span>&lt;span class="s"> &amp;#34;uid&amp;#34;: req.request.uid,
&lt;/span>&lt;span class="s"> &amp;#34;status&amp;#34;: {
&lt;/span>&lt;span class="s"> &amp;#34;reason&amp;#34;: reason,
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s"> }
&lt;/span>&lt;span class="s"> ) : (
&lt;/span>&lt;span class="s"> result = {
&lt;/span>&lt;span class="s"> &amp;#34;apiVersion&amp;#34;: &amp;#34;admission.k8s.io/v1beta1&amp;#34;,
&lt;/span>&lt;span class="s"> &amp;#34;kind&amp;#34;: &amp;#34;AdmissionReview&amp;#34;,
&lt;/span>&lt;span class="s"> &amp;#34;response&amp;#34;: {
&lt;/span>&lt;span class="s"> &amp;#34;allowed&amp;#34;: true,
&lt;/span>&lt;span class="s"> &amp;#34;uid&amp;#34;: req.request.uid
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s"> }
&lt;/span>&lt;span class="s"> ),
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s"> console.log(JSON.encode(result)),
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s"> new Message({
&lt;/span>&lt;span class="s"> &amp;#39;status&amp;#39; : 200,
&lt;/span>&lt;span class="s"> &amp;#39;headers&amp;#39;: {
&lt;/span>&lt;span class="s"> &amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39;
&lt;/span>&lt;span class="s"> }
&lt;/span>&lt;span class="s"> }, JSON.encode(result))
&lt;/span>&lt;span class="s"> ))()
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> .encodeHttpResponse()
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将规则保存在 configmap 中：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create configmap pipy-rule --from-file&lt;span class="o">=&lt;/span>pipy-rule.js
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="在-kubernetes-上部署-pipy">在 Kubernetes 上部署 Pipy&lt;/h2>
&lt;p>Kubernetes 与准入控制器（&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/">Admission Controller&lt;/a>）的通信需要使用 TLS。配置 TLS，使用 &lt;code>openssl&lt;/code> 创建证书颁发机构（certificate authority CA）和 OPA 的证书/秘钥对。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">openssl genrsa -out ca.key &lt;span class="m">2048&lt;/span>
openssl req -x509 -new -nodes -key ca.key -days &lt;span class="m">100000&lt;/span> -out ca.crt -subj &lt;span class="s2">&amp;#34;/CN=admission_ca&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为 OPA 创建 TLS 秘钥和证书：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat &amp;gt;server.conf &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">[req]
&lt;/span>&lt;span class="s">req_extensions = v3_req
&lt;/span>&lt;span class="s">distinguished_name = req_distinguished_name
&lt;/span>&lt;span class="s">prompt = no
&lt;/span>&lt;span class="s">[req_distinguished_name]
&lt;/span>&lt;span class="s">CN = pipy.pipy.svc
&lt;/span>&lt;span class="s">[ v3_req ]
&lt;/span>&lt;span class="s">basicConstraints = CA:FALSE
&lt;/span>&lt;span class="s">keyUsage = nonRepudiation, digitalSignature, keyEncipherment
&lt;/span>&lt;span class="s">extendedKeyUsage = clientAuth, serverAuth
&lt;/span>&lt;span class="s">subjectAltName = @alt_names
&lt;/span>&lt;span class="s">[alt_names]
&lt;/span>&lt;span class="s">DNS.1 = pipy.pipy.svc
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意 &lt;code>CN&lt;/code> 和 &lt;code>alt_names&lt;/code> 必须与后面创建 Pipy service 的匹配。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">openssl genrsa -out server.key &lt;span class="m">2048&lt;/span>
openssl req -new -key server.key -out server.csr -config server.conf
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days &lt;span class="m">100000&lt;/span> -extensions v3_req -extfile server.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为 OPA 创建保存 TLS 凭证的 Secret：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create secret tls pipy-server --cert&lt;span class="o">=&lt;/span>server.crt --key&lt;span class="o">=&lt;/span>server.key
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 Pipy 部署为准入控制器（admission controller）。为了方便调试，我们使用启动 Pipy 的时候打开了控制台。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">443&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6443&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gui&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 方便调试&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6060&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6060&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;pipy&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/opt/data/pipy-rule.js&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--gui-port=6060&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 方便调试&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># - &amp;#34;--log-level=debug&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gui&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6060&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6443&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">readOnly&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/certs&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">readOnly&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/opt/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy-rule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy-rule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">configMap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy-rule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>暴露控制台的访问：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl expose deploy pipy --name pipy-node --type NodePort
kubectl get svc pipy-port
minikube service --url pipy-node -n pipy
&lt;span class="c1"># 找到控制台端口&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来，生成将用于将 Pipy 注册为准入控制器的 manifest。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat &amp;gt; webhook-configuration.yaml &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kind: ValidatingWebhookConfiguration
&lt;/span>&lt;span class="s">apiVersion: admissionregistration.k8s.io/v1beta1
&lt;/span>&lt;span class="s">metadata:
&lt;/span>&lt;span class="s"> name: pipy-validating-webhook
&lt;/span>&lt;span class="s">webhooks:
&lt;/span>&lt;span class="s"> - name: validating-webhook.pipy.flomesh-io.cn
&lt;/span>&lt;span class="s"> namespaceSelector:
&lt;/span>&lt;span class="s"> matchExpressions:
&lt;/span>&lt;span class="s"> - key: pipy/webhook
&lt;/span>&lt;span class="s"> operator: NotIn
&lt;/span>&lt;span class="s"> values:
&lt;/span>&lt;span class="s"> - ignore
&lt;/span>&lt;span class="s"> rules:
&lt;/span>&lt;span class="s"> - operations: [&amp;#34;CREATE&amp;#34;, &amp;#34;UPDATE&amp;#34;]
&lt;/span>&lt;span class="s"> apiGroups: [&amp;#34;*&amp;#34;]
&lt;/span>&lt;span class="s"> apiVersions: [&amp;#34;*&amp;#34;]
&lt;/span>&lt;span class="s"> resources: [&amp;#34;pods&amp;#34;]
&lt;/span>&lt;span class="s"> clientConfig:
&lt;/span>&lt;span class="s"> caBundle: $(cat ca.crt | base64 | tr -d &amp;#39;\n&amp;#39;)
&lt;/span>&lt;span class="s"> service:
&lt;/span>&lt;span class="s"> namespace: pipy
&lt;/span>&lt;span class="s"> name: pipy
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成的配置文件包含 CA 证书的 base64 编码，以便可以在 Kubernetes API 服务器和 OPA 之间建立 TLS 连接。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f webhook-configuration.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;p>&lt;code>pod-bad-repo.yaml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.21.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f pod-bad-repo.yaml
Error from server &lt;span class="o">(&lt;/span>nginx:1.21.1 repo not start with 192.168.64.1&lt;span class="o">)&lt;/span>: error when creating &lt;span class="s2">&amp;#34;pod-bad-repo.yaml&amp;#34;&lt;/span>: admission webhook &lt;span class="s2">&amp;#34;validating-webhook.pipy.flomesh-io.cn&amp;#34;&lt;/span> denied the request: nginx:1.21.1 repo not start with 192.168.64.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>pod-bad-tag.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">192.168.64.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">5000&lt;/span>&lt;span class="l">/nginx:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f pod-bad-tag.yaml
Error from server &lt;span class="o">(&lt;/span>192.168.64.1:5000/nginx:latest tag end with :latest&lt;span class="o">)&lt;/span>: error when creating &lt;span class="s2">&amp;#34;pod-bad-tag.yaml&amp;#34;&lt;/span>: admission webhook &lt;span class="s2">&amp;#34;validating-webhook.pipy.flomesh-io.cn&amp;#34;&lt;/span> denied the request: 192.168.64.1:5000/nginx:latest tag end with :latest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>pod-ok.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">192.168.64.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">5000&lt;/span>&lt;span class="l">/nginx:1.21.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f pod-ok.yaml
pod/web-server created
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>OPA 哪哪都好，唯一缺点就是其引进的 &lt;code>Rego&lt;/code> 语言抬高了使用的门槛。而 Pipy 的规则是通过 JavaScrip 来编写的，前端的同学一样可以完成规则的编写。完全替代可能夸张了一些，但确实在部分场景下可以替代 OPA。&lt;/p>
&lt;p>玩到这里，你会发现有了规则，加上功能强大的过滤器（现在我喜欢叫他们 Hook 了），Pipy 的可玩性非常强。&lt;/p>
&lt;p>比如&lt;a href="https://mp.weixin.qq.com/s/lfU3XKP2oAPOLNkxdR2KVg">OPA: Kubernetes 准入控制策略 Top 5&lt;/a>，比如&amp;hellip;。大胆的想象吧。&lt;/p>
&lt;p>想写一个系列，就叫“如何把 Pipy 玩坏”？&lt;/p></description></item><item><title>可编程网关 Pipy 第二弹：编程实现 Metrics 及源码解读</title><link>https://atbug.com/programming-archive-metrics-with-pipy/</link><pubDate>Fri, 11 Jun 2021 08:27:36 +0800</pubDate><guid>https://atbug.com/programming-archive-metrics-with-pipy/</guid><description>
&lt;p>由于要给团队做一下关于 Flomesh 的分享，准备下材料。&lt;/p>
&lt;p>“分享是最好的学习方法。”&lt;/p>
&lt;p>上一回&lt;a href="https://mp.weixin.qq.com/s/l8JzYRn350fjuCAOoo8pcg">初探可编程网关 Pipy&lt;/a>，领略了 Pipy 的“风骚”。从 Pipy 的 GUI 交互深入了解了 Pipy 的配置加载流程。&lt;/p>
&lt;p>今天看一下 Pipy 如何实现 Metrics 的功能，顺便看下数据如何在多个 Pipeline 中进行流转。&lt;/p>
&lt;h2 id="前置">前置&lt;/h2>
&lt;p>首先，需要对 Pipy 有一定的了解，如果不了解看一下&lt;a href="https://mp.weixin.qq.com/s/l8JzYRn350fjuCAOoo8pcg">上一篇文章&lt;/a>。&lt;/p>
&lt;p>其次构建好 Pipy 环境，关于构建还是去看上一篇文章。&lt;/p>
&lt;h2 id="metrics-功能实现">Metrics 功能实现&lt;/h2>
&lt;p>至于 Pipy 实现 Metrics 的方式，源码中就有，位于 &lt;code>test/006-metrics/pipy.js&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610202734.png" alt="">&lt;/p>
&lt;ul>
&lt;li>代理监听 &lt;code>6080&lt;/code> 端口，后端服务在 &lt;code>8080&lt;/code> 端口，Metrics 在 &lt;code>9090&lt;/code> 端口&lt;/li>
&lt;li>共有 5 个 Pipeline：3 个 listen 类型，2 个 Pipeline 类型&lt;/li>
&lt;li>7 种过滤器：&lt;code>fork&lt;/code>、&lt;code>connect&lt;/code>、&lt;code>decodeHttpRequest&lt;/code>、&lt;code>onMessageStart&lt;/code>、&lt;code>decodeHttpResponse&lt;/code>、&lt;code>encodeHttpRespnse&lt;/code>、&lt;code>replaceMessage&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>贴一下源码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">pipy&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">_metrics&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">count&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">_statuses&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="nx">_latencies&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">25&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">70&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">90&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">300&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Number&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">POSITIVE_INFINITY&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">_buckets&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;span class="nx">_timestamp&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6080&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">fork&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;in&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;127.0.0.1:8080&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">fork&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;out&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Extract request info
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipeline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;in&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">onMessageStart&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">_timestamp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="nx">_metrics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Extract response info
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipeline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;out&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">onMessageStart&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">e&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="p">((&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">latency&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">latency&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">_timestamp&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">_latencies&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findIndex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">latency&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="nx">t&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">_buckets&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">_statuses&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">_statuses&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">))()&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Expose as Prometheus metrics
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">9090&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceMessage&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">sum&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Message&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">[&lt;/span>
&lt;span class="sb">`count &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">_metrics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">...&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">entries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">_statuses&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">([&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`status{code=&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">&amp;#34;} &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">...&lt;/span>&lt;span class="nx">_buckets&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`bucket{le=&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">_latencies&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">&amp;#34;} &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">))(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">encodeHttpResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">// Mock service on port 8080
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8080&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceMessage&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">Message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello!\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">encodeHttpResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;p>使用 ab 做请求模拟 &lt;code>ab -n 2000 -c 10 http://localhost:6080/&lt;/code>，然后检查下记录的指标。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http :9090 --body
count &lt;span class="m">2000&lt;/span>
status&lt;span class="o">{&lt;/span>&lt;span class="nv">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;200&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">2000&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1762&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1989&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;5&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1994&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;7&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1999&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;10&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">2000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="分析">分析&lt;/h2>
&lt;p>&lt;strong>TL;DR：本次示例的核心是 &lt;code>fork&lt;/code>，从字面意思就很容易理解：新开一个处理分支（Pipeline），与主线并行执行。&lt;/strong>&lt;/p>
&lt;p>在 &lt;code>src/inbound.cpp:104 109&lt;/code> 处，Pipy 接收一个新的连接。
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610210104.png" alt="">&lt;/p>
&lt;p>创建 &lt;code>Context&lt;/code> 和 &lt;code>Session&lt;/code>，并在 L178 处注册事件的处理器，然后在 L187 处开始接收数据。
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610210414.png" alt="">&lt;/p>
&lt;p>在 &lt;code>#receive&lt;/code> 方法中，定义了数据接收处理器：将读到的数据写入 &lt;code>buffer&lt;/code> 中。这个 &lt;code>buffer&lt;/code> 存储的是 &lt;code>Event&lt;/code>类型数据。（所以说 Pipy 是基于数据流事件，将一些封装成了事件）&lt;/p>
&lt;p>接着调用 &lt;code>Session#input&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610211221.png" alt="">&lt;/p>
&lt;p>实际上调用的是 &lt;code>ReusableSession#input&lt;/code>，调用 &lt;code>m_filters&lt;/code> 的 &lt;code>#process&lt;/code> 方法。&lt;code>m_filters&lt;/code> 实际上是 &lt;code>Filter&lt;/code> 类型。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610212917.png" alt="">&lt;/p>
&lt;p>为什么只有一个 &lt;code>Filter&lt;/code>？重点来了，看下 &lt;code>ReusableSession&lt;/code> 的构造过程就能明白了（这里用了个反向迭代器）。&lt;code>output&lt;/code> 是当前 &lt;code>Filter&lt;/code> 处理完要执行的，实现类似链式的执行。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610213338.png" alt="">&lt;/p>
&lt;p>再回头看上面的示例，可以想象 &lt;code>fork&lt;/code> 就是 &lt;code>Session&lt;/code> 的 &lt;code>m_filters&lt;/code>。&lt;/p>
&lt;p>&lt;code>src/filters/fork.cpp:85&lt;/code>，在 &lt;code>fork&lt;/code> 过滤器中，在 &lt;em>1&lt;/em> 处从 &lt;code>module&lt;/code> 中获取到目标 &lt;code>Pipeline&lt;/code>，并在 &lt;em>3&lt;/em> 和 &lt;em>4&lt;/em> 处 创建了新的 &lt;code>Session&lt;/code> 并保存原 &lt;code>Session&lt;/code> 的数据。&lt;/p>
&lt;p>然后在 &lt;em>5&lt;/em> 处将原 &lt;code>Event&lt;/code> 输入到新的 &lt;code>Session&lt;/code> 中，触发目标 &lt;code>Pipeline&lt;/code> 的 &lt;code>Filter&lt;/code> 链。&lt;strong>值得注意的是，这里是基于事件的处理，并不是阻塞的。这就意味着，&lt;code>fork&lt;/code> 的目标 &lt;code>pipline&lt;/code>，与 &lt;code>fork&lt;/code> 所在的 pipeline 是并行执行的。&lt;/strong> 在示例中，就是 &lt;code>Pipeline&lt;/code> ‘in’ 与 主 &lt;code>Pipeline&lt;/code> 的 &lt;code>connect&lt;/code> 是并行执行的。&lt;/p>
&lt;p>最终在 &lt;em>6&lt;/em> 处，继续使用原 &lt;code>Session&lt;/code> 的 &lt;code>Filter&lt;/code> 链。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610214811.png" alt="">&lt;/p></description></item></channel></rss>