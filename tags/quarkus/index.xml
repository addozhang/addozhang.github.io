<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quarkus on 乱世浮生</title><link>https://atbug.com/tags/quarkus/</link><description>Recent content in Quarkus on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 24 Apr 2021 09:16:05 +0800</lastBuildDate><atom:link href="https://atbug.com/tags/quarkus/index.xml" rel="self" type="application/rss+xml"/><item><title>谁说 Java 不能用来跑 Serverless？</title><link>https://atbug.com/quarkus-enable-java-running-in-serverless/</link><pubDate>Sat, 24 Apr 2021 09:16:05 +0800</pubDate><guid>https://atbug.com/quarkus-enable-java-running-in-serverless/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/24/whynotjava.png" alt="why-not-java">&lt;/p>
&lt;p>想到这个标题的时候，我第一时间想到的就是星爷的《唐伯虎点秋香》的这一幕。&lt;/p>
&lt;p>当讨论起世界上最好的开发语言是什么的时候，Java 的粉丝们总会遇到这种场景：&lt;/p>
&lt;blockquote>
&lt;p>吹：“Java 语法简单，容易上手！”
黑：“Java 启动慢，性能差，耗资源！”
吹：“Java 有世界上最多的程序员！”
黑：“Java 启动慢，性能差，耗资源！”
吹：“Java 生态好！”
黑：“Java 启动慢，性能差，耗资源！”
吹：“滚！”&lt;/p>
&lt;/blockquote>
&lt;p>今天我们继续说说 Quarkus，应“云”而生的 Java 框架。今天算是第三篇了，没看过的同学可以回顾一下：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/YcEqFm3oxlsEvJ3ckRbQyA">Hello, Quarkus&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/Dq3hQrXE4XWH-MyjBAGMEw">应&amp;quot;云&amp;quot;而生的 Java 框架 Quarkus：构建本机可执行文件&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>上一篇的结尾预告：试试 Quarkus 在 ArgoCD 中的应用，看下 Serverless 上的使用体验。不过不想用 ArgoCD 了，因为这 workflow 这种场景实在体现不出 Quarkus 到底有多快。但又想做 Serverless，那就想到了 Knative Serving 了。&lt;/p>
&lt;p>其实，还有一个原因是比较懒，上次的镜像还可以直接拿来用。&lt;/p>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>废话不多说，先上结论。Quarkus 与 Spring 首个请求的响应耗时：&lt;strong>2.5s vs 5.7s&lt;/strong>。&lt;/p>
&lt;p>&lt;em>注：为了忽略拉取镜像的时间差异，提前 pull 镜像。&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/24/cleanshot-20210424-at-0831012x.png" alt="">&lt;/p>
&lt;h2 id="验证">验证&lt;/h2>
&lt;h3 id="环境准备">环境准备&lt;/h3>
&lt;ul>
&lt;li>Kubernetes 1.18+ via minikube&lt;/li>
&lt;li>Istio 1.9.2&lt;/li>
&lt;li>Knative 0.22.0&lt;/li>
&lt;li>Knative CLI （brew 安装）&lt;/li>
&lt;li>watch （brew 安装）&lt;/li>
&lt;/ul>
&lt;p>环境的安装准备参考官方的文档。&lt;/p>
&lt;h4 id="镜像">镜像&lt;/h4>
&lt;p>资源镜像就使用&lt;a href="https://mp.weixin.qq.com/s/Dq3hQrXE4XWH-MyjBAGMEw">上一篇文章&lt;/a>构建的，但需要做下调整：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker tag quarkus/quarkus-getting-started:distroless dev.local/quarkus/quarkus-getting-started:distroless
docker tag spring/spring-getting-started:latest dev.local/spring/spring-getting-started:latest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注：knative 会忽略 &lt;code>dev.local&lt;/code> 镜像的预加载，不会在创建 knative service 的时候拉取。&lt;/p>
&lt;p>然后使用 &lt;code>minikube image load&lt;/code> 加载到 minikube环境中：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube image load dev.local/quarkus/quarkus-getting-started:distroless
minikube image load dev.local/spring/spring-getting-started:latest
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="knative-配置可选">knative 配置（可选）&lt;/h4>
&lt;p>修改 &lt;code>istio-system&lt;/code> namespace 下的 configmap &lt;code>config-domain&lt;/code>，增加新的 domain：&lt;code>nip.io&lt;/code>&lt;/p>
&lt;p>注：这个操作纯属个人喜好，不喜欢那个 &lt;code>example.com&lt;/code>，可跳过。&lt;/p>
&lt;h4 id="获取-istio-ingress-地址">获取 Istio Ingress 地址&lt;/h4>
&lt;p>使用命令获取 Ingress 的访问方式，这里 &lt;code>http2/80&lt;/code> 后的 &lt;code>http://192.168.64.2:31608&lt;/code> 就是我们需要的，记下这个 ip 和端口。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube service list
&lt;span class="p">|&lt;/span>------------------&lt;span class="p">|&lt;/span>----------------------------&lt;span class="p">|&lt;/span>-------------------&lt;span class="p">|&lt;/span>---------------------------&lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> NAMESPACE &lt;span class="p">|&lt;/span> NAME &lt;span class="p">|&lt;/span> TARGET PORT &lt;span class="p">|&lt;/span> URL &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span>------------------&lt;span class="p">|&lt;/span>----------------------------&lt;span class="p">|&lt;/span>-------------------&lt;span class="p">|&lt;/span>---------------------------&lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> default &lt;span class="p">|&lt;/span> kubernetes &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> istio-system &lt;span class="p">|&lt;/span> istio-egressgateway &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> istio-system &lt;span class="p">|&lt;/span> istio-ingressgateway &lt;span class="p">|&lt;/span> status-port/15021 &lt;span class="p">|&lt;/span> http://192.168.64.2:32431 &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> http2/80 &lt;span class="p">|&lt;/span> http://192.168.64.2:31608 &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> https/443 &lt;span class="p">|&lt;/span> http://192.168.64.2:31795 &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> tcp/31400 &lt;span class="p">|&lt;/span> http://192.168.64.2:31369 &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> tls/15443 &lt;span class="p">|&lt;/span> http://192.168.64.2:30293 &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> istio-system &lt;span class="p">|&lt;/span> istiod &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> istio-system &lt;span class="p">|&lt;/span> knative-local-gateway &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-eventing &lt;span class="p">|&lt;/span> broker-filter &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-eventing &lt;span class="p">|&lt;/span> broker-ingress &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-eventing &lt;span class="p">|&lt;/span> eventing-webhook &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-eventing &lt;span class="p">|&lt;/span> imc-dispatcher &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> activator-service &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> autoscaler &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> autoscaler-bucket-00-of-01 &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> autoscaler-hpa &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> controller &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> istio-webhook &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> webhook &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> kube-system &lt;span class="p">|&lt;/span> kube-dns &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span>------------------&lt;span class="p">|&lt;/span>----------------------------&lt;span class="p">|&lt;/span>-------------------&lt;span class="p">|&lt;/span>---------------------------&lt;span class="p">|&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建-knative-service">创建 Knative service&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c">#quarkus&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">serving.knative.dev/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hello-quarkus&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dev.local/quarkus/quarkus-getting-started:distroless&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Never&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c">#spring&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">serving.knative.dev/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hello-spring&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dev.local/spring/spring-getting-started:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Never&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 cli &lt;code>kn&lt;/code> 命令查看下 service 的信息：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kn service describe hello-quarkus -n default
Name: hello-quarkus
Namespace: default
Age: 21s
URL: http://hello-quarkus.default.nip.io
Revisions:
100% @latest &lt;span class="o">(&lt;/span>hello-quarkus-00001&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>21s&lt;span class="o">)&lt;/span>
Image: dev.local/quarkus/quarkus-getting-started:distroless
Conditions:
OK TYPE AGE REASON
++ Ready 9s
++ ConfigurationsReady 10s
++ RoutesReady 9s
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kn service describe hello-spring -n default
Name: hello-spring
Namespace: default
Age: 44s
URL: http://hello-spring.default.nip.io
Revisions:
100% @latest &lt;span class="o">(&lt;/span>hello-spring-00001&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>44s&lt;span class="o">)&lt;/span>
Image: dev.local/spring/spring-getting-started:latest
Conditions:
OK TYPE AGE REASON
++ Ready 31s
++ ConfigurationsReady 32s
++ RoutesReady 31s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从描述信息中可以拿到服务的访问地址，分别是 &lt;code>http://hello-quarkus.default.nip.io&lt;/code> 和 &lt;code>http://hello-spring.default.nip.io&lt;/code>。&lt;/p>
&lt;p>接下来就需要在本地主机的 hosts 中加入解析：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">192.168.64.2 hello-quarkus.default.nip.io
192.168.64.2 hello-spring.default.nip.io
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="测试">测试&lt;/h3>
&lt;p>上面操作完之后，就可以使用下面的地址访问服务了。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="http://hello-quarkus.default.nip.io:31608/hello/greeting/quarkus">http://hello-quarkus.default.nip.io:31608/hello/greeting/quarkus&lt;/a>
&lt;a href="http://hello-spring.default.nip.io:31608/hello/greeting/spring">http://hello-spring.default.nip.io:31608/hello/greeting/spring&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在测试的过程中，可以通过 &lt;code>watch -n 1 'kubectl get po -n default | grep hello'&lt;/code> 命令来查看 pod 的创建和销毁。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/24/20210424-090756.gif" alt="2021-04-24 09.07.56">&lt;/p></description></item><item><title>应“云”而生的 Java 框架：构建本机可执行文件</title><link>https://atbug.com/quarkus-build-native-executable-file/</link><pubDate>Sat, 17 Apr 2021 09:08:40 +0800</pubDate><guid>https://atbug.com/quarkus-build-native-executable-file/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/17/16186233244243.jpg" alt="">&lt;/p>
&lt;blockquote>
&lt;p>电影《功夫》中，火云邪神有句话：“天下武功无坚不摧，唯快不破。”&lt;/p>
&lt;/blockquote>
&lt;p>在 &lt;a href="https://mp.weixin.qq.com/s/YcEqFm3oxlsEvJ3ckRbQyA">上一篇文章&lt;/a> 中，我们写了第一个 Quarkus 应用，并尝试着构建了 &lt;code>legacy-jar&lt;/code> 和 &lt;code>fast-jar&lt;/code>。&lt;/p>
&lt;p>今天来看一下 Quarkus 构建出来的本机可执行文件到底比 Spring 应用能快多少，&lt;strong>生态的成熟度不在这里讨论&lt;/strong>。&lt;/p>
&lt;h2 id="tldr">TLDR&lt;/h2>
&lt;p>先上结论， 与只有一个 Controller 的Spring Web 应用做下对比。&lt;/p>
&lt;h3 id="应用启动时间0012s-vs-2294s">应用启动时间：0.012s vs 2.294s&lt;/h3>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/17/cleanshot-20210417-at-0900292x.png" alt="CleanShot 2021-04-17 at 09.00.29@2x">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/17/cleanshot-20210417-at-0915282x.png" alt="CleanShot 2021-04-17 at 09.15.28@2x">&lt;/p>
&lt;h3 id="镜像大小49mb-vs-237-mb">镜像大小：49MB vs 237 MB&lt;/h3>
&lt;p>Spring 应用镜像使用 &lt;code>openjdk:11.0-jre-slim&lt;/code> 作为 base 镜像，大小为 220MB。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
spring/spring-getting-started latest 5f47030c5c3f &lt;span class="m">6&lt;/span> minutes ago 237MB
quarkus/quarkus-getting-started distroless2 fe973c5ac172 &lt;span class="m">24&lt;/span> minutes ago 49MB
quarkus/quarkus-getting-started distroless 6fe27dd44e86 &lt;span class="m">31&lt;/span> minutes ago 51MB
quarkus/quarkus-getting-started ubi 8f86f5915715 &lt;span class="m">58&lt;/span> minutes ago 132MB
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="java-应用容器化的困境">Java 应用容器化的困境&lt;/h2>
&lt;p>云原生世界中，应用容器化是个显著的特点。Java 应用容器化时面临了如下问题：&lt;/p>
&lt;ul>
&lt;li>应用启动慢：其实这是 Java 应用的问题。Java 应用占用内存多；JVM 虚拟机启动时需要做环境的初始化、预加载大量的类、初始化线程等等。启动耗时视应用情况需要几秒，甚至可达分钟级。较长的启动耗时，也抑制了水平伸缩性。即使在 Serverless 这种响应耗时要求不高的场景，也会被嫌弃。&lt;/li>
&lt;li>镜像过大：其实使用了镜像的分层设计，常见的一个 SpringCloud 应用的 über-jar 包可能都有 7、80MB。&lt;/li>
&lt;li>空间占用：虽然用了镜像分层，但积少成多，也会增加存储成本。&lt;/li>
&lt;/ul>
&lt;h2 id="quarkus-与本机映像native-image">Quarkus 与本机映像（native image）&lt;/h2>
&lt;p>Quarkus 的开发遵从了容器优先的原则：&lt;/p>
&lt;ul>
&lt;li>支持 Graal/SubstrateVM&lt;/li>
&lt;li>构建时处理元数据&lt;/li>
&lt;li>减少反射的使用&lt;/li>
&lt;li>本机映像预启动&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>本机映像是将 Java 代码提前编译为可执行文件（称为本机映像）的技术。该可执行文件包括应用程序类、其依赖项中的类、运行时库类以及 JDK 中的静态链接本机代码。它不是在 Java VM 上运行，而是包括必要的组件，例如内存管理，线程调度等，这些组件来自另一个运行时系统 “Substrate VM”。“Substrate VM” 是运行时组件（例如反优化器，垃圾收集器，线程调度等）的名称。与 JVM 相比，生成的程序具有更快的启动时间和更低的运行时内存开销。&lt;/p>
&lt;/blockquote>
&lt;h2 id="如何构建本机映像">如何构建本机映像&lt;/h2>
&lt;p>环境配置参考&lt;a href="https://mp.weixin.qq.com/s/YcEqFm3oxlsEvJ3ckRbQyA">上一篇文章&lt;/a>，可以直接&lt;a href="https://github.com/addozhang/quarkus-getting-started">从这里下载源码&lt;/a>。&lt;/p>
&lt;h3 id="配置-graalvm">配置 GraalVM&lt;/h3>
&lt;p>之前我们使用了&lt;a href="https://sdkman.io/"> sdkman&lt;/a> 进行 GraalVM 安装。设置 &lt;code>GRAALVM_HOME&lt;/code> 环境变量：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">export&lt;/span> &lt;span class="nv">GRAALVM_HOME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>sdk home java 21.0.0.2.r11-grl&lt;span class="sb">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>gu&lt;/code> 安装 &lt;code>native-image&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="si">${&lt;/span>&lt;span class="nv">GRAALVM_HOME&lt;/span>&lt;span class="si">}&lt;/span>/bin/gu install native-image
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="构建本机可执行文件">构建本机可执行文件&lt;/h3>
&lt;p>在源码的 &lt;code>pom.xml&lt;/code> 中，我们可以看到如下的 &lt;code>profile&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;profiles&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;profile&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;id&amp;gt;&lt;/span>native&lt;span class="nt">&amp;lt;/id&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;properties&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;quarkus.package.type&amp;gt;&lt;/span>native&lt;span class="nt">&amp;lt;/quarkus.package.type&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/profile&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/profiles&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们使用这个 profile 进行本机可执行文件的构建，整个构建耗时 &lt;strong>几分钟&lt;/strong> 。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">./mvnw package -Pnative
&lt;/code>&lt;/pre>&lt;/div>&lt;p>部分构建日志：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ quarkus-getting-started ---
[INFO]
[INFO] --- quarkus-maven-plugin:1.13.0.Final:build (default) @ quarkus-getting-started ---
[INFO] [org.jboss.threads] JBoss Threads version 3.2.0.Final
[INFO] [io.quarkus.deployment.pkg.steps.JarResultBuildStep] Building native image source jar: /Users/addo/Workspaces/private_w/quarkus-getting-started/target/quarkus-getting-started-1.0.0-SNAPSHOT-native-image-source-jar/quarkus-getting-started-1.0.0-SNAPSHOT-runner.jar
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Building native image from /Users/addo/Workspaces/private_w/quarkus-getting-started/target/quarkus-getting-started-1.0.0-SNAPSHOT-native-image-source-jar/quarkus-getting-started-1.0.0-SNAPSHOT-runner.jar
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildContainerRunner] Using docker to run the native image builder
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildContainerRunner] Checking image status quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java11
21.0.0-java11: Pulling from quarkus/ubi-quarkus-native-image
Digest: sha256:becf08de869e707beaa5e57444b533ef93ebef15aad90c92ac660ddf7cea2b11
Status: Image is up to date for quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java11
quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java11
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Running Quarkus native-image plugin on GraalVM Version 21.0.0 (Java Version 11.0.10+8-jvmci-21.0-b06)
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] docker run --env LANG=C --rm -v /Users/addo/Workspaces/private_w/quarkus-getting-started/target/quarkus-getting-started-1.0.0-SNAPSHOT-native-image-source-jar:/project:z quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java11 -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dvertx.logger-delegate-factory-class-name=io.quarkus.vertx.core.runtime.VertxLogDelegateFactory -J-Dvertx.disableDnsResolver=true -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=1 -J-Duser.language=en -J-Duser.country=CN -J-Dfile.encoding=UTF-8 --initialize-at-build-time= -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy\$BySpaceAndTime -H:+JNI -H:+AllowFoldMethods -jar quarkus-getting-started-1.0.0-SNAPSHOT-runner.jar -H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -J-Xmx5g -H:-AddAllCharsets -H:EnableURLProtocols=http --no-server -H:-UseServiceLoaderFeature -H:+StackTrace quarkus-getting-started-1.0.0-SNAPSHOT-runner
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] classlist: 5,859.24 ms, 0.96 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (cap): 633.34 ms, 0.94 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] setup: 2,468.19 ms, 0.94 GB
00:06:00,437 INFO [org.jbo.threads] JBoss Threads version 3.2.0.Final
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (clinit): 516.65 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (typeflow): 12,642.02 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (objects): 11,340.37 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (features): 525.87 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] analysis: 26,032.67 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] universe: 1,394.06 ms, 2.16 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (parse): 2,690.38 ms, 2.16 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (inline): 4,336.77 ms, 2.73 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (compile): 17,580.03 ms, 2.71 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] compile: 26,152.06 ms, 2.71 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] image: 3,288.43 ms, 2.70 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] write: 1,904.64 ms, 2.70 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] [total]: 67,414.16 ms, 2.70 GB
[WARNING] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] objcopy executable not found in PATH. Debug symbols will not be separated from executable.
[WARNING] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] That will result in a larger native image with debug symbols embedded in it.
[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 74739ms
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:21 min
[INFO] Finished at: 2021-04-17T08:06:47+08:00
[INFO] ------------------------------------------------------------------------
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>假如构建时出现类似 &lt;code>Caused by: java.lang.RuntimeException: Image generation failed. Exit code was 137 which indicates an out of memory error. Consider increasing the Xmx value for native image generation by setting the &amp;quot;quarkus.native.native-image-xmx&amp;quot; property&lt;/code> 这种报错。需要调整下 Docker 的设置，比如笔者使用的 macOS，打开 Docker Desktop &amp;gt; Preference &amp;gt; Resource &amp;gt; Advanced，将内存从默认的 2GB 调大，比如 8GB。&lt;/p>
&lt;p>从构建日志可以看出，构建的过程是在 &lt;code>quay.io/quarkus/ubi-quarkus-native-image&lt;/code> 的容器中完成的。虽然异常提示调整 &amp;ldquo;quarkus.native.native-image-xmx&amp;rdquo; ，其实是容器内存太小导致的。&lt;/p>
&lt;/blockquote>
&lt;p>构建成功后，可以在 &lt;code>target&lt;/code> 中找到 &lt;code>quarkus-getting-started-1.0.0-SNAPSHOT-runner&lt;/code>。这是一个可执行文件，大小为 28MB。&lt;/p>
&lt;p>尝试执行该文件，收到 &lt;code>zsh: exec format error: ./target/quarkus-getting-started-1.0.0-SNAPSHOT-runner&lt;/code> 错误。因为这是一个 Linux 可执行文件，因此我们需要在容器中运行。&lt;/p>
&lt;h3 id="构建本机镜像">构建本机镜像&lt;/h3>
&lt;p>在源文件的 &lt;code>src/main/docker&lt;/code> 目录中，我们可以找到 &lt;code>Dockerfile.native&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> registry.access.redhat.com/ubi8/ubi-minimal:8.3&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /work/&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> chown &lt;span class="m">1001&lt;/span> /work &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chmod &lt;span class="s2">&amp;#34;g+rwX&amp;#34;&lt;/span> /work &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chown 1001:root /work&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --chown&lt;span class="o">=&lt;/span>1001:root target/*-runner /work/application&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">EXPOSE&lt;/span>&lt;span class="s"> 8080&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">USER&lt;/span>&lt;span class="s"> 1001&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;./application&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;-Dquarkus.http.host=0.0.0.0&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="运行镜像">运行镜像&lt;/h3>
&lt;p>本地运行一下，可以看出启动只需要 &lt;code>0.013s&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --rm -p 8080:8080 quarkus/quarkus-getting-started:latest
__ ____ __ _____ ___ __ ____ ______
--/ __ &lt;span class="se">\/&lt;/span> / / / _ &lt;span class="p">|&lt;/span> / _ &lt;span class="se">\/&lt;/span> //_/ / / / __/
-/ /_/ / /_/ / __ &lt;span class="p">|&lt;/span>/ , _/ ,&amp;lt; / /_/ /&lt;span class="se">\ \
&lt;/span>&lt;span class="se">&lt;/span>--&lt;span class="se">\_&lt;/span>__&lt;span class="se">\_\_&lt;/span>___/_/ &lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span>&lt;span class="se">\_&lt;/span>___/___/
2021-04-17 00:22:27,146 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> quarkus-getting-started 1.0.0-SNAPSHOT native &lt;span class="o">(&lt;/span>powered by Quarkus 1.13.0.Final&lt;span class="o">)&lt;/span> started in 0.013s. Listening on: http://0.0.0.0:8080
2021-04-17 00:22:27,147 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> Profile prod activated.
2021-04-17 00:22:27,147 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> Installed features: &lt;span class="o">[&lt;/span>cdi, resteasy&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试一下端点：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">http :8080/hello/greeting/quarkus
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Content-Length: &lt;span class="m">14&lt;/span>
Content-Type: text/plain&lt;span class="p">;&lt;/span>&lt;span class="nv">charset&lt;/span>&lt;span class="o">=&lt;/span>UTF-8
Hello, quarkus
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看下镜像的信息，大小为 132MB，其中 base 镜像 &lt;code>ubi-minimal&lt;/code> 就占了 103 MB。感觉还是有点大，是否继续精简一下？&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
quarkus/quarkus-getting-started latest 8f86f5915715 &lt;span class="m">4&lt;/span> minutes ago 132MB
registry.access.redhat.com/ubi8/ubi-minimal 8.3 604ddd554fec &lt;span class="m">2&lt;/span> weeks ago 103MB
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="镜像瘦身">镜像瘦身&lt;/h3>
&lt;p>在 &lt;code>src/main/docker&lt;/code> 中还有个名为 &lt;code>Dockerfile.native-distroless&lt;/code> 的Dockerfile，里面使用了 &lt;code>quay.io/quarkus/quarkus-distroless-image:1.0&lt;/code> 作为 base 镜像&lt;/p>
&lt;p>使用这个Dockerfile进行构建，得到的镜像就小很多，只有 51MB：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
quarkus/quarkus-getting-started distroless 6fe27dd44e86 &lt;span class="m">33&lt;/span> seconds ago 51MB
quarkus/quarkus-getting-started ubi 8f86f5915715 &lt;span class="m">27&lt;/span> minutes ago 132MB
quay.io/quarkus/quarkus-distroless-image 1.0 062663862a83 &lt;span class="m">6&lt;/span> days ago 21.3MB
registry.access.redhat.com/ubi8/ubi-minimal 8.3 604ddd554fec &lt;span class="m">2&lt;/span> weeks ago 103MB
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行成功：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --rm -p 8080:8080 quarkus/quarkus-getting-started:distroless
__ ____ __ _____ ___ __ ____ ______
--/ __ &lt;span class="se">\/&lt;/span> / / / _ &lt;span class="p">|&lt;/span> / _ &lt;span class="se">\/&lt;/span> //_/ / / / __/
-/ /_/ / /_/ / __ &lt;span class="p">|&lt;/span>/ , _/ ,&amp;lt; / /_/ /&lt;span class="se">\ \
&lt;/span>&lt;span class="se">&lt;/span>--&lt;span class="se">\_&lt;/span>__&lt;span class="se">\_\_&lt;/span>___/_/ &lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span>&lt;span class="se">\_&lt;/span>___/___/
2021-04-17 00:51:26,070 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> quarkus-getting-started 1.0.0-SNAPSHOT native &lt;span class="o">(&lt;/span>powered by Quarkus 1.13.0.Final&lt;span class="o">)&lt;/span> started in 0.013s. Listening on: http://0.0.0.0:8080
2021-04-17 00:51:26,071 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> Profile prod activated.
2021-04-17 00:51:26,071 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> Installed features: &lt;span class="o">[&lt;/span>cdi, resteasy&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>极致瘦身，参考了&lt;a href="https://capgemini.github.io/development/Introduction-to-Quarkus-Supersonic-Subatomic-Java/#distroless-images">这里&lt;/a>，我们创建 &lt;code>Dockerfile.native-distroless2&lt;/code>。&lt;/p>
&lt;p>最终镜像的大小为 49MB，与官方提供的 distroless base 镜像只小了 2MB。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
quarkus/quarkus-getting-started distroless2 fe973c5ac172 &lt;span class="m">3&lt;/span> seconds ago 49MB
&lt;/code>&lt;/pre>&lt;/div>&lt;p>前面对比，用来构建 Spring 应用的 base 镜像 &lt;code>openjdk:11.0-jre-slim&lt;/code> 已经有 220MB，这还没算上应用的大小。即使是 &lt;code>openjdk:17-alpine3.13&lt;/code> 也有 182 MB。&lt;/p>
&lt;h2 id="next">NEXT&lt;/h2>
&lt;p>下一回，我们试试 Quarkus 在 ArgoCD 中的应用，看下 Serverless 上的使用体验如何。&lt;/p></description></item><item><title>应“云”而生的 Java 框架：Hello, Quarkus</title><link>https://atbug.com/hello-quarkus/</link><pubDate>Mon, 05 Apr 2021 21:08:40 +0800</pubDate><guid>https://atbug.com/hello-quarkus/</guid><description>
&lt;p>Wikipedia上有关 Quarkus 的信息还很少，只有一句简单的介绍：&lt;/p>
&lt;blockquote>
&lt;p>Quarkus 是专为 OpenJDK HotSpot 和 GraalVM 定制的全栈 Kubernetes 原生 Java 应用程序框架。与如 Spring 之类的其他框架相比，它提供了较小的内存占用并缩短了启动时间。它允许结合命令式和非阻塞响应式编程。&lt;/p>
&lt;/blockquote>
&lt;p>从 Quarkus 的&lt;a href="https://quarkus.io/">官网&lt;/a>，可以看到其有几个特性：&lt;/p>
&lt;ul>
&lt;li>容器优先&lt;/li>
&lt;li>统一了命令式和响应式编程&lt;/li>
&lt;li>开发者友好&lt;/li>
&lt;li>最佳品种的库及标准&lt;/li>
&lt;/ul>
&lt;p>更多 Quarkus 可以参考&lt;a href="https://quarkus.io/">官网&lt;/a>的介绍及文档。今天主要就是跑一下 Quarkus 的 &lt;code>Hello world&lt;/code>。&lt;/p>
&lt;p>放一张官网的图：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/05/16176279246527.jpg" alt="">&lt;/p>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;ul>
&lt;li>基于 Java 11 的 GraalVM&lt;/li>
&lt;li>Maven 3.6.2+&lt;/li>
&lt;/ul>
&lt;p>笔者使用的是 macos 10.15.4，GraalVM 和 Maven 建议通过 &lt;a href="https://sdkman.io">sdkman&lt;/a> 进行安装。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ sdk install java 21.0.0.2.r11-grl &lt;span class="c1">#如果已使用其他 java 版本，可以使用命令 sdk use java 21.0.0.2.r11-grl 进行切换&lt;/span>
$ sdk install maven 3.6.3
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="验证安装">验证安装&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ java -version
openjdk version &lt;span class="s2">&amp;#34;11.0.10&amp;#34;&lt;/span> 2021-01-19
OpenJDK Runtime Environment GraalVM CE 21.0.0.2 &lt;span class="o">(&lt;/span>build 11.0.10+8-jvmci-21.0-b06&lt;span class="o">)&lt;/span>
OpenJDK 64-Bit Server VM GraalVM CE 21.0.0.2 &lt;span class="o">(&lt;/span>build 11.0.10+8-jvmci-21.0-b06, mixed mode, sharing&lt;span class="o">)&lt;/span>
$ mvn -version
Apache Maven 3.6.3 &lt;span class="o">(&lt;/span>cecedd343002696d0abb50b32b541b8a6ba2883f&lt;span class="o">)&lt;/span>
Maven home: /Users/addo/.sdkman/candidates/maven/current
Java version: 11.0.10, vendor: GraalVM Community, runtime: /Users/addo/.sdkman/candidates/java/21.0.0.2.r11-grl
Default locale: en_CN, platform encoding: UTF-8
OS name: &lt;span class="s2">&amp;#34;mac os x&amp;#34;&lt;/span>, version: &lt;span class="s2">&amp;#34;10.15.4&amp;#34;&lt;/span>, arch: &lt;span class="s2">&amp;#34;x86_64&amp;#34;&lt;/span>, family: &lt;span class="s2">&amp;#34;mac&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="快速开始">快速开始&lt;/h2>
&lt;h3 id="创建项目">创建项目&lt;/h3>
&lt;p>创建 quarkus 项目最快的方式是通过 &lt;code>quarkus-maven-plugin&lt;/code> 来创建，使用如下的命令快速可以创建&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ mvn io.quarkus:quarkus-maven-plugin:1.13.0.Final:create &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -DprojectGroupId&lt;span class="o">=&lt;/span>com.atbug.quickstart &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -DprojectArtifactId&lt;span class="o">=&lt;/span>quarkus-getting-started &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -DclassName&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;com.atbug.quickstart.GreetingResource&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -Dpath&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/hello&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>./quarkus-getting-started&lt;/code> 中提供了：&lt;/p>
&lt;ul>
&lt;li>maven 的项目结构&lt;/li>
&lt;li>&lt;code>com.atbug.quickstart.GreetingResource&lt;/code> 暴露了 &lt;code>/hello&lt;/code> 端点，通过 &lt;code>JAX-RS&lt;/code> 注解实现&lt;/li>
&lt;li>相关的单元测试&lt;/li>
&lt;li>应用启动后可以通过 &lt;code>http://localhost:8080&lt;/code> 打开的启动页面&lt;/li>
&lt;li>&lt;code>src/main/docker&lt;/code> 下提供了 &lt;code>native&lt;/code> 和 &lt;code>jvm&lt;/code> 风格的 Dockerfile&lt;/li>
&lt;li>应用配置文件&lt;/li>
&lt;/ul>
&lt;h3 id="运行应用">运行应用&lt;/h3>
&lt;p>执行 &lt;code>./mvnw compile quarkus:dev&lt;/code> 命令可启动应用&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">__ ____ __ _____ ___ __ ____ ______
--/ __ &lt;span class="se">\/&lt;/span> / / / _ &lt;span class="p">|&lt;/span> / _ &lt;span class="se">\/&lt;/span> //_/ / / / __/
-/ /_/ / /_/ / __ &lt;span class="p">|&lt;/span>/ , _/ ,&amp;lt; / /_/ /&lt;span class="se">\ \
&lt;/span>&lt;span class="se">&lt;/span>--&lt;span class="se">\_&lt;/span>__&lt;span class="se">\_\_&lt;/span>___/_/ &lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span>&lt;span class="se">\_&lt;/span>___/___/
2021-04-05 19:48:36,419 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>Quarkus Main Thread&lt;span class="o">)&lt;/span> quarkus-getting-started 1.0.0-SNAPSHOT on JVM &lt;span class="o">(&lt;/span>powered by Quarkus 1.13.0.Final&lt;span class="o">)&lt;/span> started in 2.135s. Listening on: http://localhost:8080
2021-04-05 19:48:36,448 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>Quarkus Main Thread&lt;span class="o">)&lt;/span> Profile dev activated. Live Coding activated.
2021-04-05 19:48:36,448 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>Quarkus Main Thread&lt;span class="o">)&lt;/span> Installed features: &lt;span class="o">[&lt;/span>cdi, resteasy&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>访问 &lt;code>/hello&lt;/code> 断点&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ http :8080/hello
HTTP/1.1 200 OK
Content-Length: 5
Content-Type: text/plain;charset=UTF-8
Hello
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>笔者通过 &lt;code>httpie&lt;/code> 进行访问，可以通过 &lt;code>brew install httpie&lt;/code> 进行安装，推荐使用。&lt;/p>
&lt;/blockquote>
&lt;h4 id="增加新的断点">增加新的断点&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@GET&lt;/span>
&lt;span class="nd">@Produces&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TEXT_PLAIN&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/greeting/{name}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">greeting&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathParam&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注：&lt;code>PathParam&lt;/code> 来自 &lt;code>org.jboss.resteasy.annotations.jaxrs.PathParam&lt;/code>&lt;/p>
&lt;p>测试：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http :8080/hello/greeting/Quarkus
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Content-Length: &lt;span class="m">14&lt;/span>
Content-Type: text/plain&lt;span class="p">;&lt;/span>&lt;span class="nv">charset&lt;/span>&lt;span class="o">=&lt;/span>UTF-8
Hello, Quarkus
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为新的端点增加单元测试&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testGreetingEndpoint&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">uuid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UUID&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">randomUUID&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">given&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">pathParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">uuid&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">when&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/hello/greeting/{name}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">then&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">statusCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">200&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">body&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">is&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">uuid&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>./mvnw test&lt;/code> 运行单元测试&lt;/p>
&lt;blockquote>
&lt;p>注意这里使用 intellij 运行单元测试的话，会报错。需要修改 Java Compiler 的配置，添加额外的命令行参数 &lt;code>-parameters&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/05/16176241035940.jpg" alt="">&lt;/p>
&lt;/blockquote>
&lt;h3 id="打包">打包&lt;/h3>
&lt;p>与通常的 maven 项目打包方式一样，执行 &lt;code>./mvnw package&lt;/code>，在 &lt;code>target&lt;/code> 目录中：&lt;/p>
&lt;ul>
&lt;li>&lt;code>quarkus-getting-started-1.0.0-SNAPSHOT.jar&lt;/code> 仅包含了项目编译的类和资源文件，是不可执行的 jar&lt;/li>
&lt;li>&lt;code>quarkus-app&lt;/code> 目录中包含了可执行的 jar 文件 &lt;code>quarkus-run.jar&lt;/code> ，&lt;strong>但是&lt;/strong>，其并不是一个 &lt;code>über-jar&lt;/code>，项目的依赖库都位于 &lt;code>lib&lt;/code>目录中。&lt;/li>
&lt;/ul>
&lt;p>可以通过执行 &lt;code>java -jar target/quarkus-app/quarkus-run.jar&lt;/code> 在启动应用。&lt;/p>
&lt;blockquote>
&lt;p>这意味着假如你想在容器中运行，需要部署整个 &lt;code>quarkus-app&lt;/code> 目录&lt;/p>
&lt;/blockquote>
&lt;h4 id="使用-fast-jar">使用 fast-jar&lt;/h4>
&lt;p>qurakus 的打包方式有两种：&lt;code>legacy-jar&lt;/code> 和 &lt;code>fast-jar&lt;/code>。可以在 &lt;code>application.properties&lt;/code> 文件中进行指定，未显式指定默认为 &lt;code>legacy-jar&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">quarkus.package.type=fast-jar
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>如果要在容器中运行，同样需要部署整个 &lt;code>quarkus-app&lt;/code> 目录
&lt;code>fast-jar&lt;/code> 类型的包比 &lt;code>legacy-jar&lt;/code> 的包启动会快一点点，同时占用的内存也更低。因为 &lt;code>fast-jar&lt;/code> 的包含了依赖包中的类和资源文件的索引，避免在类和资源文件加载时对 classpath 下的包的查找。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>下一篇，试试构建一个原生的可执行文件。&lt;/strong>&lt;/p></description></item></channel></rss>