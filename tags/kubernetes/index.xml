<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on 乱世浮生</title><link>https://atbug.com/tags/kubernetes/</link><description>Recent content in Kubernetes on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 02 Jul 2021 08:02:15 +0800</lastBuildDate><atom:link href="https://atbug.com/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes CKA 证书备考笔记</title><link>https://atbug.com/notes-for-cka-preparation/</link><pubDate>Fri, 02 Jul 2021 08:02:15 +0800</pubDate><guid>https://atbug.com/notes-for-cka-preparation/</guid><description>
&lt;p>Kubernetes 使用有好几年了，但在今年 5 月才完成 CKA 的考试。虽说用了几年，还是提前刷了部分题熟悉下。&lt;/p>
&lt;p>绝大部分题都是有在 minikube 的环境上操作过，只有部分比如升级集群受限于环境问题没有实地操作。&lt;/p>
&lt;h2 id="写在最前">写在最前&lt;/h2>
&lt;ol>
&lt;li>保存常用文档进书签，如果有 Alfred 启用浏览器书签 workflow。效果见下图&lt;/li>
&lt;li>kubectl 自动补全 &lt;code>echo &amp;quot;source &amp;lt;(kubectl completion bash)&amp;quot; &amp;gt;&amp;gt; ~/.bashrc; source ~/.bashrc&lt;/code>&lt;/li>
&lt;li>每道题开始前要切换 context 和 namespace，直接复制题目里的命令即可&lt;/li>
&lt;li>必要的 alias&lt;/li>
&lt;li>善用 &lt;code>--dry-run=client -o yaml&lt;/code> 避免手动敲太多&lt;/li>
&lt;li>善用 &lt;code>kubectl explain [resource[.field]]&lt;/code>&lt;/li>
&lt;li>看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/li>
&lt;li>看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/li>
&lt;li>看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/li>
&lt;/ol>
&lt;p>书签地址：&lt;a href="https://gist.github.com/addozhang/3ca950ce9b38930abfe7c5fb067e74de">K8s-CKA-CAKD-Bookmarks.html&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/01/20210630162758.png" alt="alfred-bookmarks-workflow">&lt;/p>
&lt;h2 id="安全rbac">安全：RBAC&lt;/h2>
&lt;blockquote>
&lt;p>在默认命名空间中创建一个名为 dev-sa 的服务帐户，dev-sa 可以在 dev 命名空间中创建以下组件：
&lt;code>Deployment&lt;/code>、&lt;code>StatefulSet&lt;/code>、&lt;code>DaemonSet&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点">知识点&lt;/h3>
&lt;ul>
&lt;li>role&lt;/li>
&lt;li>sa&lt;/li>
&lt;li>rolebinding&lt;/li>
&lt;li>auth can-i&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#command-line-utilities">https://kubernetes.io/docs/reference/access-authn-authz/rbac/#command-line-utilities&lt;/a>&lt;/p>
&lt;h3 id="解题思路">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create sa dev-sa
$ kubectl create role dev-role --verb&lt;span class="o">=&lt;/span>create --resource&lt;span class="o">=&lt;/span>deployment,statefulset,daemonset
&lt;span class="c1">#检查&lt;/span>
$ kubectl describe role dev-role
Name: dev-role
Labels: &amp;lt;none&amp;gt;
Annotations: &amp;lt;none&amp;gt;
PolicyRule:
Resources Non-Resource URLs Resource Names Verbs
--------- ----------------- -------------- -----
daemonsets.apps &lt;span class="o">[]&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="o">[&lt;/span>create&lt;span class="o">]&lt;/span>
deployments.apps &lt;span class="o">[]&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="o">[&lt;/span>create&lt;span class="o">]&lt;/span>
statefulsets.apps &lt;span class="o">[]&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="o">[&lt;/span>create&lt;span class="o">]&lt;/span>
$ kubectl create rolebinding dev --serviceaccount default:dev-sa --role dev-role
&lt;span class="c1">#检查&lt;/span>
$ kubectl auth can-i create deployment --as system:serviceaccount:default:dev-sa
yes
$ kubectl auth can-i create statefulset --as system:serviceaccount:default:dev-sa
yes
$ kubectl auth can-i create daemonset --as system:serviceaccount:default:dev-sa
yes
$ kubectl auth can-i create pod --as system:serviceaccount:default:dev-sa
no
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="多容器-pod">多容器 Pod&lt;/h2>
&lt;blockquote>
&lt;p>创建一个pod名称日志，容器名称 &lt;code>log-pro&lt;/code> 使用image &lt;code>busybox&lt;/code>，在 &lt;code>/log/data/output.log&lt;/code> 输出重要信息。然后另一个容器名称 &lt;code>log-cus&lt;/code> 使用 image &lt;code>busybox&lt;/code>，在 &lt;code>/log/data/output.log&lt;/code> 加载 &lt;code>output.log&lt;/code> 并打印它。 请注意，此日志文件只能在 pod 内共享。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-1">知识点&lt;/h3>
&lt;ul>
&lt;li>pod&lt;/li>
&lt;li>volume: emptyDir&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir">https://kubernetes.io/docs/concepts/storage/volumes/#emptydir&lt;/a>&lt;/p>
&lt;h3 id="解题思路-1">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl run log --image busybox --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; log.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 log.yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo important information &amp;gt; /log/data/output.log; sleep 1d&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log-pro&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/log/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">tail -f /log/data/output.log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log-cus&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/log/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">emptyDir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行创建 &lt;code>kubectl apply -f log.yaml&lt;/code>&lt;/p>
&lt;p>检查&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl logs log -c log-cus
important information
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安全网络策略-networkpolicy">安全：网络策略 NetworkPolicy&lt;/h2>
&lt;blockquote>
&lt;p>只有命名空间 &lt;code>mysql&lt;/code> 的 pod 只能被另一个命名空间 &lt;code>internal&lt;/code> 的 pod 通过 8080 端口进行访问&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-2">知识点&lt;/h3>
&lt;ul>
&lt;li>NetworkPolicy&lt;/li>
&lt;li>Ingress&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource">https://kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource&lt;/a>&lt;/p>
&lt;h3 id="解题思路-2">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NetworkPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cka-network&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">target&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#目的命名空间&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policyTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Ingress&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#策略影响入栈流量&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ingress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">from&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#允许流量的来源&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">namespaceSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ns&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#源命名空间的 label&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#允许访问的端口&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="节点状态及污点">节点状态及污点&lt;/h2>
&lt;blockquote>
&lt;p>统计这个集群中没有污染的就绪节点，并输出到文件 &lt;code>/root/cka/readyNode.txt&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-3">知识点&lt;/h3>
&lt;ul>
&lt;li>Node&lt;/li>
&lt;li>Taint（污点）&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/&lt;/p>
&lt;h3 id="解题思路-3">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># Ready 状态的数量&lt;/span>
$ kubectl get node &lt;span class="p">|&lt;/span> grep -w Ready &lt;span class="p">|&lt;/span> wc -l
&lt;span class="c1"># 查看含有 Taint 的数量，需要排除掉这些&lt;/span>
$ kubectl describe node &lt;span class="p">|&lt;/span> grep Taints &lt;span class="p">|&lt;/span> grep -i NoSchedule &lt;span class="p">|&lt;/span> wc -l
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="资源">资源&lt;/h2>
&lt;blockquote>
&lt;p>将占用CPU资源最多的pod名称输出到文件 &lt;code>/root/cka/name.txt&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-4">知识点&lt;/h3>
&lt;ul>
&lt;li>kubectl top 命令&lt;/li>
&lt;li>metrics&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-4">解题思路&lt;/h3>
&lt;p>如果是 minikube 环境，报错 &lt;code>error: Metrics API not available&lt;/code>，可以执行 &lt;code>minikube addons enable metrics-server&lt;/code> 命令开启 metrics server。&lt;/p>
&lt;p>通过 &lt;code>kubectl top&lt;/code> 命令找到 cpu 最高的 pod，将其名字写入 &lt;code>/root/cka/name.txt&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl top pod
&lt;span class="c1"># 或者&lt;/span>
$ kubectl top pod &lt;span class="p">|&lt;/span> sort -k &lt;span class="m">2&lt;/span> -n
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="网络dns">网络：DNS&lt;/h2>
&lt;blockquote>
&lt;p>有 pod 名称 &lt;code>pod-nginx&lt;/code>，创建服务名称 &lt;code>service-nginx&lt;/code>，使用 &lt;code>nodePort&lt;/code> 暴露pod。 然后创建一个 pod 使用 image &lt;code>busybox&lt;/code> 来 &lt;code>nslookup&lt;/code> pod &lt;code>pod-nginx&lt;/code> 和 service &lt;code>service-nginx&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-5">知识点&lt;/h3>
&lt;ul>
&lt;li>service with nodePort&lt;/li>
&lt;li>kubectl expose&lt;/li>
&lt;li>kubectl run&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/&lt;/p>
&lt;h3 id="解题思路-5">解题思路&lt;/h3>
&lt;p>使用 &lt;code>kubectl expose&lt;/code> 创建 service。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 创建 service&lt;/span>
kubectl expose pod pod-nginx --name service-nginx --type NodePort --target-port &lt;span class="m">80&lt;/span>
&lt;span class="c1"># 创建 pod&lt;/span>
kubectl run busybox --image busybox:latest --command sleep 1h
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 pod 的 ip 地址，pod 的 dns lookup 需要用用到 ip。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get po -o wide
NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
busybox 1/1 Running &lt;span class="m">0&lt;/span> 2m17s 172.17.0.5 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
pod-nginx 1/1 Running &lt;span class="m">0&lt;/span> 59m 172.17.0.4 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行 nslookup&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl &lt;span class="nb">exec&lt;/span> busybox -it -- nslookup 172.17.0.4
4.0.17.172.in-addr.arpa &lt;span class="nv">name&lt;/span> &lt;span class="o">=&lt;/span> 172-17-0-4.service-nginx.default.svc.cluster.local.
$ kubectl &lt;span class="nb">exec&lt;/span> busybox -it -- nslookup service-nginx
Server: 10.96.0.10
Address: 10.96.0.10#53
Name: service-nginx.default.svc.cluster.local
Address: 10.110.253.70
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工作负载扩容">工作负载：扩容&lt;/h2>
&lt;blockquote>
&lt;p>将命名空间 &lt;code>dev&lt;/code> 中的 Deployment &lt;code>scale-deploy&lt;/code> 缩放到三个 pod 并记录下来。&lt;/p>
&lt;/blockquote>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment&lt;/p>
&lt;h3 id="知识点-6">知识点&lt;/h3>
&lt;ul>
&lt;li>deployment scale up&lt;/li>
&lt;li>kubectl scale&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-6">解题思路&lt;/h3>
&lt;p>&lt;code>kubectl scale&lt;/code> 的使用，需要参数 &lt;code>--record&lt;/code> 进行记录（将操作命令记录到 deployment 的 &lt;code>kubernetes.io/change-cause&lt;/code> annotation 中）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl scale deployment scale-deploy --replicas &lt;span class="m">3&lt;/span> --record
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群备份及恢复">集群备份及恢复&lt;/h2>
&lt;blockquote>
&lt;p>备份 etcd 并将其保存在主节点上的 &lt;code>/root/cka/etcd-backup.db&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后恢复备份。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-7">知识点&lt;/h3>
&lt;ul>
&lt;li>etcd 的备份及恢复&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster&lt;/p>
&lt;h3 id="解题思路-7">解题思路&lt;/h3>
&lt;p>Kubernetes 的所有数据都记录在 etcd 中，对 etcd 进行备份就是对集群进行备份。&lt;/p>
&lt;p>连接 etcd 需要证书，证书可以从 apiserver 获取，因为 apiserver 需要连接 etcd。新版本的 apiserver 都是以 static pod 的方式运行，证书是通过 volume 挂载到 pod 中的。&lt;/p>
&lt;p>比如 minikube 环境，证书是从 node 节点的 &lt;code>/var/lib/minikube/certs&lt;/code> 挂载进去的。&lt;/p>
&lt;p>要先 ssh 到 master 节点上。命令的执行非常快，如果长时间没结束，那就说名有问题了。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#备份&lt;/span>
$ &lt;span class="nv">ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl snapshot save /root/cka/etcd-backup.db &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于只说了 restore，所以就执行 restore 的命令，默认会恢复到当前目录的 &lt;code>default.etcd&lt;/code> 下。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#恢复&lt;/span>
$ &lt;span class="nv">ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl snapshot restore /root/cka/etcd-backup.db &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群节点升级">集群节点升级&lt;/h2>
&lt;blockquote>
&lt;p>将master节点版本从 1.20.0 升级到 1.21.0，确保 master 节点上的 pod 重新调度到其他节点，升级完成后，使 master 节点可用。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-8">知识点&lt;/h3>
&lt;ul>
&lt;li>drain&lt;/li>
&lt;li>cordon&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/#upgrading-control-plane-nodes&lt;/p>
&lt;h3 id="解题思路-8">解题思路&lt;/h3>
&lt;p>受限于环境，没有实地操作。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 将节点设置为不可调度&lt;/span>
$ kubectl cordon master
&lt;span class="c1"># 驱逐 master 节点上的 pod&lt;/span>
$ kubectl drain master --ignore-daemonsets
&lt;span class="c1"># 进行升级&lt;/span>
$ apt-mark unhold kubelet kubectl &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install -y &lt;span class="nv">kubelet&lt;/span>&lt;span class="o">=&lt;/span>1.21.0-00 &lt;span class="nv">kubectl&lt;/span>&lt;span class="o">=&lt;/span>1.21.0-00 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>apt-mark hold kubelet kubectl
&lt;span class="c1"># 重新启动kubelet&lt;/span>
$ systemctl daemon-reload
$ systemctl restart kubelet
&lt;span class="c1"># 将节点设置为可调度&lt;/span>
$ kubectl uncordon master
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群节点故障排查">集群：节点故障排查&lt;/h2>
&lt;blockquote>
&lt;p>现在 node01 还没有准备好，请找出根本原因并使其准备好，然后创建一个确保它在 node01 上运行的 pod。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-9">知识点&lt;/h3>
&lt;ul>
&lt;li>节点故障排查&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-9">解题思路&lt;/h3>
&lt;p>这种问题大概率问题出在 kubelet 上&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ssh node01
systemctl status kubelet
systemctl restart kubelet
&lt;span class="c1"># 再检查node状态&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>插播一个故障，本地安装 2 个节点的 minikube 集群时，第二个节点持续 &lt;code>NotReady&lt;/code>。使用 &lt;code>systemctl status kubelet&lt;/code> 看到 &lt;code>unable to update cni config: no networks found in /etc/cni/net.mk&lt;/code>。&lt;/p>
&lt;p>检查该目录确实没有文件，从 master 节点复制到该节点后重启 kubelet 解决。&lt;/p>
&lt;h2 id="存储持久化卷">存储：持久化卷&lt;/h2>
&lt;blockquote>
&lt;p>集群中有一个持久卷名称 &lt;code>dev-pv&lt;/code>，创建一个持久卷声明名称 &lt;code>dev-pvc&lt;/code>，确保这个持久卷声明会绑定持久卷，然后创建一个 pod 名称 &lt;code>test-pvc&lt;/code>，将这个 pvc 挂载到 path &lt;code>/tmp/data&lt;/code>，使用 nginx 镜像。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-10">知识点&lt;/h3>
&lt;ul>
&lt;li>PersistentVolume&lt;/li>
&lt;li>PersistentVolumeClaim&lt;/li>
&lt;li>Mount Volume&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume&lt;/p>
&lt;h3 id="解题思路-10">解题思路&lt;/h3>
&lt;p>创建 pvc 前先获取 pv的信息&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pv dev-pv -o yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pv&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; pvc.yaml &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">apiVersion: v1
&lt;/span>&lt;span class="s">kind: PersistentVolumeClaim
&lt;/span>&lt;span class="s">metadata:
&lt;/span>&lt;span class="s"> name: dev-pvc
&lt;/span>&lt;span class="s">spec:
&lt;/span>&lt;span class="s"> accessModes:
&lt;/span>&lt;span class="s"> - ReadWriteOnce
&lt;/span>&lt;span class="s"> resources:
&lt;/span>&lt;span class="s"> requests:
&lt;/span>&lt;span class="s"> storage: 1Gi
&lt;/span>&lt;span class="s">EOF&lt;/span>
$ kubectl apply -f pvc.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pod 的 manifest，记得使用 &lt;code>kubectl run --dry-run=client -o yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl run test-pvc --image nginx --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; test-pvc.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改之后得到最终的 pod yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dev-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>理论上只要 pod 能运行，就说明成功。也可以进一步确认挂载是否成功，在 pod 的 &lt;code>/tmp/data&lt;/code> 中 touch 个文件，然后到节点的目录中查看是有该文件。&lt;/p>
&lt;h2 id="工作负载多容器的-deployment">工作负载：多容器的 Deployment&lt;/h2>
&lt;blockquote>
&lt;p>创建一个名为 &lt;code>deploy-important&lt;/code> 的 Deployment，标签为 &lt;code>id=very-important&lt;/code>（pod 也应该有这个标签）和命名空间 dev 中的 3 个副本。 它应该包含两个容器，第一个名为 &lt;code>container1&lt;/code> 并带有镜像，第二个名为 container2 的图像为 &lt;code>kubernetes/pause&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在一个工作节点上应该只运行该部署的一个 Pod。 我们有两个工作节点：&lt;code>cluster1-worker1&lt;/code> 和 &lt;code>cluster1-worker2&lt;/code>。 因为 Deployment 有三个副本，所以结果应该是在两个节点上都有一个 Pod 正在运行。 不会调度第三个 Pod，除非添加新的工作节点。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-11">知识点&lt;/h3>
&lt;ul>
&lt;li>deployment&lt;/li>
&lt;li>pod label&lt;/li>
&lt;li>replicas&lt;/li>
&lt;li>multi container pod&lt;/li>
&lt;li>pod anti affinity&lt;/li>
&lt;/ul>
&lt;p>官方文档参考：https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#never-co-located-in-the-same-node&lt;/p>
&lt;h3 id="解题思路-11">解题思路&lt;/h3>
&lt;p>先创建模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create deployment deploy-important --image nginx --replicas &lt;span class="m">3&lt;/span> --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; deploy-important.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改后的 yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">affinity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podAntiAffinity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requiredDuringSchedulingIgnoredDuringExecution&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">labelSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">id&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">In&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">topologyKey&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetes.io/hostname&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">container1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetes/pause&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">container2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>minikube 上测试只能调度一个 pod，符合预期&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kgpo
NAME READY STATUS RESTARTS AGE
deploy-important-659d54fc47-6cp8r 0/2 Pending &lt;span class="m">0&lt;/span> 3h10m
deploy-important-659d54fc47-92z4d 2/2 Running &lt;span class="m">0&lt;/span> 3h10m
deploy-important-659d54fc47-c6llc 0/2 Pending &lt;span class="m">0&lt;/span> 3h10m
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="存储secret的使用">存储：Secret的使用&lt;/h2>
&lt;blockquote>
&lt;p>在 &lt;code>secret&lt;/code> 命名空间下，使用镜像 &lt;code> busybox:1.31.1&lt;/code> 创建一个名为 &lt;code>secret-pod&lt;/code> 的 pod，并保证 pod 运行一段时间&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>有个名为 &lt;code>sercret1.yaml&lt;/code> 的 Secret 文件，在 &lt;code>secret&lt;/code> 命名空间下创建 Secret，并以只读的方式挂在到 Pod 的 &lt;code>/tmp/secret1&lt;/code> 目录
创建一个新的 Secret &lt;code>secret2&lt;/code> 包含 &lt;code>user=user1&lt;/code> 和 &lt;code>pass=1234&lt;/code>，分别以缓解变量 &lt;code>APP_USER&lt;/code> 和 &lt;code>APP_PASS&lt;/code> 输入到 Pod 中&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-12">知识点&lt;/h3>
&lt;ul>
&lt;li>secret&lt;/li>
&lt;li>toleration&lt;/li>
&lt;li>taints&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets">https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets&lt;/a>
&lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables">https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables&lt;/a>&lt;/p>
&lt;h3 id="解题思路-12">解题思路&lt;/h3>
&lt;p>创建 namespace&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create ns secret
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pod 模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubectl run secret-pod --image busybox:1.31.1 --dry-run=client -o yaml --command -- sleep 1d &amp;gt; secret-pod.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 secret1.yaml，使用 secret namespace&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">halt&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IyEvYmluL2Jhc2g=&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2021-05-15T07:48:02Z&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Opaque&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 secret2&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create secret generic secret2 --from-literal &lt;span class="nv">user&lt;/span>&lt;span class="o">=&lt;/span>user1 --from-literal &lt;span class="nv">pass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1234&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sleep&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">1d&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox:1.31.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">APP_USER&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">user&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">APP_PASS&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pass&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/secret1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sec&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sec&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl &lt;span class="nb">exec&lt;/span> secret-pod -- cat /tmp/secret1/halt
&lt;span class="c1">#!/bin/bash&lt;/span>
$ kubectl &lt;span class="nb">exec&lt;/span> secret-pod -- env &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;APP_&amp;#39;&lt;/span>
&lt;span class="nv">APP_USER&lt;/span>&lt;span class="o">=&lt;/span>user1
&lt;span class="nv">APP_PASS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1234&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工作负载静态-pod">工作负载：静态 Pod&lt;/h2>
&lt;blockquote>
&lt;p>在 &lt;code>cluster3-master1&lt;/code> 上的 &lt;code>default&lt;/code> 命名空间中创建一个名为 &lt;code>my-static-pod&lt;/code> 的静态 Pod。 使用镜像 &lt;code>nginx:1.16-alpine&lt;/code> 并分配 10m CPU 和 20Mi 内存的资源。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Then create a NodePort Service named static-pod-service which exposes that static Pod on port 80 and check if it has Endpoints and if its reachable through the cluster3-master1 internal IP address. You can connect to the internal node IPs from your main terminal.
然后创建一个名为&lt;code> static-pod-service&lt;/code> 的 NodePort Service，该服务在端口 80 上公开该静态 Pod，并检查它是否具有端点以及是否可以通过 &lt;code>cluster3-master1&lt;/code> 内部 IP 地址访问它。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-13">知识点&lt;/h3>
&lt;ul>
&lt;li>static pod&lt;/li>
&lt;li>resource&lt;/li>
&lt;li>nodeport service&lt;/li>
&lt;li>endpoints&lt;/li>
&lt;/ul>
&lt;p>参考文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/static-pod/">https://kubernetes.io/docs/tasks/configure-pod-container/static-pod/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory">https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-13">解题思路&lt;/h3>
&lt;p>创建pod模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run my-static-pod --image nginx:1.16-alpine --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; static-pod.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改模板，增加资源配置&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-static-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-static-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.16-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-static-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;10m&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;20Mi&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ssh 到主机，找到 kubelet 配置文件的位置 &lt;code>ps -ef | grep kubelet&lt;/code>&lt;/p>
&lt;p>查看配置文件（minikube：/var/lib/kubelet/config.yaml）中 &lt;code>staticPodPath&lt;/code> 配置的就是静态 pod 的 manifest 的位置（minikube：/etc/kubernetes/manifests）&lt;/p>
&lt;p>将 &lt;code>static-pod.yaml&lt;/code> 放到正确的文件夹中，然后重启 kubelet&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查pod是否正确运行&lt;/p>
&lt;p>创建 node port&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl expose pod my-static-pod --name static-pod-service --type NodePort --port &lt;span class="m">80&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否创建成功&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get svc
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
static-pod-service NodePort 10.97.248.99 &amp;lt;none&amp;gt; 80:31938/TCP 68s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 node 的 ip&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get node -o wide
NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME
cka Ready master 10h v1.18.8 192.168.64.3 &amp;lt;none&amp;gt; Buildroot 2020.02.10 4.19.171 docker://20.10.4
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 minikube 的环境下可直接通过 &lt;code>minikube ip&lt;/code> 获取&lt;/p>
&lt;p>测试&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http 192.168.64.3:31938 --headers
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Accept-Ranges: bytes
Connection: keep-alive
Content-Length: &lt;span class="m">612&lt;/span>
Content-Type: text/html
Date: Sat, &lt;span class="m">15&lt;/span> May &lt;span class="m">2021&lt;/span> 08:35:11 GMT
ETag: &lt;span class="s2">&amp;#34;5d52db33-264&amp;#34;&lt;/span>
Last-Modified: Tue, &lt;span class="m">13&lt;/span> Aug &lt;span class="m">2019&lt;/span> 15:45:55 GMT
Server: nginx/1.16.1
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="调度污点和容忍度">调度：污点和容忍度&lt;/h2>
&lt;blockquote>
&lt;p>在命名空间 &lt;code>default&lt;/code> 中创建图像 &lt;code>httpd:2.4.41-alpine&lt;/code> 的单个 Pod。Pod 应命名为 &lt;code>pod1&lt;/code>，容器名为 &lt;code>pod1-container&lt;/code>。在不给任何节点添加新标签的前提下，将该 pod 调度到主节点上。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-14">知识点&lt;/h3>
&lt;ul>
&lt;li>Taint&lt;/li>
&lt;li>Label&lt;/li>
&lt;li>Tolerance&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/&lt;/p>
&lt;h3 id="解题思路-14">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#找出master节点（一般考试只有一个节点）
$ kubectl get node
#找到 master 节点的 taints，需要在 pod 的 .spec.tolerations 排除掉
$ kubectl describe node xxxx | grep -w Taints
#找到 master 节点的 labels
$ kubectl describe node xxxx | grep -w Labels -A10
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建pod模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run pod1 --image httpd:2.4.41-alpine --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; pod1.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改模板： 这里假设主节点的 Taint 为 &lt;code>node-role.kubernetes.io/master=:NoSchedule&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># minikube 集群名为 cka，主节点同名&lt;/span>
$ kubectl describe node cka &lt;span class="p">|&lt;/span> grep -i taint
Taints: node-role.kubernetes.io/master:NoSchedule
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终的 pod 如下&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd:2.4.41-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node-role.kubernetes.io/master&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NoSchedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">node-role.kubernetes.io/master&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后检查下是否调度到主节点上：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -o wide
NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
pod1 1/1 Running &lt;span class="m">0&lt;/span> 102s 10.244.0.3 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubectl-命令和排序">kubectl 命令和排序&lt;/h2>
&lt;blockquote>
&lt;p>所有命名空间中都有各种 Pod。 将命令写入 /opt/course/5/find_pods.sh，其中列出所有按 AGE 排序的 Pod（metadata.creationTimestamp）。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将第二个命令写入 /opt/course/5/find_pods_uid.sh，其中列出按字段 metadata.uid 排序的所有 Pod。对这两个命令都使用 kubectl 排序。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-15">知识点&lt;/h3>
&lt;ul>
&lt;li>kubectl 命令的使用，主要是 &lt;code>--all-namespaces&lt;/code> （缩写 &lt;code>-A&lt;/code>） 和 &lt;code>--sort-by&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-15">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; /opt/course/5/find_pods.sh &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kubectl get pod -A --sort-by &amp;#39;.metadata.creationTimestamp&amp;#39;
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; /opt/course/5/find_pods_uid.sh &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kubectl get pod -A --sort-by &amp;#39;.metadata.uid&amp;#39;
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="存储持久化卷和挂载">存储：持久化卷和挂载&lt;/h2>
&lt;blockquote>
&lt;p>创建一个名为 &lt;code>safari-pv&lt;/code> 的新 &lt;code>PersistentVolume&lt;/code>。它应该具有 2Gi 的容量、&lt;code>accessMode&lt;/code> &lt;code>ReadWriteOnce&lt;/code>、&lt;code>hostPath&lt;/code> &lt;code>/Volumes/Data&lt;/code> 并且没有定义 &lt;code>storageClassName&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>接下来在命名空间 &lt;code>project-tiger&lt;/code> 中创建一个名为 &lt;code>safari-pvc&lt;/code> 的新 &lt;code>PersistentVolumeClaim&lt;/code>。 它应该请求 2Gi 存储，&lt;code>accessMode&lt;/code> &lt;code>ReadWriteOnce&lt;/code> 并且不应定义 &lt;code>storageClassName&lt;/code>。 PVC 应该正确绑定到 PV。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后在命名空间 &lt;code>project-tiger&lt;/code> 中创建一个新的 Deployment &lt;code>safari&lt;/code>，它将该卷挂载到 &lt;code>/tmp/safari-data&lt;/code>。该 Deployment 的 Pod 应该是镜像 httpd:2.4.41-alpine。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-16">知识点&lt;/h3>
&lt;ul>
&lt;li>pv&lt;/li>
&lt;li>pvc&lt;/li>
&lt;li>pod 使用 pvc&lt;/li>
&lt;li>deployment&lt;/li>
&lt;li>mount PVC volume&lt;/li>
&lt;/ul>
&lt;p>参考文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume">https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolumeclaim">https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolumeclaim&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#claims-as-volumes">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#claims-as-volumes&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-16">解题思路&lt;/h3>
&lt;p>创建 pv&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolume&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari-pv&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">local&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">capacity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/Volumes/Data&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pvc&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolumeClaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否绑定成功&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pvc
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE
safari-pvc Bound pvc-d4c15825-2de3-470f-8ed0-9519cacaad21 2Gi RWO standard 24s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 deployment 模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create deployment safari --image httpd:2.4.41-alpine --dry-run&lt;span class="o">=&lt;/span>client -o yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终的yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd:2.4.41-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/safari-data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubectl-命令和-context">kubectl 命令和 context&lt;/h2>
&lt;blockquote>
&lt;p>可以通过 kubectl 上下文从主终端访问多个集群。将所有这些上下文名称写入 /opt/course/1/contexts。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>接下来在 /opt/course/1/context_default_kubectl.sh 中写一个显示当前上下文的命令，该命令应该使用kubectl。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后在 /opt/course/1/context_default_no_kubectl.sh 中写入第二个执行相同操作的命令，但不使用 kubectl。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-17">知识点&lt;/h3>
&lt;p>kubectl config 相关命令的使用&lt;/p>
&lt;h3 id="解题思路-17">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl config get-contexts -o name &amp;gt; /opt/course/1/contexts
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat &amp;gt; /opt/course/1/context_default_kubectl.sh &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kubectl config current-context
&lt;/span>&lt;span class="s">EOF&lt;/span>
chmod +x /opt/course/1/context_default_kubectl.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat ~/.kube/config &lt;span class="p">|&lt;/span> grep current-context &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $2}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工作负载缩容">工作负载：缩容&lt;/h2>
&lt;blockquote>
&lt;p>命名空间 &lt;code>project-c13&lt;/code> 中有两个名为 &lt;code>o3db-*&lt;/code> 的 Pod。 C13 管理层要求将 Pod 缩减为一个副本以节省资源。 记录动作。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-18">知识点&lt;/h3>
&lt;ul>
&lt;li>scale&lt;/li>
&lt;li>deploy&lt;/li>
&lt;li>statefulset&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/zh/docs/tasks/run-application/scale-stateful-set/">https://kubernetes.io/zh/docs/tasks/run-application/scale-stateful-set/&lt;/a>
&lt;a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment">https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment&lt;/a>&lt;/p>
&lt;h3 id="解题思路-18">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl scale &amp;lt;resource&amp;gt; xxx --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>scale 命令需要确认资源类型：deployment/statefulset&lt;/p>
&lt;h2 id="应用就绪和探活">应用就绪和探活&lt;/h2>
&lt;blockquote>
&lt;p>在命名空间 &lt;code>default&lt;/code> 中执行以下操作。为 &lt;code>nginx:1.16.1-alpine&lt;/code> 创建一个名为 &lt;code>ready-if-service-ready&lt;/code> 的 Pod。配置一个 &lt;code>LivenessProbe&lt;/code>，它只是运行 &lt;code>true&lt;/code>。还要配置一个 &lt;code>ReadinessProbe&lt;/code> 来检查 &lt;code>url&lt;/code> &lt;code>http://service-am-i-ready:80&lt;/code> 是否可达，可以使用 &lt;code>wget -T2 -O- http://service-am-i-ready:80&lt;/code>。 启动 Pod 并确认它因为 &lt;code>ReadinessProbe&lt;/code> 而没有准备好。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>创建第二个名为 &lt;code>am-i-ready&lt;/code> 的 Pod 镜像 &lt;code>nginx:1.16.1-alpine&lt;/code>，标签 &lt;code>id:cross-server-ready&lt;/code>。已经存在的服务 &lt;code>service-am-i-ready&lt;/code> 现在应该有第二个 Pod 作为端点。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-19">知识点&lt;/h3>
&lt;ul>
&lt;li>probe&lt;/li>
&lt;li>pod&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&lt;/a>&lt;/p>
&lt;h3 id="解题思路-19">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl run ready-if-service-ready --image nginx:1.16.1-alpine --dry-run=client -o yaml &amp;gt; ready-if-service-ready.yaml
kubectl run am-i-ready --image nginx:1.16.1-alpine --labels id=cross-server-ready --dry-run=client -o yaml &amp;gt; am-i-ready.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加 probes&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready-if-service-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready-if-service-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.16.1-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready-if-service-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">hi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">wget&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">T2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">O-&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">http://service-am-i-ready:80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群控制平面">集群：控制平面&lt;/h2>
&lt;blockquote>
&lt;p>使用 &lt;code>ssh cluster1-master1&lt;/code> ssh 进入主节点。检查 master 组件 kubelet、kube-apiserver、kube-scheduler、kube-controller-manager 和 etcd 如何在 master 节点上启动/安装。还要找出 DNS 应用的名称以及它是如何在主节点上启动/安装的。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将结果写入文件 /opt/course/8/master-components.txt。该文件的结构应如下所示：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># /opt/course/8/master-components.txt
kubelet: [TYPE]
kube-apiserver: [TYPE]
kube-scheduler: [TYPE]
kube-controller-manager: [TYPE]
etcd: [TYPE]
dns: [TYPE] [NAME]
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;blockquote>
&lt;p>Choices of [TYPE] are: not-installed, process, static-pod, pod&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-20">知识点&lt;/h3>
&lt;p>Kubernetes components 的安装方式&lt;/p>
&lt;h3 id="解题思路-20">解题思路&lt;/h3>
&lt;p>当前比较的组件都是以static pod的形式运行的，而 static pod 都是由 Kubelet 管理的，所以从 kubelet 处入手。&lt;/p>
&lt;p>以 minikube 为例：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ps -ef &lt;span class="p">|&lt;/span> grep -w kubelet
root &lt;span class="m">140597&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> May15 ? 00:36:00 /var/lib/minikube/binaries/v1.18.8/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>cka --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64.3
$ systemctl is-active kubelet
active
&lt;span class="c1">#kubelet: process&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据前面进程中的信息，查看 &lt;code>/var/lib/kubelet/config.yaml&lt;/code>中的内容。可以得到：&lt;/p>
&lt;p>etcd: static-pod
kube-apiserver: static-pod
kube-controller-manager: static-pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat /var/lib/kubelet/config.yaml &lt;span class="p">|&lt;/span> grep -i staticpod
staticPodPath: /etc/kubernetes/manifests
ls /etc/kubernetes/manifests
etcd.yaml kube-apiserver.yaml kube-controller-manager.yaml kube-scheduler.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后上下dns，查看下pod，得知 dns: pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -A &lt;span class="p">|&lt;/span> grep dns
kube-system coredns-66bff467f8-6k2br 1/1 Running &lt;span class="m">0&lt;/span> 32h
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后将上面的结果写入到 &lt;code>/opt/course/8/master-components.txt&lt;/code>，不能前功尽弃。&lt;/p>
&lt;h2 id="集群pod-调度">集群：Pod 调度&lt;/h2>
&lt;blockquote>
&lt;p>使用 &lt;code>ssh cluster2-master1&lt;/code> ssh 进入主节点。暂时停止 &lt;code>kube-scheduler&lt;/code>，这意味着可以在之后再次启动它。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>为镜像 &lt;code>httpd:2.4-alpine&lt;/code> 创建一个名为 &lt;code>manual-schedule&lt;/code> 的 Pod，确认它已启动但未在任何节点上调度。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>现在您是调度程序并拥有所有权力，在节点 &lt;code>cluster2-master1&lt;/code> 上手动调度该 Pod。 确保它正在运行。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>再次启动 &lt;code>kube-scheduler&lt;/code> 并通过在镜像 &lt;code>httpd:2.4-alpine&lt;/code> 创建第二个名为 &lt;code>manual-schedule2&lt;/code> 的 Pod 并检查它是否在 &lt;code>cluster2-worker1&lt;/code> 上运行来确认其运行正常。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-21">知识点&lt;/h3>
&lt;ul>
&lt;li>kubernetes 组件的运行方式&lt;/li>
&lt;li>创建 pod&lt;/li>
&lt;li>pod 调度&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-21">解题思路&lt;/h3>
&lt;p>kube-scheduler 是以 static pod 的方式运行，因此我们需要 ssh 到节点上，将 scheduler 的 yaml 移出（记住不要删掉，还要还原回去），重启 kubelet&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ps -ef &lt;span class="p">|&lt;/span> grep -w kubelet
root &lt;span class="m">140597&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> May15 ? 00:36:00 /var/lib/minikube/binaries/v1.18.8/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>cka --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64.3
$ cat /var/lib/kubelet/config.yaml &lt;span class="p">|&lt;/span> grep -i staticpod
staticPodPath: /etc/kubernetes/manifests
$ ls /etc/kubernetes/manifests
etcd.yaml kube-apiserver.yaml kube-controller-manager.yaml kube-scheduler.yaml
$ mv /etc/kubernetes/manifests/kube-scheduler.yaml /etc/kubernetes
$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查下 schedule pod 没有运行，然后尝试创建 pod，并查看 pod 处于 pending 状态，即没有 kube-scheduler 为其调度。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run manual-schedule --image httpd:2.4-alpine
$ kubectl get pod &lt;span class="p">|&lt;/span> grep manual-schedule
manual-schedule 0/1 Pending &lt;span class="m">0&lt;/span> 16s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>手动调度，即为 pod 指定一个 &lt;code>nodeName&lt;/code>，我的 minikube 只有一个 node 名为 cka，修改pod：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod manual-schedule -o yaml &amp;gt; manual-schedule.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加 nodeName 之后&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2021-05-16T07:27:16Z&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dev&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resourceVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;84805&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selfLink&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/api/v1/namespaces/dev/pods/manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uid&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">c4b592f6-1e07-4911-a7fe-867d813c7a55&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd:2.4-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationMessagePath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/dev/termination-log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationMessagePolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">File&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/run/secrets/kubernetes.io/serviceaccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-token-v7f28&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readOnly&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cka&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#node name here&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enableServiceLinks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">priority&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">schedulerName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-scheduler&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">securityContext&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccount&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccountName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationGracePeriodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NoExecute&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node.kubernetes.io/not-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Exists&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerationSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">300&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NoExecute&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node.kubernetes.io/unreachable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Exists&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerationSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">300&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-token-v7f28&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">defaultMode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">420&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-token-v7f28&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">phase&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pending&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">qosClass&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">BestEffort&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>强制更新 pod（运行时只能修改部分内容）：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl replace -f manual-schedule.yaml --force
pod &lt;span class="s2">&amp;#34;manual-schedule&amp;#34;&lt;/span> deleted
pod/manual-schedule replaced
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再次检查&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod &lt;span class="p">|&lt;/span> grep manual-schedule
manual-schedule 1/1 Running &lt;span class="m">0&lt;/span> 15s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>恢复 kube-scheduler 的运行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ mv /etc/kubernetes/kube-scheduler.yaml /etc/kubernetes/manifests
$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否运行&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -A &lt;span class="p">|&lt;/span> grep kube-scheduler
kube-system kube-scheduler-cka 1/1 Running &lt;span class="m">0&lt;/span> 66s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建第二个pod，并检查是否在运行（running）状态&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run manual-schedule2 --image httpd:2.4-alpine
pod/manual-schedule2 created
kubectl get pod manual-schedule2
NAME READY STATUS RESTARTS AGE
manual-schedule2 1/1 Running &lt;span class="m">0&lt;/span> 6s
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群备份及恢复-1">集群：备份及恢复&lt;/h2>
&lt;blockquote>
&lt;p>对在 &lt;code>cluster3-master1&lt;/code> 上运行的 etcd 进行备份，并将其保存在主节点上的 &lt;code>/tmp/etcd-backup.db&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>然后在集群中创建一个你喜欢的 Pod。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后恢复备份，确认集群仍在工作并且创建的 Pod 不再与我们在一起。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-22">知识点&lt;/h3>
&lt;ul>
&lt;li>etc 的作用：存储集群的状态信息，包括 pod 信息&lt;/li>
&lt;li>etc 的备份和恢复&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster">https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster&lt;/a>&lt;/p>
&lt;h3 id="解题思路-22">解题思路&lt;/h3>
&lt;p>etcd的命令执行，记得设置API的版本 &lt;code>ETCDCTL_API=3&lt;/code>&lt;/p>
&lt;p>操作 etcd 需要 &lt;code>endpoints&lt;/code>、&lt;code>cacert&lt;/code>、&lt;code>cert&lt;/code>、&lt;code>key&lt;/code>。Kubernetes 的所有组件与 etcd 的数据交互都是通过 api-server 完成的，我只需要找到 api-server 的运行命令就行，两种方式：到 master 主机查看 api-server 的进程；或者去 api-server 的 pod 查看 &lt;code>.spec.containers[].command&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#ssh to master&lt;/span>
$ ps -ef &lt;span class="p">|&lt;/span> grep kube-apiserver
$ kubectl get pod -n kube-system kube-apiserver-cka -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.spec.containers[].command}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>etcd 备份，命令直接从 Kubernetes 官方文档复制再修改&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#ssh to master&lt;/span>
&lt;span class="nv">$ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl --endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt --cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt --key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> snapshot save /tmp/etcd-backup.db
Snapshot saved at /tmp/etcd-backup.db
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run sleep1d --image busybox --command -- sleep 1d
&lt;span class="c1">#检查 pod 运行情况&lt;/span>
$ kubectl get pod
NAME READY STATUS RESTARTS AGE
sleep1d 1/1 Running &lt;span class="m">0&lt;/span> 10s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>恢复 etcd 的备份，复制前面的命令并修改，恢复备份到 &lt;code>/var/lib/etcd-backup&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ &lt;span class="nv">ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl --endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 --cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt --cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt --key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key snapshot restore /tmp/etcd-backup.db --data-dir /var/lib/etcd-backup
2021-05-16 08:09:17.797061 I &lt;span class="p">|&lt;/span> mvcc: restore compact to &lt;span class="m">85347&lt;/span>
2021-05-16 08:09:17.803208 I &lt;span class="p">|&lt;/span> etcdserver/membership: added member 8e9e05c52164694d &lt;span class="o">[&lt;/span>http://localhost:2380&lt;span class="o">]&lt;/span> to cluster cdf818194e3a8c32
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 etcd 的配置， &lt;code>/etc/kubernetes/manifests/etcd.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/lib/minikube/certs/etcd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DirectoryOrCreate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">etcd-certs&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/lib/etcd-backup &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#原来是/var/lib/minikube/etcd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DirectoryOrCreate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">etcd-data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存后重启kubelet&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查pod是否存在：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod sleep1d
Error from server &lt;span class="o">(&lt;/span>NotFound&lt;span class="o">)&lt;/span>: pods &lt;span class="s2">&amp;#34;sleep1d&amp;#34;&lt;/span> not found
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安全网络策略">安全：网络策略&lt;/h2>
&lt;blockquote>
&lt;p>发生了一起安全事件，入侵者能够从一个被黑的后端 Pod 访问整个集群。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>为了防止这种情况，在命名空间 &lt;code>project-snake&lt;/code> 中创建一个名为 &lt;code>np-backend&lt;/code> 的 &lt;code>NetworkPolicy&lt;/code>。它应该只允许 &lt;code>backend-*&lt;/code> Pods：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>连接到端口 &lt;code>1111&lt;/code> 上的 &lt;code>db1-*&lt;/code> Pod
连接到端口 &lt;code>2222&lt;/code> 上的 &lt;code>db2-*&lt;/code> Pod
在策略中使用 Pod 的应用程序标签。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>实施后，例如，端口 3333 上从 &lt;code>backend-*&lt;/code> Pod 到 &lt;code>vault-*&lt;/code> Pod 的连接应该不再有效。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-23">知识点&lt;/h3>
&lt;ul>
&lt;li>NetworkPolicy&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies">https://kubernetes.io/docs/concepts/services-networking/network-policies&lt;/a>&lt;/p>
&lt;h3 id="解题思路-23">解题思路&lt;/h3>
&lt;p>为 backend-* pod 设置 egress 的 NetworkPolicy，只允许其访问 db1-* 的 1111 端口和 db2-* 的 2222 端口，策略中使用 app label 来进行匹配。&lt;/p>
&lt;p>从 Kubernetes 官网文档中复制一段yaml配置进行修改。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NetworkPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">np-backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">project-snake&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policyTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Egress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">egress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1111&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db2 &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2222&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设 backend pod 的 app label 为 backend，db1 的 为 db1，db2 的为 db2。&lt;/p>
&lt;p>创建环境：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run backend --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>backend
$ kubectl run db1 --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>db1
$ kubectl run db2 --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>db2
$ kubectl run vault --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>vault
$ kubectl get pod -L app
NAME READY STATUS RESTARTS AGE APP
backend 1/1 Running &lt;span class="m">0&lt;/span> 13s backend
db1 1/1 Running &lt;span class="m">0&lt;/span> 66s db1
db2 1/1 Running &lt;span class="m">0&lt;/span> 71s db2
vault 1/1 Running &lt;span class="m">0&lt;/span> 79s vault
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于我们用的 nginx 镜像，将前面的 NetworkPolicy 端口修改一下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NetworkPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">np-backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policyTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Egress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">egress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db2 &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查一下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get networkpolicy
NAME POD-SELECTOR AGE
np-backend &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>backend 31s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试下网络：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#获取pod ip&lt;/span>
$ kubectl get pod -o wide
NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
backend 1/1 Running &lt;span class="m">0&lt;/span> 3m15s 172.17.0.7 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
db1 1/1 Running &lt;span class="m">0&lt;/span> 4m8s 172.17.0.6 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
db2 1/1 Running &lt;span class="m">0&lt;/span> 4m13s 172.17.0.3 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
vault 1/1 Running &lt;span class="m">0&lt;/span> 4m21s 172.17.0.4 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群kubelet-启动方式">集群：kubelet 启动方式&lt;/h2>
&lt;blockquote>
&lt;p>节点 &lt;code>cluster2-worker1&lt;/code> 已使用 kubeadm 和 TLS 引导添加到集群中。
找到 &lt;code>cluster2-worker1&lt;/code> 的 “Issuer” 和 “Extended Key Usage” 值：
kubelet 客户端证书，用于向外连接到 kube-apiserver 的证书。
kubelet 服务器证书，用于来自 kube-apiserver 的传入连接。
将信息写入文件 &lt;code>/opt/course/23/certificate-info.txt&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="知识点-24">知识点&lt;/h2>
&lt;ul>
&lt;li>kubelet 的功能：连接 api-server；接受来自 api-server 的响应。两种情况都需要 TLS&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-24">解题思路&lt;/h3>
&lt;p>kubelet 连接 apiserver 的方式在配置文件中，先找出配置文件的保存位置。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># ssh 到节点上，查看 kubelet 的启动命令&lt;/span>
$ ps -ef &lt;span class="p">|&lt;/span> grep kubelet
root &lt;span class="m">3935&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 12:54 ? 00:00:23 /var/lib/minikube/binaries/v1.20.0/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --cni-conf-dir&lt;span class="o">=&lt;/span>/etc/cni/net.mk --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>cka-m02 --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --network-plugin&lt;span class="o">=&lt;/span>cni --node-ip&lt;span class="o">=&lt;/span>192.168.64.9
docker &lt;span class="m">13653&lt;/span> &lt;span class="m">13616&lt;/span> &lt;span class="m">0&lt;/span> 13:22 pts/0 00:00:00 grep kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#kubelet 连接 api server 的信息， client cert 的配置所在 /var/lib/kubelet/pki/kubelet-client-current.pem&lt;/span>
cat /var/lib/kubelet/config.yaml
&lt;span class="c1">#kubelet 的启动信息， servert cert 的配置所在 /var/lib/minikube/certs/ca.crt&lt;/span>
cat /etc/kubernetes/kubelet.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ openssl x509 -noout -text -in /var/lib/kubelet/pki/kubelet-client-current.pem &lt;span class="p">|&lt;/span> grep -i issuer
Issuer: &lt;span class="nv">CN&lt;/span> &lt;span class="o">=&lt;/span> minikubeCA
$ openssl x509 -noout -text -in /var/lib/kubelet/pki/kubelet-client-current.pem &lt;span class="p">|&lt;/span> grep -i -A1 extended
X509v3 Extended Key Usage:
TLS Web Client Authentication
$ openssl x509 -noout -text -in /var/lib/minikube/certs/ca.crt &lt;span class="p">|&lt;/span> grep -i issuer
Issuer: &lt;span class="nv">CN&lt;/span> &lt;span class="o">=&lt;/span> minikubeCA
$ openssl x509 -noout -text -in /var/lib/minikube/certs/ca.crt &lt;span class="p">|&lt;/span> grep -i -A1 extended
X509v3 Extended Key Usage:
TLS Web Client Authentication, TLS Web Server Authentication
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后记得将信息写入到 &lt;code>/opt/course/23/certificate-info.txt&lt;/code>&lt;/p>
&lt;h2 id="集群证书">集群：证书&lt;/h2>
&lt;blockquote>
&lt;p>检查 kube-apiserver 服务器证书在 &lt;code>cluster2-master1&lt;/code> 上的有效期。使用 openssl 或 cfssl 执行此操作。将到期日期写入 &lt;code>/opt/course/22/expiration&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>同时运行正确的 kubeadm 命令以列出到期日期并确认两种方法显示相同的日期。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将更新 apiserver 服务器证书的正确 kubeadm 命令写入 &lt;code>/opt/course/22/kubeadm-renew-certs.sh&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-25">知识点&lt;/h3>
&lt;ul>
&lt;li>api-server&lt;/li>
&lt;li>openssl&lt;/li>
&lt;li>kubeadm&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/#check-certificate-expiration&lt;/p>
&lt;h3 id="解题思路-25">解题思路&lt;/h3>
&lt;p>通过 kube-apiserver pod 的启动命令，或者 ssh 到 master 来查看命令参数，&lt;code>tls-cert-file=/var/lib/minikube/certs/apiserver.crt&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ openssl x509 -noout -text -in /var/lib/minikube/certs/apiserver.crt &lt;span class="p">|&lt;/span> grep -i valid -A2
Validity
Not Before: May &lt;span class="m">13&lt;/span> 22:33:43 &lt;span class="m">2021&lt;/span> GMT
Not After : May &lt;span class="m">14&lt;/span> 22:33:43 &lt;span class="m">2022&lt;/span> GMT
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 &lt;code>May 14 22:33:43 2022 GMT&lt;/code> 写入 &lt;code>/opt/course/22/expiration&lt;/code>&lt;/p>
&lt;p>通过 kubeadm 来检查&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubeadm certs check-expiration | grep -i apiserver
#macos 无法安装 kubeadm
#minikube 无法使用 kubeadm 检查
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 &lt;code>kubeadm certs renew apiserver&lt;/code> 写入 /opt/course/22/kubeadm-renew-certs.sh&lt;/p>
&lt;h2 id="集群升级节点">集群：升级节点&lt;/h2>
&lt;blockquote>
&lt;p>你的同事说节点 &lt;code>cluster3-worker2&lt;/code> 运行的是较旧的 Kubernetes 版本，甚至不属于集群的一部分。将 kubectl 和 kubeadm 更新为在 &lt;code>cluster3-master1&lt;/code> 上运行的确切版本。然后将此节点添加到集群中，您可以为此使用kubeadm。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-26">知识点&lt;/h3>
&lt;ul>
&lt;li>kubeadm 升级集群&lt;/li>
&lt;/ul>
&lt;p>参考文档：&lt;/p>
&lt;h3 id="解题思路-26">解题思路&lt;/h3>
&lt;p>检查node&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get nodes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查当前组件版本&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ssh cluster3-worker2
$ kubeadm version
$ kubectl version --short
Client Version: vx.xx.x
Server Version: vx.xx.x
$ kubelet --version
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#使用命令并升级各个组件，并重启 kubelet
#如果启动失败，一般是需要token连接到api-server，需要ssh到master上运行 kubeadm create token --print-join-command
#再ssh到 node上，执行打印的命令，重启kubelet并检查装填
#最后检查node是否成功加入集群
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-命令">Docker 命令&lt;/h2>
&lt;blockquote>
&lt;p>在命名空间 &lt;code>project-tiger&lt;/code> 中创建一个名为 &lt;code>Tigers-reunite&lt;/code> 的 Pod 镜像 &lt;code>httpd:2.4.41-alpine&lt;/code>，标签为 &lt;code>pod=container&lt;/code> 和 &lt;code>container=pod&lt;/code>。找出 Pod 被安排在哪个节点上。ssh 进入该节点并找到属于该 Pod 的 docker 容器。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将容器的 docker ID 和这些正在运行的进程/命令写入 &lt;code>/opt/course/17/pod-container.txt&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后，使用 docker 命令将主 Docker 容器（来自 yaml 中指定的那个）的日志写入 &lt;code>/opt/course/17/pod-container.log&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-27">知识点&lt;/h3>
&lt;ul>
&lt;li>docker 命令：ps、logs、inspect&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-27">解题思路&lt;/h3>
&lt;p>创建 pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run tigers-reunite --image httpd:2.4.41-alpine --labels &lt;span class="nv">pod&lt;/span>&lt;span class="o">=&lt;/span>container,container&lt;span class="o">=&lt;/span>pod
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查 pod 的信息&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pods --show-labels
NAME READY STATUS RESTARTS AGE LABELS
tigers-reunite 1/1 Running &lt;span class="m">0&lt;/span> 34s &lt;span class="nv">container&lt;/span>&lt;span class="o">=&lt;/span>pod,pod&lt;span class="o">=&lt;/span>container
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取pod所在的节点&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod tigers-reunite -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.spec.nodeName}&amp;#39;&lt;/span>
cka
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ssh到节点上&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker ps &lt;span class="p">|&lt;/span> grep tigers-reunite
e6ff69b437bc 54b0995a6305 &lt;span class="s2">&amp;#34;httpd-foreground&amp;#34;&lt;/span> About a minute ago Up About a minute k8s_tigers-reunite_tigers-reunite_dev_53391212-911d-4275-a19d-e8f8b0f85a98_0
06d3ca65eb08 k8s.gcr.io/pause:3.2 &lt;span class="s2">&amp;#34;/pause&amp;#34;&lt;/span> About a minute ago Up About a minute k8s_POD_tigers-reunite_dev_53391212-911d-4275-a19d-e8f8b0f85a98_0
&lt;span class="c1">#使用docker inspect 或者 进入容器直接查看进程&lt;/span>
$ docker inspect e6ff69b437bc &lt;span class="p">|&lt;/span> grep -i &lt;span class="s1">&amp;#39;cmd\|entrypoint&amp;#39;&lt;/span> -A1
&lt;span class="s2">&amp;#34;Cmd&amp;#34;&lt;/span>: &lt;span class="o">[&lt;/span>
&lt;span class="s2">&amp;#34;httpd-foreground&amp;#34;&lt;/span>
--
&lt;span class="s2">&amp;#34;Entrypoint&amp;#34;&lt;/span>: null,
&lt;span class="s2">&amp;#34;OnBuild&amp;#34;&lt;/span>: null,
$ docker inspect 06d3ca65eb08 &lt;span class="p">|&lt;/span> grep -i &lt;span class="s1">&amp;#39;cmd\|entrypoint&amp;#39;&lt;/span> -A1
&lt;span class="s2">&amp;#34;Cmd&amp;#34;&lt;/span>: null,
&lt;span class="s2">&amp;#34;Image&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;k8s.gcr.io/pause:3.2&amp;#34;&lt;/span>,
--
&lt;span class="s2">&amp;#34;Entrypoint&amp;#34;&lt;/span>: &lt;span class="o">[&lt;/span>
&lt;span class="s2">&amp;#34;/pause&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果写入文件&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">e6ff69b437bc httpd-foreground
06d3ca65eb08 pause
&lt;/code>&lt;/pre>&lt;/div>&lt;p>写日志到文件&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="l">docker logs e6ff69b437bc &amp;gt; /opt/course/17/pod-container.log&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>常用的几款工具让 Kubernetes 集群上的工作更容易</title><link>https://atbug.com/tools-accelerate-work-on-kubernetes-cluster/</link><pubDate>Sat, 26 Jun 2021 12:16:28 +0800</pubDate><guid>https://atbug.com/tools-accelerate-work-on-kubernetes-cluster/</guid><description>
&lt;p>之前写过一篇 &lt;a href="https://mp.weixin.qq.com/s/CXJ1zUoktdI3c3CHVju0gA">介绍了工具加速云原生 Java 开发&lt;/a>。&lt;/p>
&lt;p>其实日常工作中在集群上的操作也非常多，今天就来介绍我所使用的工具。&lt;/p>
&lt;h2 id="kubectl-alias">kubectl-alias&lt;/h2>
&lt;p>使用频率最高的工具，我自己稍微修改了一下，加入了 &lt;code>StatefulSet&lt;/code> 的支持。&lt;/p>
&lt;p>这个是我的 &lt;a href="https://github.com/addozhang/kubectl-aliases">https://github.com/addozhang/kubectl-aliases&lt;/a>，基于 &lt;a href="https://github.com/ahmetb/kubectl-aliases">https://github.com/ahmetb/kubectl-aliases&lt;/a>。&lt;/p>
&lt;p>比如输出某个 pod 的 json，&lt;code>kgpoojson xxx&lt;/code> 等同于 &lt;code>kubectl get pod xxx -o json&lt;/code>。&lt;/p>
&lt;p>结合 &lt;a href="https://stedolan.github.io/jq/">jq&lt;/a> 使用效果更好 😂。&lt;/p>
&lt;h3 id="语法解读">语法解读&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;code>k&lt;/code>&lt;/strong>=&lt;code>kubectl&lt;/code>
&lt;ul>
&lt;li>&lt;strong>&lt;code>sys&lt;/code>&lt;/strong>=&lt;code>--namespace kube-system&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>commands:
&lt;ul>
&lt;li>&lt;strong>&lt;code>g&lt;/code>&lt;/strong>=&lt;code>get&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>d&lt;/code>&lt;/strong>=&lt;code>describe&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>rm&lt;/code>&lt;/strong>=&lt;code>delete&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>a&lt;/code>&lt;/strong>:&lt;code>apply -f&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>ak&lt;/code>&lt;/strong>:&lt;code>apply -k&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>k&lt;/code>&lt;/strong>:&lt;code>kustomize&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>ex&lt;/code>&lt;/strong>: &lt;code>exec -i -t&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>lo&lt;/code>&lt;/strong>: &lt;code>logs -f&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>resources:
&lt;ul>
&lt;li>&lt;strong>&lt;code>po&lt;/code>&lt;/strong>=pod, &lt;strong>&lt;code>dep&lt;/code>&lt;/strong>=&lt;code>deployment&lt;/code>, &lt;strong>&lt;code>ing&lt;/code>&lt;/strong>=&lt;code>ingress&lt;/code>, &lt;strong>&lt;code>svc&lt;/code>&lt;/strong>=&lt;code>service&lt;/code>, &lt;strong>&lt;code>cm&lt;/code>&lt;/strong>=&lt;code>configmap&lt;/code>, &lt;strong>&lt;code>sec&lt;/code>=&lt;code>secret&lt;/code>&lt;/strong>,&lt;strong>&lt;code>ns&lt;/code>&lt;/strong>=&lt;code>namespace&lt;/code>, &lt;strong>&lt;code>no&lt;/code>&lt;/strong>=&lt;code>node&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>flags:
&lt;ul>
&lt;li>output format: &lt;strong>&lt;code>oyaml&lt;/code>&lt;/strong>, &lt;strong>&lt;code>ojson&lt;/code>&lt;/strong>, &lt;strong>&lt;code>owide&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>all&lt;/code>&lt;/strong>: &lt;code>--all&lt;/code> or &lt;code>--all-namespaces&lt;/code> depending on the command&lt;/li>
&lt;li>&lt;strong>&lt;code>sl&lt;/code>&lt;/strong>: &lt;code>--show-labels&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>w&lt;/code>&lt;/strong>=&lt;code>-w/--watch&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>value flags (should be at the end):
&lt;ul>
&lt;li>&lt;strong>&lt;code>n&lt;/code>&lt;/strong>=&lt;code>-n/--namespace&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>f&lt;/code>&lt;/strong>=&lt;code>-f/--filename&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>l&lt;/code>&lt;/strong>=&lt;code>-l/--selector&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="kubectx--kubens">kubectx + kubens&lt;/h2>
&lt;p>&lt;a href="https://github.com/ahmetb/kubectx#installation">安装看这里&lt;/a>&lt;/p>
&lt;p>&lt;code>kubectx&lt;/code> 用于在不同的集群间进行快速切换。假如用 &lt;code>kubectl&lt;/code>，你需要：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># context 列表&lt;/span>
kubectl config current-context
&lt;span class="c1"># 设置 context&lt;/span>
kubectl config use-context coffee
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/kubectxdemo.gif" alt="kubectx-demo">&lt;/p>
&lt;p>&lt;code>kubens&lt;/code> 就是在不同 namespace 间快速切换的工具。用 &lt;code>kubectl&lt;/code> 的话，需要：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># namespace 列表&lt;/span>
kbuectl get ns
&lt;span class="c1"># kubectl config set-context --current --namespace=kube-system&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/kubensdemo.gif" alt="kubens-demo">&lt;/p>
&lt;h2 id="k9s">k9s&lt;/h2>
&lt;p>没错，只比 k8s 多了个 1 😂。&lt;/p>
&lt;p>&lt;a href="https://github.com/derailed/k9s">k9s&lt;/a> 提供了终端 UI 与 Kubernetes 集群进行编辑交互。本人常用的比如：&lt;/p>
&lt;ul>
&lt;li>&lt;code>F&lt;/code> 配置端口转发&lt;/li>
&lt;li>&lt;code>l&lt;/code> 输出 pod 日志&lt;/li>
&lt;li>&lt;code>e&lt;/code> 修改资源对象&lt;/li>
&lt;li>&lt;code>s&lt;/code> pod 终端交互模式&lt;/li>
&lt;li>&lt;code>y&lt;/code> yaml 方式输出资源对象&lt;/li>
&lt;li>&lt;code>d&lt;/code> describe 资源对象&lt;/li>
&lt;li>&lt;code>ctrl+d&lt;/code> 删除 pod&lt;/li>
&lt;/ul>
&lt;p>启动方式&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 指定 namespace 运行&lt;/span>
k9s -n mycoolns
&lt;span class="c1"># 指定 context 运行&lt;/span>
k9s --context coolCtx
&lt;span class="c1"># 只读模式运行&lt;/span>
k9s --readonly
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/20210626102731.png" alt="k9s-pod">&lt;/p>
&lt;p>键入问号“?” 就可以打开快捷操作指引。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/20210626103012.png" alt="help">&lt;/p>
&lt;h2 id="stern">stern&lt;/h2>
&lt;p>&lt;a href="https://github.com/wercker/stern">stern&lt;/a> 可以用来 &lt;code>tail&lt;/code> 集群上的多个 pod 和 pod 中多个容器的日志。不同的 pod 和容器以不同的颜色区分，方便 debug。&lt;/p>
&lt;p>比如使用命令 &lt;code>stern -l tier=control-plane -n kube-system&lt;/code> 可以输出 &lt;code>kube-system&lt;/code> 命名空间下控制平面（&lt;code>label&lt;/code> 为 &lt;code>tier=control-plane&lt;/code>） pod 的日志。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/20210626104458.png" alt="stern-control-plane">&lt;/p>
&lt;p>命令行选项&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">Tail multiple pods and containers from Kubernetes
Usage:
stern pod-query &lt;span class="o">[&lt;/span>flags&lt;span class="o">]&lt;/span>
Flags:
-A, --all-namespaces If present, tail across all namespaces. A specific namespace is ignored even &lt;span class="k">if&lt;/span> specified with --namespace.
--color string Color output. Can be &lt;span class="s1">&amp;#39;always&amp;#39;&lt;/span>, &lt;span class="s1">&amp;#39;never&amp;#39;&lt;/span>, or &lt;span class="s1">&amp;#39;auto&amp;#39;&lt;/span> &lt;span class="o">(&lt;/span>default &lt;span class="s2">&amp;#34;auto&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
--completion string Outputs stern command-line completion code &lt;span class="k">for&lt;/span> the specified shell. Can be &lt;span class="s1">&amp;#39;bash&amp;#39;&lt;/span> or &lt;span class="s1">&amp;#39;zsh&amp;#39;&lt;/span>
-c, --container string Container name when multiple containers in pod &lt;span class="o">(&lt;/span>default &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
--container-state string If present, tail containers with status in running, waiting or terminated. Default to running. &lt;span class="o">(&lt;/span>default &lt;span class="s2">&amp;#34;running&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
--context string Kubernetes context to use. Default to current context configured in kubeconfig.
-e, --exclude strings Regex of log lines to exclude
-E, --exclude-container string Exclude a Container name
--field-selector string Selector &lt;span class="o">(&lt;/span>field query&lt;span class="o">)&lt;/span> to filter on. If present, default to &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> the pod-query.
-h, --help &lt;span class="nb">help&lt;/span> &lt;span class="k">for&lt;/span> stern
-i, --include strings Regex of log lines to include
--init-containers Include or exclude init containers &lt;span class="o">(&lt;/span>default &lt;span class="nb">true&lt;/span>&lt;span class="o">)&lt;/span>
--kubeconfig string Path to kubeconfig file to use
-n, --namespace strings Kubernetes namespace to use. Default to namespace configured in Kubernetes context. To specify multiple namespaces, repeat this or &lt;span class="nb">set&lt;/span> comma-separated value.
-o, --output string Specify predefined template. Currently support: &lt;span class="o">[&lt;/span>default, raw, json&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>default &lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
-l, --selector string Selector &lt;span class="o">(&lt;/span>label query&lt;span class="o">)&lt;/span> to filter on. If present, default to &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> the pod-query.
-s, --since duration Return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to 48h.
--tail int The number of lines from the end of the logs to show. Defaults to -1, showing all logs. &lt;span class="o">(&lt;/span>default -1&lt;span class="o">)&lt;/span>
--template string Template to use &lt;span class="k">for&lt;/span> log lines, leave empty to use --output flag
-t, --timestamps Print timestamps
--timezone string Set timestamps to specific timezone &lt;span class="o">(&lt;/span>default &lt;span class="s2">&amp;#34;Local&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
-v, --version Print the version and &lt;span class="nb">exit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="lens">Lens&lt;/h2>
&lt;p>&lt;a href="https://k8slens.dev/">Lens&lt;/a> 是用来控制 Kubernetes 的 IDE，开源且免费。&lt;/p>
&lt;p>消除了集群操作的复杂性、提供了实时的可观察性、方便故障排查、支持多系统的桌面客户端、兼容多种集群。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/20210626113853.png" alt="Lens">&lt;/p>
&lt;h2 id="infra-app">Infra App&lt;/h2>
&lt;p>&lt;a href="https://infra.app/">Infra App&lt;/a> 跟 Lens 差不多，UI 较 Lens 好些，但是功能就弱很多，类似 Lens 的只读模式。&lt;/p>
&lt;p>免费版比收费版的区别只在于支持的集群数量，免费版只支持一个集群。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/20210626114417.png" alt="Infra">&lt;/p>
&lt;h2 id="kubefwd">kubefwd&lt;/h2>
&lt;p>&lt;a href="https://github.com/txn2/kubefwd">kubefwd&lt;/a>，这个一直有安装但是使用次数寥寥，因为应用之间的访问没有走 service，不过偶尔做些实验的时候会用的上。&lt;/p>
&lt;blockquote>
&lt;p>kubefwd 是一个用于端口转发Kubernetes中指定namespace下的全部或者部分pod的命令行工具。 kubefwd 使用本地的环回IP地址转发需要访问的service，并且使用与service相同的端口。 kubefwd 会临时将service的域条目添加到 /etc/hosts 文件中。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>启动kubefwd后，在本地就能像在Kubernetes集群中一样使用service名字与端口访问对应的应用程序。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/kubefwdani.gif" alt="kubefwd_ani">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/16246803227515.jpg" alt="">&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>善用工具可以提升效率，但并不是不可或缺的。&lt;/p>
&lt;p>如果你有其他的工具，欢迎留言提出。&lt;/p></description></item><item><title>Jenkins 如何与 Kubernetes 集群的 Tekton Pipeline 交互？</title><link>https://atbug.com/jenkins-interact-with-tekton-pipelines-via-plugin/</link><pubDate>Wed, 23 Jun 2021 07:58:45 +0800</pubDate><guid>https://atbug.com/jenkins-interact-with-tekton-pipelines-via-plugin/</guid><description>
&lt;p>本文详细介绍了 Jenkins 如何通过 &lt;a href="https://github.com/jenkinsci/tekton-client-plugin">tekton-client-plugin&lt;/a> 实现与 Kubernetes 上的 Tekton Pipeline 交互，包括 Kubernetes 上安装 Jenkins、Tekton Pipelines 等。&lt;/p>
&lt;p>关于如何使用 Tekton Pipeline 实现 CICD 可以看这篇文章 &lt;a href="https://atbug.com/tekton-pipeline-practice/">云原生 CICD: Tekton Pipeline 实战&lt;/a>&lt;/p>
&lt;p>本文用于构建的项目以及所有 manifest yaml 都在可以在&lt;a href="https://github.com/addozhang/tekton-test">这里&lt;/a>下载。&lt;/p>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>惯例，先上总结。&lt;code>tekton-client-plugin&lt;/code> 虽然还是处于初期阶段，但是 &lt;em>其价值非常明显，尤其是对先用使用 Jenkins 作为 CICD 实现的用户来说。从 Jenkins 迁移到云原生的 Tekton 时，可以省掉用户界面的开发成本，而且尽可能少的改变用户习惯&lt;/em> ，依靠版本管理可以控制迁移的节奏。&lt;/p>
&lt;p>&lt;code>tekton-client-plugin&lt;/code> 在今年 5 月 7 日发布的 &lt;code>1.0.0&lt;/code> 版本，目前为 &lt;code>1.0.02&lt;/code>。目前还处于初期阶段，我个人感觉目前仅仅算是打通 Jenkins 与 Tekton 交互这条路，扩展性还不够好。&lt;/p>
&lt;p>比如目前仅仅支持如下几个参数注入到 &lt;code>PipelineRun&lt;/code> 中，难以支撑复杂的流程控制，&lt;a href="https://github.com/jenkinsci/tekton-client-plugin/blob/1.0.2/src/main/java/org/waveywaves/jenkins/plugins/tekton/client/build/create/CreateRaw.java#L292">支持的 Pipeline 参数 hardcode 在代码中&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>BUILD_ID - the build id/number of the Jenkins job&lt;/li>
&lt;li>JOB_NAME - the name of the jenkins job that triggered this pipeline&lt;/li>
&lt;li>PULL_BASE_REF - name of the base branch&lt;/li>
&lt;li>PULL_PULL_SHA - the commit sha of the pull request or branch&lt;/li>
&lt;li>REPO_NAME - name of the repository&lt;/li>
&lt;li>REPO_OWNER - owner of the repository&lt;/li>
&lt;li>REPO_URL - the URL of the repository&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>希望后面会支持自定义参数，比如将更多的项目元数据信息注册到 &lt;code>Pipeline&lt;/code> 中。&lt;/p>
&lt;p>值得一提的是，&lt;code>tekton-client-plugin&lt;/code> 提供了对 Job DSL 的支持，本文后面没有用这种方式，而是用的 FreeStyle Project。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">pipeline {
agent any
stages {
stage(&amp;#39;Stage&amp;#39;) {
steps {
checkout scm
tektonCreateRaw(inputType: &amp;#39;FILE&amp;#39;, input: &amp;#39;.tekton/pipeline.yaml&amp;#39;)
}
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="前置条件">前置条件&lt;/h2>
&lt;h3 id="环境">环境&lt;/h3>
&lt;ul>
&lt;li>Kubernetes：推荐 minikube&lt;/li>
&lt;li>Jenkins：建议在 Kubernetes 上安装&lt;/li>
&lt;li>Tekton&lt;/li>
&lt;li>用于构建的项目&lt;/li>
&lt;/ul>
&lt;h3 id="工具">工具&lt;/h3>
&lt;ul>
&lt;li>kubectl&lt;/li>
&lt;li>tektoncd-cli&lt;/li>
&lt;li>&lt;a href="https://github.com/ahmetb/kubectx">kubectx、kubens&lt;/a>&lt;/li>
&lt;li>helm&lt;/li>
&lt;/ul>
&lt;h2 id="kubernetes-上安装-jenkinshelm">Kubernetes 上安装 Jenkins（Helm）&lt;/h2>
&lt;p>Jenkins 这里使用 Helm 安装到 Kubernetes 上。&lt;/p>
&lt;p>初始化命名空间、持久化卷、ServiceAccount 等。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create namespace jenkins
kubens jenkins
&lt;span class="c1"># 持久化存储，笔者将容量修改为 5G&lt;/span>
http https://raw.githubusercontent.com/jenkins-infra/jenkins.io/master/content/doc/tutorials/kubernetes/installing-jenkins-on-kubernetes/jenkins-volume.yaml --body &amp;gt; jenkins-volume.yaml
&lt;span class="c1"># 创建 PV&lt;/span>
kubectl apply -f jenkins-volume.yaml
&lt;span class="c1"># 创建 service account&lt;/span>
kubectl apply -f https://raw.githubusercontent.com/jenkins-infra/jenkins.io/master/content/doc/tutorials/kubernetes/installing-jenkins-on-kubernetes/jenkins-sa.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="准备-helm-环境并添加-jenkins-chartrepo">准备 helm 环境并添加 Jenkins ChartRepo&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># homebrew 安装 helm&lt;/span>
brew install helm
&lt;span class="c1"># 添加 jenkins chart repo&lt;/span>
helm repo add jenkinsci https://charts.jenkins.io
helm repo update
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置-jenkins-chart">配置 Jenkins Chart&lt;/h3>
&lt;ol>
&lt;li>下载官方的 values yaml进行修改：&lt;code>http https://raw.githubusercontent.com/jenkinsci/helm-charts/main/charts/jenkins/values.yaml &amp;gt; jenkins-values.yaml&lt;/code>&lt;/li>
&lt;li>修改 &lt;code>serviceType&lt;/code> 为 &lt;code>NodePort&lt;/code>，并增加 &lt;code>nodePort: 32000&lt;/code>。用于从 minikube 外访问 Jenkins&lt;/li>
&lt;li>修改 &lt;code>storageClass&lt;/code> 为 &lt;code>jenkins-pv&lt;/code>。前面创建 PV 的时候使用了 &lt;code>jenkins-pv&lt;/code> 作为 &lt;a href="https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/">Dynamic Volume Provisioning&lt;/a> 的 &lt;code>storageClass&lt;/code>&lt;/li>
&lt;li>修改 &lt;code>serviceAccount&lt;/code> 部分，将 &lt;code>create&lt;/code> 设置为 &lt;code>false&lt;/code>（上面已经创建了 &lt;code>serviceAccount&lt;/code>），同时将 &lt;code>name&lt;/code> 指定为前面的 sa 名字 &lt;code>jenkins&lt;/code>&lt;/li>
&lt;li>&lt;code>installPlugins&lt;/code> 下增加 &lt;code>tekton-client:1.0.2&lt;/code>&lt;/li>
&lt;li>修改 &lt;code>adminPassword&lt;/code> 为 &lt;code>admin&lt;/code>。指定初始密码（不指定也可以通过安装输出的说明获取初始密码）&lt;/li>
&lt;li>修改 &lt;code>persistence&lt;/code> 的 &lt;code>size&lt;/code> 为 &lt;code>5Gi&lt;/code> （我的 minikube 的虚拟机只有 20Gi 大小）&lt;/li>
&lt;/ol>
&lt;p>修改后的文件在&lt;a href="https://github.com/addozhang/tekton-test/blob/main/tekton-client-sample/jenkins-values.yaml">这里 jenkins-values.yaml&lt;/a>。&lt;/p>
&lt;h3 id="执行安装">执行安装&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">chart&lt;/span>&lt;span class="o">=&lt;/span>jenkinsci/jenkins
helm install jenkins -n jenkins -f jenkins-values.yaml &lt;span class="nv">$chart&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">NAME: jenkins
LAST DEPLOYED: Sun Jun 20 22:05:53 2021
NAMESPACE: jenkins
STATUS: deployed
REVISION: 1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 Jenkins 的访问地址 &lt;code>echo $(minikube ip):$(kubectl get svc jenkins -o jsonpath=&amp;quot;{.spec.ports[0].nodePort}&amp;quot;)&lt;/code>，然后使用前面设置的账号登录。&lt;/p>
&lt;h2 id="tekton-安装">Tekton 安装&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create ns tekton-pipelines
kubens tekton-pipelines
kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-cli">安装 CLI&lt;/h3>
&lt;p>&lt;code>brew install tektoncd-cli&lt;/code>&lt;/p>
&lt;h3 id="rbac">RBAC&lt;/h3>
&lt;p>Tekton Pipeline 安装完成后，需要给前面创建的 ServiceAccount &lt;code>jenkins&lt;/code> 增加 tekon 资源的操作权限。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="l">//tekton-role.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Role&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-role&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">apiGroups&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">pods&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">pods/log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">verbs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">get&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">list&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">watch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">apiGroups&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">tekton.dev&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">tasks&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">taskruns&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">pipelineruns&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">verbs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">create&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">delete&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">deletecollection&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">get&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">list&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">patch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">update&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">watch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">RoleBinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-role-binding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">roleRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Role&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-role&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">subjects&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ServiceAccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jenkins&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jenkins&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="jenkins-与-tekton-交互">Jenkins 与 Tekton 交互&lt;/h2>
&lt;p>前面大篇幅的都只是准备工作，Jenkins 安装时我们已经添加了 &lt;code>tekton-client-plugin&lt;/code> 插件。&lt;/p>
&lt;p>添加一个名为 &lt;code>tekton-client-sample&lt;/code> 的 &lt;code>FreeStyle project&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/22/20210622-151450.png" alt="创建作业">&lt;/p>
&lt;p>SCM 这里填入用于构建的项目仓库地址以及分支。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/22/20210622-151523.png" alt="配置代码仓库">&lt;/p>
&lt;p>Build 模块中选择 &lt;code>Tekton: Create Resource (RAW)&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/22/20210622-151544.png" alt="增加 Tekton step">&lt;/p>
&lt;p>这里选择 &lt;code>FILE&lt;/code> 类型，因为我已经将 &lt;code>PipelineRun&lt;/code> 的 yaml 放进了代码仓库中了。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/22/20210622151734.png" alt="配置 Resource">&lt;/p>
&lt;p>执行一次构建&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/22/20210622153535.png" alt="构建结束">&lt;/p>
&lt;p>检查下应用&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod &lt;span class="p">|&lt;/span> grep tekton-test
tekton-test-75975dcc88-xkzb6 1/1 Running &lt;span class="m">0&lt;/span> 3m13s
tekton-test-c26lw-deploy-to-k8s-28trp-pod-w8tgc 0/1 Completed &lt;span class="m">0&lt;/span> 3m18s
tekton-test-c26lw-fetch-from-git-pv66g-pod-nm5qh 0/1 Completed &lt;span class="m">0&lt;/span> 6m30s
tekton-test-c26lw-source-to-image-k8mpg-pod-qh7g4 0/2 Completed &lt;span class="m">0&lt;/span> 6m15s
$ curl &lt;span class="k">$(&lt;/span>minikube ip&lt;span class="k">)&lt;/span>:&lt;span class="k">$(&lt;/span>kubectl get svc tekton-test -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{.spec.ports[0].nodePort}&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>/hi
hello world
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.jenkins.io/doc/book/installing/kubernetes/">Jenkins on Kubernetes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jenkinsci/tekton-client-plugin/blob/master/docs/tutorial.md">Tekton Client Plugin Tutorial&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jenkins.io/blog/2021/04/21/tekton-plugin/#easily-reuse-tekton-and-jenkins-x-from-jenkins">Easily reuse Tekton and Jenkins X from Jenkins&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>云原生 CICD: Tekton Pipeline 实战</title><link>https://atbug.com/tekton-pipeline-practice/</link><pubDate>Tue, 22 Jun 2021 07:19:33 +0800</pubDate><guid>https://atbug.com/tekton-pipeline-practice/</guid><description>
&lt;p>更新历史：&lt;/p>
&lt;ul>
&lt;li>v1：2020.1.21 基于 Tekton Pipline &lt;a href="https://github.com/tektoncd/pipeline/tree/v0.9.0/docs#tekton-pipelines">v0.9.0&lt;/a>&lt;/li>
&lt;li>v2（当前）：2021.6.22 基于 Tekton Pipeline &lt;a href="https://github.com/tektoncd/pipeline/tree/v0.25.0/docs#tekton-pipelines">v0.25.0&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>Tekton 是 Google 开源的 Kubernetes 原生CI/CD 系统, 功能强大扩展性强. 前身是 Knavite 里的 build-pipeline 项目, 后期孵化成&lt;a href="https://github.com/tektoncd/pipeline">独立的项目&lt;/a>. 并成为 &lt;a href="https://cd.foundation/projects/">CDF&lt;/a> 下的四个项目之一, 其他三个分别是 Jenkins, Jenkins X, Spinnaker.&lt;/p>
&lt;p>为什么说 Tekton 是 Kubernetes 原生的, 以内其基于 Kubernetes 的 CRD 定义了 Pipeline 流水线.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/uPic/bquuTV.jpg" alt="">&lt;/p>
&lt;p>CRD 及说明:&lt;/p>
&lt;ul>
&lt;li>Task: 构建任务, 可以定义一些列的 steps. 每个 step 由一个 container 执行.&lt;/li>
&lt;li>TaskRun: task 实际的执行, 并提供执行所需的参数. 这个对象创建后, 就会有 pod 被创建.&lt;/li>
&lt;li>Pipeline: 定义一个或者多个 task 的执行, 以及 PipelineResource 和各种定义参数的集合&lt;/li>
&lt;li>PipelineRun: 类似 task 和 taskrun 的关系: 一个定义一个执行. PipelineRun 则是 pipeline 的实际执行. 创建后也会创建 pod 来执行各个 task.&lt;/li>
&lt;li>&lt;del>PipelineResource: 流水线的输入资源, 比如 github/gitlab 的源码, 某种存储服务的文件, 或者镜像等. 执行时, 也会作为 pod 的其中一个 container 来运行(比如拉取代码).&lt;/del> PipelineResource 目前处于 Alaha，至于原因可以看&lt;a href="https://github.com/tektoncd/pipeline/blob/v0.25.0/docs/resources.md#why-arent-pipelineresources-in-beta">Why Aren&amp;rsquo;t PipelineResources in Beta?&lt;/a>&lt;/li>
&lt;li>Condition: 在 pipeline 的 task 执行时通过添加 condition 来对条件进行评估, 进而判断是否执行 task. 目前是WIP的状态, 待&lt;a href="https://github.com/tektoncd/pipeline/issues/1137">#1137&lt;/a>的完成.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>组件:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>tekton-pipelines-controller&lt;/code>: 监控 CRD 对象(TaskRun, PipelineRun)的创建, 为该次执行创建 pod.&lt;/li>
&lt;li>&lt;code>tekton-pipelines-webhook&lt;/code>: 对 apiserver 提供 http 接口做 CRD 对象的校验.&lt;/li>
&lt;/ul>
&lt;h2 id="前置条件">前置条件&lt;/h2>
&lt;p>文中使用的一些工具，基本都可以通过 homebrew 安装：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stedolan.github.io/jq/">jq&lt;/a> ：操作 json 的命令行工具&lt;/li>
&lt;li>&lt;a href="https://httpie.io/">httpie&lt;/a>：HTTP 客户端命令行工具&lt;/li>
&lt;li>&lt;a href="https://minikube.sigs.k8s.io/docs/start/">minikube 环境&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>文中的 Java 项目以及 tekton 的相关 yaml 都已经提交到了 &lt;a href="https://github.com/addozhang/tekton-test">tekton-test&lt;/a>.&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>参考&lt;a href="https://atbug.com/tekton-installation-and-sample/">上一篇文章&lt;/a>, 文章中有个简单的&amp;quot;hello world&amp;quot;.&lt;/p>
&lt;h2 id="实践">实践&lt;/h2>
&lt;p>到了这里相信已经安装好了 Tekton. 我们使用&lt;a href="https://start.spring.io/">Spring Initializer&lt;/a>生成的项目为例, 演示如何使用 Tekton 实现 CICD.&lt;/p>
&lt;p>开始之前简单整理下这个项目的 CICD 流程:&lt;/p>
&lt;ol>
&lt;li>拉取代码&lt;/li>
&lt;li>maven 打包&lt;/li>
&lt;li>构建镜像并推送&lt;/li>
&lt;li>部署&lt;/li>
&lt;/ol>
&lt;p>&lt;em>注: 所有的操作都是在 &lt;code>tekton-pipelines&lt;/code> namespace 下操作&lt;/em>&lt;/p>
&lt;h3 id="0x00-添加-dockerfile-和部署用的-yaml">0x00 添加 Dockerfile 和部署用的 yaml&lt;/h3>
&lt;p>用于构建镜像的Dockerfile&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">FROM openjdk:8-jdk-alpine
RUN mkdir /app
WORKDIR /app
COPY target/*.jar /app/app.jar
ENTRYPOINT [&amp;#34;sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;java -Xmx128m -Xms64m -jar app.jar&amp;#34;]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>用于部署 K8s Deployment 的 deployment.yml，同时通过创建 &lt;code>NodePort&lt;/code> 类型的 Service 用于访问应用。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;apps/v1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Deployment&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addozhang/tekton-test:latest&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Always&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/info&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">60&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;TCP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/info&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NodePort &lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x01-rbac">0x01 RBAC&lt;/h3>
&lt;p>创建 ServiceAccount 用于 Pipeline 的运行。&lt;/p>
&lt;p>&lt;strong>注：这里为了方便，授予了 &lt;code>ClusterRole&lt;/code> &lt;code>admin&lt;/code>。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># serviceaccount.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ServiceAccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRoleBinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipeline-admin-binding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">roleRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRole&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">admin&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># user cluster role admin&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">subjects&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ServiceAccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x02-拉取代码">0x02 拉取代码&lt;/h3>
&lt;p>代码作为构建的输入, 需要提供一个 Pipeline CRD 对象来表示输入是从 git 仓库来获取代码。&lt;/p>
&lt;p>访问 Tekton Hub 可以找到现成的 &lt;a href="https://hub.tekton.dev/tekton/task/git-clone">git-clone task&lt;/a>。&lt;/p>
&lt;p>使用 kubectl 安装：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/main/task/git-clone/0.4/git-clone.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者使用 tekton-cli 安装：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">tkn hub install task git-clone
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x03-maven-打包">0x03 maven 打包&lt;/h3>
&lt;p>Task &lt;code>source-to-image.yaml&lt;/code>的 step &lt;code>maven&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven:3.5.0-jdk-8-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workingDir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(workspaces.source.path)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">mvn&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">clean&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">install&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">DskipTests&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/root/.m2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/home/docker/.m2 &lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>说明:&lt;/strong>&lt;/p>
&lt;p>有了代码下一步就是执行 maven 的编译打包, 在&lt;code>maven:3.5.0-jdk-8-alpine&lt;/code>镜像中执行&lt;code>mvn&lt;/code>的相关命令.&lt;/p>
&lt;p>这里挂在了一个本地的volume, 避免每次构建重复下载依赖包, 同时里面还有&lt;code> settings.xml&lt;/code>&lt;/p>
&lt;p>&lt;em>注意: 对于 minikube, hostPath 请使用/data/.m2, 否则minikube重启后无法持久化&lt;/em>&lt;/p>
&lt;h3 id="0x04-构建镜像并推送">0x04 构建镜像并推送&lt;/h3>
&lt;p>Task &lt;code>source-to-image.yaml&lt;/code> 的 step &lt;code>build-and-push&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">spec:
params:
- name: pathToDockerFile
description: The path to the dockerfile to build (relative to the context)
default: Dockerfile
- name: imageUrl
description: Url of image repository
- name: imageTag
description: Tag to apply to the built image
default: latest
workspaces:
- name: source
- name: dockerconfig
mountPath: /kaniko/.docker # config.json 的挂载目录
steps:
- name: build-and-push
image: gcr.io/kaniko-project/executor:v1.6.0-debug
command:
- /kaniko/executor
args:
- --dockerfile=$(params.pathToDockerFile)
- --destination=$(params.imageUrl):$(params.imageTag)
- --context=$(workspaces.source.path)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>说明:&lt;/strong>&lt;/p>
&lt;p>镜像的构建, 我们采用了 kaniko。&lt;/p>
&lt;p>镜像仓库我们选择了Docker Hub, 推送的时候需要使用 credentials。&lt;/p>
&lt;p>kaniko 需要将 docker config 的文件存在于 &lt;code>/kanika/.docker&lt;/code> 目录下。这里的思路是将 docker 的 &lt;code>config.json&lt;/code>，以 &lt;code>secret&lt;/code> 的方式持久化，在通过先添加&lt;code> docker-registry&lt;/code>类型的 &lt;code>secret&lt;/code>，然后通过 &lt;code>workspace&lt;/code> 的方式输入到 kaniko 运行环境中。&lt;/p>
&lt;p>&lt;code>config.json&lt;/code> 里面保存的 json 结构化的数据，为了方便通过 dry run 创建&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create secret docker-registry dockerhub --docker-server&lt;span class="o">=&lt;/span>https://index.docker.io/v1/ --docker-username&lt;span class="o">=[&lt;/span>USERNAME&lt;span class="o">]&lt;/span> --docker-password&lt;span class="o">=[&lt;/span>PASSWORD&lt;span class="o">]&lt;/span> --dry-run&lt;span class="o">=&lt;/span>client -o json &lt;span class="p">|&lt;/span> jq -r &lt;span class="s1">&amp;#39;.data.&amp;#34;.dockerconfigjson&amp;#34;&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> base64 -d &amp;gt; /tmp/config.json &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> kubectl create secret generic docker-config --from-file&lt;span class="o">=&lt;/span>/tmp/config.json &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm -f /tmp/config.json
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>执行:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f tasks/source-to-image.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x05-部署">0x05 部署&lt;/h3>
&lt;p>deploy-to-k8s.yaml:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-to-k8s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">inputs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pathToYamlFile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The path to the yaml file to deploy within the git source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deployment.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">run-kubectl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">lachlanevenson/k8s-kubectl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;kubectl&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;apply&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;-f&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/workspace/git-source/$(inputs.params.pathToYamlFile)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>说明:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>pathToYamlFile: 指定部署应用的 yaml。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>执行:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f tasks/deploy-to-k8s.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x06-组装流水线">0x06 组装流水线&lt;/h3>
&lt;p>&lt;code>build-pipeline.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build-pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pathToContext&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The path to the build context, used by Kaniko - within the workspace&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageUrl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Url of image repository&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageTag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Tag to apply to the built image&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tasks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">fetch-from-git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-clone&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(params.git-url)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(params.git-revision)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">output&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source-to-image&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source-to-image&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageUrl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(params.imageUrl)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageTag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(params.imageTag)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dockerconfig&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runAfter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">fetch-from-git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-to-k8s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-to-k8s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pathToYamlFile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deployment.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runAfter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">source-to-image&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>执行:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f tasks/deploy-to-k8s.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x07-执行流水线">0x07 执行流水线&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PipelineRun&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">generateName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">generic-pr-&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">generic-pipeline-run&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pipelineRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build-pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">main&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.com/addozhang/tekton-test.git &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageUrl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">addozhang/tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageTag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeClaimTemplate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccountName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>执行:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f run/run.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x08-结果">0x08 结果&lt;/h3>
&lt;p>执行流水线后, 可以看到分别创建了下面的几个 pod:&lt;/p>
&lt;ul>
&lt;li>generic-pipeline-run-deploy-to-k8s-xxx&lt;/li>
&lt;li>generic-pipeline-run-fetch-from-git-xxx&lt;/li>
&lt;li>generic-pipeline-run-source-to-image-xxx&lt;/li>
&lt;/ul>
&lt;p>以及我们的应用 &lt;code>tekton-test-xxx&lt;/code>，发起请求测试：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http &lt;span class="k">$(&lt;/span>minikube ip&lt;span class="k">)&lt;/span>:&lt;span class="k">$(&lt;/span>kubectl get svc tekton-test -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{.spec.ports[0].nodePort}&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>/hi --body
hello world
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>目前 Tekton 进入 beta 阶段, 最新的版本是 &lt;code>0.25.0&lt;/code>。基于 CRD 的实现让 Tekton 在实际使用中可以灵活的设计自己的 CICD 流程.&lt;/p>
&lt;p>生态也越来越完善，比如 &lt;a href="https://hub.tekton.dev/">Tekton Hub&lt;/a> 提供了大量的可重用最佳实现的 Task 和 Pipeline。&lt;/p>
&lt;p>下一篇，我们尝试下如何在 Jenkins 中与 Tekton Pipeline 进行交互。&lt;/p>
&lt;p>更多文章:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/_hK6bqODJv3LrwnQaou-hA">Tekton 的工作原理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://atbug.com/tekton-dashboard-installation/">Tekton Dashboard 安装&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://atbug.com/tekton-trigger-glance/">Tekton Trigger 介绍&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://atbug.com/tekton-trigger-practice/">Tekton Trigger 实战&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>源码解析：一文读懂 Kubelet</title><link>https://atbug.com/kubelet-source-code-analysis/</link><pubDate>Tue, 15 Jun 2021 08:25:25 +0800</pubDate><guid>https://atbug.com/kubelet-source-code-analysis/</guid><description>
&lt;p>本文主要介绍 kubelet 功能、核心组件，以及启动流程的源码分析，总结了 kubelet 的工作原理。&lt;/p>
&lt;h2 id="kubelet-简介">kubelet 简介&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/15/20210613091144.png" alt="Kubernetes 的架构图">&lt;/p>
&lt;p>从官方的架构图中很容易就能找到 &lt;code>kubelet&lt;/code>&lt;/p>
&lt;p>执行 &lt;code>kubelet -h&lt;/code> 看到 kubelet 的功能介绍：&lt;/p>
&lt;ul>
&lt;li>kubelet 是每个 Node 节点上都运行的主要“节点代理”。使用如下的一个向 apiserver 注册 Node 节点：主机的 &lt;code>hostname&lt;/code>；覆盖 &lt;code>host&lt;/code> 的参数；或者云提供商指定的逻辑。&lt;/li>
&lt;li>kubelet 基于 &lt;code>PodSpec&lt;/code> 工作。&lt;code>PodSpec&lt;/code> 是用 &lt;code>YAML&lt;/code> 或者 &lt;code>JSON&lt;/code> 对象来描述 Pod。Kubelet 接受通过各种机制（主要是 apiserver）提供的一组 &lt;code>PodSpec&lt;/code>，并确保里面描述的容器良好运行。&lt;/li>
&lt;/ul>
&lt;p>除了由 apiserver 提供 &lt;code>PodSpec&lt;/code>，还可以通过以下方式提供：&lt;/p>
&lt;ul>
&lt;li>文件&lt;/li>
&lt;li>HTTP 端点&lt;/li>
&lt;li>HTTP 服务器&lt;/li>
&lt;/ul>
&lt;p>kubelet 功能归纳一下就是上报 Node 节点信息，和管理（创建、销毁）Pod。 功能看似简单，实际不然。每一个点拿出来都需要很大的篇幅来讲，比如 Node 节点的计算资源，除了传统的 CPU、内存、硬盘，还提供扩展来支持类似 GPU 等资源；Pod 不仅仅有容器，还有相关的网络、安全策略等。&lt;/p>
&lt;h2 id="kubelet-架构">kubelet 架构&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/15/20210614215508.png" alt="2021-06-14-21-55-08">&lt;/p>
&lt;h3 id="重要组件">重要组件&lt;/h3>
&lt;p>kubelet 的架构由 N 多的组件组成，下面简单介绍下比较重要的几个：&lt;/p>
&lt;h4 id="pleg">PLEG&lt;/h4>
&lt;p>即 &lt;strong>Pod Lifecycle Event Generator&lt;/strong>，字面意思 Pod 生命周期事件（&lt;code>ContainerStarted&lt;/code>、&lt;code>ContainerDied&lt;/code>、&lt;code>ContainerRemoved&lt;/code>、&lt;code>ContainerChanged&lt;/code>）生成器。&lt;/p>
&lt;p>其维护着 Pod 缓存；定期通过 &lt;code>ContainerRuntime&lt;/code> 获取 Pod 的信息，与缓存中的信息比较，生成如上的事件；将事件写入其维护的通道（channel）中。&lt;/p>
&lt;h4 id="podworkers">PodWorkers&lt;/h4>
&lt;p>处理事件中 Pod 的同步。核心方法 &lt;code>managePodLoop()&lt;/code> 间接调用 &lt;code>kubelet.syncPod()&lt;/code> 完成 Pod 的同步：&lt;/p>
&lt;ul>
&lt;li>如果 Pod 正在被创建，记录其延迟&lt;/li>
&lt;li>生成 Pod 的 API Status，即 &lt;code>v1.PodStatus&lt;/code>：从运行时的 status 转换成 api status&lt;/li>
&lt;li>记录 Pod 从 &lt;code>pending&lt;/code> 到 &lt;code>running&lt;/code> 的耗时&lt;/li>
&lt;li>在 &lt;code>StatusManager&lt;/code> 中更新 pod 的状态&lt;/li>
&lt;li>杀掉不应该运行的 Pod&lt;/li>
&lt;li>如果网络插件未就绪，只启动使用了主机网络（host network）的 Pod&lt;/li>
&lt;li>如果 static pod 不存在，为其创建镜像（Mirror）Pod&lt;/li>
&lt;li>为 Pod 创建文件系统目录：Pod 目录、卷目录、插件目录&lt;/li>
&lt;li>使用 &lt;code>VolumeManager&lt;/code> 为 Pod 挂载卷&lt;/li>
&lt;li>获取 image pull secrets&lt;/li>
&lt;li>调用容器运行时（container runtime）的 &lt;code>#SyncPod()&lt;/code> 方法&lt;/li>
&lt;/ul>
&lt;h4 id="podmanager">PodManager&lt;/h4>
&lt;p>存储 Pod 的期望状态，kubelet 服务的不同渠道的 Pod&lt;/p>
&lt;h4 id="statsprovider">StatsProvider&lt;/h4>
&lt;p>提供节点和容器的统计信息，有 &lt;code>cAdvisor&lt;/code> 和 &lt;code>CRI&lt;/code> 两种实现。&lt;/p>
&lt;h4 id="containerruntime">ContainerRuntime&lt;/h4>
&lt;p>顾名思义，容器运行时。与遵循 CRI 规范的高级容器运行时进行交互。&lt;/p>
&lt;h4 id="depspodconfig">Deps.PodConfig&lt;/h4>
&lt;p>PodConfig 是一个配置多路复用器，它将许多 Pod 配置源合并成一个单一的一致结构，然后按顺序向监听器传递增量变更通知。&lt;/p>
&lt;p>配置源有：文件、apiserver、HTTP&lt;/p>
&lt;h4 id="syncloop">&lt;code>#syncLoop&lt;/code>&lt;/h4>
&lt;p>接收来自 &lt;code>PodConfig&lt;/code> 的 Pod 变更通知、定时任务、&lt;code>PLEG&lt;/code> 的事件，以及 &lt;code>ProbeManager&lt;/code> 的事件，将 Pod 同步到&lt;strong>期望状态&lt;/strong>。&lt;/p>
&lt;h4 id="podadmithandlers">PodAdmitHandlers&lt;/h4>
&lt;p>Pod admission 过程中调用的一系列处理器，比如 eviction handler（节点内存有压力时，不会驱逐 QoS 设置为 &lt;code>BestEffort&lt;/code> 的 Pod）、shutdown admit handler（当节点关闭时，不处理 pod 的同步操作）等。&lt;/p>
&lt;h4 id="oomwatcher">OOMWatcher&lt;/h4>
&lt;p>从系统日志中获取容器的 OOM 日志，将其封装成事件并记录。&lt;/p>
&lt;h4 id="volumemanger">VolumeManger&lt;/h4>
&lt;p>VolumeManager 运行一组异步循环，根据在此节点上调度的 pod 确定需要附加/挂载/卸载/分离哪些卷并执行操作。&lt;/p>
&lt;h4 id="certificatemanager">CertificateManager&lt;/h4>
&lt;p>处理证书轮换。&lt;/p>
&lt;h4 id="probemanager">ProbeManager&lt;/h4>
&lt;p>实际上包含了三种 Probe，提供 probe 结果缓存和通道。&lt;/p>
&lt;ul>
&lt;li>LivenessManager&lt;/li>
&lt;li>ReadinessManager&lt;/li>
&lt;li>StartupManager&lt;/li>
&lt;/ul>
&lt;h4 id="evictionmanager">EvictionManager&lt;/h4>
&lt;p>监控 Node 节点的资源占用情况，根据驱逐规则驱逐 Pod 释放资源，缓解节点的压力。&lt;/p>
&lt;h4 id="pluginmanager">PluginManager&lt;/h4>
&lt;p>PluginManager 运行一组异步循环，根据此节点确定哪些插件需要注册/取消注册并执行。如 CSI 驱动和设备管理器插件（Device Plugin）。&lt;/p>
&lt;h5 id="csi">CSI&lt;/h5>
&lt;p>Container Storage Interface，由存储厂商实现的存储驱动。&lt;/p>
&lt;h5 id="设备管理器插件device-plugin">设备管理器插件（Device Plugin）&lt;/h5>
&lt;p>Kubernetes 提供了一个 设备插件框架，你可以用它来将系统硬件资源发布到 Kubelet。&lt;/p>
&lt;p>供应商可以实现设备插件，由你手动部署或作为 DaemonSet 来部署，而不必定制 Kubernetes 本身的代码。目标设备包括 GPU、高性能 NIC、FPGA、 InfiniBand 适配器以及其他类似的、可能需要特定于供应商的初始化和设置的计算资源。&lt;/p>
&lt;h2 id="kubelet-的启动流程">kubelet 的启动流程&lt;/h2>
&lt;p>要分析 kubelet 的启动流程，可以从 kubelet 运行方式着手。找一个 Node 节点，很容易就能找到 kubelet 的进程。由于其是以 &lt;code>systemd&lt;/code> 的方式启动，也可以通过 &lt;code>systemctl&lt;/code> 查看其状态。&lt;/p>
&lt;h3 id="kubelet-启动命令">kubelet 启动命令&lt;/h3>
&lt;p>kubelet 的启动命令（minikube 环境）&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ps -aux &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;/kubelet&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> grep -v grep
root &lt;span class="m">4917&lt;/span> 2.6 0.3 &lt;span class="m">1857652&lt;/span> &lt;span class="m">106152&lt;/span> ? Ssl 01:34 13:05 /var/lib/minikube/binaries/v1.21.0/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>1.21.0 --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64.5
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ systemctl status kubelet.service
● kubelet.service - kubelet: The Kubernetes Node Agent
Loaded: loaded &lt;span class="o">(&lt;/span>/usr/lib/systemd/system/kubelet.service&lt;span class="p">;&lt;/span> disabled&lt;span class="p">;&lt;/span> vendor preset: enabled&lt;span class="o">)&lt;/span>
Drop-In: /etc/systemd/system/kubelet.service.d
└─10-kubeadm.conf
Active: active &lt;span class="o">(&lt;/span>running&lt;span class="o">)&lt;/span> since Sun 2021-06-13 01:34:42 UTC&lt;span class="p">;&lt;/span> 11h ago
Docs: http://kubernetes.io/docs/
Main PID: &lt;span class="m">4917&lt;/span> &lt;span class="o">(&lt;/span>kubelet&lt;span class="o">)&lt;/span>
Tasks: &lt;span class="m">15&lt;/span> &lt;span class="o">(&lt;/span>limit: 38314&lt;span class="o">)&lt;/span>
Memory: 39.4M
CGroup: /system.slice/kubelet.service
└─4917 /var/lib/minikube/binaries/v1.21.0/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>1.21.0 --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="源码分析">源码分析&lt;/h3>
&lt;p>从 &lt;code>git@github.com:kubernetes/kubernetes.git&lt;/code> 仓库获取代码，使用最新的 &lt;code>release-1.21&lt;/code> 分支。&lt;/p>
&lt;ul>
&lt;li>&lt;code>cmd/kubelet/kubelet.go:35&lt;/code> 的 &lt;code>main&lt;/code> 方法为程序入口。
&lt;ul>
&lt;li>调用 &lt;code>NewKubeletCommand&lt;/code> 方法，创建 command&lt;/li>
&lt;li>执行 command
&lt;ul>
&lt;li>&lt;code>cmd/kubelet/app/server.go:434&lt;/code> 的 &lt;code>Run&lt;/code> 方法。
&lt;ul>
&lt;li>调用 &lt;code>RunKubelet&lt;/code> 方法。
&lt;ul>
&lt;li>调用 &lt;code>createAndInitKubelet&lt;/code> 方法，创建并初始化 kubelet
&lt;ul>
&lt;li>&lt;code>pkg/kubelet/kubelet.go&lt;/code> 的 &lt;code>NewMainKubelet&lt;/code> 方法，创建 kubelet的 各种组件。共十几个组件，见 &lt;a href="#kubelet-%E6%9E%B6%E6%9E%84">kubelet 的构架&lt;/a>。&lt;/li>
&lt;li>调用 &lt;code>BirtyCry&lt;/code> 方法：放出 &lt;code>Starting&lt;/code> 事件&lt;/li>
&lt;li>调用 &lt;code>StartGarbageCollection&lt;/code> 方法，开启 &lt;code>ContainerGC&lt;/code> 和 &lt;code>ImageGC&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>调用 &lt;code>startKubelet&lt;/code> 方法（大量使用 goroutine 和通道）
&lt;ul>
&lt;li>goroutine：&lt;code>kubelet.Run()&lt;/code>
&lt;ul>
&lt;li>初始化模块
&lt;ul>
&lt;li>metrics 相关&lt;/li>
&lt;li>创建文件系统目录目录&lt;/li>
&lt;li>创建容器日志目录&lt;/li>
&lt;li>启动 &lt;code>ImageGCManager&lt;/code>&lt;/li>
&lt;li>启动 &lt;code>ServerCertificateManager&lt;/code>&lt;/li>
&lt;li>启动 &lt;code>OOMWatcher&lt;/code>&lt;/li>
&lt;li>启动 &lt;code>ResourceAnalyzer&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>goroutine：&lt;code>VolumeManager.Run()&lt;/code> 开始处理 Pod Volume 的卸载和挂载&lt;/li>
&lt;li>goroutine：状态更新 &lt;code>fastStatusUpdateOnce()&lt;/code> （更新 Pod CIDR -&amp;gt; 更新 &lt;code>ContainerRuntime&lt;/code> 状态 -&amp;gt; 更新 Node 节点状态）&lt;/li>
&lt;li>goroutine： &lt;code>NodeLeaseController.Run()&lt;/code> 更新节点租约&lt;/li>
&lt;li>goroutine：&lt;code>podKiller.PerformPodKillingWork&lt;/code> 杀掉未被正确处理的 pod&lt;/li>
&lt;li>&lt;code>StatusManager.Start()&lt;/code> 开始向 apiserver 更新 Pod 状态&lt;/li>
&lt;li>&lt;code>RuntimeClassManager.Start()&lt;/code>&lt;/li>
&lt;li>&lt;code>PLEG.Start()&lt;/code>：持续从 &lt;code>ContainerRuntime&lt;/code> 获取 Pod/容器的状态，并与 kubelet 本地 cache 中的比较，生成对应的 &lt;code>Event&lt;/code>&lt;/li>
&lt;li>&lt;code>syncLoop()&lt;/code> 重点，&lt;strong>&lt;em>持续监控并处理来自文件、apiserver、http 的变更&lt;/em>&lt;/strong>。包括 Pod 的增加、更新、优雅删除、非优雅删除、调和。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>启动 server，暴露 &lt;code>/healthz&lt;/code> 端点&lt;/li>
&lt;li>通知 &lt;code>systemd&lt;/code> &lt;code>kuberlet&lt;/code> 服务已经启动&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="kubelet-的工作原理">kubelet 的工作原理&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/15/20210615000611.png" alt="">&lt;/p>
&lt;ol>
&lt;li>来静态文件、apiserver 以及 HTTP 请求的 Pod 配置变更，被发送到 &lt;code>kubelet.syncLoop&lt;/code>&lt;/li>
&lt;li>PLEG 会定期通过容器运行时获取节点上 Pod 的状态，与其缓存中的 Pod 信息进行比较，封装成事件，进入 PLEG 的通道&lt;/li>
&lt;li>定期检查工作队列中的 Pod&lt;/li>
&lt;li>ProbeManager 的通道中的 Pod&lt;/li>
&lt;li>以上 1~4，都会进入 &lt;code>syncLoopIteration&lt;/code>，并从对应的通道中获取到对应 Pod，将 Pod 的信息保存到 &lt;code>PodManager&lt;/code>；然后分发给 &lt;code>PodWorker&lt;/code>，&lt;a href="#PodWorkers">完成一些列的同步工作&lt;/a>。&lt;/li>
&lt;/ol>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>kubelet 启动流量就讲到这里，虽然复杂，还是有迹可循。只要了解了 kubelet 在 Kubernetes 中的定位及角色，就很容易理解其工作流量。&lt;/p>
&lt;p>后面会再深入分析 Pod 创建及启动流程。&lt;/p></description></item><item><title>Kubernetes 上如何控制容器的启动顺序？</title><link>https://atbug.com/k8s-1.18-container-start-sequence-control/</link><pubDate>Fri, 30 Apr 2021 07:43:54 +0800</pubDate><guid>https://atbug.com/k8s-1.18-container-start-sequence-control/</guid><description>
&lt;p>去年写过一篇博客：&lt;a href="https://mp.weixin.qq.com/s/5UXhXpwPDBh2xuGKq9Nqig">控制 Pod 内容器的启动顺序&lt;/a>，分析了 &lt;a href="https://github.com/tektoncd">TektonCD&lt;/a> 的容器启动控制的原理。&lt;/p>
&lt;p>为什么要做容器启动顺序控制？我们都知道 Pod 中除了 &lt;code>init-container&lt;/code> 之外，是允许添加多个容器的。类似 TektonCD 中 &lt;code>task&lt;/code> 和 &lt;code>step&lt;/code> 的概念就分别与 &lt;code>pod&lt;/code> 和 &lt;code>container&lt;/code> 对应，而 &lt;code>step&lt;/code> 是按照顺序执行的。此外还有服务网格的场景，sidecar 容器需要在服务容器启动之前完成配置的加载，也需要对容器的启动顺序加以控制。否则，服务容器先启动，而 sidecar 还无法提供网络上的支持。&lt;/p>
&lt;h3 id="现实">现实&lt;/h3>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/30/sidecarlifecycle1.gif" alt="sidecar-lifecycle-1">&lt;/p>
&lt;h3 id="期望">期望&lt;/h3>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/30/sidecarlifecycle2.gif" alt="sidecar-lifecycle-2">&lt;/p>
&lt;p>到了这里肯定有同学会问，&lt;code>spec.containers[]&lt;/code> 是一个数组，数组是有顺序的。Kubernetes 也确实是按照顺序来创建和启动容器，但是 &lt;strong>容器启动成功，并不表示容器可以对外提供服务&lt;/strong>。&lt;/p>
&lt;p>在 Kubernetes 1.18 非正式版中曾在 Lifecycle 层面提供了对 &lt;code>sidecar 类型容器的&lt;/code> 支持，但是最终该功能并&lt;a href="https://github.com/kubernetes/enhancements/issues/753#issuecomment-713471597">没有落地&lt;/a>。&lt;/p>
&lt;p>那到底该怎么做？&lt;/p>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>笔者准备了一个简单的 &lt;a href="https://github.com/addozhang/k8s-container-sequence-sample">go 项目&lt;/a>，用于模拟 sidecar 的启动及配置加载。&lt;/p>
&lt;p>克隆代码后可以通过 &lt;code>make build&lt;/code> 构建出镜像，假如你是用的 minikube 进行的实验，可以通过命令 &lt;code>make load-2-minikube&lt;/code> 将镜像加载到 minikube 节点中。&lt;/p>
&lt;p>使用 Deployment 的方式进行部署，直接用 Pod 也可以。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sample&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sample&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sample&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sample&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">addozhang/k8s-container-sequence-sidecar:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">lifecycle&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">postStart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">wait&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">app&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/bin/sh&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;date; echo &amp;#39;app container started&amp;#39;; tail -f /dev/null&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面的截图中，演示了在 &lt;code>sample&lt;/code> 命名空间中，pod 内两个容器的执行顺序。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/30/20210430-062819.gif" alt="2021-04-30 06.28.19">&lt;/p>
&lt;h2 id="kubernetes-源码">Kubernetes 源码&lt;/h2>
&lt;p>在 kubelet 的源码 &lt;code>pkg/kubelet/kuberuntime/kuberuntime_manager.go&lt;/code> 中，&lt;code>#SyncPod&lt;/code> 方法用于创建 Pod，步骤比较繁琐，直接看第 7 步：创建普通容器。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// SyncPod syncs the running pod into the desired pod by executing following steps:
&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">// 1. Compute sandbox and container changes.
&lt;/span>&lt;span class="c1">// 2. Kill pod sandbox if necessary.
&lt;/span>&lt;span class="c1">// 3. Kill any containers that should not be running.
&lt;/span>&lt;span class="c1">// 4. Create sandbox if necessary.
&lt;/span>&lt;span class="c1">// 5. Create ephemeral containers.
&lt;/span>&lt;span class="c1">// 6. Create init containers.
&lt;/span>&lt;span class="c1">// 7. Create normal containers.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">kubeGenericRuntimeManager&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">SyncPod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pod&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">podStatus&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">kubecontainer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PodStatus&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pullSecrets&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Secret&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">backOff&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">flowcontrol&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Backoff&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span> &lt;span class="nx">kubecontainer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PodSyncResult&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="c1">// Step 7: start containers in podContainerChanges.ContainersToStart.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">idx&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">podContainerChanges&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ContainersToStart&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;container&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">containerStartSpec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">pod&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Containers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">idx&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>#start&lt;/code> 方法中调用了 &lt;code>#startContainer&lt;/code> 方法，该方法会启动容器，并返回容器启动的结果。注意，这里的结果还 &lt;strong>包含了容器的 Lifecycle hooks 调用&lt;/strong>。&lt;/p>
&lt;p>也就是说，假如容器的 &lt;code>PostStart&lt;/code> hook 没有正确的返回，kubelet 便不会去创建下一个容器。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// startContainer starts a container and returns a message indicates why it is failed on error.
&lt;/span>&lt;span class="c1">// It starts the container through the following steps:
&lt;/span>&lt;span class="c1">// * pull the image
&lt;/span>&lt;span class="c1">// * create the container
&lt;/span>&lt;span class="c1">// * start the container
&lt;/span>&lt;span class="c1">// * run the post start lifecycle hooks (if applicable)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">kubeGenericRuntimeManager&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">startContainer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">podSandboxID&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">podSandboxConfig&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">runtimeapi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PodSandboxConfig&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">spec&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">startSpec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pod&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">podStatus&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">kubecontainer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PodStatus&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pullSecrets&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Secret&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">podIP&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">podIPs&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="c1">// Step 4: execute the post start hook.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Lifecycle&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Lifecycle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PostStart&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">kubeContainerID&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">kubecontainer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ContainerID&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runtimeName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">containerID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handlerErr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">kubeContainerID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Lifecycle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PostStart&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">handlerErr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">recordContainerEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">kubeContainerID&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EventTypeWarning&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">events&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FailedPostStartHook&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">killContainer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">kubeContainerID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;FailedPostStartHook&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reasonFailedPostStartHook&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">klog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ErrorS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrPostStartHook&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handlerErr&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;Failed to kill container&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;pod&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">klog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">KObj&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pod&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="s">&amp;#34;podUID&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pod&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;containerName&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;containerID&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">kubeContainerID&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">String&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrPostStartHook&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handlerErr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现方案">实现方案&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/30/16197365667225.jpg" alt="">&lt;/p>
&lt;p>&lt;a href="https://github.com/addozhang/k8s-container-sequence-sample/blob/main/cmd/entrypoint/wait.go#L26">cmd/entrypoint/wait.go#L26&lt;/a> （这里参考了 Istio 的 pilot-agent 实现 ）&lt;/p>
&lt;p>在 &lt;code>PostStart&lt;/code> 中持续的去检查 &lt;code>/ready&lt;/code> 断点，可以 hold 住当前容器的创建流程。保证 &lt;code>/ready&lt;/code> 返回 &lt;code>200&lt;/code> 后，kubelet 才会去创建下一个容器。&lt;/p>
&lt;p>这样就达到了前面截图中演示的效果。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Now&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Before&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">timeoutAt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">checkIfReady&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">client&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sidecar is ready&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sidecar is not ready&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Duration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">periodMillis&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Millisecond&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sidecar is not ready in %d second(s)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">timeoutSeconds&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://banzaicloud.com/blog/k8s-sidecars/">Sidecar container lifecycle changes in Kubernetes 1.18&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@marko.luksa/delaying-application-start-until-sidecar-is-ready-2ec2d21a7b74">Delaying application start until sidecar is ready&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>服务网格平稳落地：Istio 中精准控制 Sidecar 的注入</title><link>https://atbug.com/how-to-control-istio-sidecar-injection/</link><pubDate>Wed, 21 Apr 2021 08:13:04 +0800</pubDate><guid>https://atbug.com/how-to-control-istio-sidecar-injection/</guid><description>
&lt;h2 id="为什么">为什么&lt;/h2>
&lt;p>说起服务网格，这幅图大家肯定不会陌生。这就是服务网格的网络，也是网格架构的终极形态。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/21/cleanshot-20210420-at-2314142x.png" alt="">&lt;/p>
&lt;p>那在迁移到网格架构之前，我们的系统是什么样的？&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/21/cleanshot-20210420-at-2316432x.png" alt="">&lt;/p>
&lt;p>我们的系统在演进的过程中，不可避免的会遇到各种 0 到 1 过程中的中间态。比如下面这种，可以比较直观的看出 Istio 或者网格是部分覆盖的。这个过程中，我们需要平滑、可控的推进，才能在保障系统可用性的前提下进行架构的演进。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/21/cleanshot-20210420-at-2318242x.png" alt="">&lt;/p>
&lt;h2 id="怎么做">怎么做&lt;/h2>
&lt;p>Sidecar 的注入分两种：手动和自动。&lt;/p>
&lt;h3 id="手动">手动&lt;/h3>
&lt;p>手动就是利用 Istio 的 cli 工具 &lt;code>istioctl kube-inject&lt;/code> 对资源 yaml 进行修改：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ istioctl kube-inject -f samples/sleep/sleep.yaml &lt;span class="p">|&lt;/span> kubectl apply -f -
serviceaccount/sleep created
service/sleep created
deployment.apps/sleep created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>手动的方式比较适合开发阶段使用。&lt;/p>
&lt;h3 id="自动">自动&lt;/h3>
&lt;p>sidecar 的自动注入则是通过 &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/">mutating webhook admission controller&lt;/a> 实现的。其原理简单说就是拦截 pod的创建请求来对 pod 的资源定义进行修改。&lt;/p>
&lt;p>我们对截取了 &lt;code>istio-sidecar-injector&lt;/code> &lt;code>MutatingWebhookConfiguration&lt;/code> 的部分内容。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">webhooks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Exact&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sidecar-injector.istio.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespaceSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">istio-injection&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">enabled&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">objectSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sidecar.istio.io/inject&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NotIn&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#4&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">apiGroups&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiVersions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">CREATE&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">pods&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scope&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>这里的 &lt;code>matchPolicy: Exact&lt;/code> 针对的是 #4 中的 &lt;code>apiGroups&lt;/code>与&lt;code>apiVersions&lt;/code> 的组合，即精确匹配 &lt;code>v1/pods&lt;/code> 的 &lt;code>CREATE&lt;/code> 请求&lt;/li>
&lt;li>顾名思义，匹配符合条件的 &lt;code>namespace&lt;/code>&lt;/li>
&lt;li>同2，匹配符合条件的 &lt;code>object&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>注： #2、#3 支持 Kubernetes 的&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/">标签选择语法&lt;/a>&lt;/p>
&lt;p>按照前面的说明，这个 hook 会拦截打了 &lt;code>istio-injection: enabled&lt;/code> label 的 namespace 下，没有打 &lt;code>sidecar.istio.io/inject: false&lt;/code> 标签的 &lt;code>v1/pod&lt;/code> 的创建。通过 &lt;code>https://istiod.istio-system:443/inject&lt;/code> 端点对 pod 的定义进行定制（添加 &lt;code>init-container&lt;/code>、sidecar 容器等）。&lt;/p>
&lt;p>有人可能会说这样还不够精准，因为可能某个 namespace 下只有部分对象才会注入 sidecar。&lt;/p>
&lt;p>这就需要借助 &lt;code>istiod&lt;/code> 的逻辑了。&lt;/p>
&lt;h3 id="只针对特定-pod-注入sidecar-或忽略注入">只针对特定 pod 注入sidecar 或忽略注入&lt;/h3>
&lt;p>在 &lt;code>configmap&lt;/code> &lt;code>istio-sidecar-injector&lt;/code> 中有两个字段 &lt;code>alwaysInjectSelector&lt;/code> 和 &lt;code>neverInjectSelector&lt;/code>。从名字来看这两个分别提供了白名单、黑名单的功能。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">alwaysInjectSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="l">neverInjectSelector:[]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们只需如下调整（需要重启 istiod），然后为需要注入 sidecar 的资源打上相应的标签即可。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">alwaysInjectSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sidecar.istio.io/inject&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">In&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;enabled&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;yes&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>分布式系统在 Kubernetes 上的进化</title><link>https://atbug.com/translation-distributed-systems-kubernetes/</link><pubDate>Mon, 29 Mar 2021 23:11:25 +0800</pubDate><guid>https://atbug.com/translation-distributed-systems-kubernetes/</guid><description>
&lt;p>本文译自 &lt;a href="https://www.infoq.com/articles/distributed-systems-kubernetes/">The Evolution of Distributed Systems on Kubernetes&lt;/a>&lt;/p>
&lt;p>在 3 月份的 QCon 上，我做了一个关于 Kubernetes 的分布式系统进化的演讲。首先，我想先问一个问题，微服务之后是什么？我相信大家都有各自的答案，我也有我的答案。你会在最后发现我的想法是什么。为了达到这个目的，我建议大家看看分布式系统的需求是什么？以及这些需求在过去是如何发展的，从单体应用开始到 Kubernetes，再到最近的 Dapr、Istio、Knative 等项目，它们是如何改变我们做分布式系统的方式。我们将尝试对未来做一些预测。&lt;/p>
&lt;h2 id="现代分布式应用">现代分布式应用&lt;/h2>
&lt;p>为了给这个话题提供更多的背景信息，我认为的分布式系统是由数百个组件组成的系统。这些组件可以是有状态的、无状态的或者无服务器的。此外，这些组件可以用不同的语言创建，运行在混合环境上，并开发开源技术、开放标准和互操作性。我相信你可以使用闭源软件来构建这样的系统，也可以在 AWS 和其他地方构建。具体到这次演讲，我将关注 Kubernetes 生态系统，以及你如何在 Kubernetes 平台上构建这样一个系统。&lt;/p>
&lt;p>我们从分布式系统的需求讲起。我认为是我们要创建一个应用或者服务，并写一些业务逻辑。那从运行时的平台到构建分布式系统，我们还需要什么呢？在底层，最开始是我们要一些生命周期的能力。当你用任一语言开发你的应用时，我们希望有能力把这个应用可靠地打包和部署、回滚、健康检查。并且能够把应用部署到不同的节点上，并实现资源隔离、扩展、配置管理，以及所有这些。这些都是你创建分布式应用所需要的第一点。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/55image0011616431697020.jpg" alt="">&lt;/p>
&lt;p>第二点是围绕网络。我们有了应用之后，我们希望它能够可靠地连接到其他服务，无论该服务是在集群内部还是在外部。我们希望其具有服务发现、负载均衡的能力。为了不同的发布策略或是其他的一些原因的我们希望有流量转移的能力。然后我们还希望其具有与其他系统进行弹性通信的能力，无论是通过重试、超时还是断路器。要有适当的安全保障，并且要有足够的监控、追踪、可观察性等等。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/25image0021616431698392.jpg" alt="">&lt;/p>
&lt;p>我们有了网络之后，接下来就是我们希望有能力与不同的 API 和端点交互，即资源绑定&amp;ndash;与其他协议和不同的数据格式交互。甚至能够从一种数据格式转换成另一种数据格式。我还会在这里加入诸如滤光的功能，也就是说，当我们订阅一个主题时，我们也许只对某些事件感兴趣。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/45image0031616431697873.jpg" alt="">&lt;/p>
&lt;p>你认为最后一类是什么？是状态。当我在说状态和有状态的抽象时，我并不是在谈论实际的状态管理，比如数据库或者文件系统的功能。我要说的更多是有关幕后依赖状态的开发人员抽象。可能，你需要具有工作流管理的能力。也许你想管理运行时间长的进程或者做临时调度或者某些定时任务来定期运行服务。也许你还想进行分布式缓存，具有幂等性或者支持回滚。所有这些都是开发人员级的原语，但在幕后，它们依赖于具有某种状态。你想随意使用这些抽象俩创建完善的分布式系统。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/26image0041616431697348.jpg" alt="">&lt;/p>
&lt;p>我们将使用这个分布式系统原语的框架来评估它们在 Kubernetes 和其他项目上的变化情况。&lt;/p>
&lt;h2 id="单体架构----传统中间件功能">单体架构 &amp;ndash; 传统中间件功能&lt;/h2>
&lt;p>假设我们从单体架构以及如何获得这些能力开始。在那种情况下，首先是当我说单体的时候，在分布式应用的情况下我想到的是 ESB。ESB 是相当强大的，当我们检查我们的需求列表时，我们会说 ESB 对所有有状态的抽象有很好的支持。&lt;/p>
&lt;p>使用 ESB，你可以进行长时间运行的流程的编排、分布式事务、回滚和幂等。此外，ESB 还提供了出色的资源绑定能力，并且有数百个连接器，支持转换、编排，甚至有联网功能。最后，ESB 甚至可以做服务发现和负载均衡。&lt;/p>
&lt;p>它具有围绕网络连接的弹性的所有功能，因此它可以进行重试。可能 ESB 本质上不是很分布式，所以它不需要非常高级的网络和发布能力。ESB 欠缺的主要是生命周期管理。因为它是单一运行时，所以第一件事就是你只能使用一种语言。通常是创建实际运行时的语言，Java、.NET、或者其他的语言。然后，因为是单一运行时，我们不能轻松地进行声明式的部署或者自动防止。部署是相当大且非常重的，所以它通常涉及到人机交互。这种单体架构的另一个难点是扩展：“我们无法扩展单个组件。”&lt;/p>
&lt;p>最后却并非最不重要的一点是，围绕隔离，无论是资源隔离还是故障隔离。使用单体架构无法完成所有这些工作。从我们的需求框架来看，ESB 的单体架构不符合条件。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/40image0051616431696438.jpg" alt="">&lt;/p>
&lt;h2 id="云原生架构----微服务和-kubernetes">云原生架构 &amp;ndash; 微服务和 Kubernetes&lt;/h2>
&lt;p>接下来，我建议我们研究一下云原生架构以及这些需求是如何变化的。如果我们从一个非常高的层面来看，这些架构是如何发生变化的，云原生可能始于微服务运动。微服务使我们可以按业务领域进行拆分单体应用。事实证明，容器和 Kubernetes 实际上是管理这些微服务的优秀平台。让我们来看一下 Kubernetes 对于微服务特别有吸引力的一些具体特性和功能。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/13image0061616431699209.jpg" alt="">&lt;/p>
&lt;p>从一开始，进行健康状况探测的能力就是 Kubernetes 受欢迎的原因。在实践中，这意味着当你将容器部署到 Pod 中时，Kubernetes 会检查进程的运行状况。通常情况下，该过程模型还不够好。你可能仍然有一个已启动并正在运行的进程，但是它并不健康。这就是为什么还可以使用就绪度和存活度检查的原因。Kubernetes 会做一个就绪度检查，以确定你的应用在启动期间何时准备接受流量。它将进行活跃度检查，以检查服务的运行状况。在 Kubernetes 之前，这并不是很流行，但今天几乎所有语言、所有框架、所有运行时都有健康检查功能，你可以在其中快速启动端点。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/29image0071616431696697.jpg" alt="">&lt;/p>
&lt;p>Kubernetes 引入的下一个特性是围绕应用程序的托管生命周期&amp;ndash;我的意思是，你不再控制何时启动、何时关闭服务。你相信平台可以做到这一点。Kubernetes 可以启动你的应用；它可以将其关闭，然后在不同的节点上移动它。为此，你必须正确执行平台在应用启动和关闭期间告诉你的事件。&lt;/p>
&lt;p>Kubernetes 刘兴的另一件特性是围绕着声明式部署。这意味着你不再需要启动服务；检查日志是否已经启动。你不必手动升级实例&amp;ndash;支持声明式部署的 Kubernetes 可以为你做到这一点。根据你选择的策略，它可以停止旧实例并启动新实例。此外，如果出现问题，可以进行回滚。&lt;/p>
&lt;p>另外就是声明你的资源需求。创建服务时，将其容器化。最好告诉平台该服务将需要多少 CPU 和内存。Kubernetes 利用这些信息为你的工作负载找到最佳节点。在使用 Kubernetes 之前，我们必须根据我们的标准将实例手动放置到一个节点上。现在，我们可以根据自己的偏好来指导 Kubernetes，它将为我们做出最佳的决策。&lt;/p>
&lt;p>如今，在 Kubernetes 上，你可以进行多语言配置管理。无需在应用程序运行时进行配置查找就可以进行任何操作。Kubernetes 会确保配置最终在工作负载所在的同一节点上。这些配置被映射为卷或环境变量，以供你的应用程序使用。&lt;/p>
&lt;p>事实证明，我刚才谈到的那些特定功能也是相关的。比如说，如果要进行自动放置，则必须告诉 Kubernetes 服务的资源需求。然后，你必须告诉它要使用的部署策略。为了让策略正确运行，你的应用程序必须执行来自环境的事件。它必须执行健康检查。一旦采用了所有这些最佳实践并使用所有这些功能，你的应用就会成为出色的云原生公民，并且可以在 Kubernetes 上实现自动化了（这是在 Kubernetes 上运行工作负载的基本模式）。最后，还有围绕着构建 Pod 中的容器、配置管理和行为，还有其他模式。&lt;/p>
&lt;p>我要简要介绍的下一个主题是工作负载。从生命周期的角度来看，我们希望能够运行不同的工作负载。我们也可以在 Kubernetes 上做到这一点。运行十二要素应用程序和无状态微服务非常简单。Kubernetes 可以做到这一点。这不是你将要承担的唯一工作量。可能你还有有状态的工作负载，你可以使用有状态集在 Kubernetes 上完成此工作。&lt;/p>
&lt;p>你可能还有的另一个工作负载是单例。也许你希望某个应用程序的实例是整个集群中应用程序的唯一一个实例&amp;ndash;你希望它成为可靠的单例。如果失败，则重新启动。因此，你可以根据需求以及是否希望单例至少具有一种或最多一种语义来在有状态集和副本集之间进行选择。你可能还有的另一个工作负载是围绕作业和定时作业&amp;ndash;有了 Kubernetes，你也可以实现这些。&lt;/p>
&lt;p>如果我们将所有这些 Kubernetes 功能映射到我们的需求，则 Kubernetes 可以满足生命周期需求。我通常创建的需求列表主要是由 Kubernetes 今天提供给我们的。这些是任何平台上的预期功能，而 Kubernetes 可以为你的部署做的是配置管理、资源隔离和故障隔离。此外，除了无服务器本身之外，它还支持其他工作负载。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/12image0081616431698134.jpg" alt="">&lt;/p>
&lt;p>然后，如果这就是 Kubernetes 给开发者提供的全部功能，那么我们该如何扩展 Kubernetes 呢？以及如何使它具有更多功能？因此，我想描述当今使用的两种常用方法。&lt;/p>
&lt;h2 id="进程外扩展机制">进程外扩展机制&lt;/h2>
&lt;p>首先是 Pod 的概念，Pod 是用于在节点上部署容器的抽象。此外，Pod 给我们提供了两组保证：&lt;/p>
&lt;ul>
&lt;li>第一组是部署保证 &amp;ndash; Pod 中的所有容器始终位于同一个节点上。这意味着它们可以通过 localhost 相互通信，也可以使用文件系统或通过其他 IPC 机制进行异步通信。&lt;/li>
&lt;li>Pod 给我们的另一组保证是围绕生命周期的。Pod 中的所有容器并非都相等。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/22image0091616431698660.jpg" alt="">&lt;/p>
&lt;p>根据使用的是 init 容器还是应用程序容器，你会获得不同的保证。例如，init 容器在开始时运行；当 Pod 启动时，它按顺序一个接一个地运行。他们仅在之前的容器已成功完成时运行。它们有助于实现由容器驱动的类似工作流的逻辑。&lt;/p>
&lt;p>另一方面，应用程序容器是并行运行的。它们在整个 Pod 的生命周期中运行，这也是 sidecar 模式的基础。sidecar 可以运行多个容器，这些容器可以协作并共同为用户提供价值。这也是当今我们看到的扩展 Kubernetes 附加功能的主要机制之一。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/9image0101616431695489.jpg" alt="">&lt;/p>
&lt;p>为了解释以下功能，我必须简要地告诉你 Kubernetes 内部的工作方式。它是基于调谐循环的。调谐循环的思想是将期望状态驱动到实际状态。在 Kubernetes 中，很多功能都是靠这个来实现的。例如，当你说我要两个 Pod 实例，这系统的期望状态。有一个控制循环不断地运行，并检查你的 Pod 是否有两个实例。如果不存在两个实例，它将计算差值。它将确保存在两个实例。&lt;/p>
&lt;p>这方面的例子有很多。一些是副本集或有状态集。资源定义映射到控制器是什么，并且每个资源定义都有一个控制器。该控制器确保现实世界与所需控制器相匹配，你甚至可以编写自己的自定义控制器。&lt;/p>
&lt;p>当在 Pod 中运行应用程序时，你将无法在运行时加载任何配置文件更改。然而，你可以编写一个自定义控制器，检测 config map 的变化，重新启动 Pod 和应用程序&amp;ndash;从而获取配置更改。&lt;/p>
&lt;p>事实证明，即使 Kubernetes 拥有丰富的资源集合，但它们并不能满足你的所有不同需求。Kubernetes 引入了自定义资源定义的概念。这意味着你可以对需求进行建模并定义适用于 Kubernetes 的 API。它与其他 Kubernetes 原生资源共存。你可以用能理解模型的任何语言编写自己的控制器。你可以设计一个用 Java 实现的 ConfigWatcher，描述我们前面所解释的内容。这就是 operator 模式，即与自定义资源定义一起使用的控制器。如今，我们看到很多 operator 假如，这就是第二种扩展 Kubernetes 附加功能的方式。&lt;/p>
&lt;p>接下来，我想简单介绍一下基于 Kubernetes 构建的一些平台，这些平台大量使用 sidecar 和 operator 来给开发者提供额外的功能。&lt;/p>
&lt;h2 id="什么是服务网格">什么是服务网格？&lt;/h2>
&lt;p>让我们从服务网格开始，什么是服务网格？&lt;/p>
&lt;p>我们有两个服务，服务 A 要调用服务 B，并且可以用任何语言。把这个当做是我们的应用工作负载。服务网格使用 sidecar 控制器，并在我们的服务旁边注入一个代理。你最终会在 Pod 中得到两个容器。代理是一个透明的代理，你的应用对这个代理完全无感知&amp;ndash;它拦截所有传入和传出的流量。此外，代理还充当数据防火墙。&lt;/p>
&lt;p>这些服务代理的集合代表了你的数据平面，并且很小且无状态。为了获得所有状态和配置，它们依赖于控制平面。控制平面是保持所有配置，收集指标，做出决定并与数据平面进行交互的有状态部分。此外，它们是不同控制平面和数据平面的正确选择。事实证明，我们还需要一个组件-一个 API 网关，以将数据获取到我们的集群中。一些服务网格具有自己的 API 网关，而某些使用第三方。如果你研究下所有这些组件，它们将提供我们所需的功能。&lt;/p>
&lt;p>API 网关主要专注于抽象我们服务的实现。它隐藏细节并提供边界功能。服务网格则相反。在某种程度上，它增强了服务内的可见性和可靠性。可以说，API 网关和服务网格共同提供了所有网络需求。要在 Kubernetes 上获得网络功能，仅使用服务是不够的：“你需要一些服务网格。”&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/19image0111616431696146.jpg" alt="">&lt;/p>
&lt;h2 id="什么是-knative">什么是 Knative？&lt;/h2>
&lt;p>我要讨论的下一个主题是 Knative，这是 Google 几年前启动的一个项目。它是 Kubernetes 之上的一层，可为您提供无服务器功能，并具有两个主要模块：&lt;/p>
&lt;ul>
&lt;li>Knative 服务 - 围绕着请求-应答交互，以及&lt;/li>
&lt;li>Knative Eventing - 更多的是用于事件驱动的交互。&lt;/li>
&lt;/ul>
&lt;p>只是让你感受一下，Knative Serving 是什么？通过 Knative Serving，你可以定义服务，但这不同于 Kubernetes 服务。这是 Knative 服务。使用 Knative 服务定义工作负载后，你就会得到具有无服务器的特征的部署。你不需要有启动并运行实例。它可以在请求到达时从零开始。你得到的是无服务器的能力；它可以迅速扩容，也可以缩容到零。&lt;/p>
&lt;p>Knative Eventing 为我们提供了一个完全声明式的事件管理系统。假设我们有一些要与之集成的外部系统，以及一些外部的事件生产者。在底部，我们将应用程序放在具有 HTTP 端点的容器中。借助 Knative Eventing，我们可以启动代理，该代理可以触发 Kafka 映射的代理，也可以在内存或者某些云服务中。此外，我们可以启动连接到外部系统的导入器，并将事件导入到我们的代理中。这些导入器可以基于，例如，具有数百个连接器的 Apache Camel。&lt;/p>
&lt;p>一旦我们将事件发送给代理，然后用 YAML 文件声明，我们可以让容器订阅这些事件。在我们的容器中，我们不需要任何消息客户端&amp;ndash;比如 Kafka 客户端。我们的容器将使用云事件通过 HTTP POST 获取事件。这是一个完全平台管理的消息传递基础设施。作为开发人员，你必须在容器中编写业务代码，并且不处理任何消息传递逻辑。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/8image0121616431698919.jpg" alt="">&lt;/p>
&lt;p>从我们的需求的角度来看，Knative 可以满足其中的一些要求。从生命周期的角度来看，它为我们的工作负载提供了无服务器的功能，因此能够将其扩展到零，并从零开始激活。从网络的角度来看，如果服务网格之间存在某些重叠，则 Knative 也可以进行流量转移。从绑定的角度来看，它对使用 Knative 导入程序进行绑定提供了很好的支持。它可以使我们进行发布/订阅，或点对点交互，甚至可以进行一些排序。它可以满足几类需求。&lt;/p>
&lt;h2 id="什么是-dapr">什么是 Dapr？&lt;/h2>
&lt;p>另一个使用 sidecar 和 operator 的项目是 &lt;a href="https://dapr.io/">Dapr&lt;/a>，它是微软几个月前才开始并且正在迅速流行起来。此外，1.0 版本 &lt;a href="https://www.infoq.com/news/2021/02/dapr-production-ready/">被认为是生产可用的&lt;/a>。它是一个作为 sidecar 的分布式系统工具包&amp;ndash;Dapr 中的所有内容都是作为 sidecar 提供的，并且有一套他们所谓的构件或功能集的集合。&lt;/p>
&lt;p>这些功能是什么呢？第一组功能是围绕网络。Dapr 可以进行服务发现和服务之间的点对点集成。同样，它也可以进行服务网格的追踪、可靠通信、重试和恢复。第二套功能是围绕资源绑定：&lt;/p>
&lt;ul>
&lt;li>它有很多云 API、不同系统的连接器，以及&lt;/li>
&lt;li>也可以做消息发布/订阅和其他逻辑。&lt;/li>
&lt;/ul>
&lt;p>有趣的是，Dapr 还引入了状态管理的概念。除了 Knative 和服务网格提供的功能外，Dapr 在状态存储之上进行了抽象。此外，你通过存储机制支持与 Dapr 进行基于键值的交互。&lt;/p>
&lt;p>在较高的层次上，架构是你的应用程序位于顶部，可以使用任何语言。你可以使用 Dapr 提供的客户端库，但你不必这样做。你可以使用语言功能来执行称为 sidecar 的 HTTP 和 gRPC。与 服务网格的区别在于，这里的 Dapr sidecar 不是一个透明的代理。它是一个显式代理，你必须从你的应用中调用它，并通过 HTTP 或 gRPC 与之交互。根据你需要的功能，Dapr 可以与其他如云服务的系统对话。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/18image0131616431699532.jpg" alt="">&lt;/p>
&lt;p>在 Kubernetes 上，Dapr 是作为 sidecar 部署的，并且可以在 Kubernetes 之外工作（不仅仅是 Kubernetes）。此外，它还有一个 operator &amp;ndash; 而 sidecar 和 Operator 是主要的扩展机制。其他一些组件管理证书、处理基于 actor 的建模并注入 sidecar。你的工作负载与 sidecar 交互，并尽其所能与其他服务对话，让你与不同的云提供商进行互操作。它还为你提供了额外的分布式系统功能。&lt;/p>
&lt;p>综上所述，这些项目所提供的功能，我们可以说 ESB 是分布式系统的早期化身，其中我们有集中式的控制平面和数据平面&amp;ndash;但是扩展性不好。在云原生中，集中式控制平面仍然存在，但是数据平面是分散的&amp;ndash;并且具有隔音功能和高度的可扩展性。&lt;/p>
&lt;p>我们始终需要 Kubernetes 来做良好的生命周期管理，除此之外，你可能还需要一个或多个附加组件。你可能需要 Istio 来进行高级联网。你可能会使用 Knative 来进行无服务器工作负载，或者使用 Dapr 来做集成。这些框架可与 Istio 和 Envoy 很好的配合使用。从 Dapr 和 Knative 的角度来看，你可能必须选择一个。它们共同以云原生的方式提供了我们过去在 ESB 上拥有的东西。&lt;/p>
&lt;h2 id="未来云原生趋势--生命周期趋势">未来云原生趋势&amp;ndash;生命周期趋势&lt;/h2>
&lt;p>在接下来的部分，我列出了一些我认为在这些领域正在发生令人振奋的发展的项目。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/8image0141616431695762.jpg" alt="">&lt;/p>
&lt;p>我想从生命周期开始。通过 Kubernetes，我们可以为应用程序提供一个有用的生命周期，这可能不足以进行更复杂的生命周期管理。比如，如果你有一个更复杂的有状态应用，则可能会有这样的场景，其中 Kubernetes 中的部署原语不足以为应用提供支持。&lt;/p>
&lt;p>在这些场景下，你可以使用 operator 模式。你可以使用一个 operator 来进行部署和升级，还可以将 S3 作为服务备份的存储介质。此外，你可能还会发现 Kubernetes 的实际健康检查机制不够好。假设存活检查和就绪检查不够好。在这种情况下，你可以使用 operator 对你的应用进行更智能的存活和就绪检查，然后在此基础上进行恢复。&lt;/p>
&lt;p>第三个领域就是自动伸缩和调整。你可以让 operator 更好的了解你的应用，并在平台上进行自动调整。目前，编写 operator 的框架主要有两个，一个是 Kubernetes 特别兴趣小组的 Kubebuilder，另一个是红帽创建的 operator 框架的一部分&amp;ndash;operator SDK。它有以下几个方面的内容：&lt;/p>
&lt;p>Operator SDK 让你可以编写 operator &amp;ndash; operator 生命周期管理器来管理 operator 的生命周期，以及可以发布你的 operator 到 OperatorHub。如今在 OperatorHub，你会看到 100 多个 operator 用于管理数据库、消息队列和监控工具。从生命周期空间来看，operator 可能是 Kubernetes 生态系统中发展最活跃的领域。&lt;/p>
&lt;h2 id="网络趋势---envoy">网络趋势 - Envoy&lt;/h2>
&lt;p>我选的另一个项目是 &lt;a href="https://www.envoyproxy.io/">Envoy&lt;/a>。服务网格接口规范的引入将使你更轻松地切换不同的服务网格实现。在部署上 Istio 对架构进行了一些整合。你不再需要为控制平面部署 7 个 Pod；现在，你只需要部署一次就可以了。更有趣的是在 Envoy 项目的数据平面上所正在发生的：越来越多的第 7 层协议被添加到 Envoy 中。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/11image0151616431697613.jpg" alt="">&lt;/p>
&lt;p>服务网格增加了对更多协议的支持，比如 MongoDB、ZooKeeper、MySQL、Redis，而最新的协议是 Kafka。我看到 Kafka 社区现在正在进一步改进他们的协议，使其对服务网格更加友好。我们可以预料将会有更紧密的集成、更多的功能。最有可能的是，会有一些桥接的能力。你可以从服务中在你的应用本地做一个 HTTP 调用，而代理将在后台使用 Kafka。你可以在应用外部，在 sidecar 中针对 Kafka 协议进行转换和加密。&lt;/p>
&lt;p>另一个令人兴奋的发展是引入了 HTTP 缓存。现在 Envoy 可以进行 HTTP 缓存。你不必在你的应用中使用缓存客户端。所有这些都是在 sidecar 中透明地完成的。有了 tap 过滤器，你可以 tap 流量并获得流量的副本。最近，WebAssembly 的引入，意味着如果你要为 Envoy 编写一些自定义的过滤器，你不必用 C++ 编写，也不必编译整个 Envoy 运行时。你可以用 WebAssembly 写你的过滤器，然后在运行时进行部署。这些大多数还在进行中。它们不存在，说明数据平面和服务网格无意停止，仅支持 HTTP 和 gRPC。他们有兴趣支持更多的应用层协议，为你提供更多的功能，以实现更多的用例。最主要的是，随着 WebAssembly 的引入，你现在可以在 sidecar 中编写自定义逻辑。只要你没有在其中添加一些业务逻辑就可以了。&lt;/p>
&lt;h2 id="绑定趋势---apache-camel">绑定趋势 - Apache Camel&lt;/h2>
&lt;p>&lt;a href="https://camel.apache.org/">Apache Camel&lt;/a> 是一个用于集成的项目，它具有很多使用企业集成模式连接到不同系统的连接器。 比如 &lt;a href="https://camel.apache.org/releases/release-3.0.0/">Camel version 3&lt;/a> 就深度集成到了 Kubernetes 中，并且使用了我们到目前为止所讲的那些原语，比如 operator。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/7image0161616431694981.jpg" alt="">&lt;/p>
&lt;p>你可以在 Camel 中用 Java、JavaScript 或 YAML 等语言编写你的集成逻辑。最新的版本引入了一个 Camel operator，它在 Kubernetes 中运行并理解你的集成。当你写好 Camel 应用，将其部署到自定义资源中，operator 就知道如何构建容器或查找依赖项。根据平台的能力，不管是只用 Kubernetes，还是带有 Knative 的 Kubernetes，它都可以决定要使用的服务以及如何实现集成。在运行时之外有相当多的智能 &amp;ndash; 包括 operator &amp;ndash; 所有这些都非常快地发生。为什么我会说这是一个绑定的趋势？主要是因为 Apache Camel 提供的连接器的功能。这里有趣的一点是它如何与 Kubernetes 深度集成。&lt;/p>
&lt;h2 id="状态趋势---cloudstate">状态趋势 - Cloudstate&lt;/h2>
&lt;p>另一个我想讨论的项目是 &lt;a href="https://cloudstate.io/">Cloudstate&lt;/a> 和与状态相关的趋势。Cloudstate 是 Lightbend 的一个项目，主要致力于无服务器和功能驱动的开发。最新发布的版本，正在使用 sidecar 和 operator 与 Kubernetes 进行深度集成。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/8image0171616431996943.jpg" alt="">&lt;/p>
&lt;p>这个创意是，当你编写你的功能时，你在功能中要做的就是使用 gRPC 来获取状态并与之进行交互。整个状态管理在与其他 sidecar 群集的 sidear 中进行。它使你能够进行事件溯源、CQRS、键值查询、消息传递。&lt;/p>
&lt;p>从应用程序角度来看，你并不了解所有这些复杂性。你所做的只是调用一个本地的 sidecar，而 sidecar 会处理这些复杂的事情。它可以在后台使用两个不同的数据源。而且它拥有开发人员所需的所有有状态抽象。&lt;/p>
&lt;p>到目前为止，我们已经看到了云原生生态系统中的最新技术以及一些仍在进行中的开发。我们如何理解这一切？&lt;/p>
&lt;h2 id="多运行时微服务已经到来">多运行时微服务已经到来&lt;/h2>
&lt;p>如果你看微服务在 Kubernetes 上的样子，则将需要使用某些平台功能。此外，你将需要首先使用 Kubernetes 的功能进行生命周期管理。然后，很有可能透明地，你的服务会使用某些服务网格（例如 Envoy）来获得增强的网络功能，无论是流量路由、弹性、增强的安全性，甚至出于监控的目的。除此之外，根据你的场景和使用的工作负载可能需要 Dapr 或者 Knative。所有这些都代表了进程外附加的功能。剩下的就是编写业务逻辑，不是放在最上面而是作为一个单独的运行时来编写。未来的微服务很有可能将是由多个容器组成的这种多运行时。有些是透明的，有些则是非常明确的。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/6image0181616431996411.jpg" alt="">&lt;/p>
&lt;h2 id="智能的-sidecar-和愚蠢的管道">智能的 sidecar 和愚蠢的管道&lt;/h2>
&lt;p>如果更深入地看，那可能是什么样的，你可以使用一些高级语言编写业务逻辑。是什么并不重要，不必仅是 Java，因为你可以使用任何其他语言并在内部开发自定义逻辑。&lt;/p>
&lt;p>你的业务逻辑与外部世界的所有交互都是通过 sidecar 发生的，并与平台集成进行生命周期管理。它为外部系统执行网络抽象，为你提供高级的绑定功能和状态抽象。sidecar 是你不需要开发的东西。你可以从货架上拿到它。你用一点 YAML 或 JSON 配置它，然后就可以使用它。这意味着你可以轻松地更新 sidecar，因为它不再被嵌入到你的运行时。这使得打补丁、更新变得更加更容易。它为我们的业务逻辑启用了多语言运行时。&lt;/p>
&lt;h2 id="微服务之后是什么">微服务之后是什么？&lt;/h2>
&lt;p>这让我想到了最初的问题，微服务之后是什么？&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/6image0201616431995910.jpg" alt="">&lt;/p>
&lt;p>如果我们看下架构的发展历程，应用架构在很高的层面上是从单体应用开始的。然而微服务给我们提供了如何把一个单体应用拆分成独立的业务域的指导原则。之后又出现了无服务器和功能即服务（FaaS），我们说过可以按操作将其进一步拆分，从而实现极高的可扩展性-因为我们可以分别扩展每个操作。&lt;/p>
&lt;p>我想说的是 FaaS 并不是最好的模式 &amp;ndash; 因为功能并不是实现合理的复杂服务的最佳模式，在这种情况下，当多个操作必须与同一个数据集进行交互时，你希望它们驻留在一起。可能是多运行时（我把它称为 &lt;a href="https://www.infoq.com/articles/multi-runtime-microservice-architecture/">Mecha 架构&lt;/a>），在该架构中你将业务逻辑放在一个容器中，而所有与基础设施相关的关注点作为一个单独的容器存在。它们共同代表多运行时微服务。也许这是一个更合适的模型，因为它有更好的属性。&lt;/p>
&lt;p>你可以获得微服务的所有好处。仍然将所有域和所有限界上下文放在一处。你将所有的基础设施和分布式应用需求放在一个单独的容器中，并在运行时将它们组合在一起。大概，现在最接近这种模型的是 Dapr。他们正在遵循这种模型。如果你仅对网络方面感兴趣，那么可能使用 Envoy 也会接近这种模型。&lt;/p>
&lt;h2 id="关于作者">关于作者&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/21bilgin-ibryam15886810412341616480845087.jpeg" alt="">&lt;/p>
&lt;p>&lt;strong>Bilgin Ibryam&lt;/strong> 是红帽公司的产品经理和前架构师、提交人，并且是 Apache 软件基金会的成员。他是开源布道者，经常写博客、发表演讲，是 &lt;a href="https://k8spatterns.io/">Kubernetes Patterns&lt;/a> 和 Camel Design Patterns 书籍的作者。Bilgin 目前的工作主要集中在分布式系统、事件驱动架构以及可重复的云原生应用开发模式和实践上。请关注他 @bibryam 了解未来类似主题的更新。&lt;/p></description></item><item><title>Kubernetes 源码解析 - Informer</title><link>https://atbug.com/kubernetes-source-code-how-informer-work/</link><pubDate>Sun, 16 Aug 2020 23:32:38 +0800</pubDate><guid>https://atbug.com/kubernetes-source-code-how-informer-work/</guid><description>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/wY8ZevIHIH7CD-fWGZecPQ">上篇&lt;/a>扒了 HPA 的源码，但是没深入细节，今天往细节深入。&lt;/p>
&lt;p>开局先祭出一张图：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/08/16/15975802542217.png" alt="">&lt;/p>
&lt;h2 id="为什么要有-informer">为什么要有 Informer？&lt;/h2>
&lt;p>Kubernetes 中的持久化数据保存在 etcd中，各个组件并不会直接访问 etcd，而是通过 api-server暴露的 RESTful 接口对集群进行访问和控制。&lt;/p>
&lt;p>资源的控制器（图中右侧灰色的部分）读取数据也并不会直接从 api-server 中获取资源信息（这样会增加 api-server 的压力），而是从其“本地缓存”中读取。这个“本地缓存”只是表象的存在，加上缓存的同步逻辑就是今天要是说的&lt;code>Informer&lt;/code>（灰色区域中的第一个蓝色块）所提供的功能。&lt;/p>
&lt;p>从图中可以看到 Informer 的几个组件：&lt;/p>
&lt;ul>
&lt;li>Reflector：与 &lt;code>api-server&lt;/code>交互，监听资源的变更。&lt;/li>
&lt;li>Delta FIFO Queue：增量的 FIFO 队列，保存 Reflector 监听到的资源变更（简单的封装）。&lt;/li>
&lt;li>Indexer：Informer 的本地缓存，FIFO 队列中的数据根据不同的变更类型，在该缓存中进行操作。
&lt;ul>
&lt;li>Local Store：&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/wY8ZevIHIH7CD-fWGZecPQ">上篇&lt;/a> 提到了水平自动伸缩的控制器&lt;code>HorizontalController&lt;/code>，其构造方法就需要提供 &lt;code>Informer&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//pkg/controller/podautoscaler/horizontal.go
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">HorizontalController&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">scaleNamespacer&lt;/span> &lt;span class="nx">scaleclient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ScalesGetter&lt;/span>
&lt;span class="nx">hpaNamespacer&lt;/span> &lt;span class="nx">autoscalingclient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscalersGetter&lt;/span>
&lt;span class="nx">mapper&lt;/span> &lt;span class="nx">apimeta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RESTMapper&lt;/span>
&lt;span class="nx">replicaCalc&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ReplicaCalculator&lt;/span>
&lt;span class="nx">eventRecorder&lt;/span> &lt;span class="nx">record&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EventRecorder&lt;/span>
&lt;span class="nx">downscaleStabilisationWindow&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>
&lt;span class="nx">hpaLister&lt;/span> &lt;span class="nx">autoscalinglisters&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscalerLister&lt;/span>
&lt;span class="nx">hpaListerSynced&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">InformerSynced&lt;/span>
&lt;span class="nx">podLister&lt;/span> &lt;span class="nx">corelisters&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PodLister&lt;/span>
&lt;span class="nx">podListerSynced&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">InformerSynced&lt;/span>
&lt;span class="nx">queue&lt;/span> &lt;span class="nx">workqueue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RateLimitingInterface&lt;/span>
&lt;span class="nx">recommendations&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">][]&lt;/span>&lt;span class="nx">timestampedRecommendation&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewHorizontalController&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">evtNamespacer&lt;/span> &lt;span class="nx">v1core&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EventsGetter&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">scaleNamespacer&lt;/span> &lt;span class="nx">scaleclient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ScalesGetter&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">hpaNamespacer&lt;/span> &lt;span class="nx">autoscalingclient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscalersGetter&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">mapper&lt;/span> &lt;span class="nx">apimeta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RESTMapper&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">metricsClient&lt;/span> &lt;span class="nx">metricsclient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MetricsClient&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">//从HorizontalPodAutoscalerInformer 获取hpa 实例信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">hpaInformer&lt;/span> &lt;span class="nx">autoscalinginformers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscalerInformer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">//从PodInformer 中获取 pod 信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">podInformer&lt;/span> &lt;span class="nx">coreinformers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PodInformer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">resyncPeriod&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">downscaleStabilisationWindow&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">tolerance&lt;/span> &lt;span class="kt">float64&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">cpuInitializationPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">delayOfInitialReadinessStatus&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">HorizontalController&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="nx">hpaInformer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Informer&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">AddEventHandlerWithResyncPeriod&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="c1">//添加事件处理器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResourceEventHandlerFuncs&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">AddFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">hpaController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enqueueHPA&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">UpdateFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">hpaController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">updateHPA&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">DeleteFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">hpaController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">deleteHPA&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">resyncPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerInformer&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">Informer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SharedIndexInformer&lt;/span>
&lt;span class="nf">Lister&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscalerLister&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>HorizontalPodAutoscalerInformer&lt;/code>的实例化方法中就出现了今天的正主&lt;code>cache.NewSharedIndexInformer()&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/informers/autoscaling/v1/horizontalpodautoscaler.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewFilteredHorizontalPodAutoscalerInformer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">client&lt;/span> &lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Interface&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">namespace&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resyncPeriod&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indexers&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Indexers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tweakListOptions&lt;/span> &lt;span class="nx">internalinterfaces&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TweakListOptionsFunc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SharedIndexInformer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewSharedIndexInformer&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="c1">//用于 list 和 watch api-server 中的资源。比如用来创建 Reflector
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ListWatch&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">ListFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">options&lt;/span> &lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ListOptions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">tweakListOptions&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">tweakListOptions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//使用 HPA API 获取 HPA资源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AutoscalingV1&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">HorizontalPodAutoscalers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">namespace&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">List&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">WatchFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">options&lt;/span> &lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ListOptions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">watch&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Interface&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">tweakListOptions&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">tweakListOptions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//使用 HPA API 监控 HPA资源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AutoscalingV1&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">HorizontalPodAutoscalers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">namespace&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Watch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">autoscalingv1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscaler&lt;/span>&lt;span class="p">{},&lt;/span>
&lt;span class="nx">resyncPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">indexers&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="初始化">初始化&lt;/h2>
&lt;h3 id="informer">Informer&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/index.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Indexers&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">IndexFunc&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">IndexFunc&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">([]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>实例化 Indexers &lt;code>cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/shared_informer.go
&lt;/span>&lt;span class="c1">// ListerWatcher 用于 list 和watch api-server 上的资源
&lt;/span>&lt;span class="c1">//runtime.Object要监控的资源的运行时对象
&lt;/span>&lt;span class="c1">//time.Duration同步的间隔时间
&lt;/span>&lt;span class="c1">//Indexers 提供不同资源的索引数据的信息查询方法，如 namespace =&amp;gt; MetaNamespaceIndexFunc
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewSharedIndexInformer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lw&lt;/span> &lt;span class="nx">ListerWatcher&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">objType&lt;/span> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">defaultEventHandlerResyncPeriod&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indexers&lt;/span> &lt;span class="nx">Indexers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">SharedIndexInformer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">realClock&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">clock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RealClock&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">sharedIndexInformer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">sharedIndexInformer&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">processor&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">sharedProcessor&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">clock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">realClock&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">indexer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">NewIndexer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">DeletionHandlingMetaNamespaceKeyFunc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indexers&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">//初始化 Indexer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">listerWatcher&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">lw&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">objectType&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">objType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">resyncCheckPeriod&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">defaultEventHandlerResyncPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">defaultEventHandlerResyncPeriod&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">defaultEventHandlerResyncPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">cacheMutationDetector&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">NewCacheMutationDetector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%T&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">objType&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="nx">clock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">realClock&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">sharedIndexInformer&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="indexer">Indexer&lt;/h3>
&lt;p>&lt;code>Indexer&lt;/code>提供了本地缓存的实现：计算 key 和对数据进行控制（通过调用&lt;code>ThreadSafeStore&lt;/code>的接口）&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Indexer&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Store&lt;/span>
&lt;span class="nf">Index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indexName&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">([]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">IndexKeys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indexName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indexedValue&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">([]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">ListIndexFuncValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indexName&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;span class="nf">ByIndex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indexName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indexedValue&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">([]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">GetIndexers&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">Indexers&lt;/span>
&lt;span class="nf">AddIndexers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">newIndexers&lt;/span> &lt;span class="nx">Indexers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Indexer&lt;/code> 的创建&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/store.go
&lt;/span>&lt;span class="c1">//keyFunc：key 的生成规则
&lt;/span>&lt;span class="c1">//indexers：提供了索引资源的不同信息的访问方法，如用于查询命名空间的 namespace =&amp;gt; MetaNamespaceIndexFunc
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewIndexer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">keyFunc&lt;/span> &lt;span class="nx">KeyFunc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indexers&lt;/span> &lt;span class="nx">Indexers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Indexer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">cacheStorage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">NewThreadSafeStore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indexers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Indices&lt;/span>&lt;span class="p">{}),&lt;/span>
&lt;span class="nx">keyFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">keyFunc&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="threadsafestore">&lt;code>ThreadSafeStore&lt;/code>&lt;/h4>
&lt;p>ThreadSafeStore提供了对存储的并发访问接口&lt;/p>
&lt;p>注意事项：不能修改Get或List返回的任何内容，因为它不仅会破坏线程安全，还会破坏索引功能。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/thread_safe_store.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewThreadSafeStore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indexers&lt;/span> &lt;span class="nx">Indexers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indices&lt;/span> &lt;span class="nx">Indices&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">ThreadSafeStore&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">threadSafeMap&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">items&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{}{},&lt;/span>
&lt;span class="nx">indexers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">indexers&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">indices&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">indices&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">threadSafeMap&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">lock&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RWMutex&lt;/span>
&lt;span class="nx">items&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="c1">//key =&amp;gt; value
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">indexers&lt;/span> &lt;span class="nx">Indexers&lt;/span> &lt;span class="c1">//value 的信息的访问方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">indices&lt;/span> &lt;span class="nx">Indices&lt;/span> &lt;span class="c1">//索引
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="reflector">Reflector&lt;/h3>
&lt;p>&lt;code>Reflector&lt;/code>通过&lt;code> ListerWatcher&lt;/code>（API）与&lt;code>api-server&lt;/code>交互，对资源进行监控。将资源实例的创建、更新、删除等时间封装后保存在&lt;code>Informer&lt;/code>的FIFO 队列中。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/reflector.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewReflector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lw&lt;/span> &lt;span class="nx">ListerWatcher&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">expectedType&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="nx">store&lt;/span> &lt;span class="nx">Store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resyncPeriod&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Reflector&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">NewNamedReflector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">naming&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetNameFromCallsite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">internalPackages&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">lw&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">expectedType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resyncPeriod&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// NewNamedReflector same as NewReflector, but with a specified name for logging
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewNamedReflector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lw&lt;/span> &lt;span class="nx">ListerWatcher&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">expectedType&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="nx">store&lt;/span> &lt;span class="nx">Store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resyncPeriod&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Reflector&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Reflector&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">listerWatcher&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">lw&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">store&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//FIFO队列
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">period&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">resyncPeriod&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">resyncPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">clock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">clock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RealClock&lt;/span>&lt;span class="p">{},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">setExpectedType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">expectedType&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加同步事件监听器">添加同步事件监听器&lt;/h3>
&lt;p>通过&lt;code>sharedIndexInformer#AddEventHandlerWithResyncPeriod()&lt;/code>注册事件监听器。&lt;/p>
&lt;p>以前面的 HorizontalController为例，创建 informer 的时候添加了三个处理方法：&lt;code>AddFunc&lt;/code>、&lt;code>UpdateFunc&lt;/code>、&lt;code>DeleteFunc&lt;/code>。这三个方法的实现是将对应的元素的 key（固定格式 &lt;code>namespace/name&lt;/code>）从&lt;code> workequeue&lt;/code>中进行入队、出队的操作。（资源控制器监听了该 &lt;code>workqueue&lt;/code>）&lt;/p>
&lt;h2 id="运行">运行&lt;/h2>
&lt;h3 id="controller-manager">&lt;code>controller-manager&lt;/code>&lt;/h3>
&lt;p>在通过&lt;code>InformerFactory&lt;/code>创建&lt;code>Informer&lt;/code>完成后，都会将新建的&lt;code> Informer&lt;/code>加入到&lt;code>InformerFactory&lt;/code>的一个&lt;code>map&lt;/code>中。&lt;/p>
&lt;p>在&lt;code>controller-manager&lt;/code>在完成所有的控制器（各种&lt;code>Controller&lt;/code>，包括 CRD）后，会调用&lt;code>InformerFactory#Start()&lt;/code>来启动&lt;code>InformerFactory&lt;/code>的&lt;code>map&lt;/code>中的所有&lt;code> Informer&lt;/code>（调用&lt;code>Informer#Run()&lt;/code>方法）&lt;/p>
&lt;h3 id="sharedindexinformerrun">&lt;code>sharedIndexInformer#Run()&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/shared_informer.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sharedIndexInformer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stopCh&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">utilruntime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleCrash&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">//创建一个增量的 FIFO队列：DeltaFIFO
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">fifo&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewDeltaFIFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MetaNamespaceKeyFunc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">cfg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Config&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Queue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">fifo&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">ListerWatcher&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listerWatcher&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">ObjectType&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">objectType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">FullResyncPeriod&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resyncCheckPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">RetryOnError&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">ShouldResync&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">shouldResync&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Process&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HandleDeltas&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//启动前的初始化，创建 Controller
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startedLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startedLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">controller&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cfg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">clock&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clock&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">started&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="nx">processorStopCh&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{})&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">wait&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Group&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// Wait for Processor to stop
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">defer&lt;/span> &lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">processorStopCh&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Tell Processor to stop
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StartWithChannel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">processorStopCh&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cacheMutationDetector&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Run&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StartWithChannel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">processorStopCh&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">run&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//退出时的状态清理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startedLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startedLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stopped&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="c1">// Don&amp;#39;t want any new listeners
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}()&lt;/span>
&lt;span class="c1">//实行控制逻辑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stopCh&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="controllerrun">&lt;code>controller#Run()&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/controller.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stopCh&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">utilruntime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleCrash&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">stopCh&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="c1">//创建一个 Reflector，用于从 api-server list 和 watch 资源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewReflector&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ListerWatcher&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ObjectType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Queue&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FullResyncPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ShouldResync&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ShouldResync&lt;/span>
&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clock&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clock&lt;/span>
&lt;span class="c1">//为 controller 指定 Reflector
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reflectorMutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reflector&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">r&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reflectorMutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">wait&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Group&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">//执行Reflector#Run()：会启动一个goroutine开始监控资源，将 watch 到的数据写入到queue（FIFO 队列）中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StartWithChannel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stopCh&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Run&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//持续从 queue（FIFO 队列） 获取数据并进行处理，处理的逻辑在sharedIndexInformer#HandleDeltas()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">wait&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Until&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processLoop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">stopCh&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sharedindexinformerhandledeltas">&lt;code>sharedIndexInformer#HandleDeltas()&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/shared_informer.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sharedIndexInformer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">HandleDeltas&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">blockDeltas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">blockDeltas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">// from oldest to newest
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">d&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="nx">Deltas&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//循环处理 FIFO 队列中取出的资源实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Type&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">Sync&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Added&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Updated&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">//同步（后面详细解读）、新增、更新事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">isSync&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">Sync&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cacheMutationDetector&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AddObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">exists&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">exists&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//如果 indexer 中已经存在，更掉用 update 方法进行更新
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//更新成功后发送“更新”通知：包含了新、旧资源实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">distribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">updateNotification&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">oldObj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newObj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="nx">isSync&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//如果 indexer 中没有该资源实例，则放入 indexer 中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//添加成功后，发送“新增”通知：包含了新加的资源实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">distribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">addNotification&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">newObj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="nx">isSync&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">Deleted&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">//删除事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1">//从 indexer 中删除
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//删除成功后，发送“删除通知”：包含了删除的资源实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">distribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">deleteNotification&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">oldObj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Informer 的实现不算复杂，却在 Kubernetes 中很常见，每种资源的控制也都通过 Informer 来获取&lt;code>api-server&lt;/code>的资源实例的变更。&lt;/p></description></item><item><title>Kubernetes 源码解析 - HPA 水平自动伸缩如何工作</title><link>https://atbug.com/kubernetes-source-code-how-hpa-work/</link><pubDate>Sat, 15 Aug 2020 02:09:37 +0800</pubDate><guid>https://atbug.com/kubernetes-source-code-how-hpa-work/</guid><description>
&lt;p>HPA - Horizontal Pod Autoscaler 的缩写，Pod 水平自动伸缩。通过对 Pod 负载的监控，来自动增加或者减少 Pod 的副本数量。&lt;/p>
&lt;p>从字面意思来看，其主要包含了两部分：&lt;/p>
&lt;ul>
&lt;li>监控 Pod 的负载&lt;/li>
&lt;li>控制 Pod 的副本数量&lt;/li>
&lt;/ul>
&lt;p>那具体是如何实现的呢？以下基于1.17 源码，来分析下 HPA 如何工作。&lt;/p>
&lt;p>&lt;strong>注意：文章中的代码在源码的基础上进行了精简：删掉了注释、序列化等信息，或保留了部分核心代码，加上新的注释。&lt;/strong>&lt;/p>
&lt;h2 id="资源">资源&lt;/h2>
&lt;p>HPA 的资源是&lt;code>HorizontalPodAutoscaler&lt;/code>，在&lt;code>v1&lt;/code>版本中，只支持基于 CPU 指标的计算；在&lt;code>v2beta2&lt;/code>版本中加入了基于内存和自定义指标的计算。&lt;/p>
&lt;h3 id="v1">v1&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/api/autoscaling/v1/types.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">HorizontalPodAutoscaler&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TypeMeta&lt;/span>
&lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ObjectMeta&lt;/span>
&lt;span class="nx">Spec&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerSpec&lt;/span>
&lt;span class="nx">Status&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerStatus&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerSpec&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ScaleTargetRef&lt;/span> &lt;span class="nx">CrossVersionObjectReference&lt;/span> &lt;span class="c1">//监控的目标资源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">MinReplicas&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int32&lt;/span> &lt;span class="c1">//最小副本数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">MaxReplicas&lt;/span> &lt;span class="kt">int32&lt;/span> &lt;span class="c1">//最大副本数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">TargetCPUUtilizationPercentage&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int32&lt;/span> &lt;span class="c1">//触发调整的CPU 使用率
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="v2">v2&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/api/autoscaling/v2beta2/types.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">HorizontalPodAutoscaler&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TypeMeta&lt;/span>
&lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ObjectMeta&lt;/span>
&lt;span class="nx">Spec&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerSpec&lt;/span>
&lt;span class="nx">Status&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerStatus&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerSpec&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ScaleTargetRef&lt;/span> &lt;span class="nx">CrossVersionObjectReference&lt;/span> &lt;span class="c1">//监控的目标资源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">MinReplicas&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int32&lt;/span>
&lt;span class="nx">MaxReplicas&lt;/span> &lt;span class="kt">int32&lt;/span>
&lt;span class="nx">Metrics&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">MetricSpec&lt;/span> &lt;span class="c1">//新加入的自定义指标
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">MetricSpec&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Type&lt;/span> &lt;span class="nx">MetricSourceType&lt;/span> &lt;span class="c1">//指标源的类型：Object（基于某个对象）、Pods（基于pod 数）、Resource（基于资源使用计算，比如v1 版本中cpu）、External（基于外部的指标）。对应 MetricsClient 接口的四个方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Object&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ObjectMetricSource&lt;/span> &lt;span class="c1">//对应 Object 类型的指标源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Pods&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">PodsMetricSource&lt;/span> &lt;span class="c1">//对应 Pod 类型的指标源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Resource&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ResourceMetricSource&lt;/span> &lt;span class="c1">//对应 Resource 类型的指标源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">External&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExternalMetricSource&lt;/span> &lt;span class="c1">//对应 External 类型的指标源
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">ObjectMetricSource&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">DescribedObject&lt;/span> &lt;span class="nx">CrossVersionObjectReference&lt;/span> &lt;span class="c1">//目标对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Target&lt;/span> &lt;span class="nx">MetricTarget&lt;/span> &lt;span class="c1">//指定指标的目标值、平均值或者平均使用率
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Metric&lt;/span> &lt;span class="nx">MetricIdentifier&lt;/span> &lt;span class="c1">//指标标识：名字、label选择器
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">PodsMetricSource&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Metric&lt;/span> &lt;span class="nx">MetricIdentifier&lt;/span>
&lt;span class="nx">Target&lt;/span> &lt;span class="nx">MetricTarget&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">ResourceMetricSource&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Name&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResourceName&lt;/span>
&lt;span class="nx">Target&lt;/span> &lt;span class="nx">MetricTarget&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">ExternalMetricSource&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Metric&lt;/span> &lt;span class="nx">MetricIdentifier&lt;/span>
&lt;span class="nx">Target&lt;/span> &lt;span class="nx">MetricTarget&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">MetricTarget&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Type&lt;/span> &lt;span class="nx">MetricTargetType&lt;/span> &lt;span class="c1">//类型：Utilization、Value、AverageValue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Quantity&lt;/span>
&lt;span class="nx">AverageValue&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Quantity&lt;/span>
&lt;span class="nx">AverageUtilization&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int32&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="控制器-horizontalcontroller">控制器 &lt;code>HorizontalController&lt;/code>&lt;/h2>
&lt;p>&lt;code>HorizontalController&lt;/code>被通过 key &lt;code>horizontalpodautoscaling&lt;/code> 加入到 controller manager 中。用来控制&lt;code>HorizontalPodAutoscaler&lt;/code>实例。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">///cmd/kube-controller-manager/app/controllermanager.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewControllerInitializers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">loopMode&lt;/span> &lt;span class="nx">ControllerLoopMode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">InitFunc&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="nx">controllers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;horizontalpodautoscaling&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">startHPAController&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="获取负载指标">获取负载指标&lt;/h3>
&lt;p>既然 Pod 副本数量的计算是基于 Pod 的负载情况，那边需要途径获取负载数据，这个途径就是&lt;code>MetricsClient&lt;/code>。&lt;/p>
&lt;p>&lt;code>MetricsClient&lt;/code>有两种实现：REST 方式和传统（Legacy）方式，分别是&lt;code>restMetricsClient&lt;/code>和&lt;code>HeapsterMetricsClient&lt;/code>。一个是REST 实现以支持自定义的指标；一个是传统的 Heapster 指标（heapster 已经从 1.13 版本开始被废弃了）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//cmd/kube-controller-manager/app/autoscaling.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">startHPAController&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">ControllerContext&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">AvailableResources&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">schema&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GroupVersionResource&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Group&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;autoscaling&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Version&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;v1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Resource&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;horizontalpodautoscalers&amp;#34;&lt;/span>&lt;span class="p">}]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ComponentConfig&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HPAController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscalerUseRESTClients&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// use the new-style clients if support for custom metrics is enabled
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nf">startHPAControllerWithRESTClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">startHPAControllerWithLegacyClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="控制器逻辑horizontalcontrollerrun">控制器逻辑&lt;code>HorizontalController#Run()&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//pkg/controller/podautoscaler/horizontal.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">HorizontalController&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stopCh&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">utilruntime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleCrash&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ShutDown&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">klog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Infof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Starting HPA controller&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">klog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Infof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Shutting down HPA controller&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 等待 informer 完成HorizontalPodAutoscaler相关事件的同步
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WaitForNamedCacheSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;HPA&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">stopCh&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hpaListerSynced&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">podListerSynced&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// start a single worker (we may wish to start more in the future)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//执行 worker 逻辑，直到收到退出指令
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">go&lt;/span> &lt;span class="nx">wait&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Until&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">worker&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">stopCh&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">stopCh&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>worker&lt;/code>的核心是从工作队列中获取一个 key（格式为：namespace/name），然后对 key 进行 reconcile（这个词是Kubernetes 的核心，翻译为“调和”、“和解”。个人更喜欢“调整”，即&lt;strong>将实例的状态调整为期望的状态&lt;/strong>。此处，对于 hpa 的实例的每个事件，都会按照特定的逻辑调整目标实例的 Pod 的副本数量。）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//pkg/controller/podautoscaler/horizontal.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">HorizontalController&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">worker&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">processNextWorkItem&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">klog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Infof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;horizontal pod autoscaler controller worker shutting down&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">HorizontalController&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">processNextWorkItem&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">quit&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">quit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">deleted&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">reconcileKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">utilruntime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">deleted&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AddRateLimited&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对 key 进行 reconcile 的调用栈：&lt;code>HorizontalController#reconcileKey -&amp;gt; HorizontalController#reconcileAutoscaler -&amp;gt; HorizontalController#computeReplicasForMetrics -&amp;gt; ScaleInterface#Update&lt;/code>&lt;/p>
&lt;p>简单来说就是先从&lt;code>Informer&lt;/code>中拿到 key 对应的&lt;code>HorizontalPodAutoscaler&lt;/code>资源实例；然后通过&lt;code>HorizontalPodAutoscaler&lt;/code>实例中的信息，检查目标资源的Pod 负载以及当前的副本数，得到期望的 Pod 副本数；最终通过 Scale API 来调整 Pod 的副本数。最后会将调整的原因、计算的结果等信息写入&lt;code>HorizontalPodAutoscaler&lt;/code>实例的 condition 中。&lt;/p>
&lt;h3 id="计算期望的副本数">计算期望的副本数&lt;/h3>
&lt;p>对每个指标进行计算，都会得到建议的副本数，然后最大的那个就是最终的期望副本数。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//pkg/controller/podautoscaler/horizontal.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">HorizontalController&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">computeReplicasForMetrics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hpa&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">autoscalingv2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscaler&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">scale&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">autoscalingv1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Scale&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">metricSpecs&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">autoscalingv2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MetricSpec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">replicas&lt;/span> &lt;span class="kt">int32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">metric&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">statuses&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">autoscalingv2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MetricStatus&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">timestamp&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Time&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">metricSpec&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">metricSpecs&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">replicaCountProposal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">metricNameProposal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">timestampProposal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">condition&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">computeReplicasForMetric&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hpa&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">metricSpec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">specReplicas&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">statusReplicas&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">selector&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">statuses&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">invalidMetricsCount&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">invalidMetricCondition&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">condition&lt;/span>
&lt;span class="nx">invalidMetricError&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">invalidMetricsCount&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">replicas&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">replicaCountProposal&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">replicas&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">timestamp&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">timestampProposal&lt;/span>
&lt;span class="nx">replicas&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">replicaCountProposal&lt;/span>
&lt;span class="nx">metric&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">metricNameProposal&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>#computeStatusForObjectMetric&lt;/code>（注意这个方法名少了个 &amp;ldquo;s&amp;rdquo;）使用&lt;code>MetricsClient&lt;/code>得到指定指标的值。&lt;/p>
&lt;p>这个流程的细节还可以继续深挖，但到此已够我们理解 HPA​ 的实现方式了。​&lt;/p></description></item><item><title>Tekton 的工作原理</title><link>https://atbug.com/how-tekton-works/</link><pubDate>Sat, 23 May 2020 22:47:14 +0800</pubDate><guid>https://atbug.com/how-tekton-works/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/24/tekton.jpeg" alt="tekton">&lt;/p>
&lt;p>&lt;em>这篇文章是基于 Tekton Pipeline 的最新版本&lt;code>v0.12.1&lt;/code>版本。&lt;/em>&lt;/p>
&lt;p>快速入门请参考：&lt;a href="https://atbug.com/tekton-trigger-practice/">云原生 CICD: Tekton Pipeline 实战&lt;/a> ，&lt;em>实战是基于版本 v0.10.x&lt;/em>。&lt;/p>
&lt;h2 id="pipeline-crd-与核心资源的关系">Pipeline CRD 与核心资源的关系&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ k api-resources --api-group&lt;span class="o">=&lt;/span>tekton.dev
NAME SHORTNAMES APIGROUP NAMESPACED KIND
clustertasks tekton.dev &lt;span class="nb">false&lt;/span> ClusterTask
conditions tekton.dev &lt;span class="nb">true&lt;/span> Condition
pipelineresources tekton.dev &lt;span class="nb">true&lt;/span> PipelineResource
pipelineruns pr,prs tekton.dev &lt;span class="nb">true&lt;/span> PipelineRun
pipelines tekton.dev &lt;span class="nb">true&lt;/span> Pipeline
taskruns tr,trs tekton.dev &lt;span class="nb">true&lt;/span> TaskRun
tasks tekton.dev &lt;span class="nb">true&lt;/span> Task
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Tekton Pipelines提供了上面的CRD，其中部分CRD与k8s core中资源相对应&lt;/p>
&lt;ul>
&lt;li>Task =&amp;gt; Pod&lt;/li>
&lt;li>Task.Step =&amp;gt; Container&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/23/15902164552270.jpg" alt="">&lt;/p>
&lt;h2 id="工作原理">工作原理&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/23/15902280074872.jpg" alt="">
(图片来自)&lt;/p>
&lt;p>Tekton Pipeline 是基于 Knative 的实现，pod &lt;code>tekton-pipelines-controller&lt;/code> 中有两个 &lt;a href="https://knative.dev/docs/eventing/samples/writing-receive-adapter-source/03-controller/">Knative Controller&lt;/a>的实现：PipelineRun 和 TaskRun。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/23/15902270934199.jpg" alt="">&lt;/p>
&lt;h3 id="task的执行顺序">Task的执行顺序&lt;/h3>
&lt;p>PipelineRun Controller 的 &lt;code>#reconcile()&lt;/code>方法，监控到有&lt;code>PipelineRun&lt;/code>被创建。然后从&lt;code>PipelineSpec&lt;/code>的 tasks 列表，构建出一个图（&lt;code>graph&lt;/code>），用于描述&lt;code>Pipeline&lt;/code>中 Task 间的依赖关系。依赖关系是通过&lt;code>runAfter&lt;/code>和&lt;code>from&lt;/code>，进而控制&lt;a href="#Task%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F">Task的执行顺序&lt;/a>。与此同时，准备&lt;code>PipelineRun&lt;/code>中定义的&lt;code>PipelineResources&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// Node represents a Task in a pipeline.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Node&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Task represent the PipelineTask in Pipeline
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Task&lt;/span> &lt;span class="nx">Task&lt;/span>
&lt;span class="c1">// Prev represent all the Previous task Nodes for the current Task
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Prev&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Node&lt;/span>
&lt;span class="c1">// Next represent all the Next task Nodes for the current Task
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Next&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Node&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Graph represents the Pipeline Graph
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Graph&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//Nodes represent map of PipelineTask name to Node in Pipeline Graph
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Nodes&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Node&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">Build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tasks&lt;/span> &lt;span class="nx">Tasks&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Graph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>PipelineRun&lt;/code>中定义的参数（parameters）也会注入到&lt;code>PipelineSpec&lt;/code>中：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">pipelineSpec&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">resources&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ApplyParameters&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pipelineSpec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来就是调用&lt;code>dag#GetSchedulable()&lt;/code>方法，获取未完成（通过Task状态判断）的 Task 列表；&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">GetSchedulable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">g&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Graph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">doneTasks&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">struct&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为 Task A 创建&lt;code>TaskRun&lt;/code>，假如&lt;code>Task&lt;/code>配置了&lt;code>Condition&lt;/code>。会先为 condition创建一个&lt;code>TaskRun&lt;/code>，只有在 condition 的&lt;code>TaskRun&lt;/code>运行成功，才会运行 A 的&lt;code>TaskRun&lt;/code>；否则就跳过。&lt;/p>
&lt;h3 id="step的执行顺序">Step的执行顺序&lt;/h3>
&lt;p>这一部分篇幅较长，之前的文章 &lt;a href="https://atbug.com/control-process-order-of-pod-containers/">控制 Pod 内容器的启动顺序&lt;/a> 中提到过。&lt;/p>
&lt;p>这里补充一下&lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/#the-downward-api">Kubernetes Downward API&lt;/a>的使用，Kubernetes Downward API的引入，控制着 &lt;code>Task&lt;/code> 的第一个 &lt;code>Step&lt;/code> 在何时执行。&lt;/p>
&lt;p>&lt;code>TaskRun&lt;/code> Controller 在 reconciling 的过程中，在相应的 &lt;code>Pod&lt;/code> 状态变为&lt;code>Running&lt;/code>时，会将&lt;code>tekton.dev/ready=READY&lt;/code>写入到 Pod 的 annotation 中，来通知第一个&lt;code>Step&lt;/code>的执行。&lt;/p>
&lt;p>Pod的部分内容：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">wait_file&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/downward/ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">wait_file_content&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">post_file&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/tools/0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">termination_path&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/termination&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/ko-app/git-init&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ssh://git@gitlab.nip.io:8022/addozhang/logan-pulse.git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">develop&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">path&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/workspace/git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/tools/entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tekton/downward&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-internal-downward&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">downwardAPI&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">defaultMode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">420&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">items&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">fieldRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">metadata.annotations[&amp;#39;tekton.dev/ready&amp;#39;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-internal-downward&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对原生的排序step container进一步处理：启动命令使用&lt;code>entrypoint&lt;/code>提供，并设置执行参数：&lt;/p>
&lt;p>&lt;code>entrypoint.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">orderContainers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">entrypointImage&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">steps&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">results&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">v1alpha1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TaskResult&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">initContainer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;place-tools&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Image&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">entrypointImage&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Command&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;cp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;/ko-app/entrypoint&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">entrypointBinary&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">VolumeMounts&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">VolumeMount&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">toolsMount&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">steps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;No steps specified&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">steps&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">argsForEntrypoint&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">argsForEntrypoint&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="c1">// First step waits for the Downward volume file.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s">&amp;#34;-wait_file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">downwardMountPoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">downwardMountReadyFile&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="s">&amp;#34;-wait_file_content&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Wait for file contents, not just an empty file.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Start next step.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s">&amp;#34;-post_file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mountPoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s">&amp;#34;-termination_path&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">terminationPath&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1">// All other steps wait for previous file, write next file.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">argsForEntrypoint&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="s">&amp;#34;-wait_file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mountPoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s">&amp;#34;-post_file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mountPoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s">&amp;#34;-termination_path&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">terminationPath&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="自动运行的容器">自动运行的容器&lt;/h3>
&lt;p>这些自动运行的容器作为 pod 的&lt;code>initContainer&lt;/code>会在 step 容器运行之前运行&lt;/p>
&lt;h4 id="credential-initializer">&lt;code>credential-initializer&lt;/code>&lt;/h4>
&lt;p>用于将 &lt;code>ServiceAccount&lt;/code> 的相关secrets持久化到容器的文件系统中。比如 ssh 相关秘钥、config文件以及know_hosts文件；docker registry 相关的凭证则会被写入到 docker 的配置文件中。&lt;/p>
&lt;h4 id="working-dir-initializer">&lt;code>working-dir-initializer&lt;/code>&lt;/h4>
&lt;p>收集&lt;code>Task&lt;/code>内的各个&lt;code>Step&lt;/code>的&lt;code>workingDir&lt;/code>配置，初始化目录结构&lt;/p>
&lt;h4 id="place-scripts">&lt;code>place-scripts&lt;/code>&lt;/h4>
&lt;p>假如&lt;code>Step&lt;/code>使用的是&lt;code>script&lt;/code>配置（与command+args相对），这个容器会将脚本代码（&lt;code>script&lt;/code>字段的内容）持久化到&lt;code>/tekton/scripts&lt;/code>目录中。&lt;/p>
&lt;p>注：所有的脚本会自动加上&lt;code>#!/bin/sh\nset -xe\n&lt;/code>，所以&lt;code>script&lt;/code>字段里就不必写了。&lt;/p>
&lt;h4 id="place-tools">&lt;code>place-tools&lt;/code>&lt;/h4>
&lt;p>将&lt;code>entrypoint&lt;/code>的二进制文件，复制到&lt;code>/tekton/tools/entrypoint&lt;/code>.&lt;/p>
&lt;h3 id="taskstep间的数据传递">Task/Step间的数据传递&lt;/h3>
&lt;p>针对不同的数据，有多种不同的选择。比如&lt;code>Workspace&lt;/code>、&lt;code>Result&lt;/code>、&lt;code>PipelineResource&lt;/code>。对于由于&lt;code>Task&lt;/code>的执行是通过&lt;code>Pod&lt;/code>来完成的，而&lt;code>Pod&lt;/code>会调度到不同的节点上。因此&lt;code>Task&lt;/code>间的数据传递，需要用到持久化的卷。&lt;/p>
&lt;p>而&lt;code>Step&lt;/code>作为&lt;code>Pod&lt;/code>中的容器来运行，&lt;/p>
&lt;h4 id="workspace">Workspace&lt;/h4>
&lt;p>工作区，可以理解为一个挂在到容器上的卷，用于文件的传递。&lt;/p>
&lt;h5 id="persistentvolumeclaim">&lt;code>persistentVolumeClaim&lt;/code>&lt;/h5>
&lt;p>引用已存在&lt;code>persistentVolumeClaim&lt;/code>卷（volume）。这种工作空间，可多次使用，需要先进行创建。比如 Java 项目的 &lt;code>maven&lt;/code>，编译需要本地依赖库，这样可以节省每次编译都要下载依赖包的成本。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2-pv-claim&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolume&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2-pv&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">local&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storageClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">capacity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">10Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteMany&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/data/.m2&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolumeClaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2-pv-claim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storageClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># volumeName: m2-pv&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteMany&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">10Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="volumeclaimtemplate">&lt;code>volumeClaimTemplate&lt;/code>&lt;/h5>
&lt;p>为每个&lt;code>PipelineRun&lt;/code>或者&lt;code>TaskRun&lt;/code>创建&lt;code>PersistentVolumeClaim&lt;/code>卷（volume）的模板。比如一次构建需要从 git 仓库克隆代码，而针对不同的流水线代码仓库是不同的。这里就会用到&lt;code>volumeClaimTemplate&lt;/code>，为每次构建创建一个&lt;code>PersistentVolumeClaim&lt;/code>卷。（从0.12.0开始）&lt;/p>
&lt;p>生命周期同&lt;code>PipelineRun&lt;/code>或者&lt;code>TaskRun&lt;/code>，运行之后释放。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeClaimTemplate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteMany&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>相较于&lt;code>persistantVolumeClain&lt;/code>类型的workspace，&lt;code>volumeClaimTemplate&lt;/code>不需要在每次在&lt;code>PipelineRun&lt;/code>完成后清理工作区；并发情况下可能会出现问题。&lt;/p>
&lt;h5 id="emptydir">&lt;code>emptyDir&lt;/code>&lt;/h5>
&lt;p>引用&lt;code>emptyDir&lt;/code>卷，跟随&lt;code>Task&lt;/code>生命周期的临时目录。适合在&lt;code>Task&lt;/code>的&lt;code>Step&lt;/code>间共享数据，无法在多个&lt;code>Task&lt;/code>间共享。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">temp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">emptyDir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="configmap">&lt;code>configMap&lt;/code>&lt;/h5>
&lt;p>引用一个&lt;code>configMap&lt;/code>卷，将&lt;code>configMap&lt;/code>卷作为工作区，有如下限制：&lt;/p>
&lt;ul>
&lt;li>挂载的卷是&lt;code>只读&lt;/code>的&lt;/li>
&lt;li>需要提前创建&lt;code>configMap&lt;/code>&lt;/li>
&lt;li>&lt;code>configMap&lt;/code>的&lt;a href="https://github.com/kubernetes/kubernetes/blob/f16bfb069a22241a5501f6fe530f5d4e2a82cf0e/pkg/apis/core/validation/validation.go#L5042">大小限制为1MB（K8s的限制）&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>使用场景，比如使用&lt;code>maven&lt;/code>编译Java项目，配置文件&lt;code>settings.xml&lt;/code>可以使用&lt;code>configMap&lt;/code>作为工作区&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven-settings&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">configmap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven-settings&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="secret">&lt;code>secret&lt;/code>&lt;/h5>
&lt;p>用于引用&lt;code>secret&lt;/code>卷，同&lt;code>configMap&lt;/code>工作区一样，也有限制：&lt;/p>
&lt;ul>
&lt;li>挂载的卷是&lt;code>只读&lt;/code>的&lt;/li>
&lt;li>需要提前创建&lt;code>secret&lt;/code>&lt;/li>
&lt;li>&lt;code>secret&lt;/code>的&lt;a href="https://github.com/kubernetes/kubernetes/blob/f16bfb069a22241a5501f6fe530f5d4e2a82cf0e/pkg/apis/core/validation/validation.go#L5042">大小限制为1MB（K8s的限制）&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="result">Result&lt;/h4>
&lt;p>&lt;code>results&lt;/code>字段可以用来配置多个文件用来存储&lt;code>Tasks&lt;/code>的执行结果，这些文件保存在&lt;code>/tekton/results&lt;/code>目录中。&lt;/p>
&lt;p>在&lt;code>Pipeline&lt;/code>中，可以通过&lt;code>tasks.[task-nanme].results.[result-name]&lt;/code>注入到其他&lt;code>Task&lt;/code>的参数中。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">A simple task that prints the date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">results&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-unix-timestamp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The current date in unix timestamp format&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-human-readable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The current date in human readable format&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date-unix-timestamp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bash:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> #!/usr/bin/env bash
&lt;/span>&lt;span class="sd"> date +%s | tee $(results.current-date-unix-timestamp.path)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date-humman-readable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bash:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> #!/usr/bin/env bash
&lt;/span>&lt;span class="sd"> date | tee $(results.current-date-human-readable.path)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PipelineRun&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pass-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pipelineSpec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tasks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">read-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runAfter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#配置执行顺序&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">print-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskSpec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-unix-timestamp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">string&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-human-readable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">string&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">read&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> echo $(params.current-date-unix-timestamp)
&lt;/span>&lt;span class="sd"> echo $(params.current-date-human-readable)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-unix-timestamp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(tasks.print-date.results.current-date-unix-timestamp)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 注入参数&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-human-readable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(tasks.print-date.results.current-date-human-readable)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 注入参数 &lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">┌──────Logs(tekton-pipelines/pass-date-read-date-rhlf2-pod-9b2sk)[all] ────────── │
│ place-scripts stream closed ││ step-read 1590242170 │
│ step-read Sat May 23 13:56:10 UTC 2020 ││ step-read + echo 1590242170 │
│ step-read + echo Sat May 23 13:56:10 UTC 2020 │
│ place-tools stream closed │
│ step-read stream closed │
│
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="pipelineresource">PipelineResource&lt;/h4>
&lt;p>&lt;code>PipelineResource&lt;/code>在最后提，因为目前只是&lt;code>alpha&lt;/code>版本，何时会进入&lt;code>beta&lt;/code>或者弃用目前还是未知数。有兴趣的可以看下这里：&lt;a href="https://tekton.dev/docs/pipelines/resources/#why-aren-t-pipelineresources-in-beta">Why Aren’t PipelineResources in Beta?&lt;/a>&lt;/p>
&lt;p>简单来说，&lt;code>PipelineResource&lt;/code>可以通过其他的方式实现，而其本身也存在弊端：比如实现不透明，debug有难度；功能不够强；降低了Task的重用性等。&lt;/p>
&lt;p>比如&lt;code>git&lt;/code>类型的&lt;code>PipelineResource&lt;/code>，可以通过&lt;code>workspace&lt;/code>和&lt;code>git-clone&lt;/code> Task来实现；存储类型的，也可以通过&lt;code>workspace&lt;/code>来实现。&lt;/p>
&lt;p>这也就是为什么&lt;a href="#Workspace">上面介绍workspace的篇幅&lt;/a>比较大。个人也偏向于使用&lt;code>workspace&lt;/code>，灵活度高；使用workspace的Task重用性强。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://atbug.com/tekton-trigger-practice">云原生 CICD: Tekton Pipeline 实战&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://atbug.com/control-process-order-of-pod-containers">控制 Pod 内容器的启动顺序&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://knative.dev/docs/eventing/samples/writing-receive-adapter-source/03-controller">Knative Controller&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tekton.dev/docs/pipelines/resources/#why-aren-t-pipelineresources-in-beta">Why Aren’t PipelineResources in Beta?&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>控制 Pod 内容器的启动顺序</title><link>https://atbug.com/control-process-order-of-pod-containers/</link><pubDate>Thu, 12 Mar 2020 22:05:16 +0800</pubDate><guid>https://atbug.com/control-process-order-of-pod-containers/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/30/screenshot-20210430-at-092623.png" alt="">&lt;/p>
&lt;p>2021.4.30 更新：&lt;/p>
&lt;p>最新的方案，请跳转新篇 &lt;a href="https://mp.weixin.qq.com/s/8DqF_N_fjiM9AOouvddvgA">Kubernetes 上如何控制容器的启动顺序&lt;/a>。&lt;/p>
&lt;hr>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>众所周知, Kubernetes Pod 内有两种容器: 初始化容器(init container)和应用容器(app container). 其中初始化容器的执行先于应用容器, 并且初始化容器和应用容器的个数分别为 &lt;code>0~n&lt;/code> 和 &lt;code>1~n&lt;/code>.&lt;/p>
&lt;p>初始化容器会按照顺序执行, 顺序执行的前提是初始化容器始终会运行到完成(completed)状态. 而应用容器恰好相反: 启动顺序随机, 并始终保持运行(running)状态.&lt;/p>
&lt;h2 id="问题">问题&lt;/h2>
&lt;p>工作中有个架构的方案使用到了 sidecar 容器: 将基础组件功能从容器转移到 sidecar 容器中, 其中有个功能是从远程配置中心获取配置并保持实时更新. 保证实时更新没有问题, 但是配置文件需要在 app 启动之前完成初始化.&lt;/p>
&lt;p>对于同为&amp;quot;应用容器&amp;quot;类型的 sidecar 容器来说, 由于容器启动顺序随机而无法做到这一点.&lt;/p>
&lt;p>当时我们给定的方案是增加一个初始化容器进行配置的初始化, 不可避免的我们需要增加一个额外的容器, 即使是这个容器的生命周期非常短.&lt;/p>
&lt;p>追求极致的我们总是对这个额外增加的容器耿耿于怀: 假如能控制应用容器的启动顺序&amp;hellip;&lt;/p>
&lt;h3 id="新发现">新发现&lt;/h3>
&lt;p>近期在研究 CDF (Continuous Delivery Foundation)下的 &lt;a href="https://github.com/tektoncd">Tekton&lt;/a>, 其中有个概念是其将流水线(pipeline)中的各个步骤(step)作为应用容器在同一个 Pod 中运行.&lt;/p>
&lt;p>我们都知道流水线中的步骤是按照定义的顺序执行的, 那么 Tekton 是如何保证应用容器的执行顺序的?&lt;/p>
&lt;p>查看 pod 的 manifest 之后发现了下面的容器配置 (这个容器的作用从 git 仓库克隆代码)&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">wait_file&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/downward/ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">wait_file_content&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">post_file&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/tools/0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">termination_path&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/termination&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/ko-app/git-init&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">http://gitlab.nip.io:8088/addozhang/tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">develop&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">path&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/workspace/git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/tools/entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>克隆代码的命令是:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">git-init -url http://gitlab.nip.io:8088/addozhang/tekton-test -revision develop -path /workspace/git-source
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是容器的启动命令是&lt;code>/tekton/tools/entrypoint&lt;/code>并带上了一坨的参数(此处略过, 后面分析).&lt;/p>
&lt;p>翻看了下&lt;a href="https://github.com/tektoncd/pipeline/tree/master/cmd/entrypoint">文档&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>This binary is used to override the entrypoint of a container by wrapping it. In tektoncd/pipeline this is used to make sure Task&amp;rsquo;s steps are executed in order, or for sidecars.&lt;/p>
&lt;p>这个二进制文件被用于通过包装的方式来覆盖容器的入口点. 在 tektoncd/pipeline 中确保任务中的步骤或者 sidecar 被顺序地执行.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>-entrypoint&lt;/code>: 原始的容器启动命令, 作为 &lt;code>entrypoint&lt;/code> 的子进程运行. 即上面的 &lt;code>git-init XXXX&lt;/code>&lt;/li>
&lt;li>&lt;code>-post_file&lt;/code>: 子进程运行结束后写的文件路径(即上面的&lt;code>/tekton/tools/0&lt;/code>). 如果子进程执行失败, 则写一个&lt;code>{{post_file}}.err&lt;/code>文件, 而不是&lt;code>{{post_file}}&lt;/code>&lt;/li>
&lt;li>&lt;code>-wait_file&lt;/code>: 启动子进程&lt;strong>前&lt;/strong>监控的文件路径(即上面的&lt;code>/tekton/downward/ready&lt;/code>). 通过监控到的&lt;code>{{watch_file}}&lt;/code>或者&lt;code>{{watch_file}}.err&lt;/code>文件来决定执行子进程, 还是跳过执行然后写入&lt;code>{{post_file}}.err&lt;/code>文件并返回错误码(&lt;code>exitCode&lt;/code> &amp;gt;= 0)&lt;/li>
&lt;li>&lt;code>-wait_file_content&lt;/code>: 等待&lt;code>wait_file&lt;/code>有实际内容写入, 持续监控&lt;code>wait_file&lt;/code>直到有内容写入.&lt;/li>
&lt;/ul>
&lt;p>回头看上面容器配置:&lt;/p>
&lt;ol>
&lt;li>容器的&lt;code>entrypoint&lt;/code>启动进程&lt;/li>
&lt;li>监控到&lt;code>/tekton/downward/ready&lt;/code>文件的创建, 并等待文件内容的写入&lt;/li>
&lt;li>执行&lt;code>git-init&lt;/code>子进程, 从 git 仓库克隆源码&lt;/li>
&lt;li>创建&lt;code>/tekton/tools/0&lt;/code>文件&lt;/li>
&lt;/ol>
&lt;h3 id="实际应用">实际应用&lt;/h3>
&lt;p>这个方案是否能解决我们的问题, 还是有一定的局限性的.&lt;/p>
&lt;p>首先需要应用容器的启动命令进行重新的编排, 这个存在一定的挑战. 需要统一应用的启动命令才能做到规模化+自动化.&lt;/p>
&lt;p>其次引入可用于监控的文件, 需要额外增加&lt;code>Volume&lt;/code>用于跨容器的文件访问. 当然通过增加&lt;code>emptyDir&lt;/code>的&lt;code>Volume&lt;/code>即可.&lt;/p>
&lt;p>同时 sidecar 容器需要在完成启动后创建&lt;code>post_file&lt;/code>, 应用容器可以使用这个&lt;code>entrypoint&lt;/code>进行包装.&lt;/p>
&lt;p>如果要突破这个局限, CRD 无非是个优秀的方案. 下一篇, 我们通过一个简单的 CRD 来实现.&lt;/p></description></item><item><title>Tekton Trigger 介绍</title><link>https://atbug.com/tekton-trigger-glance/</link><pubDate>Wed, 05 Feb 2020 18:03:15 +0800</pubDate><guid>https://atbug.com/tekton-trigger-glance/</guid><description>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>Tekton 的介绍请参考&lt;a href="https://atbug.com/tekton-pipeline-practice/">Tekton Pipeline 实战&lt;/a>.&lt;/p>
&lt;p>通常, CI/CD 事件应该包含如下信息:&lt;/p>
&lt;ul>
&lt;li>确定事件的类型(比如 GitHub Push, GitLab Issue, Docker Hub Webhook 等)&lt;/li>
&lt;li>可从特定管道访问并映射到特定管道 (从事件负载中获取 SHA 信息, 然后在管道中使用)&lt;/li>
&lt;li>准确地触发管道 (基于有效负载值触发管道)&lt;/li>
&lt;/ul>
&lt;p>Tekton API 的设计分离了配置(比如 PipelineRun VS Pipeline), 保证了 step 可以被重用. 但是没有提供动态封装配置的机制来生成资源(尤其是 PipelineRun 和 PipelineResource). &lt;a href="https://github.com/tektoncd/triggers">Triggers&lt;/a> 通过下面的 CRDs 在架构上对 Tekton 进行了扩展:&lt;/p>
&lt;ul>
&lt;li>&lt;code>TriggerTemplate&lt;/code>: 创建资源的模板(比如用来创建 PipelineResource 和 PipelineRun)&lt;/li>
&lt;li>&lt;code>TriggerBinding&lt;/code>: 校验事件并提取负载字段&lt;/li>
&lt;li>&lt;code>EventListener&lt;/code>: 连接&lt;code>TriggerBinding&lt;/code>和&lt;code>TriggerTemplate&lt;/code>到可寻址的端点(事件接收器). 使用从各个&lt;code> TriggerBinding&lt;/code>中提取的参数来创建&lt;code>TriggerTemplate&lt;/code>中指定的 resources. 同样通过&lt;code> interceptor&lt;/code>字段来指定外部服务来对事件负载进行预处理.&lt;/li>
&lt;li>&lt;code>ClusterTriggerBinding&lt;/code>: cluster级别的&lt;code>TriggerBinding&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/uPic/rymZ0w.jpg" alt="">&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply --filename https://storage.googleapis.com/tekton-releases/triggers/latest/release.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查新增的 CRD: &lt;code>kubectl api-resources | grep tekton&lt;/code>. Triggers 引入了 3 个 CRD: &lt;code>TriggerTemplate&lt;/code>, &lt;code>TriggerBinding&lt;/code>,&lt;code>EventListener&lt;/code>.&lt;/p>
&lt;p>检查新增的 deployment: &lt;code>tekton-triggers-webhook&lt;/code>, &lt;code>tekton-triggers-controller&lt;/code>.&lt;/p></description></item><item><title>Tekton Dashboard 安装</title><link>https://atbug.com/tekton-dashboard-installation/</link><pubDate>Sat, 01 Feb 2020 12:39:28 +0800</pubDate><guid>https://atbug.com/tekton-dashboard-installation/</guid><description>
&lt;p>Tekton 提供了&lt;a href="https://github.com/tektoncd/dashboard">dashboard&lt;/a>方便用户管理和查看 Tekton PipelineRun 和 TaskRun 以及创建, 执行和完成过程中涉及的资源. 它还允许按标签过滤 PipelineRun 和 TaskRun.&lt;/p>
&lt;h3 id="安装方法">安装方法&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply --filename https://github.com/tektoncd/dashboard/releases/download/v0.4.1/dashboard_latest_release.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查dashboard的运行情况, &lt;code>STATUS&lt;/code>为&lt;code>Running&lt;/code>的话则说明运行成功.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl get pods --namespace tekton-pipelines
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="访问">访问&lt;/h3>
&lt;p>访问Tekton的Dashboard有两种方式, 一种是通过&lt;code>port-forward&lt;/code>, 另一种是通过&lt;code>ingress&lt;/code>来访问.&lt;/p>
&lt;h4 id="port-forward">port-forward&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl port-forward svc/tekton-dashboard &lt;span class="m">9097&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="ingress">ingress&lt;/h4>
&lt;p>先检查ingress是否开启.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube addon list
...
- ingress: enabled
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果是disabled的话, 通过命令&lt;code>minikube addons enable ingress&lt;/code>.&lt;/p>
&lt;p>&lt;em>注意: 这里拉取&lt;code>quay.io/kubernetes-ingress-controller/nginx-ingress-controller&lt;/code>镜像可能比较慢, 建议使用国内的镜像, 比如&lt;code>quay.mirrors.ustc.edu.cn/kubernetes-ingress-controller/nginx-ingress-controller&lt;/code>&lt;/em>&lt;/p>
&lt;p>修改&lt;code>basic-dashboard-ingress.yaml&lt;/code>中的&lt;code>host&lt;/code>地址:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-dashboard&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-dashboard.nip.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-dashboard&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9097&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;code>kubectl apply -f basic-dashboard-ingress.yaml&lt;/code>.&lt;/p>
&lt;p>还有最后一步, 在&lt;code>/etc/hosts&lt;/code>中添加一条解析&lt;code>x.x.x.x tekton-dashboard.nip.io&lt;/code>, ip地址通过&lt;code>minikube ip&lt;/code>来获取&lt;/p>
&lt;p>浏览器中打开&lt;code> tekton-dashboard.nip.io&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/uPic/6weoXL.jpg" alt="">&lt;/p></description></item><item><title>Tekton安装及Hello world</title><link>https://atbug.com/tekton-installation-and-sample/</link><pubDate>Fri, 17 Jan 2020 19:17:14 +0800</pubDate><guid>https://atbug.com/tekton-installation-and-sample/</guid><description>
&lt;h2 id="安装">安装&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查安装的tekton相关的CRD:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl api-resources &lt;span class="p">|&lt;/span> grep tekton
clustertasks tekton.dev &lt;span class="nb">false&lt;/span> ClusterTask
conditions tekton.dev &lt;span class="nb">true&lt;/span> Condition
pipelineresources tekton.dev &lt;span class="nb">true&lt;/span> PipelineResource
pipelineruns pr,prs tekton.dev &lt;span class="nb">true&lt;/span> PipelineRun
pipelines tekton.dev &lt;span class="nb">true&lt;/span> Pipeline
taskruns tr,trs tekton.dev &lt;span class="nb">true&lt;/span> TaskRun
tasks tekton.dev &lt;span class="nb">true&lt;/span> Task
&lt;/code>&lt;/pre>&lt;/div>&lt;p>tekton的两个pod:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl get pods --namespace tekton-pipelines
NAME READY STATUS RESTARTS AGE
tekton-pipelines-controller-556d8f4494-2qthv 1/1 Running &lt;span class="m">0&lt;/span> 11m
tekton-pipelines-webhook-849cff5cf-8m5qq 1/1 Running &lt;span class="m">0&lt;/span> 11m
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装cli">安装CLI&lt;/h3>
&lt;p>cli: &lt;a href="https://github.com/tektoncd/cli#installing-tkn">https://github.com/tektoncd/cli#installing-tkn&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">brew install tektoncd-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tekton-hello-world">Tekton: hello world&lt;/h2>
&lt;p>创建一个简单的&lt;code>Task&lt;/code>, 只有一个&lt;code>step&lt;/code>就是打印出&amp;quot;hello world&amp;quot;&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">echo-hello-world&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">echo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建一个&lt;code>TaskRun&lt;/code>执行上面的&lt;code>Task&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TaskRun&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">echo-hello-world-task-run&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">echo-hello-world&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行task:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f &amp;lt;name-of-file.yaml&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查&lt;code>TaskRun&lt;/code>的输出, 执行命令:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">tkn taskrun describe echo-hello-world-task-run
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Name: echo-hello-world-task-run
Namespace: tekton-pipelines
Task Ref: echo-hello-world
Status
STARTED DURATION STATUS
21 minutes ago 1 minute Succeeded
Input Resources
No resources
Output Resources
No resources
Params
No params
Steps
NAME STATUS
echo Completed
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Succeeded&lt;/code>状态表示task执行成功.&lt;/p>
&lt;p>查看实际的输出, 执行命令:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">tkn taskrun logs echo-hello-world-task-run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">[echo] hello world
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Minikube安装istio</title><link>https://atbug.com/install-istio-on-minikube/</link><pubDate>Fri, 17 Jan 2020 08:02:42 +0800</pubDate><guid>https://atbug.com/install-istio-on-minikube/</guid><description>
&lt;h2 id="准备">准备&lt;/h2>
&lt;p>&lt;strong>注意: istioctl的安装要使用安装里的, 不要是用homebrew里的. &lt;a href="https://github.com/istio/istio/issues/19029">github issue&lt;/a>&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -L https://istio.io/downloadIstio &lt;span class="p">|&lt;/span> sh -
&lt;span class="nb">cd&lt;/span> istio-1.4.2
cp bin/istioctl /usr/local/bin/istioctl
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装前检查">安装前检查&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">istioctl verify-install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果检查没问题, 会看到&lt;code>Install Pre-Check passed! The cluster is ready for Istio installation.&lt;/code>&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>istio有5种内建的安装配置&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>: remote, sds, default, demo, minimal&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">istioctl profile list
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>minimal: 使用istio的流量管理所需组件的最小化安装&lt;/li>
&lt;li>default: 根据IstioControlPlane API的默认设置(建议用于生产部署)启用组件. 您可以通过运行命令istioctl profile dump显示默认设置.&lt;/li>
&lt;li>demo: 几乎安装所有的特性, 包括logging和tracing的比例为100%. 不适合生产环境, 负载太重&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>default&lt;/th>
&lt;th>demo&lt;/th>
&lt;th>minimal&lt;/th>
&lt;th>sds&lt;/th>
&lt;th>remote&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Core components&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-citadel&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-egressgateway&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-galley&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-ingressgateway&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-nodeagent&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-pilot&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-policy&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-sidecar-injector&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-telemetry&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Addons&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>grafana&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-tracing&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>kiali&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>prometheus&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>demo&lt;/code> profile安装&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">istioctl manifest apply --set &lt;span class="nv">profile&lt;/span>&lt;span class="o">=&lt;/span>demo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>验证安装结果&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">istioctl manifest generate --set &lt;span class="nv">profile&lt;/span>&lt;span class="o">=&lt;/span>demo &amp;gt; /tmp/generated-manifest.yaml
istioctl verify-install -f /tmp/generated-manifest.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&amp;hellip;&amp;hellip;
Checked 23 crds
Checked 9 Istio Deployments
Istio is installed successfully&lt;/p>
&lt;/blockquote>
&lt;h2 id="卸载">卸载&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">helm template install/kubernetes/helm/istio --namespace istio-system &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --values install/kubernetes/helm/istio/values-istio-demo.yaml &lt;span class="p">|&lt;/span> kubectl delete -f -
kubectl delete namespace istio-system
&lt;span class="c1">#delete all CRDs&lt;/span>
kubectl delete -f install/kubernetes/helm/istio-init/files
&lt;/code>&lt;/pre>&lt;/div>&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://istio.io/docs/setup/additional-setup/config-profiles/">这里&lt;/a>可以查看各个配置的详细说明 &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>加速云原生的 Java 开发</title><link>https://atbug.com/speed-up-java-development-on-kubernetes/</link><pubDate>Sat, 21 Dec 2019 20:45:22 +0800</pubDate><guid>https://atbug.com/speed-up-java-development-on-kubernetes/</guid><description>
&lt;p>今天来说说日常在Kubernetes开发Java项目遇到的问题.&lt;/p>
&lt;p>当我们新建一个项目的时候, 总是面临需要新建manifest, 平时都是&lt;code>copy+paste+modify&lt;/code>. 能否以变成的方式来生成?&lt;/p>
&lt;p>开发时的步骤也比较繁琐: &lt;code>docker build&lt;/code>, &lt;code>docker push&lt;/code>, &lt;code>kubectl apple&lt;/code>, &lt;code>kubectl delete pod&lt;/code>. 对于一个Java应用来说还多了一步编译. 操作一次还ok, 但是一天十几次总会有想吐的感觉. 这些步骤能否简化成一个命令, 甚至修改了代码自动就完成上面一系列的操作?&lt;/p>
&lt;p>实现这些我们需要几个工具: &lt;a href="https://github.com/dekorateio/dekorate">dekorate&lt;/a>, &lt;a href="https://github.com/GoogleContainerTools/jib">Jib&lt;/a>, &lt;a href="https://github.com/GoogleContainerTools/skaffold">Skaffold&lt;/a>. 其中Jib也在上一篇文章&lt;a href="https://atbug.com/build-docker-or-oci-image-with-jib-for-java/">使用Jib为Java应用构建镜像&lt;/a>中介绍过.&lt;/p>
&lt;h2 id="dekorate">dekorate&lt;/h2>
&lt;blockquote>
&lt;p>Dekorate is a collection of Java compile-time generators and decorators for Kubernetes/OpenShift manifests.
Dekorate是Java编译时生成和装饰Kubernetes/OpenShift的manifests的工具&lt;/p>
&lt;/blockquote>
&lt;h3 id="快速开始">快速开始&lt;/h3>
&lt;h4 id="1-通过使用spring-initializerhttpsstartspringio生成一个项目spring-boot-222-并加入依赖">1. 通过使用&lt;a href="https://start.spring.io">Spring Initializer&lt;/a>生成一个项目(Spring Boot 2.2.2), 并加入依赖:&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>io.dekorate&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>kubernetes-spring-starter&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>0.10.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-加入一个简单的controller">2. 加入一个简单的&lt;code>Controller&lt;/code>:&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author Addo.Zhang
&lt;/span>&lt;span class="cm"> * @date 2019/12/22
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@RestController&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DekorateExampleController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">hi&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-执行命令mvn-clean-install-然后在targetclassesmeta-infdekorate目录下可以找到kubernetesjson和kubernetesyml两个文件">3. 执行命令&lt;code>mvn clean install&lt;/code>, 然后在&lt;code>target/classes/META-INF/dekorate&lt;/code>目录下可以找到&lt;code>kubernetes.json&lt;/code>和&lt;code>kubernetes.yml&lt;/code>两个文件.&lt;/h4>
&lt;p>&lt;code>kubernetes.yml&lt;/code>的内容:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;v1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Service&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;ClusterIP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;apps/v1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Deployment&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;KUBERNETES_NAMESPACE&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;metadata.namespace&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo/dekorate-example:0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;IfNotPresent&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/info&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;TCP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/health&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>yml中包含了&lt;code>Service&lt;/code>和&lt;code>Deployment&lt;/code>两部分, dekorate完美兼容的Spring:&lt;/p>
&lt;ul>
&lt;li>&lt;code>app: dekorate-example&lt;/code>: 项目名&lt;/li>
&lt;li>&lt;code>version: 0.0.1-SNAPSHOT&lt;/code>: 项目当前版本&lt;/li>
&lt;li>&lt;code>group: addo&lt;/code>: 是我系统当前用户名&lt;/li>
&lt;li>&lt;code>/actuator/health&lt;/code>: Spring Boot 2.2后actuator的health endpoint, 作为&lt;code>readinessProbe&lt;/code>&lt;/li>
&lt;li>&lt;code>/actuator/info&lt;/code>: Spring Boot 2.2后actuator的endpoint, 作为&lt;code>livenessProbe&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="进阶">进阶&lt;/h3>
&lt;p>&lt;strong>前面yml的内容都是自动生成的, 假如有些特殊的需求. 比如修改镜像的&lt;code>repository&lt;/code>即这里的&lt;code>group&lt;/code>, 如何操作?&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">dekorate.kubernetes.group = addozhang
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/5zgkfl.jpg" alt="Change Image Repository">&lt;/p>
&lt;p>&lt;strong>或者修改Service的类型为NodePort&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">dekorate.kubernetes.service-type = NodePort
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/vIen3M.jpg" alt="NodePort Service">&lt;/p>
&lt;h4 id="配置">配置&lt;/h4>
&lt;p>dekoration提供了&lt;a href="https://github.com/dekorateio/dekorate/blob/master/assets/config.md">丰富的配置&lt;/a>来个性化manifest.&lt;/p>
&lt;p>除了上面使用的配置文件(properties/yaml)的方式, 还提供了&lt;code>Annotation&lt;/code>注解配置方式.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">io.dekorate.kubernetes.annotation.Env&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">io.dekorate.kubernetes.annotation.KubernetesApplication&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@KubernetesApplication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">envVars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Env&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;key1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;var1&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//Your code goes here
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/exQoxy.jpg" alt="@KubernetesApplication Annotation">&lt;/p>
&lt;h2 id="jib">Jib&lt;/h2>
&lt;p>Jib的说明请看上一篇文章:&lt;a href="https://atbug.com/build-docker-or-oci-image-with-jib-for-java/">使用Jib为Java应用构建镜像&lt;/a>&lt;/p>
&lt;h3 id="插件配置">插件配置&lt;/h3>
&lt;p>下面是针对该项目添加的配置:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.google.cloud.tools&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jib-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.8.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;container&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Xmx128m&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Xms64m&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/jvmFlags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;labels&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;Author&amp;gt;&lt;/span>Addo.Zhang&lt;span class="nt">&amp;lt;/Author&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/labels&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;creationTime&amp;gt;&lt;/span>USE_CURRENT_TIMESTAMP&lt;span class="nt">&amp;lt;/creationTime&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/container&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;from&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>openjdk:8-jdk-alpine&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/from&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>addo/dekorate-example&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;tags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;tag&amp;gt;&lt;/span>latest&lt;span class="nt">&amp;lt;/tag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/tags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;allowInsecureRegistries&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/allowInsecureRegistries&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令&lt;code>mvn compile jib:dockerBuild&lt;/code>便可以编译代码, 构建镜像并推送到镜像仓库.&lt;/p>
&lt;h2 id="skaffold">Skaffold&lt;/h2>
&lt;p>&lt;a href="https://github.com/GoogleContainerTools/skaffold">Skaffold&lt;/a>也是GoogleContainerTools中的一个工具.&lt;/p>
&lt;blockquote>
&lt;p>Skaffold is a command line tool that facilitates continuous development for Kubernetes applications. You can iterate on your application source code locally then deploy to local or remote Kubernetes clusters. Skaffold handles the workflow for building, pushing and deploying your application. It also provides building blocks and describe customizations for a CI/CD pipeline.
Skaffold是一个命令行工具, 可促进Kubernetes应用程序的持续开发. 可以在本地迭代应用程序源代码, 然后部署到本地或远程Kubernetes集群. Skaffold处理构建, 推送和部署应用程序的工作流程. 它还提供了构建块并描述了CI/CD管道的自定义.&lt;/p>
&lt;/blockquote>
&lt;p>在我们这个例子中, 通过与Jib的联动, 完成编译代码, 构建镜像, 推送镜像, 部署一系列操作.&lt;/p>
&lt;p>![Run](&lt;a href="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/2019-12-23">https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/2019-12-23&lt;/a> 15.12.24.gif)&lt;/p>
&lt;p>截屏中的操作, 因为没有代码改动而不续构建镜像, Skaffold直接从cache中获取镜像并部署到Kubernetes中.&lt;/p>
&lt;h3 id="skaffold操作">Skaffold操作&lt;/h3>
&lt;h4 id="1-执行命令skaffold-init---xxenablejibinit并在提示出输入y">1. 执行命令&lt;code>skaffold init --XXenableJibInit&lt;/code>并在提示出输入&lt;code>y&lt;/code>&lt;/h4>
&lt;h4 id="2-该命令会生成一个名为skaffoldyaml的文件">2. 该命令会生成一个名为&lt;code>skaffold.yaml&lt;/code>的文件&lt;/h4>
&lt;p>由于&lt;code>dekorate&lt;/code>同时生成了&lt;code>json&lt;/code>和&lt;code>yaml&lt;/code>格式的manifest, 被&lt;code>skaffold&lt;/code>检测到. 实际操作中只需要其中一个即可.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">skaffold/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dekorate-example&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">artifacts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">addo/dekorate-example&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">jib&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kubectl&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">manifests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">target/classes/META-INF/dekorate/kubernetes.json&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">target/classes/META-INF/dekorate/kubernetes.yml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-执行skaffold-run">3. 执行&lt;code>skaffold run&lt;/code>&lt;/h4>
&lt;h4 id="4-pod启动完成后-通过kubectl-port-forward-podname-here-8081">4. pod启动完成后, 通过&lt;code>kubectl port-forward PODNAME-HERE 8081&lt;/code>&lt;/h4>
&lt;h4 id="5-请求http-httplocalhost8081">5. 请求&lt;code>http http://localhost:8081&lt;/code>&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/wt2BVU.jpg" alt="">&lt;/p>
&lt;h3 id="进阶-1">进阶&lt;/h3>
&lt;p>Skaffold的功能强大, 目前个人使用的有限, 有时间新开一篇来学习一下.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/FXu4Hy.jpg" alt="">&lt;/p>
&lt;h4 id="cli">CLI&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">➜ ~ skaffold &lt;span class="nb">help&lt;/span>
A tool that facilitates continuous development &lt;span class="k">for&lt;/span> Kubernetes applications.
Find more information at: https://skaffold.dev/docs/getting-started/
End-to-end pipelines:
run Run a pipeline
dev Run a pipeline in development mode
debug &lt;span class="o">[&lt;/span>beta&lt;span class="o">]&lt;/span> Run a pipeline in debug mode
Pipeline building blocks &lt;span class="k">for&lt;/span> CI/CD:
build Build the artifacts
deploy Deploy pre-built artifacts
delete Delete the deployed application
render &lt;span class="o">[&lt;/span>alpha&lt;span class="o">]&lt;/span> Perform all image builds, and output rendered Kubernetes manifests
Getting started with a new project:
init &lt;span class="o">[&lt;/span>alpha&lt;span class="o">]&lt;/span> Generate configuration &lt;span class="k">for&lt;/span> deploying an application
fix Update old configuration to newest schema version
Other Commands:
completion Output shell completion &lt;span class="k">for&lt;/span> the given shell &lt;span class="o">(&lt;/span>bash or zsh&lt;span class="o">)&lt;/span>
config Interact with the Skaffold configuration
credits Export third party notices to given path &lt;span class="o">(&lt;/span>./skaffold-credits by default&lt;span class="o">)&lt;/span>
diagnose Run a diagnostic on Skaffold
version Print the version information
Usage:
skaffold &lt;span class="o">[&lt;/span>flags&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span>
Use &lt;span class="s2">&amp;#34;skaffold &amp;lt;command&amp;gt; --help&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> more information about a given command.
Use &lt;span class="s2">&amp;#34;skaffold options&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> a list of global command-line options &lt;span class="o">(&lt;/span>applies to all commands&lt;span class="o">)&lt;/span>.
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="yaml配置">Yaml配置&lt;/h4>
&lt;p>参考&lt;a href="https://skaffold.dev/docs/references/yaml/">skaffold.yaml&lt;/a>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>文章的开头我们提到如何做到修改代码后自动完成一些列的操作, 通过&lt;code>skaffold dev&lt;/code>就可以实现.&lt;/p>
&lt;p>文章中使用的&lt;code>dekoration-example&lt;/code>可在&lt;a href="https://github.com/addozhang/dekorate-example">GitHub&lt;/a>上找到.&lt;/p></description></item><item><title>Kubernetes中的Nginx动态解析</title><link>https://atbug.com/nginx-dynamic-domain-parse-in-kubernetes/</link><pubDate>Wed, 30 May 2018 12:10:32 +0000</pubDate><guid>https://atbug.com/nginx-dynamic-domain-parse-in-kubernetes/</guid><description>
&lt;h3 id="背景">背景&lt;/h3>
&lt;p>Nginx运行在kubernets中, 反向代理service提供服务.&lt;/p>
&lt;p>kubernetes版本v1.9.1+a0ce1bc657.&lt;/p>
&lt;h3 id="问题">问题:&lt;/h3>
&lt;p>配置如下:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">location ^~/info {
proxy_pass: http://serviceName:port;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>删除并重建Service的时候, nginx会出现下面的问题:&lt;/p>
&lt;blockquote>
&lt;p>connect() failed (113: No route to host) &amp;hellip; upstream: &amp;ldquo;xxxxx&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h3 id="分析">分析&lt;/h3>
&lt;p>通过google发现, 是nginx的dns解析方案的问题.&lt;/p>
&lt;p>nginx官方的说明:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>If the domain name can’t be resolved, NGINX fails to start or reload its configuration.&lt;/li>
&lt;li>NGINX caches the DNS records until the next restart or configuration reload, ignoring the records’ TTL values.&lt;/li>
&lt;li>We can’t specify another load‑balancing algorithm, nor can we configure passive health checks or other features defined by parameters to the server directive, which we’ll describe in the next section.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>意思是说, nginx在启动的时候就会解析&lt;code>proxy_pass&lt;/code>后的域名, 并把&lt;code>ip&lt;/code>缓存下来, 而且没有TTL. 只有在restart或者reload的时候才会再次解析.&lt;/p>
&lt;h3 id="解决方案">解决方案&lt;/h3>
&lt;p>使用nginx pod的解析服务器作为resolver:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#nginx conf
resolver NAME_SERVER valid=30s ipv6=off;
set $service &amp;#34;http://serviceName:port&amp;#34;;
location ^~/info {
proxy_pass: $service;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用shell获取pod中使用的解析服务器&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">NAME_SERVER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>cat /etc/resolv.conf &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;nameserver&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $2}&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> tr &lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:
&lt;a href="https://stackoverflow.com/questions/17685674/nginx-proxy-pass-with-remote-addr">Nginx proxy_pass with $remote_addr&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://tenzer.dk/nginx-with-dynamic-upstreams/">Nginx with dynamic upstreams&lt;/a>&lt;/p>
&lt;h3 id="另一个问题">另一个问题&lt;/h3>
&lt;blockquote>
&lt;p>serviceName could not be resolved (3: Host not found)&lt;/p>
&lt;/blockquote>
&lt;p>service的短名称是解析不了的, 需要使用serviceName.namespace.svc.clusterName.&lt;/p></description></item><item><title>Kubernetes — 持久卷</title><link>https://atbug.com/kubernetes-persistent-volumes/</link><pubDate>Sun, 20 Aug 2017 22:25:40 +0000</pubDate><guid>https://atbug.com/kubernetes-persistent-volumes/</guid><description>
&lt;h1 id="persistent-volume">Persistent Volume&lt;/h1>
&lt;p>译自&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/">Persistent Volumes&lt;/a>&lt;/p>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>管理存储是管理计算的独特问题。 PersistentVolume子系统为用户和管理员提供了一个API，其中提供了如何从如何使用存储提供存储的详细信息。为此，我们介绍两种新的API资源：PersistentVolume和PersistentVolumeClaim。&lt;/p>
&lt;p>PersistentVolume（PV）是由管理员配置的集群中的一段存储。它是集群中的一种资源就像一个节点是一个集群的资源。 PV是类似Volumes的卷插件，但是具有独立于使用PV的任何单个pod的生命周期。该API对象捕获存储的实现细节，即NFS，iSCSI或云提供商特定的存储系统。&lt;/p>
&lt;p>PersistentVolumeClaim（PVC）是用户存储的请求。它类似于pod。 Pod消耗节点资源，PVC消耗PV资源。Pods可以请求特定级别的资源（CPU和内存）。声明可以请求特定的大小和访问模式（例如，一次读写或者多次只读）。&lt;/p>
&lt;p>虽然PersistentVolumeClaims允许用户使用抽象存储资源，但是常见的是，用户需要具有不同属性（如性能）的PersistentVolumes，用于不同的问题。 集群管理员需要能够提供多种彼此不同的PersistentVolumes，而不仅仅是大小和访问模式，而不会使用户了解这些卷的实现细节。 对于这些需求，有一个StorageClass资源。&lt;/p>
&lt;p>StorageClass为管理员提供了一种描述他们提供的存储的“类”的方法。 不同的类可能映射到服务质量级别，或备份策略，或者由群集管理员确定的任意策略。 Kubernetes本身对于什么类别代表是不言而喻的。 这个概念有时在其他存储系统中称为“配置文件”。&lt;/p>
&lt;p>请参阅&lt;a href="https://kubernetes.io/docs/user-guide/persistent-volumes/walkthrough/">详细演练与工作示例&lt;/a>。&lt;/p>
&lt;h2 id="存储和声明的生命周期">存储和声明的生命周期&lt;/h2>
&lt;p>PVs是集群中的资源；PVCs是对这种资源的声明，同时也扮演者对资源声明的检查。PVs和PVCs之前的交互遵循生命周期：供应、绑定、使用中、重新申请。&lt;/p>
&lt;p>集群管理员创建多个PV。它们携带可供集群用户使用的真实存储的详细信息。它们存在于Kubernetes API中，可用于消费。&lt;/p>
&lt;h3 id="供应provisioning">供应(Provisioning)&lt;/h3>
&lt;p>PVs会以两种方式供应：静态和动态。&lt;/p>
&lt;h4 id="静态">静态&lt;/h4>
&lt;p>集群管理员创建多个PV。 它们携带可供集群用户使用的真实存储的详细信息。 它们存在于Kubernetes API中，可被使用。&lt;/p>
&lt;h4 id="动态">动态&lt;/h4>
&lt;p>当管理员创建的静态PV都不匹配用户的PersistentVolumeClaim时，集群可能会尝试为PVC指定动态配置卷。 此配置基于StorageClasses：PVC必须指定一个类，并且管理员必须已创建并配置该类才能进行动态配置。 要求该类的声明有效地为自己禁用动态配置。&lt;/p>
&lt;h3 id="绑定binding">绑定(Binding)&lt;/h3>
&lt;p>当用户创建、或已经创建了一个PersistenVolumenClaim并指定大小和访问类型。Master中的控制循环会检测新的PVC，找到一个匹配的PV（如果可能的话），并将它们绑定在一起。如果一个PV被动态地供应某个PVC，循环将总是把这个PV和该PVC绑定。否则，用户总是至少得到他们要求的内容，但是卷可能超出了要求。一旦绑定，PersistentVolumeClaim绑定是排他的，不管用于绑定它们的模式。&lt;/p>
&lt;p>如果匹配的卷不存在，请求将无限期地保持。 随着匹配卷变得可用，请求将被绑定。 例如，提供许多50Gi PV的集群将不匹配要求100Gi的PVC。 当集群中添加100Gi PV时，可以绑定PVC。&lt;/p>
&lt;h3 id="使用使用">使用(使用)&lt;/h3>
&lt;p>PODs把PVC当做volume使用。集群检查声明以找到绑定的卷并为POD挂载该卷。 对于支持多种访问模式的卷，用户在将其声明用作pod中的卷时指定所需的模式。&lt;/p>
&lt;p>一旦用户有声明并且该声明被绑定，绑定的PV属于用户，只要他们需要它。 用户通过在其Pod的卷块中包含persistentVolumeClaim来安排Pods并访问其声明的PV。 请参阅下面的语法详细信息：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mypod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">myfrontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dockerfile/nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/var/www/html&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mypd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mypd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">myclaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="回收reclaiming">回收(Reclaiming)&lt;/h3>
&lt;p>当用户使用完volume，可以通过请求允许回收资源的API来删除该PVC对象。PersistentVolume的回收策略告诉集群如何处理当声明释放PV后。目前，卷可以被保留，回收或删除。&lt;/p>
&lt;h4 id="保留retaining">保留(Retaining)&lt;/h4>
&lt;p>保留回收策略允许手动回收资源。 当PersistentVolumeClaim被删除时，PersistentVolume仍然存在，并且该卷被认为是“释放的”。 但是，由于上一个声明者的数据仍保留在卷上，因此尚不可用于其他声明。 管理员可以通过以下步骤手动回收卷。&lt;/p>
&lt;ul>
&lt;li>删除PersistentVolume。 删除PV后，外部基础设施（如AWS EBS，GCE PD，Azure Disk或Cinder卷）中的关联存储资产仍然存在。&lt;/li>
&lt;li>相应地手动清理相关存储资产上的数据。&lt;/li>
&lt;li>手动删除关联的存储资产，或者如果要重用相同的存储资产，请使用存储资产定义创建一个新的PersistentVolume。&lt;/li>
&lt;/ul>
&lt;h4 id="回收recycling">回收(Recycling)&lt;/h4>
&lt;p>如果受相应的卷插件支持，回收将对卷执行基本的擦除（rm -rf / thevolume / *），并使其再次可用于新的声明。
但是，管理员可以使用Kubernetes控制器管理器命令行参数来配置自定义的回收器pod模板，如&lt;a href="https://kubernetes.io/docs/admin/kube-controller-manager/">这里&lt;/a>所述。 定制回收站模板必须包含卷规范，如下例所示：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pv-recycler-&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Never&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">vol&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/any/path/it/will/be/replaced&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pv-recycler&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;gcr.io/google_containers/busybox&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/bin/sh&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;test -e /scrub &amp;amp;&amp;amp; rm -rf /scrub/..?* /scrub/.[!.]* /scrub/* &amp;amp;&amp;amp; test -z \&amp;#34;$(ls -A /scrub)\&amp;#34; || exit 1&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">vol&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/scrub&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是，卷部分中的自定义回收器pod模板中指定的特定路径将替换为正在回收的卷的特定路径。&lt;/p>
&lt;h4 id="删除deleting">删除(Deleting)&lt;/h4>
&lt;p>对于支持“删除回收”策略的卷插件，删除将从Kubernetes中删除PersistentVolume对象，并删除外部基础架构（如AWS EBS，GCE PD，Azure Disk或Cinder卷）中关联的存储资产。 动态配置的卷始终被删除。 如果不希望这样做，目前唯一的选择是在创建PV之后编辑或修补PV。 请参阅&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/change-pv-reclaim-policy/">更改PersistentVolume的回收策略&lt;/a>。&lt;/p>
&lt;h3 id="persistent-volume的类型">Persistent Volume的类型&lt;/h3>
&lt;ul>
&lt;li>GCEPersistentDisk&lt;/li>
&lt;li>AWSElasticBlockStore&lt;/li>
&lt;li>AzureFile&lt;/li>
&lt;li>AzureDisk&lt;/li>
&lt;li>FC (Fibre Channel)&lt;/li>
&lt;li>FlexVolume&lt;/li>
&lt;li>Flocker&lt;/li>
&lt;li>NFS&lt;/li>
&lt;li>iSCSI&lt;/li>
&lt;li>RBD (Ceph Block Device)&lt;/li>
&lt;li>CephFS&lt;/li>
&lt;li>Cinder (OpenStack block storage)&lt;/li>
&lt;li>Glusterfs&lt;/li>
&lt;li>VsphereVolume&lt;/li>
&lt;li>Quobyte Volumes&lt;/li>
&lt;li>HostPath (single node testing only – local storage is not supported in any way and WILL NOT WORK in a multi-node cluster)&lt;/li>
&lt;li>VMware Photon&lt;/li>
&lt;li>Portworx Volumes&lt;/li>
&lt;li>ScaleIO Volumes&lt;/li>
&lt;li>StorageOS&lt;/li>
&lt;/ul>
&lt;h2 id="persistent-volumes">Persistent Volumes&lt;/h2>
&lt;p>每个PV都包含规格和状态，这是规格和状态。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolume&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pv0003&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">capacity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">5Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeReclaimPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Recycle&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storageClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">slow&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nfs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">172.17.0.2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="容量">容量&lt;/h3>
&lt;p>通常，PV将具有特定的存储容量。这是使用PV的&lt;code>capacity&lt;/code>属性设置的。看到Kubernetes的&lt;a href="https://git.k8s.io/community/contributors/design-proposals/resources.md">资源模型&lt;/a>，以了解容量使用的单位。&lt;/p>
&lt;p>目前，存储大小是唯一可以设置或请求的资源。未来的属性可能包括IOPS，吞吐量等。&lt;/p>
&lt;h3 id="访问模式">访问模式&lt;/h3>
&lt;p>PersistentVolume可以以资源提供者支持的任何方式安装在主机上。 如下表所示，提供者将具有不同的特性，每个PV的访问模式都被设置为该特定卷支持的特定模式。 例如，NFS可以支持多个读/写客户端，但是特定的NFS PV可能会以只读方式在服务器上导出。 每个PV都有自己的一组访问模式来描述具体的PV功能。&lt;/p>
&lt;p>访问模式：&lt;/p>
&lt;ul>
&lt;li>ReadWriteOnce - 卷可以由单个节点作为读写装载&lt;/li>
&lt;li>ReadOnlyMany - 许多节点可以只读容量&lt;/li>
&lt;li>ReadWriteMany - 卷可以通过许多节点的读写装载&lt;/li>
&lt;/ul>
&lt;p>在CLI中，访问模式缩写为：&lt;/p>
&lt;ul>
&lt;li>RWO - ReadWriteOnce&lt;/li>
&lt;li>ROX - ReadOnlyMany&lt;/li>
&lt;li>RWX - ReadWriteMany&lt;/li>
&lt;/ul>
&lt;p>重要！一个卷只能一次使用一种访问模式进行挂载，即使它支持很多。例如，GCEPersistentDisk可以由单个节点挂载为ReadWriteOnce或多个节点挂载为ReadOnlyMany，但不能同时使用两种。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Volume插件&lt;/th>
&lt;th>单节点读写&lt;/th>
&lt;th>多个节点只读&lt;/th>
&lt;th>多个节点读写&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>AWSElasticBlockStore&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AzureFile&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AzureDisk&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CephFS&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cinder&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FC&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FlexVolume&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Flocker&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GCEPersistentDisk&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Glusterfs&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HostPath&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iSCSI&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PhotonPersistentDisk&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Quobyte&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NFS&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RBD&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VsphereVolume&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PortworxVolume&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ScaleIO&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StorageOS&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="类型">类型&lt;/h3>
&lt;p>PV可以有一个类型，通过将storageClassName属性设置为StorageClass的名称来指定。 特定类型的PV只能绑定到请求该类型的PVC。 没有storageClassName的PV没有类型，只能绑定到不需要特定类型的PVC。
在过去，使用了注释volume.beta.kubernetes.io/storage-class而不是storageClassName属性。 该注释仍然可以工作，但将来Kubernetes版本将不再适用。&lt;/p>
&lt;h3 id="回收策略">回收策略&lt;/h3>
&lt;p>目前的回收策略是：&lt;/p>
&lt;ul>
&lt;li>Retain - 手动回收&lt;/li>
&lt;li>Recycle - 基本擦洗（“rm -rf / thevolume / *”）&lt;/li>
&lt;li>Delete - 相关联的存储资产，如AWS EBS，GCE PD，Azure Disk或OpenStack Cinder卷被删除&lt;/li>
&lt;/ul>
&lt;p>目前，只有NFS和HostPath支持回收。 AWS EBS，GCE PD，Azure Disk和Cinder卷支持删除。&lt;/p>
&lt;h3 id="阶段">阶段&lt;/h3>
&lt;p>卷将处于以下阶段之一：&lt;/p>
&lt;ul>
&lt;li>Available 可用 - 一个尚未绑定到索赔的免费资源&lt;/li>
&lt;li>Bound 绑定 - 音量必须是声明&lt;/li>
&lt;li>Released 释放 - 声明已被删除，但资源尚未被集群回收&lt;/li>
&lt;li>Failed 失败 - 卷自动回收失败&lt;/li>
&lt;/ul>
&lt;p>CLI将显示绑定到PV的PVC的名称。&lt;/p>
&lt;h3 id="挂载选项">挂载选项&lt;/h3>
&lt;p>Kubernetes管理员可以指定在一个节点上挂载一个持久卷时的其他挂载选项。&lt;/p>
&lt;p>您可以通过使用持久卷上的注释volume.beta.kubernetes.io/mount-options来指定安装选项。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;v1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;PersistentVolume&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gce-disk-1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volume.beta.kubernetes.io/mount-options&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;discard&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">capacity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;10Gi&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;ReadWriteOnce&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gcePersistentDisk&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fsType&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;ext4&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pdName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;gce-disk-1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装选项是一个字符串，在将卷安装到磁盘时将被累积地连接和使用。&lt;/p>
&lt;p>请注意，并非所有Persistent卷类型都支持挂载选项。 在Kubernetes 1.6版中，以下卷类型支持挂载选项。&lt;/p>
&lt;ul>
&lt;li>GCEPersistentDisk&lt;/li>
&lt;li>AWSElasticBlockStore&lt;/li>
&lt;li>AzureFile&lt;/li>
&lt;li>AzureDisk&lt;/li>
&lt;li>NFS&lt;/li>
&lt;li>iSCSI&lt;/li>
&lt;li>RBD (Ceph Block Device)&lt;/li>
&lt;li>CephFS&lt;/li>
&lt;li>Cinder (OpenStack block storage)&lt;/li>
&lt;li>Glusterfs&lt;/li>
&lt;li>VsphereVolume&lt;/li>
&lt;li>Quobyte Volumes&lt;/li>
&lt;li>VMware Photon&lt;/li>
&lt;/ul>
&lt;h2 id="persistentvolumeclaims">PersistentVolumeClaims&lt;/h2>
&lt;p>每个PVC包含规格和状态，这是声明的规范和状态。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolumeClaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">myclaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">8Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storageClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">slow&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">release&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;stable&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- {&lt;span class="nt">key: environment, operator: In, values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">dev]}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="访问模式-1">访问模式&lt;/h3>
&lt;p>当请求具有特定访问模式的存储时，声明使用与卷相同的约定。&lt;/p>
&lt;h3 id="资源">资源&lt;/h3>
&lt;p>声明（就像pods）可以请求特定数量的资源。 在这种情况下，请求用于存储。 相同的资源模型适用于卷和声明。&lt;/p>
&lt;h3 id="选择器">选择器&lt;/h3>
&lt;p>声明可以指定标签选择器以进一步过滤Volumes集。 只有标签与选择器匹配的卷才能绑定到声明。 选择器可以由两个字段组成：&lt;/p>
&lt;ul>
&lt;li>matchLabels - 卷必须具有带此值的标签&lt;/li>
&lt;li>matchExpressions - 通过指定关键字和值的关键字，值列表和运算符所做的要求列表。 有效运算符包括In，NotIn，Exists和DoesNotExist。&lt;/li>
&lt;/ul>
&lt;p>所有来自matchLabels和matchExpressions的要求是组合在一起的，所有这些要求都必须满足才能匹配。&lt;/p>
&lt;h3 id="类型-1">类型&lt;/h3>
&lt;p>声明可以通过使用属性storageClassName指定StorageClass的名称来请求特定的类型。只有所请求的类型的PV，与PVC相同的storageClassName的PV可以绑定到PVC。&lt;/p>
&lt;p>PVC不一定要求一个类型。 它的storageClassName设置为等于“”的PVC总是被解释为请求没有类型的PV，因此它只能绑定到没有类型的PV（没有注释或一个等于“”）。 没有storageClassName的PVC不完全相同，并且根据是否启用了DefaultStorageClass admission插件，集群的处理方式不同。&lt;/p>
&lt;ul>
&lt;li>如果admission插件已打开，则管理员可以指定默认的StorageClass。 没有storageClassName的所有PVC只能绑定到该默认的PV。 通过将StorageClass对象中的注解storageclass.kubernetes.io/is-default-class设置为“true”来指定默认的StorageClass。 如果管理员没有指定默认值，则集群会对PVC创建做出响应，就像admission插件被关闭一样。 如果指定了多个默认值，则admission插件禁止创建所有PVC。&lt;/li>
&lt;li>如果admission插件已关闭，则不存在默认StorageClass的概念。 没有&lt;code>storageClassName&lt;/code>的所有PVC只能绑定到没有类的PV。 在这种情况下，没有&lt;code>storageClassName&lt;/code>的PVC的处理方式与将其&lt;code>storageClassName&lt;/code>设置为“”的PVC相同。&lt;/li>
&lt;/ul>
&lt;p>根据挂载方法，挂载过程中可以通过addon manager在Kubernetes群集中部署默认的&lt;code>StorageClass&lt;/code>。&lt;/p>
&lt;p>当PVC指定一个选择器，除了请求一个&lt;code>StorageClass&lt;/code>之外，这些要求被AND组合在一起：只有所请求的类和所请求的标签的PV可能被绑定到PVC。 请注意，当前，具有非空选择器的PVC不能为其动态配置PV。&lt;/p>
&lt;p>在过去，使用了注解&lt;code>volume.beta.kubernetes.io/storage-class&lt;/code>，而不是&lt;code>storageClassName&lt;/code>属性。 该注解仍然可以工作，但在未来的Kubernetes版本中它将不被支持。&lt;/p>
&lt;h2 id="claims-vs-volumes">Claims VS Volumes&lt;/h2>
&lt;p>Pods通过将声明用作卷来访问存储。 声明必须存在于与使用声明的pod相同的命名空间中。 集群在pod的命名空间中查找声明，并使用它来获取支持声明的&lt;code>PersistentVolume&lt;/code>。 然后将卷挂载到主机并进入pod。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mypod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">myfrontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dockerfile/nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/var/www/html&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mypd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mypd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">myclaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="关于命名空间的注意">关于命名空间的注意&lt;/h3>
&lt;p>&lt;code>PersistentVolumes&lt;/code>绑定是独占的，并且由于&lt;code>PersistentVolumeClaims&lt;/code>是命名空间对象，因此只能在一个命名空间内挂载“many”模式（ROX，RWX）的声明。&lt;/p>
&lt;h2 id="storageclasses">StorageClasses&lt;/h2>
&lt;p>每个&lt;code>StorageClass&lt;/code>包含字段&lt;code>provisioninger&lt;/code>和&lt;code>parameter&lt;/code>，当属于类型的&lt;code>PersistentVolume&lt;/code>需要动态配置时使用。&lt;/p>
&lt;p>&lt;code>StorageClass&lt;/code>对象的名称很重要，用户可以如何请求特定的类。 管理员在首次创建&lt;code>StorageClass&lt;/code>对象时设置类的名称和其他参数，并且在创建对象后无法更新对象。&lt;/p>
&lt;p>管理员可以仅为不要求任何特定类绑定的PVC指定默认的StorageClass：有关详细信息，请参阅&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims">PersistentVolumeClaim&lt;/a>部分。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">StorageClass&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">storage.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">standard&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">provisioner&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetes.io/aws-ebs&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">parameters&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gp2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="供应者provisioner">供应者(Provisioner)&lt;/h3>
&lt;p>存储类有一个供应者，它确定用于配置PV的卷插件。必须指定此字段。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Volume Plugin&lt;/th>
&lt;th>Internal Provisioner&lt;/th>
&lt;th>Config Example&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>AWSElasticBlockStore&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#aws">AWS&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AzureFile&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#azure-file">Azure File&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AzureDisk&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#azure-disk">Azure Disk&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CephFS&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cinder&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#openstack-cinder">OpenStack Cinder&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FC&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FlexVolume&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Flocker&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GCEPersistentDisk&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#gce">GCE&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Glusterfs&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#glusterfs">Glusterfs&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iSCSI&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PhotonPersistentDisk&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Quobyte&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#quobyte">Quobyte&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NFS&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RBD&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#ceph-rbd">Ceph RBD&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VsphereVolume&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#vsphere">vSphere&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PortworxVolume&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#portworx-volume">Portworx Volume&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ScaleIO&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#scaleio">ScaleIO&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>你不限于指定此处列出的“internal”供应者（其名称前缀为“kubernetes.io”并与Kubernetes一起发送）。 你还可以运行和指定外部提供程序，它们是遵循Kubernetes定义的规范的独立程序。 外部提供者的作者对代码的生命周期，供应商的运输状况，运行状况以及使用的卷插件（包括Flex）等都有充分的自主权。存储库kubernetes-incubator /外部存储库包含一个库 用于编写实施大部分规范的外部提供者以及各种社区维护的外部提供者。&lt;/p>
&lt;p>例如，NFS不提供内部提供程序，但可以使用外部提供程序。 一些外部提供者列在存储库kubernetes-incubator/external-storage中。 还有第三方存储供应商提供自己的外部供应商的情况。&lt;/p>
&lt;h3 id="回收策略-1">回收策略&lt;/h3>
&lt;p>由存储类动态创建的持久卷将具有&lt;code>delete&lt;/code>的回收策略。 如果不希望这样做，唯一的当前选项是在创建PV之后编辑PV。&lt;/p>
&lt;p>通过存储类手动创建和管理的持久卷将具有在创建时分配的任何回收策略。&lt;/p>
&lt;h3 id="参数">参数&lt;/h3>
&lt;p>存储类型具有描述属于存储类型的卷的参数。 取决于供应者，可以接受不同的参数。 例如，参数类型的值io1和参数iopsPerGB特定于EBS。 当省略参数时，使用一些默认值。&lt;/p></description></item><item><title>Kubernetes学习 — Macos安装Kubernetes</title><link>https://atbug.com/install-kubernetes-on-macos/</link><pubDate>Thu, 17 Aug 2017 09:44:17 +0000</pubDate><guid>https://atbug.com/install-kubernetes-on-macos/</guid><description>
&lt;h1 id="kubernetes">Kubernetes&lt;/h1>
&lt;h2 id="安装">安装&lt;/h2>
&lt;h2 id="macos">macos&lt;/h2>
&lt;h3 id="检查环境">检查环境&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">sysctl -a &lt;span class="p">|&lt;/span> grep machdep.cpu.features &lt;span class="p">|&lt;/span> grep VMX
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装virtualbox">安装VirtualBox&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">http://download.virtualbox.org/virtualbox/5.1.26/Oracle_VM_VirtualBox_Extension_Pack-5.1.26-117224.vbox-extpack
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装minikube">安装minikube&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.21.0/minikube-darwin-amd64 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chmod +x minikube &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo mv minikube /usr/local/bin/
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建集群">创建集群&lt;/h3>
&lt;p>默认使用virtualbox。&lt;/p>
&lt;p>主机的ip是&lt;code>192.168.31.186&lt;/code>， &lt;code>1087&lt;/code>是proxy的端口。需要将ss的http代理监听地址从&lt;code>127.0.0.1&lt;/code>改为主机的ip。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#启动&lt;/span>
minikube start
&lt;span class="c1">#使用私有库&lt;/span>
minikube start --insecure-registry&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.31.34&amp;#34;&lt;/span>
&lt;span class="c1">#使用proxy，用于获取镜像&lt;/span>
minikube start --docker-env &lt;span class="nv">HTTP_PROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.31.186:1087&amp;#34;&lt;/span> --docker-env &lt;span class="nv">HTTPS_PROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.31.186:1087&amp;#34;&lt;/span> --docker-env &lt;span class="nv">NO_PROXY&lt;/span>&lt;span class="o">=&lt;/span>192.168.99.0/24
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装kubectl">安装kubectl&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -Lo kubectl http://storage.googleapis.com/kubernetes-release/release/v1.7.3/bin/darwin/amd64/kubectl &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chmod +x kubectl &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo mv kubectl /usr/local/bin/
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="oh-my-zsh-tab-completion">oh-my-zsh tab completion&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">vi ~/.zshrc
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>添加到plugin部分&lt;br>
plugins=(git zsh-completions kubectl)&lt;/p>
&lt;/blockquote>
&lt;h2 id="使用">使用&lt;/h2>
&lt;h3 id="minikube">minikube&lt;/h3>
&lt;h4 id="检查版本">检查版本&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube version
&lt;span class="c1">#minikube version: v0.21.0&lt;/span>
kubectl version
&lt;span class="c1">#Client Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;3&amp;#34;, GitVersion:&amp;#34;v1.3.0&amp;#34;, GitCommit:&amp;#34;283137936a498aed572ee22af6774b6fb6e9fd94&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2016-07-01T19:26:38Z&amp;#34;, GoVersion:&amp;#34;go1.6.2&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;darwin/amd64&amp;#34;}&lt;/span>
&lt;span class="c1">#Server Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;7&amp;#34;, GitVersion:&amp;#34;v1.7.0&amp;#34;, GitCommit:&amp;#34;d3ada0119e776222f11ec7945e6d860061339aad&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2017-07-26T00:12:31Z&amp;#34;, GoVersion:&amp;#34;go1.8.3&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="获取集群地址">获取集群地址&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube ip
192.168.99.100
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="获取服务列表">获取服务列表&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube service list
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="打开dashboard">打开dashboard&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube dashboard
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubectl">kubectl&lt;/h2>
&lt;h4 id="部署dashboard-ui">部署Dashboard UI&lt;/h4>
&lt;p>默认minikube会自动部署dashboard&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create -f https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="启动proxy">启动proxy&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl proxy
&lt;span class="c1">#Starting to serve on 127.0.0.1:8001&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="获取pod信息">获取pod信息&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl get pods --namespace kube-system
NAME READY STATUS RESTARTS AGE
kube-addon-manager-minikube 0/1 Running &lt;span class="m">0&lt;/span> 1h
kubernetes-dashboard-3313488171-90s64 0/1 Running &lt;span class="m">0&lt;/span> 20m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果STATUS一直处于&lt;strong>ContainerCreating&lt;/strong>状态，应该是pull image失败。默认是去gcr.io拉镜像，被墙了。需要在启动minikube的时候设置docker使用的代理。&lt;/p>
&lt;h4 id="获取pod详细信息">获取pod详细信息&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl describe pod kubernetes-dashboard-3313488171-90s64 --namespace kube-system
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="查看log">查看log&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl logs -f kubernetes-dashboard-3313488171-90s64
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>