<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on 乱世浮生</title><link>https://atbug.com/tags/java/</link><description>Recent content in Java on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 27 Jan 2022 11:07:34 +0800</lastBuildDate><atom:link href="https://atbug.com/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 sdkman 在 M1 Mac 上 安装 graalvm sdk</title><link>https://atbug.com/install-graalvm-on-m1-mac-with-sdkman/</link><pubDate>Thu, 27 Jan 2022 11:07:34 +0800</pubDate><guid>https://atbug.com/install-graalvm-on-m1-mac-with-sdkman/</guid><description>
&lt;p>SDKMAN 是一款管理多版本 SDK 的工具，可以实现在多个版本间的快速切换。安装和使用非常简单：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -s &lt;span class="s2">&amp;#34;https://get.sdkman.io&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bash
sdk install java x.y.z
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 m1（Apple Silicon）的 mac 上，不知道注意到没，列出的可选 Java SDK 少了很多。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">sdk list &lt;span class="nv">java&lt;/span>
&lt;span class="o">================================================================================&lt;/span>
Available Java Versions &lt;span class="k">for&lt;/span> macOS ARM &lt;span class="nv">64bit&lt;/span>
&lt;span class="o">================================================================================&lt;/span>
Vendor &lt;span class="p">|&lt;/span> Use &lt;span class="p">|&lt;/span> Version &lt;span class="p">|&lt;/span> Dist &lt;span class="p">|&lt;/span> Status &lt;span class="p">|&lt;/span> Identifier
--------------------------------------------------------------------------------
Corretto &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2.8.1 &lt;span class="p">|&lt;/span> amzn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2.8.1-amzn
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1.12.1 &lt;span class="p">|&lt;/span> amzn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1.12.1-amzn
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.0.35.2 &lt;span class="p">|&lt;/span> amzn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.0.35.2-amzn
Java.net &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.ea.5 &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.ea.5-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.ea.1.lm &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.ea.1.lm-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 18.ea.31 &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 18.ea.31-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2 &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1-open
Liberica &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2.fx &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2.fx-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2 &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1.fx &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1.fx-librca
&lt;span class="p">|&lt;/span> &amp;gt;&amp;gt;&amp;gt; &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> installed &lt;span class="p">|&lt;/span> 17.0.1-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14 &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13 &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322 &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312 &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> installed &lt;span class="p">|&lt;/span> 8.0.312-librca
Microsoft &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> ms &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1-ms
Oracle &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2 &lt;span class="p">|&lt;/span> oracle &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2-oracle
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> oracle &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1-oracle
SapMachine &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2 &lt;span class="p">|&lt;/span> sapmchn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2-sapmchn
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> sapmchn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1-sapmchn
Temurin &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> tem &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1-tem
Zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2.fx &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2.fx-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1.fx &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1.fx-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312-zulu
&lt;span class="o">================================================================================&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>仔细看的话，第一行 “Available Java Versions for macOS ARM 64bit” 说明只列出了支持 arm64 的版本，并且列表里也没有 Graalvm。&lt;/p>
&lt;p>如果要安装 Graalvm，一种方法是参考&lt;a href="https://www.graalvm.org/22.0/docs/getting-started/macos/">官方安装文档&lt;/a>，稍微复杂并且多版本的支持会麻烦一些；另一种方法是继续使用 sdkman。&lt;/p>
&lt;p>打开 &lt;code>~/.sdkman/etc/config&lt;/code> 可以看到 &lt;em>rosetta2&lt;/em> 的兼容选项 &lt;code>sdkman_rosetta2_compatible&lt;/code>，将值从 &lt;code>false&lt;/code> 改为 &lt;code>true&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">sdkman_auto_answer=false
sdkman_auto_complete=true
sdkman_auto_env=false
sdkman_beta_channel=false
sdkman_colour_enable=true
sdkman_curl_connect_timeout=7
sdkman_curl_max_time=10
sdkman_debug_mode=false
sdkman_insecure_ssl=false
sdkman_rosetta2_compatible=true
sdkman_selfupdate_enable=true
&lt;/code>&lt;/pre>&lt;/div>&lt;p>关闭并重新打开命令行窗口，或者执行 &lt;code>source ~/.zshrc&lt;/code> （这里是 &lt;em>zsh&lt;/em>，其他 shell 也是类似的方式）。&lt;/p>
&lt;p>重新执行 &lt;code>sdk list java&lt;/code>，就可以看到这次的列表就很全了，想要的 GraalVM 就在结果中：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">
sdk list &lt;span class="nv">java&lt;/span>
&lt;span class="o">================================================================================&lt;/span>
Available Java Versions &lt;span class="k">for&lt;/span> macOS &lt;span class="nv">64bit&lt;/span>
&lt;span class="o">================================================================================&lt;/span>
Vendor &lt;span class="p">|&lt;/span> Use &lt;span class="p">|&lt;/span> Version &lt;span class="p">|&lt;/span> Dist &lt;span class="p">|&lt;/span> Status &lt;span class="p">|&lt;/span> Identifier
--------------------------------------------------------------------------------
Corretto &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2.8.1 &lt;span class="p">|&lt;/span> amzn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2.8.1-amzn
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1.12.1 &lt;span class="p">|&lt;/span> amzn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1.12.1-amzn
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.0.35.2 &lt;span class="p">|&lt;/span> amzn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.0.35.2-amzn
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14.9.1 &lt;span class="p">|&lt;/span> amzn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14.9.1-amzn
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13.8.1 &lt;span class="p">|&lt;/span> amzn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13.8.1-amzn
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.322.06.1 &lt;span class="p">|&lt;/span> amzn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.322.06.1-amzn
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.312.07.1 &lt;span class="p">|&lt;/span> amzn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.312.07.1-amzn
GraalVM &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 22.0.0.2.r17 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 22.0.0.2.r17-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 22.0.0.2.r11 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 22.0.0.2.r11-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.3.1.r17 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.3.1.r17-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.3.1.r11 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.3.1.r11-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.3.0.r17 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.3.0.r17-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.3.0.r11 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.3.0.r11-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.2.0.r16 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.2.0.r16-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.2.0.r11 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.2.0.r11-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 20.3.5.r11 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 20.3.5.r11-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 20.3.4.r11 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 20.3.4.r11-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 20.3.3.r11 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 20.3.3.r11-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.3.6.r11 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.3.6.r11-grl
Java.net &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.ea.5 &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.ea.5-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.ea.1.lm &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.ea.1.lm-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 18.ea.31 &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 18.ea.31-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.ea.3.pma &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.ea.3.pma-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.2.0.r16 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.2.0.r16-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.2.0.r11 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.2.0.r11-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 20.3.5.r11 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 20.3.5.r11-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 20.3.4.r11 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 20.3.4.r11-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 20.3.3.r11 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 20.3.3.r11-grl
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.3.6.r11 &lt;span class="p">|&lt;/span> grl &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.3.6.r11-grl
Java.net &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.ea.5 &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.ea.5-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.ea.1.lm &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 19.ea.1.lm-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 18.ea.31 &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 18.ea.31-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.ea.3.pma &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.ea.3.pma-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2 &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1-open
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.2 &lt;span class="p">|&lt;/span> open &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.2-open
Liberica &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2.fx &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2.fx-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2 &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1.fx &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1.fx-librca
&lt;span class="p">|&lt;/span> &amp;gt;&amp;gt;&amp;gt; &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> installed &lt;span class="p">|&lt;/span> 17.0.1-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14.fx &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14.fx-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14 &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13.fx &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13.fx-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13 &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322.fx &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322.fx-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322 &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312.fx &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312.fx-librca
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312 &lt;span class="p">|&lt;/span> librca &lt;span class="p">|&lt;/span> installed &lt;span class="p">|&lt;/span> 8.0.312-librca
Liberica NIK &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.3.0.r17 &lt;span class="p">|&lt;/span> nik &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.3.0.r17-nik
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.3.0.r11 &lt;span class="p">|&lt;/span> nik &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.3.0.r11-nik
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.2 &lt;span class="p">|&lt;/span> nik &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 21.2-nik
Microsoft &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> ms &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1-ms
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13 &lt;span class="p">|&lt;/span> ms &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13-ms
Oracle &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2 &lt;span class="p">|&lt;/span> oracle &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2-oracle
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> oracle &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1-oracle
SapMachine &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2 &lt;span class="p">|&lt;/span> sapmchn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2-sapmchn
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> sapmchn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1-sapmchn
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14 &lt;span class="p">|&lt;/span> sapmchn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14-sapmchn
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13 &lt;span class="p">|&lt;/span> sapmchn &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13-sapmchn
Semeru &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> sem &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1-sem
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13 &lt;span class="p">|&lt;/span> sem &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13-sem
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312 &lt;span class="p">|&lt;/span> sem &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312-sem
Temurin &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> tem &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1-tem
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14 &lt;span class="p">|&lt;/span> tem &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14-tem
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13 &lt;span class="p">|&lt;/span> tem &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13-tem
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322 &lt;span class="p">|&lt;/span> tem &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322-tem
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312 &lt;span class="p">|&lt;/span> tem &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312-tem
Trava &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.9 &lt;span class="p">|&lt;/span> trava &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.9-trava
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.232 &lt;span class="p">|&lt;/span> trava &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.232-trava
Zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2.fx &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.2.fx-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1.fx &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 17.0.1.fx-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14.fx &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.14.fx-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13.fx &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 11.0.13.fx-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322.fx &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.322.fx-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312.fx &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 8.0.312.fx-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 7.0.332 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 7.0.332-zulu
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 7.0.322 &lt;span class="p">|&lt;/span> zulu &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 7.0.322-zulu
&lt;span class="o">================================================================================&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>应“云”而生的 Java 框架：构建本机可执行文件</title><link>https://atbug.com/quarkus-build-native-executable-file/</link><pubDate>Sat, 17 Apr 2021 09:08:40 +0800</pubDate><guid>https://atbug.com/quarkus-build-native-executable-file/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/17/16186233244243.jpg" alt="">&lt;/p>
&lt;blockquote>
&lt;p>电影《功夫》中，火云邪神有句话：“天下武功无坚不摧，唯快不破。”&lt;/p>
&lt;/blockquote>
&lt;p>在 &lt;a href="https://mp.weixin.qq.com/s/YcEqFm3oxlsEvJ3ckRbQyA">上一篇文章&lt;/a> 中，我们写了第一个 Quarkus 应用，并尝试着构建了 &lt;code>legacy-jar&lt;/code> 和 &lt;code>fast-jar&lt;/code>。&lt;/p>
&lt;p>今天来看一下 Quarkus 构建出来的本机可执行文件到底比 Spring 应用能快多少，&lt;strong>生态的成熟度不在这里讨论&lt;/strong>。&lt;/p>
&lt;h2 id="tldr">TLDR&lt;/h2>
&lt;p>先上结论， 与只有一个 Controller 的Spring Web 应用做下对比。&lt;/p>
&lt;h3 id="应用启动时间0012s-vs-2294s">应用启动时间：0.012s vs 2.294s&lt;/h3>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/17/cleanshot-20210417-at-0900292x.png" alt="CleanShot 2021-04-17 at 09.00.29@2x">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/17/cleanshot-20210417-at-0915282x.png" alt="CleanShot 2021-04-17 at 09.15.28@2x">&lt;/p>
&lt;h3 id="镜像大小49mb-vs-237-mb">镜像大小：49MB vs 237 MB&lt;/h3>
&lt;p>Spring 应用镜像使用 &lt;code>openjdk:11.0-jre-slim&lt;/code> 作为 base 镜像，大小为 220MB。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
spring/spring-getting-started latest 5f47030c5c3f &lt;span class="m">6&lt;/span> minutes ago 237MB
quarkus/quarkus-getting-started distroless2 fe973c5ac172 &lt;span class="m">24&lt;/span> minutes ago 49MB
quarkus/quarkus-getting-started distroless 6fe27dd44e86 &lt;span class="m">31&lt;/span> minutes ago 51MB
quarkus/quarkus-getting-started ubi 8f86f5915715 &lt;span class="m">58&lt;/span> minutes ago 132MB
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="java-应用容器化的困境">Java 应用容器化的困境&lt;/h2>
&lt;p>云原生世界中，应用容器化是个显著的特点。Java 应用容器化时面临了如下问题：&lt;/p>
&lt;ul>
&lt;li>应用启动慢：其实这是 Java 应用的问题。Java 应用占用内存多；JVM 虚拟机启动时需要做环境的初始化、预加载大量的类、初始化线程等等。启动耗时视应用情况需要几秒，甚至可达分钟级。较长的启动耗时，也抑制了水平伸缩性。即使在 Serverless 这种响应耗时要求不高的场景，也会被嫌弃。&lt;/li>
&lt;li>镜像过大：其实使用了镜像的分层设计，常见的一个 SpringCloud 应用的 über-jar 包可能都有 7、80MB。&lt;/li>
&lt;li>空间占用：虽然用了镜像分层，但积少成多，也会增加存储成本。&lt;/li>
&lt;/ul>
&lt;h2 id="quarkus-与本机映像native-image">Quarkus 与本机映像（native image）&lt;/h2>
&lt;p>Quarkus 的开发遵从了容器优先的原则：&lt;/p>
&lt;ul>
&lt;li>支持 Graal/SubstrateVM&lt;/li>
&lt;li>构建时处理元数据&lt;/li>
&lt;li>减少反射的使用&lt;/li>
&lt;li>本机映像预启动&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>本机映像是将 Java 代码提前编译为可执行文件（称为本机映像）的技术。该可执行文件包括应用程序类、其依赖项中的类、运行时库类以及 JDK 中的静态链接本机代码。它不是在 Java VM 上运行，而是包括必要的组件，例如内存管理，线程调度等，这些组件来自另一个运行时系统 “Substrate VM”。“Substrate VM” 是运行时组件（例如反优化器，垃圾收集器，线程调度等）的名称。与 JVM 相比，生成的程序具有更快的启动时间和更低的运行时内存开销。&lt;/p>
&lt;/blockquote>
&lt;h2 id="如何构建本机映像">如何构建本机映像&lt;/h2>
&lt;p>环境配置参考&lt;a href="https://mp.weixin.qq.com/s/YcEqFm3oxlsEvJ3ckRbQyA">上一篇文章&lt;/a>，可以直接&lt;a href="https://github.com/addozhang/quarkus-getting-started">从这里下载源码&lt;/a>。&lt;/p>
&lt;h3 id="配置-graalvm">配置 GraalVM&lt;/h3>
&lt;p>之前我们使用了&lt;a href="https://sdkman.io/"> sdkman&lt;/a> 进行 GraalVM 安装。设置 &lt;code>GRAALVM_HOME&lt;/code> 环境变量：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">export&lt;/span> &lt;span class="nv">GRAALVM_HOME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>sdk home java 21.0.0.2.r11-grl&lt;span class="sb">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>gu&lt;/code> 安装 &lt;code>native-image&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="si">${&lt;/span>&lt;span class="nv">GRAALVM_HOME&lt;/span>&lt;span class="si">}&lt;/span>/bin/gu install native-image
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="构建本机可执行文件">构建本机可执行文件&lt;/h3>
&lt;p>在源码的 &lt;code>pom.xml&lt;/code> 中，我们可以看到如下的 &lt;code>profile&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;profiles&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;profile&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;id&amp;gt;&lt;/span>native&lt;span class="nt">&amp;lt;/id&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;properties&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;quarkus.package.type&amp;gt;&lt;/span>native&lt;span class="nt">&amp;lt;/quarkus.package.type&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/profile&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/profiles&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们使用这个 profile 进行本机可执行文件的构建，整个构建耗时 &lt;strong>几分钟&lt;/strong> 。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">./mvnw package -Pnative
&lt;/code>&lt;/pre>&lt;/div>&lt;p>部分构建日志：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ quarkus-getting-started ---
[INFO]
[INFO] --- quarkus-maven-plugin:1.13.0.Final:build (default) @ quarkus-getting-started ---
[INFO] [org.jboss.threads] JBoss Threads version 3.2.0.Final
[INFO] [io.quarkus.deployment.pkg.steps.JarResultBuildStep] Building native image source jar: /Users/addo/Workspaces/private_w/quarkus-getting-started/target/quarkus-getting-started-1.0.0-SNAPSHOT-native-image-source-jar/quarkus-getting-started-1.0.0-SNAPSHOT-runner.jar
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Building native image from /Users/addo/Workspaces/private_w/quarkus-getting-started/target/quarkus-getting-started-1.0.0-SNAPSHOT-native-image-source-jar/quarkus-getting-started-1.0.0-SNAPSHOT-runner.jar
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildContainerRunner] Using docker to run the native image builder
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildContainerRunner] Checking image status quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java11
21.0.0-java11: Pulling from quarkus/ubi-quarkus-native-image
Digest: sha256:becf08de869e707beaa5e57444b533ef93ebef15aad90c92ac660ddf7cea2b11
Status: Image is up to date for quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java11
quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java11
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Running Quarkus native-image plugin on GraalVM Version 21.0.0 (Java Version 11.0.10+8-jvmci-21.0-b06)
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] docker run --env LANG=C --rm -v /Users/addo/Workspaces/private_w/quarkus-getting-started/target/quarkus-getting-started-1.0.0-SNAPSHOT-native-image-source-jar:/project:z quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java11 -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dvertx.logger-delegate-factory-class-name=io.quarkus.vertx.core.runtime.VertxLogDelegateFactory -J-Dvertx.disableDnsResolver=true -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=1 -J-Duser.language=en -J-Duser.country=CN -J-Dfile.encoding=UTF-8 --initialize-at-build-time= -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy\$BySpaceAndTime -H:+JNI -H:+AllowFoldMethods -jar quarkus-getting-started-1.0.0-SNAPSHOT-runner.jar -H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -J-Xmx5g -H:-AddAllCharsets -H:EnableURLProtocols=http --no-server -H:-UseServiceLoaderFeature -H:+StackTrace quarkus-getting-started-1.0.0-SNAPSHOT-runner
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] classlist: 5,859.24 ms, 0.96 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (cap): 633.34 ms, 0.94 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] setup: 2,468.19 ms, 0.94 GB
00:06:00,437 INFO [org.jbo.threads] JBoss Threads version 3.2.0.Final
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (clinit): 516.65 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (typeflow): 12,642.02 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (objects): 11,340.37 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (features): 525.87 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] analysis: 26,032.67 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] universe: 1,394.06 ms, 2.16 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (parse): 2,690.38 ms, 2.16 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (inline): 4,336.77 ms, 2.73 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (compile): 17,580.03 ms, 2.71 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] compile: 26,152.06 ms, 2.71 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] image: 3,288.43 ms, 2.70 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] write: 1,904.64 ms, 2.70 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] [total]: 67,414.16 ms, 2.70 GB
[WARNING] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] objcopy executable not found in PATH. Debug symbols will not be separated from executable.
[WARNING] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] That will result in a larger native image with debug symbols embedded in it.
[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 74739ms
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:21 min
[INFO] Finished at: 2021-04-17T08:06:47+08:00
[INFO] ------------------------------------------------------------------------
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>假如构建时出现类似 &lt;code>Caused by: java.lang.RuntimeException: Image generation failed. Exit code was 137 which indicates an out of memory error. Consider increasing the Xmx value for native image generation by setting the &amp;quot;quarkus.native.native-image-xmx&amp;quot; property&lt;/code> 这种报错。需要调整下 Docker 的设置，比如笔者使用的 macOS，打开 Docker Desktop &amp;gt; Preference &amp;gt; Resource &amp;gt; Advanced，将内存从默认的 2GB 调大，比如 8GB。&lt;/p>
&lt;p>从构建日志可以看出，构建的过程是在 &lt;code>quay.io/quarkus/ubi-quarkus-native-image&lt;/code> 的容器中完成的。虽然异常提示调整 &amp;ldquo;quarkus.native.native-image-xmx&amp;rdquo; ，其实是容器内存太小导致的。&lt;/p>
&lt;/blockquote>
&lt;p>构建成功后，可以在 &lt;code>target&lt;/code> 中找到 &lt;code>quarkus-getting-started-1.0.0-SNAPSHOT-runner&lt;/code>。这是一个可执行文件，大小为 28MB。&lt;/p>
&lt;p>尝试执行该文件，收到 &lt;code>zsh: exec format error: ./target/quarkus-getting-started-1.0.0-SNAPSHOT-runner&lt;/code> 错误。因为这是一个 Linux 可执行文件，因此我们需要在容器中运行。&lt;/p>
&lt;h3 id="构建本机镜像">构建本机镜像&lt;/h3>
&lt;p>在源文件的 &lt;code>src/main/docker&lt;/code> 目录中，我们可以找到 &lt;code>Dockerfile.native&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> registry.access.redhat.com/ubi8/ubi-minimal:8.3&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /work/&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> chown &lt;span class="m">1001&lt;/span> /work &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chmod &lt;span class="s2">&amp;#34;g+rwX&amp;#34;&lt;/span> /work &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chown 1001:root /work&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --chown&lt;span class="o">=&lt;/span>1001:root target/*-runner /work/application&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">EXPOSE&lt;/span>&lt;span class="s"> 8080&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">USER&lt;/span>&lt;span class="s"> 1001&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;./application&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;-Dquarkus.http.host=0.0.0.0&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="运行镜像">运行镜像&lt;/h3>
&lt;p>本地运行一下，可以看出启动只需要 &lt;code>0.013s&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --rm -p 8080:8080 quarkus/quarkus-getting-started:latest
__ ____ __ _____ ___ __ ____ ______
--/ __ &lt;span class="se">\/&lt;/span> / / / _ &lt;span class="p">|&lt;/span> / _ &lt;span class="se">\/&lt;/span> //_/ / / / __/
-/ /_/ / /_/ / __ &lt;span class="p">|&lt;/span>/ , _/ ,&amp;lt; / /_/ /&lt;span class="se">\ \
&lt;/span>&lt;span class="se">&lt;/span>--&lt;span class="se">\_&lt;/span>__&lt;span class="se">\_\_&lt;/span>___/_/ &lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span>&lt;span class="se">\_&lt;/span>___/___/
2021-04-17 00:22:27,146 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> quarkus-getting-started 1.0.0-SNAPSHOT native &lt;span class="o">(&lt;/span>powered by Quarkus 1.13.0.Final&lt;span class="o">)&lt;/span> started in 0.013s. Listening on: http://0.0.0.0:8080
2021-04-17 00:22:27,147 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> Profile prod activated.
2021-04-17 00:22:27,147 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> Installed features: &lt;span class="o">[&lt;/span>cdi, resteasy&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试一下端点：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">http :8080/hello/greeting/quarkus
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Content-Length: &lt;span class="m">14&lt;/span>
Content-Type: text/plain&lt;span class="p">;&lt;/span>&lt;span class="nv">charset&lt;/span>&lt;span class="o">=&lt;/span>UTF-8
Hello, quarkus
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看下镜像的信息，大小为 132MB，其中 base 镜像 &lt;code>ubi-minimal&lt;/code> 就占了 103 MB。感觉还是有点大，是否继续精简一下？&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
quarkus/quarkus-getting-started latest 8f86f5915715 &lt;span class="m">4&lt;/span> minutes ago 132MB
registry.access.redhat.com/ubi8/ubi-minimal 8.3 604ddd554fec &lt;span class="m">2&lt;/span> weeks ago 103MB
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="镜像瘦身">镜像瘦身&lt;/h3>
&lt;p>在 &lt;code>src/main/docker&lt;/code> 中还有个名为 &lt;code>Dockerfile.native-distroless&lt;/code> 的Dockerfile，里面使用了 &lt;code>quay.io/quarkus/quarkus-distroless-image:1.0&lt;/code> 作为 base 镜像&lt;/p>
&lt;p>使用这个Dockerfile进行构建，得到的镜像就小很多，只有 51MB：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
quarkus/quarkus-getting-started distroless 6fe27dd44e86 &lt;span class="m">33&lt;/span> seconds ago 51MB
quarkus/quarkus-getting-started ubi 8f86f5915715 &lt;span class="m">27&lt;/span> minutes ago 132MB
quay.io/quarkus/quarkus-distroless-image 1.0 062663862a83 &lt;span class="m">6&lt;/span> days ago 21.3MB
registry.access.redhat.com/ubi8/ubi-minimal 8.3 604ddd554fec &lt;span class="m">2&lt;/span> weeks ago 103MB
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行成功：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --rm -p 8080:8080 quarkus/quarkus-getting-started:distroless
__ ____ __ _____ ___ __ ____ ______
--/ __ &lt;span class="se">\/&lt;/span> / / / _ &lt;span class="p">|&lt;/span> / _ &lt;span class="se">\/&lt;/span> //_/ / / / __/
-/ /_/ / /_/ / __ &lt;span class="p">|&lt;/span>/ , _/ ,&amp;lt; / /_/ /&lt;span class="se">\ \
&lt;/span>&lt;span class="se">&lt;/span>--&lt;span class="se">\_&lt;/span>__&lt;span class="se">\_\_&lt;/span>___/_/ &lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span>&lt;span class="se">\_&lt;/span>___/___/
2021-04-17 00:51:26,070 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> quarkus-getting-started 1.0.0-SNAPSHOT native &lt;span class="o">(&lt;/span>powered by Quarkus 1.13.0.Final&lt;span class="o">)&lt;/span> started in 0.013s. Listening on: http://0.0.0.0:8080
2021-04-17 00:51:26,071 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> Profile prod activated.
2021-04-17 00:51:26,071 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> Installed features: &lt;span class="o">[&lt;/span>cdi, resteasy&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>极致瘦身，参考了&lt;a href="https://capgemini.github.io/development/Introduction-to-Quarkus-Supersonic-Subatomic-Java/#distroless-images">这里&lt;/a>，我们创建 &lt;code>Dockerfile.native-distroless2&lt;/code>。&lt;/p>
&lt;p>最终镜像的大小为 49MB，与官方提供的 distroless base 镜像只小了 2MB。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
quarkus/quarkus-getting-started distroless2 fe973c5ac172 &lt;span class="m">3&lt;/span> seconds ago 49MB
&lt;/code>&lt;/pre>&lt;/div>&lt;p>前面对比，用来构建 Spring 应用的 base 镜像 &lt;code>openjdk:11.0-jre-slim&lt;/code> 已经有 220MB，这还没算上应用的大小。即使是 &lt;code>openjdk:17-alpine3.13&lt;/code> 也有 182 MB。&lt;/p>
&lt;h2 id="next">NEXT&lt;/h2>
&lt;p>下一回，我们试试 Quarkus 在 ArgoCD 中的应用，看下 Serverless 上的使用体验如何。&lt;/p></description></item><item><title>应“云”而生的 Java 框架：Hello, Quarkus</title><link>https://atbug.com/hello-quarkus/</link><pubDate>Mon, 05 Apr 2021 21:08:40 +0800</pubDate><guid>https://atbug.com/hello-quarkus/</guid><description>
&lt;p>Wikipedia上有关 Quarkus 的信息还很少，只有一句简单的介绍：&lt;/p>
&lt;blockquote>
&lt;p>Quarkus 是专为 OpenJDK HotSpot 和 GraalVM 定制的全栈 Kubernetes 原生 Java 应用程序框架。与如 Spring 之类的其他框架相比，它提供了较小的内存占用并缩短了启动时间。它允许结合命令式和非阻塞响应式编程。&lt;/p>
&lt;/blockquote>
&lt;p>从 Quarkus 的&lt;a href="https://quarkus.io/">官网&lt;/a>，可以看到其有几个特性：&lt;/p>
&lt;ul>
&lt;li>容器优先&lt;/li>
&lt;li>统一了命令式和响应式编程&lt;/li>
&lt;li>开发者友好&lt;/li>
&lt;li>最佳品种的库及标准&lt;/li>
&lt;/ul>
&lt;p>更多 Quarkus 可以参考&lt;a href="https://quarkus.io/">官网&lt;/a>的介绍及文档。今天主要就是跑一下 Quarkus 的 &lt;code>Hello world&lt;/code>。&lt;/p>
&lt;p>放一张官网的图：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/05/16176279246527.jpg" alt="">&lt;/p>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;ul>
&lt;li>基于 Java 11 的 GraalVM&lt;/li>
&lt;li>Maven 3.6.2+&lt;/li>
&lt;/ul>
&lt;p>笔者使用的是 macos 10.15.4，GraalVM 和 Maven 建议通过 &lt;a href="https://sdkman.io">sdkman&lt;/a> 进行安装。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ sdk install java 21.0.0.2.r11-grl &lt;span class="c1">#如果已使用其他 java 版本，可以使用命令 sdk use java 21.0.0.2.r11-grl 进行切换&lt;/span>
$ sdk install maven 3.6.3
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="验证安装">验证安装&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ java -version
openjdk version &lt;span class="s2">&amp;#34;11.0.10&amp;#34;&lt;/span> 2021-01-19
OpenJDK Runtime Environment GraalVM CE 21.0.0.2 &lt;span class="o">(&lt;/span>build 11.0.10+8-jvmci-21.0-b06&lt;span class="o">)&lt;/span>
OpenJDK 64-Bit Server VM GraalVM CE 21.0.0.2 &lt;span class="o">(&lt;/span>build 11.0.10+8-jvmci-21.0-b06, mixed mode, sharing&lt;span class="o">)&lt;/span>
$ mvn -version
Apache Maven 3.6.3 &lt;span class="o">(&lt;/span>cecedd343002696d0abb50b32b541b8a6ba2883f&lt;span class="o">)&lt;/span>
Maven home: /Users/addo/.sdkman/candidates/maven/current
Java version: 11.0.10, vendor: GraalVM Community, runtime: /Users/addo/.sdkman/candidates/java/21.0.0.2.r11-grl
Default locale: en_CN, platform encoding: UTF-8
OS name: &lt;span class="s2">&amp;#34;mac os x&amp;#34;&lt;/span>, version: &lt;span class="s2">&amp;#34;10.15.4&amp;#34;&lt;/span>, arch: &lt;span class="s2">&amp;#34;x86_64&amp;#34;&lt;/span>, family: &lt;span class="s2">&amp;#34;mac&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="快速开始">快速开始&lt;/h2>
&lt;h3 id="创建项目">创建项目&lt;/h3>
&lt;p>创建 quarkus 项目最快的方式是通过 &lt;code>quarkus-maven-plugin&lt;/code> 来创建，使用如下的命令快速可以创建&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ mvn io.quarkus:quarkus-maven-plugin:1.13.0.Final:create &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -DprojectGroupId&lt;span class="o">=&lt;/span>com.atbug.quickstart &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -DprojectArtifactId&lt;span class="o">=&lt;/span>quarkus-getting-started &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -DclassName&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;com.atbug.quickstart.GreetingResource&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -Dpath&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/hello&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>./quarkus-getting-started&lt;/code> 中提供了：&lt;/p>
&lt;ul>
&lt;li>maven 的项目结构&lt;/li>
&lt;li>&lt;code>com.atbug.quickstart.GreetingResource&lt;/code> 暴露了 &lt;code>/hello&lt;/code> 端点，通过 &lt;code>JAX-RS&lt;/code> 注解实现&lt;/li>
&lt;li>相关的单元测试&lt;/li>
&lt;li>应用启动后可以通过 &lt;code>http://localhost:8080&lt;/code> 打开的启动页面&lt;/li>
&lt;li>&lt;code>src/main/docker&lt;/code> 下提供了 &lt;code>native&lt;/code> 和 &lt;code>jvm&lt;/code> 风格的 Dockerfile&lt;/li>
&lt;li>应用配置文件&lt;/li>
&lt;/ul>
&lt;h3 id="运行应用">运行应用&lt;/h3>
&lt;p>执行 &lt;code>./mvnw compile quarkus:dev&lt;/code> 命令可启动应用&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">__ ____ __ _____ ___ __ ____ ______
--/ __ &lt;span class="se">\/&lt;/span> / / / _ &lt;span class="p">|&lt;/span> / _ &lt;span class="se">\/&lt;/span> //_/ / / / __/
-/ /_/ / /_/ / __ &lt;span class="p">|&lt;/span>/ , _/ ,&amp;lt; / /_/ /&lt;span class="se">\ \
&lt;/span>&lt;span class="se">&lt;/span>--&lt;span class="se">\_&lt;/span>__&lt;span class="se">\_\_&lt;/span>___/_/ &lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span>&lt;span class="se">\_&lt;/span>___/___/
2021-04-05 19:48:36,419 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>Quarkus Main Thread&lt;span class="o">)&lt;/span> quarkus-getting-started 1.0.0-SNAPSHOT on JVM &lt;span class="o">(&lt;/span>powered by Quarkus 1.13.0.Final&lt;span class="o">)&lt;/span> started in 2.135s. Listening on: http://localhost:8080
2021-04-05 19:48:36,448 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>Quarkus Main Thread&lt;span class="o">)&lt;/span> Profile dev activated. Live Coding activated.
2021-04-05 19:48:36,448 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>Quarkus Main Thread&lt;span class="o">)&lt;/span> Installed features: &lt;span class="o">[&lt;/span>cdi, resteasy&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>访问 &lt;code>/hello&lt;/code> 断点&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ http :8080/hello
HTTP/1.1 200 OK
Content-Length: 5
Content-Type: text/plain;charset=UTF-8
Hello
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>笔者通过 &lt;code>httpie&lt;/code> 进行访问，可以通过 &lt;code>brew install httpie&lt;/code> 进行安装，推荐使用。&lt;/p>
&lt;/blockquote>
&lt;h4 id="增加新的断点">增加新的断点&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@GET&lt;/span>
&lt;span class="nd">@Produces&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TEXT_PLAIN&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/greeting/{name}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">greeting&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathParam&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注：&lt;code>PathParam&lt;/code> 来自 &lt;code>org.jboss.resteasy.annotations.jaxrs.PathParam&lt;/code>&lt;/p>
&lt;p>测试：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http :8080/hello/greeting/Quarkus
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Content-Length: &lt;span class="m">14&lt;/span>
Content-Type: text/plain&lt;span class="p">;&lt;/span>&lt;span class="nv">charset&lt;/span>&lt;span class="o">=&lt;/span>UTF-8
Hello, Quarkus
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为新的端点增加单元测试&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testGreetingEndpoint&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">uuid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UUID&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">randomUUID&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">given&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">pathParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">uuid&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">when&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/hello/greeting/{name}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">then&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">statusCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">200&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">body&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">is&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">uuid&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>./mvnw test&lt;/code> 运行单元测试&lt;/p>
&lt;blockquote>
&lt;p>注意这里使用 intellij 运行单元测试的话，会报错。需要修改 Java Compiler 的配置，添加额外的命令行参数 &lt;code>-parameters&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/05/16176241035940.jpg" alt="">&lt;/p>
&lt;/blockquote>
&lt;h3 id="打包">打包&lt;/h3>
&lt;p>与通常的 maven 项目打包方式一样，执行 &lt;code>./mvnw package&lt;/code>，在 &lt;code>target&lt;/code> 目录中：&lt;/p>
&lt;ul>
&lt;li>&lt;code>quarkus-getting-started-1.0.0-SNAPSHOT.jar&lt;/code> 仅包含了项目编译的类和资源文件，是不可执行的 jar&lt;/li>
&lt;li>&lt;code>quarkus-app&lt;/code> 目录中包含了可执行的 jar 文件 &lt;code>quarkus-run.jar&lt;/code> ，&lt;strong>但是&lt;/strong>，其并不是一个 &lt;code>über-jar&lt;/code>，项目的依赖库都位于 &lt;code>lib&lt;/code>目录中。&lt;/li>
&lt;/ul>
&lt;p>可以通过执行 &lt;code>java -jar target/quarkus-app/quarkus-run.jar&lt;/code> 在启动应用。&lt;/p>
&lt;blockquote>
&lt;p>这意味着假如你想在容器中运行，需要部署整个 &lt;code>quarkus-app&lt;/code> 目录&lt;/p>
&lt;/blockquote>
&lt;h4 id="使用-fast-jar">使用 fast-jar&lt;/h4>
&lt;p>qurakus 的打包方式有两种：&lt;code>legacy-jar&lt;/code> 和 &lt;code>fast-jar&lt;/code>。可以在 &lt;code>application.properties&lt;/code> 文件中进行指定，未显式指定默认为 &lt;code>legacy-jar&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">quarkus.package.type=fast-jar
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>如果要在容器中运行，同样需要部署整个 &lt;code>quarkus-app&lt;/code> 目录
&lt;code>fast-jar&lt;/code> 类型的包比 &lt;code>legacy-jar&lt;/code> 的包启动会快一点点，同时占用的内存也更低。因为 &lt;code>fast-jar&lt;/code> 的包含了依赖包中的类和资源文件的索引，避免在类和资源文件加载时对 classpath 下的包的查找。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>下一篇，试试构建一个原生的可执行文件。&lt;/strong>&lt;/p></description></item><item><title>Java 中的 Mysql 时区问题</title><link>https://atbug.com/mysql-timezone-in-java/</link><pubDate>Thu, 14 May 2020 11:34:24 +0800</pubDate><guid>https://atbug.com/mysql-timezone-in-java/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/14/anonymouspersonwithminiatureairplaneonchalkboard37.jpg" alt="anonymous-person-with-miniature-airplane-on-chalkboard-3769120">&lt;/p>
&lt;p>&lt;em>(Photo by Andrea Piacquadio from Pexels)&lt;/em>&lt;/p>
&lt;p>话说工作十多年，mysql 还真没用几年。起初是外企银行，无法直接接触到 DB；后来一直从事架构方面，也多是解决问题为主。&lt;/p>
&lt;p>这次搭建海外机房，围绕时区大家做了一番讨论。不说最终的结果是什么，期间有同事认为 DB 返回的是 UTC 时间。&lt;/p>
&lt;p>这里简单做个验证，顺便看下时区的问题到底是如何处理。&lt;/p>
&lt;h2 id="环境">环境&lt;/h2>
&lt;blockquote>
&lt;p>openjdk version &amp;ldquo;1.8.0_242&amp;rdquo;
mysql-connector-java &amp;ldquo;8.0.20&amp;rdquo;
mysql &amp;ldquo;5.7&amp;rdquo; 时区 TZ=Europe/London
本地时区 GMT+8&lt;/p>
&lt;/blockquote>
&lt;p>创建个简单的库&lt;code>test&lt;/code>及表&lt;code>user&lt;/code>， 表结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="o">`&lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="o">`&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="o">`&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">`&lt;/span> &lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">`&lt;/span>&lt;span class="n">birth_date&lt;/span>&lt;span class="o">`&lt;/span> &lt;span class="k">timestamp&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">DEFAULT&lt;/span> &lt;span class="k">CURRENT_TIMESTAMP&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="n">ENGINE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">InnoDB&lt;/span> &lt;span class="k">DEFAULT&lt;/span> &lt;span class="n">CHARSET&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">latin1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>插入一条测试数据：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">insert&lt;/span> &lt;span class="k">into&lt;/span> &lt;span class="o">`&lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="o">`&lt;/span>
&lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">values&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Tom&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2020-05-15 08:00:00&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">Query&lt;/span> &lt;span class="n">OK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="k">row&lt;/span> &lt;span class="n">affected&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">01&lt;/span> &lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">select&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="k">user&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">+&lt;/span>&lt;span class="c1">------+---------------------+
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">birth_date&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+&lt;/span>&lt;span class="c1">------+---------------------+
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span> &lt;span class="n">Tom&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">2020&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">05&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">14&lt;/span> &lt;span class="mi">08&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">00&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+&lt;/span>&lt;span class="c1">------+---------------------+
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="k">row&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="k">set&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span> &lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试代码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Connection&lt;/span> &lt;span class="n">conn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DriverManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc:mysql://localhost:3306/test?useSSL=false&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Statement&lt;/span> &lt;span class="n">stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createStatement&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;select * from user where name = &amp;#39;Tom&amp;#39;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ResultSet&lt;/span> &lt;span class="n">rs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getResultSet&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Timestamp&lt;/span> &lt;span class="n">timestamp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTimestamp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;birth_date&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">timestamp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toLocalDateTime&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">2020-05-14T15:00
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="分析">分析&lt;/h2>
&lt;p>程序的执行过程同时用 wireshark 抓了包。可以看到一次查询，做了这么多次的交互（包含了会话初始化）。这里可以看到 #177 的交互返回查询的结果：&lt;code>Tom 2020-05-14 08:00:00&lt;/code>，与 DB 中的数据相符。&lt;strong>可见，返回的并不是 UTC 时间&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/14/15894244815090.jpg" alt="">&lt;/p>
&lt;p>在 TCP 抓包结果中 #155 的查询语句：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="cm">/* mysql-connector-java-8.0.20 (Revision: afc0a13cd3c5a0bf57eaa809ee0ee6df1fd5ac9b) */&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="o">@@&lt;/span>&lt;span class="k">session&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">auto_increment_increment&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">auto_increment_increment&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">character_set_client&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">character_set_client&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">character_set_connection&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">character_set_connection&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">character_set_results&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">character_set_results&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">character_set_server&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">character_set_server&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">collation_server&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">collation_server&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">collation_connection&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">collation_connection&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">init_connect&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">init_connect&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">interactive_timeout&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">interactive_timeout&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">license&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">license&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">lower_case_table_names&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">lower_case_table_names&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">max_allowed_packet&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">max_allowed_packet&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">net_write_timeout&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">net_write_timeout&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">performance_schema&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">performance_schema&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">query_cache_size&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">query_cache_size&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">query_cache_type&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">query_cache_type&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">sql_mode&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">sql_mode&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">system_time_zone&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">system_time_zone&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">time_zone&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">time_zone&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">transaction_isolation&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">transaction_isolation&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">wait_timeout&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">wait_timeout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/14/15894253881690.jpg" alt="">&lt;/p>
&lt;p>服务端返回的 &lt;code>time_zone&lt;/code> 为 &lt;code>BST&lt;/code>。与本地时区的转换，由 mysql 的 connector 自动完成。&lt;/p>
&lt;h2 id="进阶">进阶&lt;/h2>
&lt;h3 id="时区自动转换">时区自动转换&lt;/h3>
&lt;p>实现源码：&lt;/p>
&lt;p>&lt;code>ResultSetImpl&lt;/code>源码&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">defaultTimestampValueFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SqlTimestampValueFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">pset&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServerSession&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getServerTimeZone&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Timestamp&lt;/span> &lt;span class="nf">getTimestamp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">columnIndex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">checkRowPos&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">checkColumnBounds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">columnIndex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">thisRow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">columnIndex&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">defaultTimestampValueFactory&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="如何确认服务端时区">如何确认服务端时区？&lt;/h3>
&lt;p>使用会话中的服务端时区进行服务端时区。会话初始化时会进行时区的确认，比如前面获取的到&lt;code>BST&lt;/code>。确认时区的逻辑在&lt;code>NativeProtocol#configureTimezone()&lt;/code>中：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configureTimezone&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">从mysql的响应获取&lt;/span> &lt;span class="n">time_zone&lt;/span> &lt;span class="n">和&lt;/span> &lt;span class="n">system_time_zone&lt;/span> &lt;span class="n">的设置&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">configuredTimeZoneOnServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverSession&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServerVariable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;time_zone&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SYSTEM&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configuredTimeZoneOnServer&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">configuredTimeZoneOnServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverSession&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServerVariable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;system_time_zone&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">从&lt;/span> &lt;span class="n">jdbc&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="n">参数&lt;/span> &lt;span class="n">serverTimezone&lt;/span> &lt;span class="n">获取时区&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPropertySet&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getStringProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PropertyKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverTimezone&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">configuredTimeZoneOnServer&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//如果 jdbc url 中未通过 serverTimezone 指定时区。则从TimeZoneMapping.properties中获取mysql 回传的时区缩写对应的标准时区，比如此处的 BST =&amp;gt; Europe/London
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//会出现无法映射的情况，不如 CEST 无法映射到 =&amp;gt; Europe/Berlin，可以指定自定义的 Properties 文件进行映射
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// user can override this with driver properties, so don&amp;#39;t detect if that&amp;#39;s the case
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">StringUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmptyOrWhitespaceOnly&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TimeUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCanonicalTimezone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configuredTimeZoneOnServer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">getExceptionInterceptor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IllegalArgumentException&lt;/span> &lt;span class="n">iae&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">ExceptionFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WrongArgumentException&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">iae&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMessage&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">getExceptionInterceptor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//如果 jdbc url 中通过 serverTimezone 指定了时区，则优先使用该时区
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">canonicalTimezone&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverSession&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setServerTimeZone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TimeZone&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTimeZone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// The Calendar class has the behavior of mapping unknown timezones to &amp;#39;GMT&amp;#39; instead of throwing an exception, so we must check for this...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;GMT&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverSession&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServerTimeZone&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getID&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;GMT&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">ExceptionFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WrongArgumentException&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Messages&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Connection.9&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">}),&lt;/span>
&lt;span class="n">getExceptionInterceptor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="关于-servertimezone-的官方说明">关于 serverTimezone 的官方说明&lt;/h3>
&lt;blockquote>
&lt;p>Override detection/mapping of time zone. Used when time zone from server doesn&amp;rsquo;t map to Java time zone&lt;/p>
&lt;/blockquote>
&lt;p>修改一下 jdbc url，通过&lt;code>serverTimezone&lt;/code>指定时区为 &lt;code>GMT+8&lt;/code>：&lt;code>jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;amp;useSSL=false&lt;/code>&lt;/p>
&lt;p>再次执行代码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">2020-05-14T08:00
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>加速云原生的 Java 开发</title><link>https://atbug.com/speed-up-java-development-on-kubernetes/</link><pubDate>Sat, 21 Dec 2019 20:45:22 +0800</pubDate><guid>https://atbug.com/speed-up-java-development-on-kubernetes/</guid><description>
&lt;p>今天来说说日常在Kubernetes开发Java项目遇到的问题.&lt;/p>
&lt;p>当我们新建一个项目的时候, 总是面临需要新建manifest, 平时都是&lt;code>copy+paste+modify&lt;/code>. 能否以变成的方式来生成?&lt;/p>
&lt;p>开发时的步骤也比较繁琐: &lt;code>docker build&lt;/code>, &lt;code>docker push&lt;/code>, &lt;code>kubectl apple&lt;/code>, &lt;code>kubectl delete pod&lt;/code>. 对于一个Java应用来说还多了一步编译. 操作一次还ok, 但是一天十几次总会有想吐的感觉. 这些步骤能否简化成一个命令, 甚至修改了代码自动就完成上面一系列的操作?&lt;/p>
&lt;p>实现这些我们需要几个工具: &lt;a href="https://github.com/dekorateio/dekorate">dekorate&lt;/a>, &lt;a href="https://github.com/GoogleContainerTools/jib">Jib&lt;/a>, &lt;a href="https://github.com/GoogleContainerTools/skaffold">Skaffold&lt;/a>. 其中Jib也在上一篇文章&lt;a href="https://atbug.com/build-docker-or-oci-image-with-jib-for-java/">使用Jib为Java应用构建镜像&lt;/a>中介绍过.&lt;/p>
&lt;h2 id="dekorate">dekorate&lt;/h2>
&lt;blockquote>
&lt;p>Dekorate is a collection of Java compile-time generators and decorators for Kubernetes/OpenShift manifests.
Dekorate是Java编译时生成和装饰Kubernetes/OpenShift的manifests的工具&lt;/p>
&lt;/blockquote>
&lt;h3 id="快速开始">快速开始&lt;/h3>
&lt;h4 id="1-通过使用spring-initializerhttpsstartspringio生成一个项目spring-boot-222-并加入依赖">1. 通过使用&lt;a href="https://start.spring.io">Spring Initializer&lt;/a>生成一个项目(Spring Boot 2.2.2), 并加入依赖:&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>io.dekorate&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>kubernetes-spring-starter&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>0.10.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-加入一个简单的controller">2. 加入一个简单的&lt;code>Controller&lt;/code>:&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author Addo.Zhang
&lt;/span>&lt;span class="cm"> * @date 2019/12/22
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@RestController&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DekorateExampleController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">hi&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-执行命令mvn-clean-install-然后在targetclassesmeta-infdekorate目录下可以找到kubernetesjson和kubernetesyml两个文件">3. 执行命令&lt;code>mvn clean install&lt;/code>, 然后在&lt;code>target/classes/META-INF/dekorate&lt;/code>目录下可以找到&lt;code>kubernetes.json&lt;/code>和&lt;code>kubernetes.yml&lt;/code>两个文件.&lt;/h4>
&lt;p>&lt;code>kubernetes.yml&lt;/code>的内容:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;v1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Service&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;ClusterIP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;apps/v1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Deployment&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;KUBERNETES_NAMESPACE&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;metadata.namespace&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo/dekorate-example:0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;IfNotPresent&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/info&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;TCP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/health&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>yml中包含了&lt;code>Service&lt;/code>和&lt;code>Deployment&lt;/code>两部分, dekorate完美兼容的Spring:&lt;/p>
&lt;ul>
&lt;li>&lt;code>app: dekorate-example&lt;/code>: 项目名&lt;/li>
&lt;li>&lt;code>version: 0.0.1-SNAPSHOT&lt;/code>: 项目当前版本&lt;/li>
&lt;li>&lt;code>group: addo&lt;/code>: 是我系统当前用户名&lt;/li>
&lt;li>&lt;code>/actuator/health&lt;/code>: Spring Boot 2.2后actuator的health endpoint, 作为&lt;code>readinessProbe&lt;/code>&lt;/li>
&lt;li>&lt;code>/actuator/info&lt;/code>: Spring Boot 2.2后actuator的endpoint, 作为&lt;code>livenessProbe&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="进阶">进阶&lt;/h3>
&lt;p>&lt;strong>前面yml的内容都是自动生成的, 假如有些特殊的需求. 比如修改镜像的&lt;code>repository&lt;/code>即这里的&lt;code>group&lt;/code>, 如何操作?&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">dekorate.kubernetes.group = addozhang
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/5zgkfl.jpg" alt="Change Image Repository">&lt;/p>
&lt;p>&lt;strong>或者修改Service的类型为NodePort&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">dekorate.kubernetes.service-type = NodePort
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/vIen3M.jpg" alt="NodePort Service">&lt;/p>
&lt;h4 id="配置">配置&lt;/h4>
&lt;p>dekoration提供了&lt;a href="https://github.com/dekorateio/dekorate/blob/master/assets/config.md">丰富的配置&lt;/a>来个性化manifest.&lt;/p>
&lt;p>除了上面使用的配置文件(properties/yaml)的方式, 还提供了&lt;code>Annotation&lt;/code>注解配置方式.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">io.dekorate.kubernetes.annotation.Env&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">io.dekorate.kubernetes.annotation.KubernetesApplication&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@KubernetesApplication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">envVars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Env&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;key1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;var1&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//Your code goes here
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/exQoxy.jpg" alt="@KubernetesApplication Annotation">&lt;/p>
&lt;h2 id="jib">Jib&lt;/h2>
&lt;p>Jib的说明请看上一篇文章:&lt;a href="https://atbug.com/build-docker-or-oci-image-with-jib-for-java/">使用Jib为Java应用构建镜像&lt;/a>&lt;/p>
&lt;h3 id="插件配置">插件配置&lt;/h3>
&lt;p>下面是针对该项目添加的配置:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.google.cloud.tools&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jib-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.8.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;container&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Xmx128m&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Xms64m&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/jvmFlags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;labels&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;Author&amp;gt;&lt;/span>Addo.Zhang&lt;span class="nt">&amp;lt;/Author&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/labels&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;creationTime&amp;gt;&lt;/span>USE_CURRENT_TIMESTAMP&lt;span class="nt">&amp;lt;/creationTime&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/container&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;from&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>openjdk:8-jdk-alpine&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/from&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>addo/dekorate-example&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;tags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;tag&amp;gt;&lt;/span>latest&lt;span class="nt">&amp;lt;/tag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/tags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;allowInsecureRegistries&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/allowInsecureRegistries&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令&lt;code>mvn compile jib:dockerBuild&lt;/code>便可以编译代码, 构建镜像并推送到镜像仓库.&lt;/p>
&lt;h2 id="skaffold">Skaffold&lt;/h2>
&lt;p>&lt;a href="https://github.com/GoogleContainerTools/skaffold">Skaffold&lt;/a>也是GoogleContainerTools中的一个工具.&lt;/p>
&lt;blockquote>
&lt;p>Skaffold is a command line tool that facilitates continuous development for Kubernetes applications. You can iterate on your application source code locally then deploy to local or remote Kubernetes clusters. Skaffold handles the workflow for building, pushing and deploying your application. It also provides building blocks and describe customizations for a CI/CD pipeline.
Skaffold是一个命令行工具, 可促进Kubernetes应用程序的持续开发. 可以在本地迭代应用程序源代码, 然后部署到本地或远程Kubernetes集群. Skaffold处理构建, 推送和部署应用程序的工作流程. 它还提供了构建块并描述了CI/CD管道的自定义.&lt;/p>
&lt;/blockquote>
&lt;p>在我们这个例子中, 通过与Jib的联动, 完成编译代码, 构建镜像, 推送镜像, 部署一系列操作.&lt;/p>
&lt;p>![Run](&lt;a href="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/2019-12-23">https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/2019-12-23&lt;/a> 15.12.24.gif)&lt;/p>
&lt;p>截屏中的操作, 因为没有代码改动而不续构建镜像, Skaffold直接从cache中获取镜像并部署到Kubernetes中.&lt;/p>
&lt;h3 id="skaffold操作">Skaffold操作&lt;/h3>
&lt;h4 id="1-执行命令skaffold-init---xxenablejibinit并在提示出输入y">1. 执行命令&lt;code>skaffold init --XXenableJibInit&lt;/code>并在提示出输入&lt;code>y&lt;/code>&lt;/h4>
&lt;h4 id="2-该命令会生成一个名为skaffoldyaml的文件">2. 该命令会生成一个名为&lt;code>skaffold.yaml&lt;/code>的文件&lt;/h4>
&lt;p>由于&lt;code>dekorate&lt;/code>同时生成了&lt;code>json&lt;/code>和&lt;code>yaml&lt;/code>格式的manifest, 被&lt;code>skaffold&lt;/code>检测到. 实际操作中只需要其中一个即可.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">skaffold/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dekorate-example&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">artifacts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">addo/dekorate-example&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">jib&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kubectl&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">manifests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">target/classes/META-INF/dekorate/kubernetes.json&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">target/classes/META-INF/dekorate/kubernetes.yml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-执行skaffold-run">3. 执行&lt;code>skaffold run&lt;/code>&lt;/h4>
&lt;h4 id="4-pod启动完成后-通过kubectl-port-forward-podname-here-8081">4. pod启动完成后, 通过&lt;code>kubectl port-forward PODNAME-HERE 8081&lt;/code>&lt;/h4>
&lt;h4 id="5-请求http-httplocalhost8081">5. 请求&lt;code>http http://localhost:8081&lt;/code>&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/wt2BVU.jpg" alt="">&lt;/p>
&lt;h3 id="进阶-1">进阶&lt;/h3>
&lt;p>Skaffold的功能强大, 目前个人使用的有限, 有时间新开一篇来学习一下.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/FXu4Hy.jpg" alt="">&lt;/p>
&lt;h4 id="cli">CLI&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">➜ ~ skaffold &lt;span class="nb">help&lt;/span>
A tool that facilitates continuous development &lt;span class="k">for&lt;/span> Kubernetes applications.
Find more information at: https://skaffold.dev/docs/getting-started/
End-to-end pipelines:
run Run a pipeline
dev Run a pipeline in development mode
debug &lt;span class="o">[&lt;/span>beta&lt;span class="o">]&lt;/span> Run a pipeline in debug mode
Pipeline building blocks &lt;span class="k">for&lt;/span> CI/CD:
build Build the artifacts
deploy Deploy pre-built artifacts
delete Delete the deployed application
render &lt;span class="o">[&lt;/span>alpha&lt;span class="o">]&lt;/span> Perform all image builds, and output rendered Kubernetes manifests
Getting started with a new project:
init &lt;span class="o">[&lt;/span>alpha&lt;span class="o">]&lt;/span> Generate configuration &lt;span class="k">for&lt;/span> deploying an application
fix Update old configuration to newest schema version
Other Commands:
completion Output shell completion &lt;span class="k">for&lt;/span> the given shell &lt;span class="o">(&lt;/span>bash or zsh&lt;span class="o">)&lt;/span>
config Interact with the Skaffold configuration
credits Export third party notices to given path &lt;span class="o">(&lt;/span>./skaffold-credits by default&lt;span class="o">)&lt;/span>
diagnose Run a diagnostic on Skaffold
version Print the version information
Usage:
skaffold &lt;span class="o">[&lt;/span>flags&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span>
Use &lt;span class="s2">&amp;#34;skaffold &amp;lt;command&amp;gt; --help&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> more information about a given command.
Use &lt;span class="s2">&amp;#34;skaffold options&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> a list of global command-line options &lt;span class="o">(&lt;/span>applies to all commands&lt;span class="o">)&lt;/span>.
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="yaml配置">Yaml配置&lt;/h4>
&lt;p>参考&lt;a href="https://skaffold.dev/docs/references/yaml/">skaffold.yaml&lt;/a>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>文章的开头我们提到如何做到修改代码后自动完成一些列的操作, 通过&lt;code>skaffold dev&lt;/code>就可以实现.&lt;/p>
&lt;p>文章中使用的&lt;code>dekoration-example&lt;/code>可在&lt;a href="https://github.com/addozhang/dekorate-example">GitHub&lt;/a>上找到.&lt;/p></description></item><item><title>SpringBoot源码 - 启动</title><link>https://atbug.com/glance-over-spring-boot-source/</link><pubDate>Fri, 08 Dec 2017 17:48:43 +0000</pubDate><guid>https://atbug.com/glance-over-spring-boot-source/</guid><description>
&lt;p>SpringBoot Application启动部分的源码阅读.&lt;/p>
&lt;h2 id="springapplication">SpringApplication&lt;/h2>
&lt;p>常用的&lt;code>SpringApplication.run(Class, Args)&lt;/code>启动Spring应用, 创建或者更新&lt;code>ApplicationContext&lt;/code>&lt;/p>
&lt;h3 id="静态方法run">静态方法run&lt;/h3>
&lt;p>使用source类实例化一个&lt;code>SpringApplication&lt;/code>实例, 并调用实例方法&lt;code>run&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">sources&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="初始化initialize">初始化initialize&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>实例化的时候首先通过尝试加载&lt;code>javax.servlet.Servlet&lt;/code>和&lt;code>org.springframework.web.context.ConfigurableWebApplicationContext&lt;/code>推断当前是否是&lt;strong>web&lt;/strong>环境.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后从&lt;code>spring.factories&lt;/code>获取&lt;code>ApplicationContextInitializer&lt;/code>的实现类.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从&lt;code>spring.factories&lt;/code>获取&lt;code>ApplicationListener&lt;/code>的实现类&lt;/p>
&lt;/li>
&lt;li>
&lt;p>推断出应用的启动类(包含main方法的类): 检查线程栈中元素的方法名是否是&lt;code>main&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">deduceMainApplicationClass&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//获取线程栈数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">StackTraceElement&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">stackTrace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">StackTraceElement&lt;/span> &lt;span class="n">stackTraceElement&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">stackTrace&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;main&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stackTraceElement&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMethodName&lt;/span>&lt;span class="o">()))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stackTraceElement&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClassName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ClassNotFoundException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Swallow and continue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>到此实例化就完成了.&lt;/p>
&lt;h3 id="实例方法run">实例方法run&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">StopWatch&lt;/span> &lt;span class="n">stopWatch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StopWatch&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">stopWatch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//默认设置java.awt.headless为true
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">configureHeadlessProperty&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//从spring.factories中获取org.springframework.boot.SpringApplicationRunListener的实现类
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SpringApplicationRunListeners&lt;/span> &lt;span class="n">listeners&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getRunListeners&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//通过EventPublishingRunListener发布started事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">started&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ApplicationArguments&lt;/span> &lt;span class="n">applicationArguments&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultApplicationArguments&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//重点: 创建更新上下文对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createAndRefreshContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">listeners&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">applicationArguments&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//上下文对象更新完调用
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">afterRefresh&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">applicationArguments&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//通过EventPublishingRunListener发布finished事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">finished&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">stopWatch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stop&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logStartupInfo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">StartupInfoLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mainApplicationClass&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">logStarted&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getApplicationLog&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">stopWatch&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">handleRunFailure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="springapplicationrunlistener">SpringApplicationRunListener&lt;/h3>
&lt;p>监听&lt;code>SpringApplication&lt;/code>的&lt;code>run&lt;/code>方法. 通过&lt;code>SpringFactoriesLoader&lt;/code>加载, 实现时需要提供public的构造方法接受&lt;code>SpringApplication&lt;/code>和&lt;code>String[]&lt;/code>为参数.
事件的发生顺序为&lt;code>started -&amp;gt; environmentPrepared -&amp;gt; contextPrepared -&amp;gt; contextLoaded -&amp;gt; finished&lt;/code>.&lt;/p>
&lt;p>SpringBoot默认使用&lt;code>EventPublishingRunListener&lt;/code>这个实现类, 将各个事件封装并发布出去, 最终被&lt;code>ApplicationListener&lt;/code>捕获.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">SpringApplicationRunListener&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">started&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">environmentPrepared&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConfigurableEnvironment&lt;/span> &lt;span class="n">environment&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">contextPrepared&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">contextLoaded&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">finished&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="n">exception&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建并更新上下文对象createandrefreshcontext">创建并更新上下文对象createAndRefreshContext&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="nf">createAndRefreshContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SpringApplicationRunListeners&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ApplicationArguments&lt;/span> &lt;span class="n">applicationArguments&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// Create and configure the environment
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//获取或创建环境实例, web环境使用StandardServletEnvironment, 非web环境使用StandardEnvironment
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ConfigurableEnvironment&lt;/span> &lt;span class="n">environment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getOrCreateEnvironment&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//配置环境数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//1. **commandLineArgs**属性从启动参数中解析, 格式&amp;#34;--name=value&amp;#34;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//2. 配置profiles. 有效的profile(通过**spring.profiles.active**配置) 和 通过SpringApplication.profiles()指定的额外profile
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">configureEnvironment&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">environment&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">applicationArguments&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSourceArgs&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//通过EventPublishingRunListener发布environmentPrepared事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">environmentPrepared&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">environment&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//如果是web环境, 将非web环境实例转换成web环境实例:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//使用有效的profile配置和jndiProperties, servletConfigInitParams, servletContextInitParams的配置.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isWebEnvironment&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">environment&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">webEnvironment&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">environment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">convertToStandardEnvironment&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">environment&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//输出banner
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bannerMode&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">Banner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Mode&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OFF&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">printBanner&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">environment&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//创建上下文对象, 没有指定实现类的话(使用SpringApplicationBuilder.contextClass), 使用默认context类. 然后通过反射实例化上下文对象.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//1. web环境使用org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//2. org.springframework.context.annotation.AnnotationConfigApplicationContext
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//初始化实例的时候会做很多事,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//1. 创建AnnotatedBeanDefinitionReader. 注册相关的Annotation Post Processor, 包括: ConfigurationClassPostProcessor(处理@Configuration标注的类), AutowiredAnnotationBeanPostProcessor, RequiredAnnotationBeanPostProcessor, CommonAnnotationBeanPostProcessor, PersistenceAnnotationBeanPostProcessor, EventListenerMethodProcessor, DefaultEventListenerFactory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//2. 创建ClassPathBeanDefinitionScanner. 扫描器, 扫描默认的过滤器@Service, @Component, @Registry, @Controller. 同时支持J2EE6的@ManagedBean和@Named
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Create, load, refresh and run the ApplicationContext
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createApplicationContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//设置环境
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setEnvironment&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">environment&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//后续的处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">postProcessApplicationContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//应用初始化器(ApplicationContextInitializer的实现类), 对上下文对象做更多初始化的操作, 比如:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//1. 添加BeanFactoryPostProcessor
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//2 .设置上下文对象id
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//3 .代理配置中context.initializer.classes指定的初始化类
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//4. 添加listener, 在web容器启动后更新环境变量中的端口号(server.ports中的local.server.port)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">applyInitializers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//通过EventPublishingRunListener发布contextPrepared事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contextPrepared&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//打印启动信息和有效的profile信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logStartupInfo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logStartupInfo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getParent&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">logStartupProfileInfo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//将ApplicationArguments实例注册到BeanFactory中, 名字为springApplicationArguments
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Add boot specific singleton beans
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBeanFactory&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">registerSingleton&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;springApplicationArguments&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">applicationArguments&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//从source(可以是Resource, Package, CharSequence或者Class. 从run方法进来的为Class)类加载Bean到上下文对象中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Load the sources
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sources&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getSources&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">notEmpty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Sources must not be empty&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">load&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toArray&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()]));&lt;/span>
&lt;span class="c1">//通过EventPublishingRunListener发布contextLoaded事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contextLoaded&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//更新上下文对象, 调用ApplicationContext.refresh()方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Refresh the context
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">refresh&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registerShutdownHook&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registerShutdownHook&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">AccessControlException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Not allowed in some environments.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="更新上下文-applicationcontextrefresh">更新上下文 ApplicationContext.refresh()&lt;/h3>
&lt;ol>
&lt;li>prepareRefresh
记录启动时间, 初始化上下文环境信息中的占位符, 检查必须的属性&lt;/li>
&lt;li>obtainFreshBeanFactory
重建内置的BeanFactory, 并加载bean定义&lt;/li>
&lt;li>prepareBeanFactory
初始化BeanFactory的标准上下文属性, 如BeanClassLoader, ExpressionResolver, PropertyEditorRegistrar, BeanPostProcessor, LoadTimeWeaverAwarePostProcessor等等.&lt;/li>
&lt;li>postProcessBeanFactory
标准初始化后修改上下文内置的BeanFactory&lt;/li>
&lt;li>invokeBeanFactoryPostProcessors
实例化并调用注册的&lt;code>BeanFactoryPostProcessor&lt;/code>, 基于精确的顺序如果指定了顺序的话.
有些processor是操作Bean定义注册表的(如&lt;code>@Configuration&lt;/code>标注的类bean包含其他的bean定义), 会在常规的&lt;code>BeanFactoryPostProcessor&lt;/code>的检查发生之前.
在上下文对象的bean定义注册器进行了标准初始化之后进, 所有的常规bean定义都已经被加载了, 但是还没有bean被实例化. 在post-processiong之前可以添加更多的bean定义. &lt;strong>&lt;code>@Configuration&lt;/code>标注的类中的bean定义会在此时假如到注册器中&lt;/strong>.&lt;/li>
&lt;li>registerBeanPostProcessors
实例化并调用注册的&lt;code>BeanPostProcessor&lt;/code>, 如果有顺序的话, 按照顺序来调用.&lt;/li>
&lt;li>initMessageSource
初始化名为&lt;strong>messageSource&lt;/strong>的&lt;code>MessageSource&lt;/code>实例.&lt;/li>
&lt;li>initApplicationEventMulticaster
初始化名为&lt;strong>applicationEventMulticaster&lt;/strong>的&lt;code>ApplicationEventMulticaster&lt;/code>实例, 应用可以用来注册应用事件的监听.&lt;/li>
&lt;li>onRefresh
供子类实现添加更多的更新操作.&lt;/li>
&lt;li>registerListeners
通过&lt;strong>applicationEventMulticaster&lt;/strong>注册&lt;code>ApplicationListener&lt;/code>实现类的监听器.&lt;/li>
&lt;li>finishBeanFactoryInitialization
进行上下文的BeanFactory初始化的收尾. 如提前初始化&lt;code>LoadTimeWeaverAware&lt;/code>的bean, 冻结配置禁止修改bean定义, 实例化non-lazy-init的bean.&lt;/li>
&lt;li>finishRefresh
完成更新, 调用&lt;code>LifecycleProcessor.onRefresh()&lt;/code>, 发布&lt;code>ContextRefreshedEvent&lt;/code>事件, 将上下文实例暴露在MBean中.&lt;/li>
&lt;/ol>
&lt;h4 id="configurationclasspostprocessor">ConfigurationClassPostProcessor&lt;/h4>
&lt;p>&lt;code>BeanFactoryPostProcessor&lt;/code>的实现类, 用于引导&lt;code>@Configuration&lt;/code>类.
默认情况下通过使用&lt;code>&amp;lt;context:annotation-config/&amp;gt;&lt;/code>或者&lt;code>&amp;lt;context:component-scan/&amp;gt;&lt;/code>注册.&lt;/p>
&lt;h2 id="注解">注解&lt;/h2>
&lt;h2 id="springbootapplication">@SpringBootApplication&lt;/h2>
&lt;p>集合了&lt;code>@Configuration&lt;/code>, &lt;code>@EnableAutoConfiguration&lt;/code>和&lt;code>@ComponentScan&lt;/code>
属性: &lt;code>exclude&lt;/code>, &lt;code>excludeName&lt;/code>, &lt;code>scanBasePackage&lt;/code> , &lt;code>scanBasePackageClass&lt;/code>&lt;/p>
&lt;h3 id="configuration">@Configuration&lt;/h3>
&lt;p>类似旧版配置中的xml配置文件, 提供Bean的定义和引入其他xml配置. 分别通过&lt;code>@Bean&lt;/code>和&lt;code>@Import&lt;/code>实现.
在ApplicationContext.refresh()时是用&lt;code>ConfigurationClassPostProcessor&lt;/code>进行bean的实例化.&lt;/p>
&lt;p>可以与&lt;code>@PropertySource&lt;/code>, &lt;code>@Autowired&lt;/code>, &lt;code> @Value&lt;/code>, &lt;code>@Profile&lt;/code>搭配使用.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@PropertySource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;classpath:/com/acme/app.properties&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AppConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Value&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;${bean.name}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span> &lt;span class="n">DataSource&lt;/span> &lt;span class="n">dataSource&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">MyBean&lt;/span> &lt;span class="nf">myBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MyBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@Profile&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DatabaseConfigTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="n">DataSource&lt;/span> &lt;span class="nf">dataSource&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EmbeddedDatabaseBuilder&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@Profile&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;production&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DatabaseConfigProduction&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="n">DataSource&lt;/span> &lt;span class="nf">dataSource&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EmbeddedDatabaseBuilder&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="enableautoconfiguration">@EnableAutoConfiguration&lt;/h3>
&lt;p>开启Spring上下文对象的自动配置功能, 尝试去猜测和实例化你&lt;strong>可能需要的&lt;/strong>bean.
这个功能是基于classPath来完成的. 比如: 项目中引用了&lt;code>tomcat-embedded.jar&lt;/code>, 你可能需要一个&lt;code>TomcatEmbeddedServletContainerFactory&lt;/code>实例, 除非定义了自己的&lt;code>EmbeddedServletContainerFactory&lt;/code>实例.&lt;/p>
&lt;h3 id="componentscan">@ComponentScan&lt;/h3>
&lt;p>扫描使用&lt;code>@Configuration&lt;/code>标注的类, 类似于Spring XML的&lt;code>&amp;lt;context:component-scan&amp;gt;&lt;/code>元素.
使用&lt;code>basePackages&lt;/code>和&lt;code>basePackageClasses&lt;/code>属性来指定要扫描的包, 如果没有指定, 则默认从使用了该注解的类的包开始扫描.&lt;/p>
&lt;h3 id="import">@Import&lt;/h3>
&lt;p>提示&lt;code>@Configuration&lt;/code>有更多的类需要引入, 类似xml中的&lt;code>&amp;lt;import&amp;gt;&lt;/code>标签.
可以引入&lt;code>@Configuration&lt;/code>类, &lt;code>ImportSelector&lt;/code>的实现类和&lt;code>ImportBeanDefinitionRegistrar&lt;/code>的实现类, 还有常规的&lt;code>Component&lt;/code>类.&lt;/p>
&lt;p>三者的处理方式不一样:&lt;/p>
&lt;ul>
&lt;li>&lt;code>@Configuration&lt;/code>常规方式&lt;/li>
&lt;li>&lt;code>ImportSelector&lt;/code>会根据泛型类型从&lt;strong>spring.factories&lt;/strong>找到对应的配置类.&lt;/li>
&lt;li>&lt;code>ImportBeanDefinitionRegistrar&lt;/code> 可以实现在bean definition级别的处理 (&lt;code>@Bean&lt;/code>实例级别)&lt;/li>
&lt;/ul>
&lt;p>在&lt;strong>引入&lt;/strong>&lt;code>@Configuration&lt;/code>类中使用&lt;code>@Bean&lt;/code>标注的实例, 可以通过&lt;code>@Autowired&lt;/code>注入. Bean和声明Bean的Configuration类本身都可以通过&lt;code>@Autowired&lt;/code>注入.&lt;/p>
&lt;p>引入XML或者非Configuration, 使用&lt;code>@ImportResource&lt;/code>.&lt;/p></description></item><item><title>Kafka 恰好一次发送和事务消费示例</title><link>https://atbug.com/kafka-exactly-once-delivery-and-transactional-messaging-example/</link><pubDate>Fri, 22 Sep 2017 18:03:43 +0000</pubDate><guid>https://atbug.com/kafka-exactly-once-delivery-and-transactional-messaging-example/</guid><description>
&lt;h3 id="核心思想">核心思想&lt;/h3>
&lt;ul>
&lt;li>生产端一致性: 开启幂等和事务, 包含重试, 发送确认, 同一个连接的最大未确认请求数.&lt;/li>
&lt;li>消费端一致性: 通过设置读已提交的数据和同时处理完成每一条消息之后手动提交offset.&lt;/li>
&lt;/ul>
&lt;h3 id="生产端">生产端&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ProducerTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Properties&lt;/span> &lt;span class="n">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Properties&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ProducerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BOOTSTRAP_SERVERS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;192.168.31.186:9092&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ProducerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TRANSACTIONAL_ID_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;my-transactional-id&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ProducerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ACKS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;all&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ProducerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RETRIES_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ProducerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Producer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">producer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">KafkaProducer&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringSerializer&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringSerializer&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initTransactions&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">beginTransaction&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Future&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RecordMetadata&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">send&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">producer&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ProducerRecord&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="s">&amp;#34;my-topic&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">)));&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">offset&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1000L&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">commitTransaction&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ProducerFencedException&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">OutOfOrderSequenceException&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">AuthorizationException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// We can&amp;#39;t recover from these exceptions, so our only option is to close the producer and exit.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">KafkaException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// For all other exceptions, just abort the transaction and try again.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">abortTransaction&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="消费端">消费端&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ConsumerTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Properties&lt;/span> &lt;span class="n">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Properties&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BOOTSTRAP_SERVERS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;192.168.31.186:9092&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GROUP_ID_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">AUTO_OFFSET_RESET_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">OffsetResetStrategy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NONE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toLowerCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Locale&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ROOT&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ENABLE_AUTO_COMMIT_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">KEY_DESERIALIZER_CLASS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;org.apache.kafka.common.serialization.StringDeserializer&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">VALUE_DESERIALIZER_CLASS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;org.apache.kafka.common.serialization.StringDeserializer&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ISOLATION_LEVEL_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IsolationLevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">READ_COMMITTED&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toLowerCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Locale&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ROOT&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">KafkaConsumer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">consumer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">KafkaConsumer&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">consumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">subscribe&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;my-topic&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ConsumerRecords&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">records&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">consumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">poll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">100&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">records&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerRecord&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">record&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">records&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;offset = %d, key = %s, value = %s%n&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">offset&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//Manually commit each record
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">consumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">commitSync&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singletonMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">TopicPartition&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">topic&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">partition&lt;/span>&lt;span class="o">()),&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">OffsetAndMetadata&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">offset&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>暴力停止ExecutorService的线程</title><link>https://atbug.com/stop-a-thread-of-executor-service/</link><pubDate>Wed, 19 Jul 2017 22:25:19 +0000</pubDate><guid>https://atbug.com/stop-a-thread-of-executor-service/</guid><description>
&lt;p>停止，stop，这里说的是真的停止。如何优雅的结束，这里就不提了。&lt;/p>
&lt;p>这里要用&lt;code>Thread.stop()&lt;/code>。众所周知，stop()方法在JDK中是废弃的。&lt;/p>
&lt;blockquote>
&lt;p>该方法天生是不安全的。使用thread.stop()停止一个线程，导致释放（解锁）所有该线程已经锁定的监视器（因沿堆栈向上传播的未检查异常ThreadDeath而解锁）。如果之前受这些监视器保护的任何对象处于不一致状态，则不一致状态的对象（受损对象）将对其他线程可见，这可能导致任意的行为。&lt;/p>
&lt;/blockquote>
&lt;p>有时候我们会有这种需求，不需要考虑线程执行到哪一步。一般这种情况是外部执行stop，比如执行业务的线程因为各种原因假死或者耗时较长，由于设计问题又无法响应优雅的停止指令。&lt;/p>
&lt;p>现在大家在项目中都很少直接使用线程，而是通过concurrent包中的类来实现多线程，例如ExecutorService的各种实现类。&lt;/p>
&lt;p>一个简单的停止线程的例子：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ExecutorServiceTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ExecutorService&lt;/span> &lt;span class="n">executor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Executors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newSingleThreadExecutor&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicReference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicReference&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">Future&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">firstFuture&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">executor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">submit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Thread&lt;/span> &lt;span class="n">currentThread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">currentThread&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">firstFuture&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">500&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isAlive&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">stop&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">50&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">executor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">submit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;submit again&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="n">executor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">shutdown&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你运行了上面的代码就会发现程序假死了，通过stack dump看是发生了死锁：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;#34;pool-1-thread-2&amp;#34; #11 prio=5 os_prio=31 tid=0x00007fa91006e800 nid=0x5903 waiting on condition [0x00007000060f8000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for &amp;lt;0x000000076ab76ea0&amp;gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>死锁发生在第二次submit后，在LinkedBlockingQueue.take()时，LinkedBlockingQueue在ThreadPoolExecutor中用来暂存task的。真正执行任务线程的时候再从队列中取出。我们都知道LinkedBlockingQueue是线程的安全的，其高并发和线程安全是通过一个ReentrantLock代替内置锁来实现的（减小了锁的粒度）。submit第二个task时，再次执行take会再次获取锁。但是由于stop直接杀死了线程，没有释放当次执行take方法时获取ReentrantLock锁，导致了死锁。&lt;/p>
&lt;p>stop直接停止了线程，抛出了&lt;code>ThreadDeath&lt;/code>。&lt;code>ThreadDeath&lt;/code>是Error，不是Exception。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ThreadDeath&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Error&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">serialVersionUID&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">4417128565033088268L&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种情况下，原有的ExecutorService实例就不能再使用了，因为我们无法通过程序来释放未释放的锁（由虚拟机的GC来解决）。如此，便需要重建ExecutorService实例。&lt;/p>
&lt;p>对上面的代码做了修改：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ExecutorServiceTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ExecutorService&lt;/span> &lt;span class="n">executor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Executors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newSingleThreadExecutor&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicReference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ExecutorService&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">es&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicReference&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">es&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">executor&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicReference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicReference&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">Future&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">future&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">es&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">submit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Thread&lt;/span> &lt;span class="n">currentThread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">currentThread&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">currentThread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setUncaughtExceptionHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UncaughtExceptionHandler&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">uncaughtException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">ThreadDeath&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">IllegalMonitorStateException&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">es&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">shutdownNow&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">es&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newSingleThreadExecutor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">future&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">500&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isAlive&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">stop&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">50&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">es&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">submit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;submit again&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="n">es&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">shutdown&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注：这个例子只考虑了ExecutorService实例在单线程环境中的使用，如果需要在多线程环境中需要考虑重建实例时的排他性。&lt;/strong>&lt;/p>
&lt;p>修改后的核心是UncaughtExceptionHandler：&lt;/p>
&lt;blockquote>
&lt;p>当线程由于未捕获的异常突然终止而调用处理程序的接口。
当线程由于未捕获的异常即将终止时，Java虚拟机将使用Thread.getUncaughtExceptionHandler（）向线程查询其UncaughtExceptionHandler，并将调用处理程序的uncaughtException方法，将线程和异常作为参数传递。 如果一个线程没有显示它的UncaughtExceptionHandler，那么它的ThreadGroup对象充当它的UncaughtExceptionHandler。 如果ThreadGroup对象没有处理异常的特殊要求，它可以将调用转发到默认的未捕获的异常处理程序。&lt;/p>
&lt;/blockquote></description></item><item><title>私有构造函数捕获模式</title><link>https://atbug.com/private-constructor-capture-idiom/</link><pubDate>Wed, 24 May 2017 06:50:44 +0000</pubDate><guid>https://atbug.com/private-constructor-capture-idiom/</guid><description>
&lt;p>《Java并发编程实践》的注解中有提到这一概念。&lt;/p>
&lt;blockquote>
&lt;p>The private constructor exists to avoid the race condition that would occur if the copy constructor were implemented as this (p.x, p.y); this is an example of the private constructor capture idiom (Bloch and Gafter, 2005).&lt;/p>
&lt;/blockquote>
&lt;p>结合原文代码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@ThreadSafe&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SafePoint&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="nd">@GuardedBy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;this&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nf">SafePoint&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">]);&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SafePoint&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">};&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的构造器&lt;code>public SafePoint(SafePoint p) { this (p.get()); }&lt;/code>是为了捕获另一个实例的状态。get()方法是一个同步方法，为了避免竞态没有分别提供x、y的公有getter方法。&lt;/p>
&lt;p>为了保证SafePoint的多线程安全性，在使用另一个实例构造新的实例时，使用了一个私有的构造器。&lt;/p>
&lt;p>首先为什么不用下面这种，还是为了避免竞态（p.x和p.y调用不是原子操作）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SafePoint&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">y&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同理，这种也不行，两次调用get()方法不是原子操作。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SafePoint&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">()[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">()[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">])&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为什么不用直接用数组，编译不通过：&lt;code>Call to &amp;quot;this()&amp;quot; must be first statement in constructor body&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SafePoint&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为什么接受数组为参数的构造器不能公开，数组a是有外部传入的，并不能保证数组内容不会其他线程修改。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然我们可以使用下面这种代替私有的构造器，这种方法是安全的，但是会产生重复的初始化代码。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SafePoint&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再回头看SafePoint的线程安全性，SafePoint有两个状态变量x、y。为了保证线程安全性，没有为其分别提供getter和setter方法，而是将其封装后发布并使用内置锁保护。&lt;/p>
&lt;p>可以参考&lt;a href="%5Bhttps://stackoverflow.com/questions/12028925/private-constructor-to-avoid-race-condition/12037506">stackoverflow&lt;/a>上的示例代码。&lt;/p></description></item><item><title>Docker快速构建Cassandra和Java操作</title><link>https://atbug.com/java-operate-cassandra-deployed-in-docker/</link><pubDate>Thu, 18 May 2017 23:33:24 +0000</pubDate><guid>https://atbug.com/java-operate-cassandra-deployed-in-docker/</guid><description>
&lt;h3 id="搭建cassandra">搭建Cassandra&lt;/h3>
&lt;p>使用docker创建Cassandra，方便快捷&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker pull cassandra:latest
docker run -d --name cassandra -p 9042:9042 cassandra
docker &lt;span class="nb">exec&lt;/span> -it cassandra bash
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建keyspacetable">创建keyspace、table&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-cql" data-lang="cql">&lt;span class="o">#&lt;/span>&lt;span class="n">cqlsh&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">keyspace&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEYSPACE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">REPLICATION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;class&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;SimpleStrategy&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;replication_factor&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">USE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contact&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">UUID&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">TEXT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="查看表数据">查看表数据&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cqlsh:contacts&amp;gt; SELECT * FROM contact&lt;span class="p">;&lt;/span>
email &lt;span class="p">|&lt;/span> id
-------+----
&lt;span class="o">(&lt;/span>&lt;span class="m">0&lt;/span> rows&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="java客户端">Java客户端&lt;/h3>
&lt;h4 id="引入依赖">引入依赖&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.datastax.cassandra&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>cassandra-driver-core&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>3.2.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="连接到cassandra并插入数据">连接到Cassandra并插入数据&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Cluster&lt;/span> &lt;span class="n">cluster&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Cluster&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">addContactPoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Session&lt;/span> &lt;span class="n">session&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cluster&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">connect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;contacts&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">insert&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;INSERT INTO contact (id, email) &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34;VALUES (&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34;bd297650-2885-11e4-8c21-0800200c9a66,&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34;&amp;#39;contact@example.com&amp;#39; &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34;);&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="查看表数据-1">查看表数据&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cqlsh:contacts&amp;gt; SELECT * FROM contact&lt;span class="p">;&lt;/span>
email &lt;span class="p">|&lt;/span> id
---------------------+--------------------------------------
contact@example.com &lt;span class="p">|&lt;/span> bd297650-2885-11e4-8c21-0800200c9a66
&lt;span class="o">(&lt;/span>&lt;span class="m">1&lt;/span> rows&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>MetaspaceSize的坑</title><link>https://atbug.com/java8-metaspace-size-issue/</link><pubDate>Thu, 13 Apr 2017 11:55:14 +0000</pubDate><guid>https://atbug.com/java8-metaspace-size-issue/</guid><description>
&lt;p>这几天生产上有台机器的Metaspace一直在告警，Metaspace使用达到了97%。使用&lt;code>-XX:MetaspaceSize=512m&lt;/code>，告警也还在在持续，查看MC只有81536.0，显然这个参数没起作用。&lt;/p>
&lt;p>也有人遇到类似的问题，并在openjdk上提过类似的bug，其实是一个注释的bug，最终在&lt;a href="https://bugs.openjdk.java.net/browse/JDK-8151845">JDK-8151845&lt;/a>中修复了。&lt;/p>
&lt;blockquote>
&lt;p>Class metadata is deallocated when the corresponding Java class is unloaded. Java classes are unloaded as a result of garbage collection, and garbage collections may be induced in order to unload classes and deallocate class metadata. When the space committed for class metadata reaches a certain level (a high-water mark), a garbage collection is induced. After the garbage collection, the high-water mark may be raised or lowered depending on the amount of space freed from class metadata. The high-water mark would be raised so as not to induce another garbage collection too soon. The high-water mark is initially set to the value of the command-line option MetaspaceSize. It is raised or lowered based on the options MaxMetaspaceFreeRatio and MinMetaspaceFreeRatio. If the committed space available for class metadata as a percentage of the total committed space for class metadata is greater than MaxMetaspaceFreeRatio, then the high-water mark will be lowered. If it is less than MinMetaspaceFreeRatio, then the high-water mark will be raised.&lt;/p>
&lt;/blockquote>
&lt;p>查看了Oracle的手册，Metaspace的GC会在committed size达到high-water mark之后发生。并且GC之后high-water mark会变化：变大或者变小，变大的话会防止下次GC发生得太早。high-water mark的默认初始大小20.8M，通过&lt;strong>MetaspaceSize&lt;/strong>来设置，可见MetaspaceSize是控制Metaspace发生GC的阈值。GC后high-water mark的变化，通过MaxMetaspaceFreeRatio和MinMetaspaceFreeRatio控制。&lt;/p>
&lt;p>MaxMetaspaceSize默认为-1，无限大。不过如果没有限制的话，一直增大会被系统干掉进程。最好还是设置一下，比如1G。&lt;/p>
&lt;p>下面是我测试了分别设置MetaspaceSize、MaxMetaspaceSize、InitialBootClassLoaderMetaspaceSize为1G，Metaspace的变化。&lt;/p>
&lt;p>&lt;code>-XX:MetaspaceSize=1024m&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>committed: 29360128
init: 0
max: -1
used: 28440648&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>-XX:MaxMetaspaceSize=1024m&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>committed: 29360128
init: 0
max: 1073741824
used: 28503552&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>-XX:InitialBootClassLoaderMetaspaceSize=1024m&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>committed: 1087635456
init: 0
max: -1
used: 28500344&lt;/p>
&lt;/blockquote>
&lt;p>三个参数都是没有改变init的大小，但是InitialBootClassLoaderMetaspaceSize改变了committed的大小，其实也是最终我们要的设置。&lt;/p>
&lt;p>关于这个参数，可以看你假笨的关于&lt;a href="http://lovestblog.cn/blog/2016/10/29/metaspace/">Metaspace的源码解读&lt;/a>，发现的有点晚了。&lt;/p>
&lt;p>最后的解决方案是使用这个配置：&lt;code>-XX:MaxMetaspaceSize=1024m -XX:InitialBootClassLoaderMetaspaceSize=256m&lt;/code>。&lt;/p></description></item><item><title>一个Tomcat类加载问题</title><link>https://atbug.com/one-tomcat-class-load-issue/</link><pubDate>Wed, 12 Apr 2017 10:40:01 +0000</pubDate><guid>https://atbug.com/one-tomcat-class-load-issue/</guid><description>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>一个Tomcat实例中运行了三个应用，其中一个对接了Apereo的CAS系统。现在要求另外两个系统也对接CAS系统，问题就出现了：&lt;/p>
&lt;blockquote>
&lt;p>应用启动后打开其中两个应用的任何一个，登录完成后系统都没有问题。唯独首选打开第三个，其他两个报错ClassNotFoundException: org.apache.xerces.parsers.SAXParser。&lt;/p>
&lt;/blockquote>
&lt;p>发现这个类来自&lt;code>xerces:xercesImpl:jar:2.6.2&lt;/code>，使用&lt;code>mvn dependency:tree&lt;/code>发现是被xom:xom:1.1简洁引用。&lt;/p>
&lt;h2 id="分析">分析&lt;/h2>
&lt;p>CAS client jar中使用XMLReaderFactory创建XMLReader，首次创建会从classpath中查找&lt;code>META-INF/services/org.xml.sax.driver&lt;/code>文件，这个文件里的内容是一个类的全名。比如xercesImpl中该文件的内容是&lt;code>org.apache.xerces.parsers.SAXParser&lt;/code>。&lt;/p>
&lt;p>找到之后会将类名保存在XMLReaderFactory的静态变量_clsFromJar，并标记不会再查找org.xml.sax.driver文件。找不到的话则使用&lt;code>com.sun.org.apache.xerces.internal.parsers.SAXParser&lt;/code>类。&lt;/p>
&lt;p>然后再使用当前线程的ContextClassLoader对类进行加载，这里的的ContextClassLoader是一个WebAppClassLoader的实例。&lt;/p>
&lt;p>同时XMLReaderFactory类是被BootStrapClassLoader加载的，为三个应用共享。&lt;/p>
&lt;h2 id="tomcat类记载机制">Tomcat类记载机制&lt;/h2>
&lt;p>Tomcat中有四个位置可以存放Java类库：/commons、/server、/shared和各Web应用的WEB-INF/lib目录。&lt;/p>
&lt;blockquote>
&lt;p>/commons目录中的类库可以被Tomcat和所有Web应用使用
/server目录中的类库只能被Tomcat使用
/shared目录中的可以被所有Web应用的使用，但是对Tomcat不可见
各Web应用的WEB-INF/lib目录中的类库则只能被该的应用使用&lt;/p>
&lt;/blockquote>
&lt;p>Tomcat的使用CommonClassLoader、CatalinaClassLoader、SharedClassLoader、WebAPPClassLoader加载对应目录中的类库。&lt;/p>
&lt;p>Bootstrap、Extension、Application是虚拟机使用的系统类加载器。&lt;/p>
&lt;p>类的加载使用双亲委派机制(Parent-Delegation)。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"> Bootstrap
|
Extension
|
Application
|
System
|
Common
/ \
Catalina Shared
/ \
WebApp1 ... WebApp2
| |
Jasper Jasper
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;p>在另外两个应用中添加&lt;code>xerces:xercesImpl:jar:2.6.2&lt;/code>依赖。&lt;/p></description></item><item><title>GreenPlum JDBC和C3P0数据源</title><link>https://atbug.com/greenplum-jdbc-and-c3p0-datasource/</link><pubDate>Mon, 10 Apr 2017 08:29:00 +0000</pubDate><guid>https://atbug.com/greenplum-jdbc-and-c3p0-datasource/</guid><description>
&lt;p>在网上搜索GreenPlum（GPDB）的数据源配置的时候，发现搜索结果都是用postgresql的配置。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.mchange.v2.c3p0.DataSources&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.sql.DataSource&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.sql.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Properties&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Created by addo on 2017/4/10.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">JDBCTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">POSTGRESQL_URL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;jdbc:postgresql://192.168.56.101:5432/example&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">POSTGRESQL_USERNAME&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;dbuser&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">POSTGRESQL_PASSWORD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">GPDB_URL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;jdbc:pivotal:greenplum://192.168.56.101:5432;DatabaseName=test&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">GPDB_USERNAME&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;dbuser&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">GPDB_PASSWORD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Postgresql Connection
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> * @throws ClassNotFoundException
&lt;/span>&lt;span class="cm"> * @throws SQLException
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Connection&lt;/span> &lt;span class="nf">postgresqlConnection&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ClassNotFoundException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;org.postgresql.Driver&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">DriverManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">POSTGRESQL_URL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">POSTGRESQL_USERNAME&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">POSTGRESQL_PASSWORD&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * GreenPlum Connection
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> * @throws ClassNotFoundException
&lt;/span>&lt;span class="cm"> * @throws SQLException
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Connection&lt;/span> &lt;span class="nf">gpdbConnection&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ClassNotFoundException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;com.pivotal.jdbc.GreenplumDriver&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">DriverManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GPDB_URL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GPDB_USERNAME&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GPDB_PASSWORD&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * GreenPlud C3P0 Datasource Connection
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> * @throws SQLException
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Connection&lt;/span> &lt;span class="nf">gpdbC3P0Connection&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Properties&lt;/span> &lt;span class="n">c3p0Props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Properties&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;driverClass&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;com.pivotal.jdbc.GreenplumDriver&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbcUrl&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GPDB_URL&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GPDB_USERNAME&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GPDB_PASSWORD&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;acquireIncrement&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;5&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;initialPoolSize1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;maxIdleTime&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;60&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;maxPoolSize&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;50&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;minPoolSize&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;idleConnectionTestPeriod&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;60&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">DataSources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">unpooledDataSource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GPDB_URL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ClassNotFoundException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Connection&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">connections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Connection&lt;/span>&lt;span class="o">[]{&lt;/span>&lt;span class="n">postgresqlConnection&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">gpdbConnection&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">gpdbC3P0Connection&lt;/span>&lt;span class="o">()};&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Connection&lt;/span> &lt;span class="n">connection&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">connections&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">CallableStatement&lt;/span> &lt;span class="n">callableStatement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prepareCall&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;select * from user&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">execute&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">callableStatement&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">ResultSet&lt;/span> &lt;span class="n">resultSet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">callableStatement&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getResultSet&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">resultSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">resultSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;current_user&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">callableStatement&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">connection&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://gist.github.com/addozhang/0d83704af6656079878bd5614c82c16c">源代码&lt;/a>&lt;/p></description></item><item><title>Key长度对Redis性能影响</title><link>https://atbug.com/redis-performance-key-length/</link><pubDate>Thu, 16 Mar 2017 10:37:03 +0000</pubDate><guid>https://atbug.com/redis-performance-key-length/</guid><description>
&lt;p>最近Redis的使用中用的到key可能比较长，但是Redis的官方文档没提到key长度对性能的影响，故简单做了个测试。&lt;/p>
&lt;h3 id="环境">环境&lt;/h3>
&lt;p>Redis和测试程序都是运行在本地，不看单次的性能，只看不同的长度堆读写性能的影响。&lt;/p>
&lt;h3 id="测试方法">测试方法&lt;/h3>
&lt;p>使用长度分别为10, 100, 500, 1000, 2500, 5000, 7500, 10,000, and 20,000的key，value长度1000，读写1000次。&lt;/p>
&lt;h3 id="结果">结果&lt;/h3>
&lt;p>&lt;img src="../../media/14896309668401.jpg" alt="写">&lt;/p>
&lt;p>&lt;img src="../../media/14896309585857.jpg" alt="读">&lt;/p>
&lt;p>从结果来看随着长度的增加，读写的耗时都随之增加。&lt;/p>
&lt;ul>
&lt;li>长度为10：写平均耗时0.053ms，读0.040ms&lt;/li>
&lt;li>长度为20000：写平均耗时0.352ms，读0.084ms&lt;/li>
&lt;/ul>
&lt;h3 id="测试代码">测试代码&lt;/h3>
&lt;p>&lt;a href="https://gist.github.com/addozhang/cd8551af4ca008c1f86896b9232c7a3b">源码&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Created by addo on 2017/3/16.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RedisTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">keys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1000&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">randomString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Random&lt;/span> &lt;span class="n">random&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Random&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">chars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toCharArray&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">StringBuilder&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringBuilder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">)]);&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">write&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Jedis&lt;/span> &lt;span class="n">jedis&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">1000&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">randomString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">randomString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">jedis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;put key length %d with value length 1000 in 1000 tims costs: %d ms&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">read&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Jedis&lt;/span> &lt;span class="n">jedis&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">jedis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;get key length %d with value length 1000 in 1000 tims costs: %d ms&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Jedis&lt;/span> &lt;span class="n">jedis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Jedis&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;localhost&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">6379&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">lengths&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">100&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">500&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1000&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">2500&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">5000&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">7500&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">10000&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">20000&lt;/span>&lt;span class="o">};&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">lengths&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">write&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jedis&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lengths&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="n">read&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jedis&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lengths&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="n">keys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1000&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="n">jedis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">flushAll&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>遍历Collection时删除元素</title><link>https://atbug.com/remove-element-while-looping-collection/</link><pubDate>Sun, 05 Mar 2017 22:04:58 +0000</pubDate><guid>https://atbug.com/remove-element-while-looping-collection/</guid><description>
&lt;p>其实标题我想用《为什么foreach边循环边移除元素要用Iterator？》可是太长。&lt;/p>
&lt;p>不用Iterator，用Collection.remove()，会报ConcurrentModificationException错误。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Integer&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//Throw ConcurrentModificationException
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实使用foreach的时候，会自动生成一个Iterator来遍历list。不只是remove，使用add、clear等方法一样会出错。&lt;/p>
&lt;p>拿ArrayList来说，它有一个私有的Iterator接口的内部类Itr：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Itr&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">cursor&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// index of next element to return
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">lastRet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// index of last element returned; -1 if no such
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">expectedModCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">modCount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//sevrval methods
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用Iterator来遍历ArrayList实际上是通过两个指针来遍历ArrayList底层的数组：cursor是下一个返回的元素在数组中的下标；lastRet是上一个元素的下标。还有一个重要的expectedModCount使用的是ArrayList的modCount的（modCount具体是什么意思下文会提到）。&lt;/p>
&lt;p>从Itr的实现来看，有三种情况会抛出ConcurrentModificationException：&lt;/p>
&lt;ul>
&lt;li>cursor超出了数组的最大下标&lt;/li>
&lt;li>expectedModCount不等于modCount&lt;/li>
&lt;li>删除元素最终还是调用ArrayList的remove方法，此方法可能会抛出IndexOutOfBoundsException&lt;/li>
&lt;/ul>
&lt;h3 id="expectedmodcount不等于modcount">expectedModCount不等于modCount&lt;/h3>
&lt;p>开头所说的问题正是是&lt;strong>第二种情况&lt;/strong>下出现的。modCount简单说记录了Collection被修改的次数：添加或者删除元素。&lt;/p>
&lt;p>假如在foreach循环中删除元素，且此时modCount等2：&lt;/p>
&lt;ul>
&lt;li>循环开始创建新Itr实例，expectedModCount=modCount=2&lt;/li>
&lt;li>使用ArrayList.remove()删除元素，modCount加1&lt;/li>
&lt;li>继续调用next()方法指向下一个元素，此时检查expectedModCount是否等于modCount，不等则抛ConcurrentModificationException&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">E&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">checkForComodification&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cursor&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NoSuchElementException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">elementData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">elementData&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">elementData&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcurrentModificationException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">cursor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">elementData&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">lastRet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">checkForComodification&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">modCount&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">expectedModCount&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcurrentModificationException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面提到Iterator的实现中删除元素实际调用的还是ArrayList.remove()方法，为什么不会抛错？&lt;/p>
&lt;p>Itr的remove方法在调用ArrayList.remove()之后，会更新&lt;strong>expectedModCount&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">remove&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">lastRet&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">checkForComodification&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">lastRet&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">cursor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lastRet&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">lastRet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">expectedModCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">modCount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IndexOutOfBoundsException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcurrentModificationException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java Volatile关键字</title><link>https://atbug.com/deep-in-java-volatile-keywork/</link><pubDate>Thu, 02 Mar 2017 08:30:29 +0000</pubDate><guid>https://atbug.com/deep-in-java-volatile-keywork/</guid><description>
&lt;p>volatile通过保证对变量的读或写都是直接从内存中读取或直接写入内存中，保证了可见性；但是volatile并不足以保证线程安全，因为无法保证原子性，如count++操作：&lt;/p>
&lt;ol>
&lt;li>将值从内存读入寄存器中&lt;/li>
&lt;li>进行加1操作，内存保存到寄存器中&lt;/li>
&lt;li>结果从寄存器flush到内存中&lt;/li>
&lt;/ol>
&lt;p>借用一张图来看：&lt;/p>
&lt;p>&lt;img src="http://tutorials.jenkov.com/images/java-concurrency/java-volatile-2.png" alt="123">&lt;/p>
&lt;p>不是volatile的变量的指令执行顺序是1-&amp;gt;2-&amp;gt;3；而声明为volatile的变量，顺序是1-&amp;gt;23。从这里看，volatile保证了一个线程修改了volatile修饰的变量，变化会马上体现在内存中。线程间看到的值是一样的。&lt;/p>
&lt;p>上面说了无法保证原子性是指：多核cpu，线程A执行了指令1，线程B也执行了指令1。A进行了加1操作，结果写入寄存器同时flush到内存；随后B也执行了同样的操作。count本来应该的结果是加2，但是却只加了1。原因就是我们通常所指的读和写不是原子操作。我们最希望看到的是123同时执行，手段就是sychronized或者java.util.concurrent包中的原子数据类型。&lt;/p>
&lt;p>简单拿AtomicInteger来看，其中的一个int类型的value字段声明为volatile，保证了123同时执行。&lt;/p>
&lt;p>参考：&lt;a href="http://tutorials.jenkov.com/java-concurrency/volatile.html">Java Volatile&lt;/a>&lt;/p></description></item><item><title>mybatis报错“Result Maps collection already contains value for ***”</title><link>https://atbug.com/duplicate-resultmap-in-mybatis-mapper/</link><pubDate>Wed, 22 Feb 2017 14:12:18 +0000</pubDate><guid>https://atbug.com/duplicate-resultmap-in-mybatis-mapper/</guid><description>
&lt;p>这是工作中遇到的一个问题：测试环境部署出错，报了下面的问题。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Caused&lt;/span> &lt;span class="n">by&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">IllegalArgumentException&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">Result&lt;/span> &lt;span class="n">Maps&lt;/span> &lt;span class="n">collection&lt;/span> &lt;span class="n">already&lt;/span> &lt;span class="n">contains&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">xxx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xxx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xxxRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BaseResultMap&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Configuration$StrictMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">802&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Configuration$StrictMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">774&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addResultMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">556&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MapperBuilderAssistant&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addResultMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MapperBuilderAssistant&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">217&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ResultMapResolver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">resolve&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ResultMapResolver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">47&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xml&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">resultMapElement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">285&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xml&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">resultMapElement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">252&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xml&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">resultMapElements&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">244&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xml&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configurationElement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">116&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查了对应的mapper文件和java文件，已经8个多月没有修改过了。也检查了内容，没有发现重复的BaseResultMap；select中也resultMap的引用也都正确。&lt;/p>
&lt;p>其实到最后发现跟代码一丁点关系都没有，是部署的时候没有删除旧版本的代码导致两个不同版本的jar同时存在，相应的mapper文件也有两个。&lt;/p>
&lt;p>看了下源码，mybatis在创建SessionFactoryBean解析xml时候，会把xml中的resultMap放入到一个HashMap的子类StrictMap中，key是&lt;strong>mapper的namespace与resultmap的id&lt;/strong>拼接成的。&lt;/p>
&lt;p>StrictMap在put元素的时候，会检查map中是否已存在key。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addResultMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ResultMap&lt;/span> &lt;span class="n">rm&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">resultMaps&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">rm&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">checkLocallyForDiscriminatedNestedResultMaps&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rm&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">checkGloballyForDiscriminatedNestedResultMaps&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rm&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>消费时offset被重置导致重复消费</title><link>https://atbug.com/offset-be-reset-when-consuming/</link><pubDate>Mon, 20 Feb 2017 13:23:49 +0000</pubDate><guid>https://atbug.com/offset-be-reset-when-consuming/</guid><description>
&lt;p>这是实际使用时遇到的问题：kafka api的版本是0.10，发现有重复消费问题；检查log后发现在commit offset的时候发生超时。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">Auto offset commit failed for group test: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured session.timeout.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
15:12:12.364 [main] WARN o.a.k.c.c.i.ConsumerCoordinator - Auto offset commit failed for group test: Commit offsets failed with retriable exception. You should retry committing offsets.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看了Kafka的API文档，发现0.10中提供了新的配置&lt;strong>max.poll.records&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">The maximum number of records returned in a single call to poll().
type: int
default: 2147483647
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果生产端写入很快，消费端处理耗时。一个batch的处理时间大于session.timeout.ms，会导致session time out，引起offset commit失败。&lt;/p></description></item><item><title>TheadPoolExecutor源码分析</title><link>https://atbug.com/threadpoolexecutor-sourcecode-analysis/</link><pubDate>Mon, 20 Feb 2017 09:56:07 +0000</pubDate><guid>https://atbug.com/threadpoolexecutor-sourcecode-analysis/</guid><description>
&lt;h1 id="theadpoolexecutor源码分析">TheadPoolExecutor源码分析&lt;/h1>
&lt;p>ThreadPoolExecutor是多线程中经常用到的类，其使用一个线程池执行提交的任务。&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>没有特殊需求的情况下，通常都是用Executors类的静态方法如newCachedThreadPoll来初始化ThreadPoolExecutor实例：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ExecutorService&lt;/span> &lt;span class="nf">newCachedThreadPool&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MAX_VALUE&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">60L&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">SynchronousQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从Executors的方法实现中看出，BlockingQueue使用的SynchronousQueue，底层使用了栈的实现。值得注意的是，这个SynchronousQueue是没有容量限制的，Executors也将maximumPoolSize设为Integer.MAX_VALUE。&lt;/p>
&lt;p>ThreadPoolExecutor的构造方法：&lt;/p>
&lt;p>按照javadoc的解释：&lt;/p>
&lt;ul>
&lt;li>corePoolSize是池中闲置的最小线程数&lt;/li>
&lt;li>maximumPoolSize是池中允许的最大线程数&lt;/li>
&lt;li>keepAliveTime是线程数大于最小线程数时，过量闲置线程的最大存活时间&lt;/li>
&lt;li>unit是上面存活时间的单位&lt;/li>
&lt;li>workQueue是用来暂时保存运行前的任务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">ThreadPoolExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">corePoolSize&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">maximumPoolSize&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">keepAliveTime&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">TimeUnit&lt;/span> &lt;span class="n">unit&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">BlockingQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">workQueue&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NullPointerException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">workerCountOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">corePoolSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">addWorker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isRunning&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">workQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">offer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">recheck&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span> &lt;span class="n">isRunning&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">recheck&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="n">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">workerCountOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">recheck&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">addWorker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">addWorker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="n">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>除去第一个做任务非空检查的if。&lt;/p>
&lt;p>第二个if，检查当前使用的线程数是否超过corePoolSize。未超过，调用addWorker并指定第二个参数为true。addWorker会再次检查线程数是否超过corePoolSize，如果还未超过，则创建一个新的线程执行任务。&lt;/p>
&lt;p>第三个if，当目前使用的线程数大于等于corePoolSize，将任务保存到workQueue中。保存成功，再次检查是否需要再创建一个线程。&lt;/p>
&lt;p>最后一个else，调用addWorker并指定第二个参数为false。在创建线程前，检查当时线程数是否超过maximumPoolSize，为超过则创建一个新的线程。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">addWorker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">firstTask&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">core&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">retry&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(;;)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">rs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">runStateOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// Check if queue empty only if necessary.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rs&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">SHUTDOWN&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="o">!&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rs&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">SHUTDOWN&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="n">firstTask&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="o">!&lt;/span> &lt;span class="n">workQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">()))&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(;;)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">wc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">workerCountOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">wc&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">CAPACITY&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">wc&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">core&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">corePoolSize&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">maximumPoolSize&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">compareAndIncrementWorkerCount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="k">break&lt;/span> &lt;span class="n">retry&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// Re-read ctl
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runStateOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">continue&lt;/span> &lt;span class="n">retry&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// else CAS failed due to workerCount change; retry inner loop
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="问题">问题&lt;/h2>
&lt;p>一般场景下，不能使用Integer.MAX_VALUE如此大的线程数。所以需要使用构造器自己进行实例化。&lt;/p>
&lt;p>如指定corePoolSize=5、maximumPoolSize=20&lt;/p>
&lt;p>、keepAliveTime=60L、unit=TimeUnit.SECONDS、workQueue=new SynchronousQueue&lt;!-- raw HTML omitted -->()。&lt;/p>
&lt;p>但是实际执行的时候，线程数一直是5。&lt;/p>
&lt;p>回头看ThreadPoolExecutor的实现，如果想要达到我们想要的效果需要程序进入最后的那个else。那重点就在第三个if里的workQueue.offer(command)。&lt;/p>
&lt;p>看BlockingQueue接口中该方法的描述：将元素插入到队列中，没有超过容量限制则插入并返回true。&lt;/p>
&lt;p>而使用的SynchronousQueue底层实现使用的栈没有容量限制，这就是为什么线程池中的线程数一直是corePoolSize。&lt;/p></description></item><item><title>Kafka Java生产者模型</title><link>https://atbug.com/kafka-java-producer-model/</link><pubDate>Wed, 04 Jan 2017 16:33:02 +0000</pubDate><guid>https://atbug.com/kafka-java-producer-model/</guid><description>
&lt;p>&lt;img src="../../media/14835174309242.jpg" alt="">&lt;/p>
&lt;h3 id="producer初始化">Producer初始化&lt;/h3>
&lt;p>初始化KafkaProducer实例，同时通过Config数据初始化MetaData、NetWorkClient、Accumulator和Sender线程。启动Sender线程。&lt;/p>
&lt;h4 id="metadata信息">MetaData信息&lt;/h4>
&lt;p>记录Cluster的相关信息，第一次链接使用Config设置，之后会从远端poll信息回来，比如host.name等信息。&lt;/p>
&lt;h4 id="accumulator实例">Accumulator实例&lt;/h4>
&lt;p>Accumulator持有一个Map实例，key为TopicPartition（封装了topic和partition信息）对象，Value为RecordBatch的Deque集合。&lt;/p>
&lt;h4 id="networkclient实例">NetworkClient实例&lt;/h4>
&lt;p>通过MetaData信息初始化NetworkClient实例，NetworkClient使用NIO模型。&lt;/p>
&lt;h4 id="sender线程">Sender线程&lt;/h4>
&lt;p>sender持有NetworkClient和Accumulator实例，在Producer实例初始化完成之后，持续地将Accumulator中的Batch数据drain到一个List中，调用NetworkClient进行发送。&lt;/p>
&lt;h3 id="发送">发送&lt;/h3>
&lt;p>调用Producer实例进行消息发送，首先将消息序列化之后追加到Accumulator的Deque的最后一个batch中，之后唤醒sender-&amp;gt;client-&amp;gt;Selector进行消息发送。&lt;/p></description></item><item><title>Redis清理缓存</title><link>https://atbug.com/clean-speicified-keys-in-redis/</link><pubDate>Tue, 13 Dec 2016 16:54:41 +0000</pubDate><guid>https://atbug.com/clean-speicified-keys-in-redis/</guid><description>
&lt;p>最近有个需求需要主动的去清理部分缓存，考虑的原子性的问题，用Lua脚本进行实现。&lt;/p>
&lt;p>Lua脚本&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="kd">local&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="kr">in&lt;/span> &lt;span class="n">ipairs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;KEYS&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;span class="kr">do&lt;/span>
&lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;DEL&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">count&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>shell运行&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">redis-cli --eval file.lua ,&lt;span class="o">[&lt;/span>KEY PATTERN&lt;span class="o">]&lt;/span>
&lt;span class="c1">#sample: 清理所有key以Test开头的记录&lt;/span>
redis-cli --eval clear.lua , Test*
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Java&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Jedis&lt;/span> &lt;span class="n">jedis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Jedis&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">6379&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">URL&lt;/span> &lt;span class="n">resource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Resources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;META-INF/scripts/clear.lua&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">lua&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Resources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">resource&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Charsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">eval&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jedis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">eval&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">lua&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Name*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>探索Rabbitmq的Java客户端</title><link>https://atbug.com/deep-in-rabbitmq-java-client/</link><pubDate>Sun, 09 Oct 2016 09:20:07 +0000</pubDate><guid>https://atbug.com/deep-in-rabbitmq-java-client/</guid><description>
&lt;h2 id="amqpconnection">AMQPConnection&lt;/h2>
&lt;h3 id="实例初始化">实例初始化&lt;/h3>
&lt;p>创建Connection时会通过FrameHandlerFacotry创建一个SocketFrameHandler，SocketFrameHandler对Socket进行了封装。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">AMQConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConnectionParams&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FrameHandler&lt;/span> &lt;span class="n">frameHandler&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="n">checkPreconditions&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getUsername&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPassword&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_frameHandler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">frameHandler&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_virtualHost&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getVirtualHost&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_exceptionHandler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getExceptionHandler&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_clientProperties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClientProperties&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requestedFrameMax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestedFrameMax&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requestedChannelMax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestedChannelMax&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requestedHeartbeat&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestedHeartbeat&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">shutdownTimeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getShutdownTimeout&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">saslConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSaslConfig&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getExecutor&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">threadFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getThreadFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_channelManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_brokerInitiatedShutdown&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_inConnectionNegotiation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// we start out waiting for the first protocol response
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启动连接">启动连接&lt;/h3>
&lt;p>初始化WorkService和HeartBeatSender。&lt;/p>
&lt;p>创建一个channel0的AMQChannel，这个channel&lt;strong>不会被ChannelManager管理&lt;/strong>。&lt;/p>
&lt;p>首先channel0会将一个BlockingRpcContinuation作为当前未完成的Rpc请求，用于接收&lt;strong>handshake&lt;/strong>的响应。&lt;/p>
&lt;p>然后channel0会向socket中写入一条只有header的消息作为&lt;strong>handshake&lt;/strong>，header中包含了客户端的版本号。&lt;/p>
&lt;p>紧接着会启动主循环线程，主循环会通过SocketFrameHandler从socket接收字节流。此时接收到的第一条数据是服务端响应handshake返回的Connection.Start信息（包含服务端版本、机制、基础信息）。&lt;/p>
&lt;p>主循环线程启动后，主线程会阻塞地等待服务端的handshake响应。拿到响应之后会对服务器回传的信息进行比对，然后发送Connection.StartOK的信息去服务端（这个请求也还是阻塞式的），等待服务端回传Connection.Tune（包含最大channel数、最大frame长度和heartbeat间隔）。将这些信息与实例初始化是的设置信息进行对比，初始化ChannelManager&lt;/p>
&lt;p>紧接着发送Connection.TuneOk和Connection.Open消息去服务端，完成connection的建立。&lt;/p>
&lt;blockquote>
&lt;p>Connection &amp;gt; MainLoop &amp;gt; readFrame&lt;/p>
&lt;/blockquote>
&lt;h2 id="消息体">消息体&lt;/h2>
&lt;p>Frame是对AMQP消息的封装：包含frame的type、channel号、消息内容&lt;/p>
&lt;blockquote>
&lt;p>type|channelNumber|payloadSize|payload|frameEndMarker&lt;/p>
&lt;/blockquote>
&lt;p>Payload包含了消息类型、消息头和消息主题&lt;/p>
&lt;blockquote>
&lt;p>method|header|body&lt;/p>
&lt;/blockquote>
&lt;h2 id="消息发送和接收">消息发送和接收&lt;/h2>
&lt;p>消息的发送和接收都要channel来完成。&lt;/p>
&lt;h3 id="创建channel">创建Channel&lt;/h3>
&lt;p>通过Connection的ChannelManager来创建Channel，通过指定的ChannelNumber或者由分配器分配。创建好的Channel实例会放入ChannelManager的Map中，&lt;strong>key为ChannelNumber&lt;/strong>。由此可见Channel是Connection唯一的。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">ChannelN&lt;/span> &lt;span class="nf">createChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AMQConnection&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ChannelN&lt;/span> &lt;span class="nf">createChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AMQConnection&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">channelNumber&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ChannelN&lt;/span> &lt;span class="nf">addNewChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AMQConnection&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">channelNumber&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">ChannelN&lt;/span> &lt;span class="nf">instantiateChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AMQConnection&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">channelNumber&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ConsumerWorkService&lt;/span> &lt;span class="n">workService&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Channel实例化之后会调用Channel.open方法，发送Channel.Open去服务端（阻塞式），等待服务端响应Channel.OpenOk。&lt;/p>
&lt;h3 id="消息发送">消息发送&lt;/h3>
&lt;p>Channel.transmit 发送消息，调用AMQCommand.transmit完成发送。&lt;/p>
&lt;p>AMQCommand.transmit将消息封装成Frame，通过connection的SocketFrameHandler写入OutpuStream。&lt;/p>
&lt;h3 id="消息接收">消息接收&lt;/h3>
&lt;p>主循环线程在链接创建完成后会监听socket，从InputStream中读取二进制流封装成Frame。通过Frame中的ChannelNumber从ChannelManager中获取对应的Channel实例处理Frame。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">_running&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Frame&lt;/span> &lt;span class="n">frame&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_frameHandler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readFrame&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">_missedHeartbeats&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">AMQP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">FRAME_HEARTBEAT&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Ignore it: we&amp;#39;ve already just reset the heartbeat counter.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">channel&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// the special channel
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">_channel0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isOpen&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// If we&amp;#39;re still _running, but not isOpen(), then we
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// must be quiescing, which means any inbound frames
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// for non-zero channels (and any inbound commands on
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// channel zero that aren&amp;#39;t Connection.CloseOk) must
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// be discarded.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ChannelManager&lt;/span> &lt;span class="n">cm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_channelManager&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cm&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">cm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">channel&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Socket timeout waiting for a frame.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Maybe missed heartbeat.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">handleSocketTimeout&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Channel会使用已经准备好的AMQCommand处理Frame，并未下一个Frame准备新的AMQCommand。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Frame&lt;/span> &lt;span class="n">frame&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">AMQCommand&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_command&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// a complete command has rolled off the assembly line
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">_command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AMQCommand&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// prepare for the next one
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">handleCompleteInboundCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>AMQCommad会使用CommandAssembler依次从Frame的payload中检出对应的Method、Header和Body。如果检出了Body，整个Frame会被检出完成。如过未完成，会进入主循环再次处理直至完成。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Frame&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">state&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">EXPECTING_METHOD&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">consumeMethodFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">EXPECTING_CONTENT_HEADER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">consumeHeaderFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">EXPECTING_CONTENT_BODY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">consumeBodyFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AssertionError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Bad Command State &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">state&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">isComplete&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Frame被检出完后，会根据Method的类型进入不同的异步处理流程。&lt;/p>
&lt;p>Method在channel打开和关闭的情况下会以下的可能：&lt;/p>
&lt;blockquote>
&lt;p>Channel打开：Basic.Deliver, Basic.Return, Basic.Flow, Basic.Ack, Basic.Nack, Basic.RecoveryOk, Basic.Cancel&lt;/p>
&lt;p>Channel关闭：Channel.CloseOk&lt;/p>
&lt;/blockquote>
&lt;h2 id="生产和消费">生产和消费&lt;/h2>
&lt;h3 id="生产">生产&lt;/h3>
&lt;p>调用Channel.basicPublish()方法，指定exchange、routingKey等信息，消息属性、消息体。封装成Baisc.Publish，放入AMQCommand，最后调用transmit方法完成发送。参考&lt;a href="http://atbug.com/deep-in-rabbitmq-java-client/#%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81">消息发送&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">basicPublish&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">exchange&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">routingKey&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">mandatory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">immediate&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">BasicProperties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">nextPublishSeqNo&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">unconfirmedSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getNextPublishSeqNo&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">nextPublishSeqNo&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">BasicProperties&lt;/span> &lt;span class="n">useProps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">props&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">useProps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MessageProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MINIMAL_BASIC&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">transmit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">AMQCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Basic&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Publish&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Builder&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">exchange&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">exchange&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">routingKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routingKey&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">mandatory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mandatory&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">immediate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">immediate&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">(),&lt;/span>
&lt;span class="n">useProps&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="消费">消费&lt;/h3>
&lt;p>创建QueueingConsumer实例，然后调用Channel.basicConsume方法。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">queueingConsumer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">QueueingConsumer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">channel&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">channel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">basicConsume&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;queue_name&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">queueingConsumer&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">QueueingConsumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Delivery&lt;/span> &lt;span class="n">delivery&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">queueingConsumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextDelivery&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="n">delivery&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getEnvelope&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//消息头
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">delivery&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperties&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//消息属性
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">delivery&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBody&lt;/span>&lt;span class="o">()&lt;/span>&lt;span class="err">；&lt;/span>&lt;span class="c1">//消息体
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>&lt;span class="k">finally&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="c1">//channel.basicAck();
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//channel.basicNack()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>QueueingConsumer实现了Consumer接口。&lt;/p>
&lt;p>Channel.basicConsume方法会封装Channel.Consume消息发送到服务端（阻塞式），等待服务端的Channel.ConsumeOk响应（包含了服务端为Consumer分配的ConsumerTag）。然后将QueueingConsumer放入Map中，&lt;strong>key为ConsumerTag&lt;/strong>。consumer是Channel唯一。&lt;/p>
&lt;p>当客户端接收到消息，参考&lt;a href="http://atbug.com/deep-in-rabbitmq-java-client/#%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6">消息接收&lt;/a>。Basic.Deliver类型的消息（consumerTag、deliveryTag、redelivered、exchange、routingKey）会进入消费处理流程。Channel根据ConsumerTag从Map中获取对应的QueueConsumer实例，由Channel的ConsumerDispatcher通过Connection初始化的WorkService创建新的处理线程，调用QueueConsumer实例的handleDelivery方法。QueueConsumer将消息封装成Delivery对象，放入BlockingQueue中。&lt;/p>
&lt;p>消费线程等待新的Delivery（阻塞式），之后创建新的线程完成消息的处理。&lt;/p></description></item><item><title>深入剖析HashSet和HashMap实现</title><link>https://atbug.com/deep-in-implementation-of-hashset/</link><pubDate>Mon, 11 Jul 2016 14:57:16 +0000</pubDate><guid>https://atbug.com/deep-in-implementation-of-hashset/</guid><description>
&lt;p>HashSet是一个包含非重复元素的集合，如何实现的，要从底层实现代码看起。&lt;/p>
&lt;h4 id="背景">背景&lt;/h4>
&lt;p>首先非重复元素如何定义，看Set的描述：&lt;/p>
&lt;blockquote>
&lt;p>More formally, sets contain no pair of elements e1 and e2 such that e1.equals(e2), and at most one null element.&lt;/p>
&lt;p>Set不会找到两个元素，并且两个元素满足e1.equals(e2)为true；并且最多只有一个null元素。&lt;/p>
&lt;/blockquote>
&lt;p>如果没有重写equals方法，查看Object类中equal方法的实现，==比较的其实是两个对象在内存中的地址。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>说起equals方法，就不得不说hashCode方法了。Java中对于hashCode有个常规协定&lt;/p>
&lt;blockquote>
&lt;p>The general contract of hashCode is:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>程序执行期间，在同一个对象上执行多次hashCode方法，都返回相同的整数，前提是equals比较中所使用的字段没有被修改。跨应用中的hashCode方法调用返回的整数不要求相同。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果两个对象根据equals方法比较相同，那hashCode返回的整数也必须相同。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果两个对象equals方法比较不相同，调用hashCode返回的整数不需要不同。但是程序员应该知道为不相等的对象生成不同的整数可以提高哈希表的性能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h4 id="hashset的底层实现">HashSet的底层实现&lt;/h4>
&lt;p>HashSet的底层是通过HashMap实现的，将元素作为map的key以达到去重的目的，value使用的是同一个虚拟的Object实例。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kd">transient&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// Dummy value to associate with an Object in the backing Map
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">PRESENT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">PRESENT&lt;/span>&lt;span class="o">)==&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="hashmap的底层实现">HashMap的底层实现&lt;/h4>
&lt;p>{% asset_img hashmap-structure.jpg %}&lt;/p>
&lt;p>到最后我们要看HashMap的实现了，简单说就是一个&lt;strong>数组&lt;/strong>+&lt;strong>链表&lt;/strong>的结合。&lt;/p>
&lt;ul>
&lt;li>默认初始容量16&lt;/li>
&lt;li>默认负荷系数0.75&lt;/li>
&lt;li>Entry数组&lt;/li>
&lt;li>大小&lt;/li>
&lt;li>阈值：初始值等于初始容量&lt;/li>
&lt;li>负荷系数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">DEFAULT_INITIAL_CAPACITY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">4&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">DEFAULT_LOAD_FACTOR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">75f&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;?,?&amp;gt;[]&lt;/span> &lt;span class="n">EMPTY_TABLE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{};&lt;/span>
&lt;span class="kd">transient&lt;/span> &lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;[]&lt;/span> &lt;span class="n">table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;[])&lt;/span> &lt;span class="n">EMPTY_TABLE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">transient&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">threshold&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">loadFactor&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="entry元素">Entry元素&lt;/h5>
&lt;p>Entry是链表的结果，key为Map中的key，value为Map中的value，hash为key的hash结果，next为下一个元素。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">K&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">V&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="添加元素">添加元素&lt;/h5>
&lt;ul>
&lt;li>如果数组为空（即map初始化后第一次添加元素）扩充table&lt;/li>
&lt;li>如果key为null，则调用putForNullKey方法，null位于table的下标0处&lt;/li>
&lt;li>算出key的hash值&lt;/li>
&lt;li>通过hash值算出元素在table中的下标值
&lt;ul>
&lt;li>如果该位置元素不为空，然后需要比较元素的hash值和上面算出的hash值是否相等，同时元素的key对象和要出入的key是否为同一对象（相同的地址 ==比较为true）或者equals方法是否为true。如果满足条件，则更新该entry的value值；若不满足则遍历整个链表。&lt;/li>
&lt;li>如果为空直接添加新的entry。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>JDK8此处有更新，见末尾&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">K&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">table&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">EMPTY_TABLE&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">inflateTable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">threshold&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">putForNullKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">indexFor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hash&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">)))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">V&lt;/span> &lt;span class="n">oldValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">recordAccess&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">oldValue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">modCount&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;span class="n">addEntry&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="扩充table">扩充table&lt;/h5>
&lt;p>对toSzie算出最小的2的幂值，用了Integer.highestOneBit((toSize -1) &amp;laquo; 1)。减一之后左移一位，然后取最高位值，其余为补0。&lt;/p>
&lt;p>为什么数组长度必须为2的幂值，请继续看。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 扩充table
&lt;/span>&lt;span class="cm">**/&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">inflateTable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">toSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Find a power of 2 &amp;gt;= toSize
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">capacity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">roundUpToPowerOf2&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">toSize&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">threshold&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">min&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">capacity&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">loadFactor&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MAXIMUM_CAPACITY&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Entry&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">capacity&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="n">initHashSeedAsNeeded&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">capacity&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="计算hash值">计算hash值&lt;/h5>
&lt;p>hashSeed值为0，将key的hashCode值做多次位移和异或运算&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hashSeed&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">sun&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">misc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Hashing&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stringHash32&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">h&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// This function ensures that hashCodes that differ only by
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// constant multiples at each bit position have a bounded
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// number of collisions (approximately 8 at default load factor).
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">20&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">12&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">7&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">4&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="计算元素位置">计算元素位置&lt;/h5>
&lt;p>这里的逻辑很简单：将hash值跟数组长度-1做了按位与。&lt;/p>
&lt;p>在进行查找的时候是通过key的hash值，如果我们将元素的位置分布得尽量均匀一些，尽量做到每个位置上只有一个元素，达到O(1)的查找。这种查找通过取余就可以做到，在Java中如何做到比较快的取余呢，答案是位与运算。&lt;/p>
&lt;p>上面扩充数组的时候我们保证长度为2的幂值，那减一之后就是每位都是&lt;strong>1&lt;/strong>。做位与运算就能保证低位不同的hash值会落在不同的位置上，降低冲突（碰撞），最大程度做到均匀分布，减少链表的出现（查找变成O(n)）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">indexFor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// assert Integer.bitCount(length) == 1 : &amp;#34;length must be a non-zero power of 2&amp;#34;;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="添加entry">添加entry&lt;/h5>
&lt;p>添加新的元素时要检查元素个数是否达到阈值，否则要做扩容处理，新table的容量为当前table长度的两倍。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kt">void&lt;/span> &lt;span class="nf">addEntry&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">K&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">bucketIndex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">threshold&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">bucketIndex&lt;/span>&lt;span class="o">]))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">resize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">bucketIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">indexFor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">createEntry&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bucketIndex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="resize">resize&lt;/h5>
&lt;p>新table的容量为当前table长度的两倍（table.length &amp;gt;= size），将旧数据中的数据迁移到新的数组中，迁移的过程中要重新计算元素在新数组中的位置。网上很多地方提到这个操作rehash，但我觉得reindex反而更恰当一些。JDK中对rehash有额外的定义，就是&lt;strong>initHashSeedAsNeeded&lt;/strong>。当新的容量&amp;gt;=&lt;strong>jdk.map.althashing.threshold&lt;/strong>的配置时，会重新计算key的hash值，即hash(e.key)。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kt">void&lt;/span> &lt;span class="nf">resize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">newCapacity&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Entry&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">oldTable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">oldCapacity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">oldTable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">oldCapacity&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">MAXIMUM_CAPACITY&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">threshold&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MAX_VALUE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">Entry&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">newTable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Entry&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">newCapacity&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="n">transfer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">newTable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">initHashSeedAsNeeded&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">newCapacity&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTable&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">threshold&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">min&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">newCapacity&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">loadFactor&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MAXIMUM_CAPACITY&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="reindex">reindex&lt;/h5>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kt">void&lt;/span> &lt;span class="nf">transfer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">newTable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">rehash&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">newCapacity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rehash&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">indexFor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">newCapacity&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTable&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="n">newTable&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>JDK8 update
添加元素的时候，如果发生哈希冲突，会遍历链表。加入链表的长度大于TREEIFY_THRESHOLD（默认为8），会将链表转成&lt;strong>红黑树&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">final&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="nf">putVal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">K&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">onlyIfAbsent&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">evict&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;[]&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">tab&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">tab&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">resize&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">tab&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newNode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">K&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hash&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="o">((&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">))))&lt;/span>
&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;)&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">putTreeVal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">binCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">binCount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newNode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">binCount&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">TREEIFY_THRESHOLD&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// -1 for 1st
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">treeifyBin&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">tab&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hash&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="o">((&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">))))&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// existing mapping for key
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">oldValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">onlyIfAbsent&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">oldValue&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">afterNodeAccess&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">oldValue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">++&lt;/span>&lt;span class="n">modCount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(++&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">threshold&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">resize&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">afterNodeInsertion&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">evict&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">&amp;lt;!----&amp;gt;&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">treeifyBin&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;[]&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">tab&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">MIN_TREEIFY_CAPACITY&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">resize&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">hd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">tl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">do&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">replacementTreeNode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">tl&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">hd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tl&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">tl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">tl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">tab&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hd&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">hd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">treeify&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">tab&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样，get(key)的时候也会相应的从树中查找元素。&lt;/p></description></item><item><title>多线程下的单例模式+反汇编</title><link>https://atbug.com/singleton-in-multi-threads-programming/</link><pubDate>Wed, 06 Jul 2016 16:57:09 +0000</pubDate><guid>https://atbug.com/singleton-in-multi-threads-programming/</guid><description>
&lt;p>多线程下的单例模式的实现，顺便做了反汇编。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MySingleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">MySingleton&lt;/span> &lt;span class="n">INSTANCE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nf">MySingleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">MySingleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">INSTANCE&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">MySingleton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">INSTANCE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MySingleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">INSTANCE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Compiled&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="s">&amp;#34;MySingleton.java&amp;#34;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MySingleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">MySingleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Code&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">getstatic&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="c1">// Field INSTANCE:LMySingleton; //+获得类的指定域，并压入栈顶
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">ifnonnull&lt;/span> &lt;span class="n">32&lt;/span> &lt;span class="c1">//+不为null时跳转到行号32
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">6&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">ldc_w&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="c1">// class MySingleton //+常量值从常量池中推送至栈顶（宽索引），推送的为地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">9&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">dup&lt;/span> &lt;span class="c1">//+复制栈顶数值，并且复制值进栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">astore_0&lt;/span> &lt;span class="c1">//+将栈顶数值（objectref）存入当前 frame的局部变量数组中指定下标(index）处的变量中，栈顶数值出栈。这里存的是MySingleton类定义的地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">11&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">monitorenter&lt;/span> &lt;span class="c1">//+获得对象锁即MySingleton地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">12&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="c1">// class MySingleton //+创建一个对象，并且其引用进栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">15&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">dup&lt;/span> &lt;span class="c1">//+复制栈顶数值，并且复制值进栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">16&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokespecial&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">4&lt;/span> &lt;span class="c1">// Method &amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V //+调用超类构造方法、实例初始化方法、私有方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">19&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">putstatic&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="c1">// Field INSTANCE:LMySingleton; //+为指定的类的静态域赋值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">22&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_0&lt;/span> &lt;span class="c1">//+当前frame的局部变量数组中下标为 index的引用型局部变量进栈，这里是MySingleton类定义的地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">23&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">monitorexit&lt;/span> &lt;span class="c1">//+释放对象锁
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">24&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">goto&lt;/span> &lt;span class="n">32&lt;/span> &lt;span class="c1">//+跳转到行号32
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">27&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">astore_1&lt;/span> &lt;span class="c1">//+将栈顶数值（objectref）存入当前 frame的局部变量数组中指定下标(index）处的变量中，栈顶数值出栈。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">28&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_0&lt;/span> &lt;span class="c1">//+当前frame的局部变量数组中下标为 0的引用型局部变量进栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">29&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">monitorexit&lt;/span> &lt;span class="c1">//+//+释放对象锁
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">30&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_1&lt;/span> &lt;span class="c1">//+当前frame的局部变量数组中下标为 1的引用型局部变量进栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">31&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">athrow&lt;/span> &lt;span class="c1">//+将栈顶的数值作为异常或错误抛出
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">32&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">getstatic&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="c1">// Field INSTANCE:LMySingleton; //+获得类的指定域，并压入栈顶
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">35&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">areturn&lt;/span> &lt;span class="c1">//+从方法中返回一个对象的引用
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">from&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">target&lt;/span> &lt;span class="n">type&lt;/span>
&lt;span class="n">12&lt;/span> &lt;span class="n">24&lt;/span> &lt;span class="n">27&lt;/span> &lt;span class="n">any&lt;/span>
&lt;span class="n">27&lt;/span> &lt;span class="n">30&lt;/span> &lt;span class="n">27&lt;/span> &lt;span class="n">any&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>使用Kryo替换spring amqp的Java序列化</title><link>https://atbug.com/use-kryo-in-spring-amqp-serialization/</link><pubDate>Wed, 29 Jun 2016 05:29:14 +0000</pubDate><guid>https://atbug.com/use-kryo-in-spring-amqp-serialization/</guid><description>
&lt;p>spring amqp的原生并没有对Kryo加以支持，Kryo的优点就不多说了。&lt;/p>
&lt;p>git地址：&lt;a href="https://github.com/addozhang/spring-kryo-messaeg-converter">https://github.com/addozhang/spring-kryo-messaeg-converter&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">KryoMessageConverter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AbstractMessageConverter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">CONTENT_TYPE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;application/x-kryo&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">DEFAULT_CHARSET&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">defaultCharset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DEFAULT_CHARSET&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">KryoFactory&lt;/span> &lt;span class="n">kryoFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultKryoFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Crate a message from the payload object and message properties provided. The message id will be added to the
&lt;/span>&lt;span class="cm"> * properties if necessary later.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param object the payload
&lt;/span>&lt;span class="cm"> * @param messageProperties the message properties (headers)
&lt;/span>&lt;span class="cm"> * @return a message
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">Message&lt;/span> &lt;span class="nf">createMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">object&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MessageProperties&lt;/span> &lt;span class="n">messageProperties&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Kryo&lt;/span> &lt;span class="n">kryo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kryoFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Output&lt;/span> &lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ByteBufferOutput&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">4096&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">1024&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">kryo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">writeClassAndObject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">object&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toBytes&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">messageProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setContentType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CONTENT_TYPE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">messageProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContentEncoding&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">messageProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setContentEncoding&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">defaultCharset&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">messageProperties&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">fromMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Message&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">MessageConversionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">MessageProperties&lt;/span> &lt;span class="n">properties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMessageProperties&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">properties&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">properties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContentType&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="o">;&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">properties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContentType&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;x-kryo&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Kryo&lt;/span> &lt;span class="n">kryo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kryoFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kryo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readClassAndObject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ByteBufferInput&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBody&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MessageConversionException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Converter not applicable to this message&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DefaultKryoFactory&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">KryoFactory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Kryo&lt;/span> &lt;span class="nf">create&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Kryo&lt;/span> &lt;span class="n">kryo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Kryo&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">kryo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>关于SLF4J</title><link>https://atbug.com/about-slf4j/</link><pubDate>Sat, 18 Apr 2015 11:16:26 +0000</pubDate><guid>https://atbug.com/about-slf4j/</guid><description>
&lt;p>Spring的功能越来越强大，同时也越来越臃肿。比如想快速搭建一个基于Spring的项目，解决依赖问题非常耗时。Spring的项目模板的出现就解决了这个问题，通过&lt;a href="http://dist.springsource.com/release/STS/help/descriptors-3.0.xml">这个描述文件&lt;/a>，可以快速的找到你所需要的模板。&lt;/p>
&lt;p>第一次认识SLF4J就是在这些项目模板里，它的全称是Simple Logging Facade for Java。从字面上可以看出它只是一个Facade，不提供具体的日志解决方案，只服务于各个日志系统。简单说有了它，我们就可以&lt;strong>随意&lt;/strong>的更换日志系统（如java.util.logging、logback、log4j）。比如在开发的时候使用logback，部署的时候可以切换到log4j；如果关闭所有的log，切换到NOP就可以了。只需要更改依赖，提供日志配置文件，免去了修改代码的麻烦。&lt;/p>
&lt;p>首先看如何使用：&lt;/p>
&lt;p>[java]
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;&lt;/p>
&lt;p>public class HelloWorld {
public static void main(String[] args) {
Logger logger = LoggerFactory.getLogger(HelloWorld.class);
logger.info(&amp;quot;Hello World&amp;quot;);
}
}
[/java]&lt;/p>
&lt;p>SLF4J封装了使用起来和其他日志系统一样简单。上面提到过SLF4J不提供具体的日志解决方案，所以使用的时候除了要引用SLF4J包，还要引用具体的日志解决方案包（log4j、logging&amp;ndash;JDK提供、logback），还有所对应的binding包（&lt;em>slf4j-log4j&lt;/em>_、slf4j-jdk14、logback-classic_）。&lt;/p>
&lt;p>以log4j为例，我们看SLF4J的实现方式。&lt;/p>
&lt;p>SLF4J类在初始化的时候会尝试从ClassLoader中&lt;strong>org/slf4j/impl/StaticLoggerBinder.class&lt;/strong>。这个类比较特殊，每个binding包里都有。不同binding包里的StaticLoggerBinder类会去初始化一个相应的实例，如slf4j-log4j里：&lt;/p>
&lt;p>[java]
/**&lt;/p>
&lt;ul>
&lt;li>截取的部分代码
*/
private StaticLoggerBinder() {
loggerFactory = new Log4jLoggerFactory();
}
[/java]&lt;/li>
&lt;/ul>
&lt;p>而Log4jLoggerAdapter实现了SLF4J的Logger接口，使用了Adapter模式对Log4j的Logger进行了封装并暴露了Logger的接口，Log4jLoggerFactory持有了Log4jLoggerAdapter的实例。&lt;/p>
&lt;p>[java]
/**&lt;/p>
&lt;ul>
&lt;li>截取的部分代码
*/
public class Log4jLoggerFactory implements ILoggerFactory {
public Logger getLogger(String name) {
Logger slf4jLogger = null;
// protect against concurrent access of loggerMap
synchronized (this) {
slf4jLogger = (Logger) loggerMap.get(name);
if (slf4jLogger == null) {
org.apache.log4j.Logger log4jLogger;
if(name.equalsIgnoreCase(Logger.ROOT_LOGGER_NAME)) {
log4jLogger = LogManager.getRootLogger();
} else {
log4jLogger = LogManager.getLogger(name);
}
slf4jLogger = new Log4jLoggerAdapter(log4jLogger);
loggerMap.put(name, slf4jLogger);
}
}
return slf4jLogger;
}
}
[/java]&lt;/li>
&lt;/ul>
&lt;p>具体的Log解决方案就不做剖析了。&lt;/p></description></item></channel></rss>