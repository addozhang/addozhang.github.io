<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zuul on 乱世浮生</title><link>https://atbug.com/tags/zuul/</link><description>Recent content in Zuul on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 02 Aug 2018 08:55:43 +0000</lastBuildDate><atom:link href="https://atbug.com/tags/zuul/index.xml" rel="self" type="application/rss+xml"/><item><title>Zuul网关Ribbon重试</title><link>https://atbug.com/ribbon-retry-in-zuul/</link><pubDate>Thu, 02 Aug 2018 08:55:43 +0000</pubDate><guid>https://atbug.com/ribbon-retry-in-zuul/</guid><description>
&lt;h2 id="相关配置">相关配置&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#如果路由转发请求发生超时(连接超时或处理超时), 只要超时时间的设置小于Hystrix的命令超时时间,那么它就会自动发起重试. 默认为false. 或者对指定响应状态码进行重试
zuul.retryable = true
zuul.routes.&amp;lt;route&amp;gt;.retryable = false
#同一实例上的最大重试次数, 默认值为0. 不包括首次调用
ribbon.MaxAutoRetries=0
#重试其他实例的最大重试次数, 不包括第一次选的实例. 默认为1
ribbon.MaxAutoRetriesNextServer=1
#是否所有操作执行重试, 默认值为false, 只重试`GET`请求
ribbon.OkToRetryOnAllOperations=false
#连接超时, 默认2000
ribbon.ConnectTimeout=15000
#响应超时, 默认5000
ribbon.ReadTimeout=15000
#每个host的最大连接数
ribbon.MaxHttpConnectionsPerHost=50
#最大连接数
ribbon.MaxTotalHttpConnections=200
#何种响应状态码才进行重试
ribbon.retryableStatusCodes=404,502
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现">实现&lt;/h2>
&lt;ol>
&lt;li>&lt;code>SimpleRouteLocator#getRoute&lt;/code>返回的&lt;code>route&lt;/code>对象中会带上&lt;code>retryable&lt;/code>的设置.&lt;/li>
&lt;li>&lt;code>PreDecorationFilter&lt;/code>在对&lt;code>RequestContext&lt;/code>进行装饰的时候会将&lt;code>retryable&lt;/code>的设置通过key&lt;code>FilterConstants.RETRYABLE_KEY&lt;/code>注入&lt;code>RequestContext&lt;/code>中.&lt;/li>
&lt;li>&lt;code>RibbonRoutingFilter#buildCommandContext&lt;/code>会使用&lt;code>RequestContext&lt;/code>的&lt;code>retryable&lt;/code>设置构造&lt;code>RibbonCommandContext&lt;/code>对象.&lt;/li>
&lt;li>&lt;code>RibbonCommandFactory&lt;/code>使用&lt;code>RibbonCommandContext&lt;/code>构建出&lt;code>RibbonCommand&lt;/code>对象.&lt;/li>
&lt;li>&lt;code>RibbonCommand#run&lt;/code>中, 当&lt;code>retryable&lt;/code>为&lt;code>true&lt;/code>时, 会调用&lt;code>IClient&lt;/code>的&lt;code>execute&lt;/code>方法处理请求. 为&lt;code>false&lt;/code>时, 会调用&lt;code>IClient&lt;/code>的&lt;code>executeWithLoadBalancer&lt;/code>方法执行请求.
&lt;ul>
&lt;li>&lt;code>execute&lt;/code>会在失败时进行重试(不超过超时限制)&lt;/li>
&lt;li>&lt;code>executeWithLoadBalancer&lt;/code>方法是先通过&lt;code>LoadBalancer&lt;/code>选择出一个&lt;code>Server&lt;/code>, 然后构建出请求地址.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>IClient#execute&lt;/code>执行时, 通过&lt;code>LoadBalancedRetryPolicyFactory&lt;/code>创建一个&lt;code>LoadBalancedRetryPolicy&lt;/code>对象. &lt;code>LoadBalancedRetryPolicy&lt;/code>持有上面&lt;code>ribbon.XXX&lt;/code>的设置. 当响应状态码不在&lt;code>ribbon.retryableStatusCodes&lt;/code>设置中, 则会直接返回响应. 如果属于可重试的响应状态码, 则会将响应封装为&lt;code>HttpClientStatusCodeException&lt;/code>抛出. 异常被&lt;code>RetryTemplate&lt;/code>捕获, 然后使用&lt;code>LoadBalancedRetryPolicy&lt;/code>对当前状态(MaxAutoRetries, MaxAutoRetriesNextServer)计算出能否进行一次重试. 直至成功, 或者当前状态不满足条件.&lt;/li>
&lt;/ol></description></item><item><title>Spring Cloud Zuul详解</title><link>https://atbug.com/spring-cloud-zuul-breakdown/</link><pubDate>Thu, 22 Feb 2018 17:02:26 +0000</pubDate><guid>https://atbug.com/spring-cloud-zuul-breakdown/</guid><description>
&lt;p>Spring Cloud对Netflix Zuul做了封装集成, 使得在Spring Cloud环境中使用Zuul更方便. Netflix Zuul相关分析请看&lt;a href="http://atbug.com/learn-netflix-zuul/">上一篇&lt;/a>.&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>@EnableZuulProxy 与 @EnableZuulServer
二者的区别在于前者使用了服务发现作为路由寻址, 并使用Ribbon做客户端的负载均衡; 后者没有使用.
Zuul server的路由都通过&lt;code>ZuulProperties&lt;/code>进行配置.&lt;/p>
&lt;h3 id="具体实现">具体实现:&lt;/h3>
&lt;ol>
&lt;li>使用&lt;code>ZuulController&lt;/code>(&lt;code>ServletWrappingController&lt;/code>的子类)封装&lt;code>ZuulServlet&lt;/code>实例, 处理从&lt;code>DispatcherServlet&lt;/code>进来的请求.&lt;/li>
&lt;li>&lt;code>ZuulHandlerMapping&lt;/code>负责注册handler mapping, 将&lt;code>Route&lt;/code>的&lt;code>fullPath&lt;/code>的请求交由&lt;code>ZuulController&lt;/code>处理.&lt;/li>
&lt;li>同时使用&lt;code>ServletRegistrationBean&lt;/code>注册&lt;code>ZuulServlet&lt;/code>, 默认使用&lt;code>/zuul&lt;/code>作为urlMapping. 所有来自以&lt;code>/zuul&lt;/code>开头的path的请求都会直接进入&lt;code>ZuulServlet&lt;/code>, 不会进入&lt;code>DispatcherServlet&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h4 id="使用注解">使用注解&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;code>@EnableZuulProxy&lt;/code>引入了&lt;code>ZuulProxyMarkerConfiguration&lt;/code>, &lt;code>ZuulProxyMarkerConfiguration&lt;/code>只做了一件事, 实例化了内部类&lt;code>Marker&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulProxyMarkerConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Marker&lt;/span> &lt;span class="nf">zuulProxyMarkerBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Marker&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">Marker&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>@EnableZuulServer&lt;/code>引入了&lt;code>ZuulServerMarkerConfiguration&lt;/code>, &lt;code>ZuulServerMarkerConfiguration&lt;/code>也只做了一件事: 实例化了内部类&lt;code>Marker&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulServerMarkerConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Marker&lt;/span> &lt;span class="nf">zuulServerMarkerBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Marker&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">Marker&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="enableautoconfiguration">EnableAutoConfiguration&lt;/h4>
&lt;p>项目中使用&lt;code>@EnableAutoConfiguration&lt;/code>注解, 开启Spring上下文对象的自动配置功能, 尝试去猜测和实例化你&lt;strong>可能需要的&lt;/strong>bean.&lt;/p>
&lt;p>这个功能是基于classPath来完成的. 比如: 项目中引用了&lt;code>tomcat-embedded.jar&lt;/code>, 你可能需要一个&lt;code>TomcatEmbeddedServletContainerFactory&lt;/code>实例, 除非定义了自己的&lt;code>EmbeddedServletContainerFactory&lt;/code>实例.&lt;/p>
&lt;p>我们来接着看, 在&lt;code>spring-cloud-netflix-core&lt;/code>的&lt;code>spring.factories&lt;/code>中的&lt;code>org.springframework.boot.autoconfigure.EnableAutoConfiguration&lt;/code>实现中我们可以找到&lt;code>org.springframework.cloud.netflix.zuul.ZuulProxyAutoConfiguration&lt;/code>和&lt;code>org.springframework.cloud.netflix.zuul.ZuulServerAutoConfiguration&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ZuulServerAutoConfiguration
它的初始化条件有两个:&lt;/p>
&lt;ul>
&lt;li>&lt;code>@ConditionalOnClass(ZuulServlet.class)&lt;/code>指定classpath中需要有&lt;code>ZuulServlet.class&lt;/code>. 这个servlet负责对所有进入Zuul server的请求以及配置应用指定的&lt;code>preRoute&lt;/code>, &lt;code>route&lt;/code>, &lt;code>postRoute&lt;/code>和&lt;code>error&lt;/code>.&lt;/li>
&lt;li>&lt;code>@ConditionalOnBean(ZuulServerMarkerConfiguration.Marker.class)&lt;/code> 与&lt;code>@EnableZuulServer&lt;/code>注解呼应.&lt;/li>
&lt;/ul>
&lt;p>​&lt;code>java @Configuration @EnableConfigurationProperties({ ZuulProperties.class }) @ConditionalOnClass(ZuulServlet.class) @ConditionalOnBean(ZuulServerMarkerConfiguration.Marker.class) // Make sure to get the ServerProperties from the same place as a normal web app would @Import(ServerPropertiesAutoConfiguration.class) public class ZuulServerAutoConfiguration { ... } ​&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ZuulProxyAutoConfiguration
它有一个初始化的条件&lt;code>@ConditionalOnBean(ZuulProxyMarkerConfiguration.Marker.class)&lt;/code>, 就是上下文中需要有&lt;code>ZuulProxyMarkerConfiguration.Marker&lt;/code>这个内部类的bean. 与&lt;code>@EnableZuulProxy&lt;/code>注解呼应.&lt;/p>
&lt;p>初始化包括内置的filter, 以及Discovery, Ribbon等的初始化.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@Import&lt;/span>&lt;span class="o">({&lt;/span> &lt;span class="n">RibbonCommandFactoryConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RestClientRibbonConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">RibbonCommandFactoryConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OkHttpRibbonConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">RibbonCommandFactoryConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">HttpClientRibbonConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">})&lt;/span>
&lt;span class="nd">@ConditionalOnBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ZuulProxyMarkerConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Marker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulProxyAutoConfiguration&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">ZuulServerAutoConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h5 id="zuulserverautoconfiguration-详解">ZuulServerAutoConfiguration 详解&lt;/h5>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//声明配置
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="c1">//配置ZuulProperties实例
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@EnableConfigurationProperties&lt;/span>&lt;span class="o">({&lt;/span> &lt;span class="n">ZuulProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">})&lt;/span>
&lt;span class="c1">//条件1 存在ZuulServlet.class
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@ConditionalOnClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ZuulServlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//条件2 存在ZuulServerMarkerConfiguration.Marker.class bean, 即应用使用@EnableZuulServer注解
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@ConditionalOnBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ZuulServerMarkerConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Marker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//配置ServerProperties实例
&lt;/span>&lt;span class="c1">// Make sure to get the ServerProperties from the same place as a normal web app would
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@Import&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServerPropertiesAutoConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulServerAutoConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">ZuulProperties&lt;/span> &lt;span class="n">zuulProperties&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">ServerProperties&lt;/span> &lt;span class="n">server&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">required&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ErrorController&lt;/span> &lt;span class="n">errorController&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">HasFeatures&lt;/span> &lt;span class="nf">zuulFeature&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">HasFeatures&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">namedFeature&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Zuul (Simple)&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ZuulServerAutoConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//复合结构的RouteLocator
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@Primary&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">CompositeRouteLocator&lt;/span> &lt;span class="nf">primaryRouteLocator&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RouteLocator&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">routeLocators&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CompositeRouteLocator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routeLocators&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//没有SimpleRouteLocator.class的bean时, 使用zuulProperties实例化一个SimpleRouteLocator实例.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnMissingBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SimpleRouteLocator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">SimpleRouteLocator&lt;/span> &lt;span class="nf">simpleRouteLocator&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SimpleRouteLocator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">server&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServletPrefix&lt;/span>&lt;span class="o">(),&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zuulProperties&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//zuulController, 包装了一个ZuulServlet类型的servlet, 实现对ZuulServlet类型的servlet的初始化.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulController&lt;/span> &lt;span class="nf">zuulController&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulController&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulHandlerMapping&lt;/span> &lt;span class="nf">zuulHandlerMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RouteLocator&lt;/span> &lt;span class="n">routes&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ZuulHandlerMapping&lt;/span> &lt;span class="n">mapping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulHandlerMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routes&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">zuulController&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">mapping&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setErrorController&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">errorController&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">mapping&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ApplicationListener&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ApplicationEvent&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">zuulRefreshRoutesListener&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulRefreshListener&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnMissingBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;zuulServlet&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ServletRegistrationBean&lt;/span> &lt;span class="nf">zuulServlet&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ServletRegistrationBean&lt;/span> &lt;span class="n">servlet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ServletRegistrationBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ZuulServlet&lt;/span>&lt;span class="o">(),&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zuulProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServletPattern&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">// The whole point of exposing this servlet is to provide a route that doesn&amp;#39;t
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// buffer requests.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">servlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addInitParameter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;buffer-requests&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">servlet&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// pre filters
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ServletDetectionFilter&lt;/span> &lt;span class="nf">servletDetectionFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ServletDetectionFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FormBodyWrapperFilter&lt;/span> &lt;span class="nf">formBodyWrapperFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FormBodyWrapperFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">DebugFilter&lt;/span> &lt;span class="nf">debugFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DebugFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Servlet30WrapperFilter&lt;/span> &lt;span class="nf">servlet30WrapperFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Servlet30WrapperFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// post filters
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">SendResponseFilter&lt;/span> &lt;span class="nf">sendResponseFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SendResponseFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">SendErrorFilter&lt;/span> &lt;span class="nf">sendErrorFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SendErrorFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">SendForwardFilter&lt;/span> &lt;span class="nf">sendForwardFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SendForwardFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;zuul.ribbon.eager-load.enabled&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">matchIfMissing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulRouteApplicationContextInitializer&lt;/span> &lt;span class="nf">zuulRoutesApplicationContextInitiazer&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">SpringClientFactory&lt;/span> &lt;span class="n">springClientFactory&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulRouteApplicationContextInitializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">springClientFactory&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">zuulProperties&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulFilterConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ZuulFilter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">filters&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulFilterInitializer&lt;/span> &lt;span class="nf">zuulFilterInitializer&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">CounterFactory&lt;/span> &lt;span class="n">counterFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TracerFactory&lt;/span> &lt;span class="n">tracerFactory&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterLoader&lt;/span> &lt;span class="n">filterLoader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FilterLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">FilterRegistry&lt;/span> &lt;span class="n">filterRegistry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FilterRegistry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterInitializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">filters&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">counterFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">tracerFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">filterLoader&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">filterRegistry&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@ConditionalOnClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CounterService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulCounterFactoryConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CounterService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">CounterFactory&lt;/span> &lt;span class="nf">counterFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CounterService&lt;/span> &lt;span class="n">counterService&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultCounterFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">counterService&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulMetricsConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnMissingBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CounterFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">CounterFactory&lt;/span> &lt;span class="nf">counterFactory&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EmptyCounterFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@ConditionalOnMissingBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TracerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">TracerFactory&lt;/span> &lt;span class="nf">tracerFactory&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EmptyTracerFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulRefreshListener&lt;/span>
&lt;span class="kd">implements&lt;/span> &lt;span class="n">ApplicationListener&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ApplicationEvent&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ZuulHandlerMapping&lt;/span> &lt;span class="n">zuulHandlerMapping&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">HeartbeatMonitor&lt;/span> &lt;span class="n">heartbeatMonitor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HeartbeatMonitor&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">onApplicationEvent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ApplicationEvent&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">event&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">ContextRefreshedEvent&lt;/span>
&lt;span class="o">||&lt;/span> &lt;span class="n">event&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">RefreshScopeRefreshedEvent&lt;/span>
&lt;span class="o">||&lt;/span> &lt;span class="n">event&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">RoutesRefreshedEvent&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zuulHandlerMapping&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDirty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">event&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">HeartbeatEvent&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">heartbeatMonitor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">update&lt;/span>&lt;span class="o">(((&lt;/span>&lt;span class="n">HeartbeatEvent&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">()))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zuulHandlerMapping&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDirty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="zuulproxyautoconfiguration-详解">ZuulProxyAutoConfiguration 详解&lt;/h5>
&lt;pre>&lt;code>​```java
//声明配置
@Configuration
//引入RibbonCommandFactory配置
@Import({ RibbonCommandFactoryConfiguration.RestClientRibbonConfiguration.class,
RibbonCommandFactoryConfiguration.OkHttpRibbonConfiguration.class,
RibbonCommandFactoryConfiguration.HttpClientRibbonConfiguration.class,
HttpClientConfiguration.class })
//配置生效条件
@ConditionalOnBean(ZuulProxyMarkerConfiguration.Marker.class)
public class ZuulProxyAutoConfiguration extends ZuulServerAutoConfiguration {
@SuppressWarnings(&amp;quot;rawtypes&amp;quot;)
@Autowired(required = false)
private List&amp;lt;RibbonRequestCustomizer&amp;gt; requestCustomizers = Collections.emptyList();
//网关服务注册实例信息
@Autowired(required = false)
private Registration registration;
//服务发现客户端
@Autowired
private DiscoveryClient discovery;
//serviceId和路由的映射逻辑, 默认为相同
@Autowired
private ServiceRouteMapper serviceRouteMapper;
@Override
public HasFeatures zuulFeature() {
return HasFeatures.namedFeature(&amp;quot;Zuul (Discovery)&amp;quot;,
ZuulProxyAutoConfiguration.class);
}
//静态和动态路由寻址: 静态从配置文件获取, 动态通过服务发现客户端完成. 后者优先级更高
@Bean
@ConditionalOnMissingBean(DiscoveryClientRouteLocator.class)
public DiscoveryClientRouteLocator discoveryRouteLocator() {
return new DiscoveryClientRouteLocator(this.server.getServletPrefix(),
this.discovery, this.zuulProperties, this.serviceRouteMapper, this.registration);
}
//装饰过滤器
// pre filters
@Bean
public PreDecorationFilter preDecorationFilter(RouteLocator routeLocator,
ProxyRequestHelper proxyRequestHelper) {
return new PreDecorationFilter(routeLocator, this.server.getServletPrefix(),
this.zuulProperties, proxyRequestHelper);
}
//基于Ribbon路由过滤器
// route filters
@Bean
public RibbonRoutingFilter ribbonRoutingFilter(ProxyRequestHelper helper,
RibbonCommandFactory&amp;lt;?&amp;gt; ribbonCommandFactory) {
RibbonRoutingFilter filter = new RibbonRoutingFilter(helper, ribbonCommandFactory,
this.requestCustomizers);
return filter;
}
//基于host的路由过滤器
@Bean
@ConditionalOnMissingBean({SimpleHostRoutingFilter.class, CloseableHttpClient.class})
public SimpleHostRoutingFilter simpleHostRoutingFilter(ProxyRequestHelper helper,
ZuulProperties zuulProperties,
ApacheHttpClientConnectionManagerFactory connectionManagerFactory,
ApacheHttpClientFactory httpClientFactory) {
return new SimpleHostRoutingFilter(helper, zuulProperties,
connectionManagerFactory, httpClientFactory);
}
@Bean
@ConditionalOnMissingBean({SimpleHostRoutingFilter.class})
public SimpleHostRoutingFilter simpleHostRoutingFilter2(ProxyRequestHelper helper,
ZuulProperties zuulProperties,
CloseableHttpClient httpClient) {
return new SimpleHostRoutingFilter(helper, zuulProperties,
httpClient);
}
//服务发现寻址刷新监听器
@Bean
public ApplicationListener&amp;lt;ApplicationEvent&amp;gt; zuulDiscoveryRefreshRoutesListener() {
return new ZuulDiscoveryRefreshListener();
}
@Bean
@ConditionalOnMissingBean(ServiceRouteMapper.class)
public ServiceRouteMapper serviceRouteMapper() {
return new SimpleServiceRouteMapper();
}
@Configuration
@ConditionalOnMissingClass(&amp;quot;org.springframework.boot.actuate.endpoint.Endpoint&amp;quot;)
protected static class NoActuatorConfiguration {
@Bean
public ProxyRequestHelper proxyRequestHelper(ZuulProperties zuulProperties) {
ProxyRequestHelper helper = new ProxyRequestHelper();
helper.setIgnoredHeaders(zuulProperties.getIgnoredHeaders());
helper.setTraceRequestBody(zuulProperties.isTraceRequestBody());
return helper;
}
}
@Configuration
@ConditionalOnClass(Endpoint.class)
protected static class EndpointConfiguration {
@Autowired(required = false)
private TraceRepository traces;
@ConditionalOnEnabledEndpoint(&amp;quot;routes&amp;quot;)
@Bean
public RoutesEndpoint routesEndpoint(RouteLocator routeLocator) {
return new RoutesEndpoint(routeLocator);
}
@ConditionalOnEnabledEndpoint(&amp;quot;routes&amp;quot;)
@Bean
public RoutesMvcEndpoint routesMvcEndpoint(RouteLocator routeLocator,
RoutesEndpoint endpoint) {
return new RoutesMvcEndpoint(endpoint, routeLocator);
}
@ConditionalOnEnabledEndpoint(&amp;quot;filters&amp;quot;)
@Bean
public FiltersEndpoint filtersEndpoint() {
FilterRegistry filterRegistry = FilterRegistry.instance();
return new FiltersEndpoint(filterRegistry);
}
@Bean
public ProxyRequestHelper proxyRequestHelper(ZuulProperties zuulProperties) {
TraceProxyRequestHelper helper = new TraceProxyRequestHelper();
if (this.traces != null) {
helper.setTraces(this.traces);
}
helper.setIgnoredHeaders(zuulProperties.getIgnoredHeaders());
helper.setTraceRequestBody(zuulProperties.isTraceRequestBody());
return helper;
}
}
private static class ZuulDiscoveryRefreshListener
implements ApplicationListener&amp;lt;ApplicationEvent&amp;gt; {
private HeartbeatMonitor monitor = new HeartbeatMonitor();
@Autowired
private ZuulHandlerMapping zuulHandlerMapping;
@Override
public void onApplicationEvent(ApplicationEvent event) {
if (event instanceof InstanceRegisteredEvent) {
reset();
}
else if (event instanceof ParentHeartbeatEvent) {
ParentHeartbeatEvent e = (ParentHeartbeatEvent) event;
resetIfNeeded(e.getValue());
}
else if (event instanceof HeartbeatEvent) {
HeartbeatEvent e = (HeartbeatEvent) event;
resetIfNeeded(e.getValue());
}
}
private void resetIfNeeded(Object value) {
if (this.monitor.update(value)) {
reset();
}
}
private void reset() {
this.zuulHandlerMapping.setDirty(true);
}
}
}
​```
&lt;/code>&lt;/pre>
&lt;h2 id="配置项">配置项&lt;/h2>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15192869619623.jpg" alt="">&lt;/p>
&lt;h4 id="zuulservletpath">zuul.servletPath&lt;/h4>
&lt;p>默认为*/zuul*, 注册ZuulServlet的时候作为urlMapping使用. 即所有来自以*/zuul*开头的path都会由ZuulServlet处理.&lt;/p>
&lt;h4 id="zuulignoredpatterns">zuul.ignoredPatterns&lt;/h4>
&lt;p>Zuul使用&lt;code>ZuulController&lt;/code>封装了&lt;code>ZuulServlet&lt;/code>. 所有进入Zuul的请求的入口都是&lt;code>ZuulController&lt;/code>.
&lt;code>ZuulController&lt;/code>的&lt;code>ZuulHandlerMapping&lt;/code>默认把&lt;code>zuul.routes.[ITEM].path&lt;/code>的请求交给&lt;code>ZuulServlet&lt;/code>处理. 如果找不到对应的path的route, 则会走其他的&lt;code>DispatcherServlet&lt;/code>&lt;/p>
&lt;p>&lt;code>zuul.ignoredPatterns&lt;/code>作用就是进入Zuul的请求, 只要match都会直接交由其他的&lt;code>DispatcherServlet&lt;/code>处理, 而不需要先检查是否有对应path的route.&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;h2 id="过滤器">过滤器&lt;/h2>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15192707341614.jpg" alt="">&lt;/p>
&lt;h3 id="zuulserverautoconfiguration">ZuulServerAutoConfiguration&lt;/h3>
&lt;h4 id="servletdetectionfilter">ServletDetectionFilter&lt;/h4>
&lt;p>检查请求的入口是&lt;code>DispatcherServlet&lt;/code>还是&lt;code>ZuulServlet&lt;/code>
如果是&lt;code>DispatcherServlet&lt;/code>进来的请求, 将&lt;code>RequestContext&lt;/code>中的属性&lt;code>isDispatcherServletRequest&lt;/code>设置为ture.&lt;/p>
&lt;p>检查的方法是判断&lt;code>RequestContext&lt;/code>中的请求类型是否为&lt;code>HttpServletRequestWrapper&lt;/code>类型, 因为&lt;code>ZuulServlet&lt;/code>进来的请求会使用&lt;code>HttpServletRequestWrapper&lt;/code>进行再次封装; 同时检查请求中中是否有&lt;code>DispatcherServlet.CONTEXT&lt;/code>属性, 因为&lt;code>DispatcherServlet&lt;/code>进来的请求会带有该属性.&lt;/p>
&lt;h4 id="formbodywrapperfilter">FormBodyWrapperFilter&lt;/h4>
&lt;p>为下游的服务解析表单数据, 并重新编码. 只针对multipart/form-data和application/x-www-form-urlencoded类型的请求.&lt;/p>
&lt;h4 id="debugfilter">DebugFilter&lt;/h4>
&lt;p>通过设置&lt;code>zuul.debug.parameter&lt;/code>属性控制, 默认启用.
执行时将上下文中的&lt;code>debugRouting&lt;/code>和&lt;code>debugRequest&lt;/code>设置为&lt;code>true&lt;/code>&lt;/p>
&lt;h4 id="servlet30wrapperfilter">Servlet30WrapperFilter&lt;/h4>
&lt;p>使用&lt;code>Servlet30RequestWrapper&lt;/code>封装请求, 强制启用.&lt;/p>
&lt;h4 id="sendresponsefilter">SendResponseFilter&lt;/h4>
&lt;p>后执行的过滤器, 负责将代理请求的响应写入当前的请求的响应中.&lt;/p>
&lt;h3 id="zuulproxyautoconfiguration">ZuulProxyAutoConfiguration&lt;/h3>
&lt;h4 id="predecorationfilter">PreDecorationFilter&lt;/h4>
&lt;p>Pre类型的过滤器, 通过提供的RouteLocator决定将如何请求路由到哪里和如何路由. 同时为下游请求添加多个与代理相关的头信息. 当&lt;code>RequestContext&lt;/code>中不存在&lt;code>FORWARD_TO_KEY&lt;/code>和&lt;code>SERVICE_ID_KEY&lt;/code>信息时生效.&lt;/p>
&lt;p>将路由判断结果写入&lt;code>routeHost&lt;/code>, &lt;code>FORWARD_TO_KEY&lt;/code>或者&lt;code>SERVICE_ID_KEY&lt;/code>.&lt;/p>
&lt;h4 id="ribbonroutingfilter">RibbonRoutingFilter&lt;/h4>
&lt;p>Route类型的过滤器, 当&lt;code>RequestContext&lt;/code>中&lt;code>routeHost&lt;/code>为空, 且有&lt;code>serviceId&lt;/code>值时生效.&lt;/p>
&lt;p>使用&lt;code>RequestContext&lt;/code>构建&lt;code>RibbonCommandContext&lt;/code>, 通过&lt;code>RibbonCommandFactory&lt;/code>进而创建&lt;code>RibbonCommand&lt;/code>并执行. 最后通过&lt;code>ProxyRequestHelper&lt;/code>将响应结果记录到&lt;code>RequestContext&lt;/code>中.&lt;/p>
&lt;h4 id="simplehostroutingfilter">SimpleHostRoutingFilter&lt;/h4>
&lt;p>Route类型的过滤器, 当&lt;code>RequestContext&lt;/code>中的&lt;code>routeHost&lt;/code>不为空时生效. 使用Apache的HttpClient发送请求&lt;/p>
&lt;h2 id="监听器">监听器&lt;/h2>
&lt;h4 id="zuulrefreshlistener">ZuulRefreshListener&lt;/h4>
&lt;p>通过监听应用程序事件(&lt;code>ContextRefreshedEvent&lt;/code>, &lt;code>RefreshScopeRefreshedEvent&lt;/code>, &lt;code>RoutesRefreshedEvent&lt;/code>和&lt;code>RoutesRefreshedEvent&lt;/code>)更新handler mapping的注册信息. 前两个事件在&lt;code>ContextRefresh&lt;/code>时发出; 第三个是通过JMX重置路由时发出(参考&lt;code>RoutesMvcEndpoint&lt;/code>); 最后一个是&lt;code>DiscoveryClient&lt;/code>每次拉取服务注册信息后发出.&lt;/p>
&lt;p>收到事件后, 将&lt;code>ZuulHandlerMapping&lt;/code>的&lt;code>dirty&lt;/code>变量置为&lt;code>true&lt;/code>, 当下次请求进来时, 检查到&lt;code>dirty&lt;/code>为&lt;code>true&lt;/code>, 就会重新注册url mapping.&lt;/p>
&lt;h4 id="zuuldiscoveryrefreshlistener">ZuulDiscoveryRefreshListener&lt;/h4>
&lt;p>监听应用程序事件(&lt;code>InstanceRegisteredEvent&lt;/code>, &lt;code>ParentHeartbeatEvent&lt;/code>和&lt;code>HeartbeatEvent&lt;/code>)更新handler mapping的注册信息.&lt;/p>
&lt;p>&lt;code>InstanceRegisteredEvent&lt;/code>当前路由服务实例完成服务注册后发出的事件.
&lt;code>ParentHeartbeatEvent&lt;/code>当&lt;code>DiscoveryClient&lt;/code>定位到&lt;em>Config Server&lt;/em>服务的时候有&lt;code>bootstrapContext&lt;/code>发给应用程序上下文的事件.
&lt;code>HeartbeatEvent&lt;/code>由&lt;code>DiscoveryClient&lt;/code>每次拉取服务注册信息后发出.&lt;/p></description></item><item><title>初识Netflix Zuul</title><link>https://atbug.com/learn-netflix-zuul/</link><pubDate>Sun, 11 Feb 2018 10:07:18 +0000</pubDate><guid>https://atbug.com/learn-netflix-zuul/</guid><description>
&lt;p>嵌入式的zuul代理&lt;/p>
&lt;p>使用了Netfilx OSS的其他组件:&lt;/p>
&lt;ul>
&lt;li>Hystrix 熔断&lt;/li>
&lt;li>Ribbon 负责发送外出请求的客户端, 提供软件负载均衡功能&lt;/li>
&lt;li>Trubine 实时地聚合细粒度的metrics数据&lt;/li>
&lt;li>Archaius 动态配置&lt;/li>
&lt;/ul>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>由于2.0停止开发且会有bug, 故下面的分析基于1.x版本.&lt;/p>
&lt;h3 id="特性">特性&lt;/h3>
&lt;ul>
&lt;li>Authentication 认证&lt;/li>
&lt;li>Insights 洞察&lt;/li>
&lt;li>Stress Testing 压力测试&lt;/li>
&lt;li>Canary Testing 金丝雀测试&lt;/li>
&lt;li>Dynamic Routing 动态路由&lt;/li>
&lt;li>Multi-Region Resiliency 多区域弹性&lt;/li>
&lt;li>Load Shedding 负载脱落&lt;/li>
&lt;li>Security 安全&lt;/li>
&lt;li>Static Response handling 静态响应处理&lt;/li>
&lt;li>Multi-Region Resiliency 主动/主动流量管理&lt;/li>
&lt;/ul>
&lt;h3 id="zuul核心架构">Zuul核心架构&lt;/h3>
&lt;h4 id="过滤器加载器">过滤器加载器&lt;/h4>
&lt;p>从文件目录定时的监控文件, 编译成Class并加载到过滤器链中.&lt;/p>
&lt;h4 id="贯穿整个请求的requestcontext">贯穿整个请求的RequestContext&lt;/h4>
&lt;p>将Servlet的请求和响应初始化成&lt;code>RequestContext&lt;/code>, 保存在ThreadLocal中贯穿整个请求.&lt;/p>
&lt;p>以及添加Netfix库的指定概念和数据的扩展对象&lt;code>NFRequestContext&lt;/code>, 如&lt;code>Eureka&lt;/code>&lt;/p>
&lt;h4 id="四种过滤器">四种过滤器:&lt;/h4>
&lt;ul>
&lt;li>preRoute&lt;/li>
&lt;li>route&lt;/li>
&lt;li>postRoute&lt;/li>
&lt;li>error&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/1000/1*j9iGkeQ7bPK2nC1a7BgFOw.png" alt="Zuul Core Architecture">&lt;/p>
&lt;h3 id="zuul请求生命周期">Zuul请求生命周期&lt;/h3>
&lt;p>&lt;img src="https://camo.githubusercontent.com/4eb7754152028cdebd5c09d1c6f5acc7683f0094/687474703a2f2f6e6574666c69782e6769746875622e696f2f7a75756c2f696d616765732f7a75756c2d726571756573742d6c6966656379636c652e706e67" alt="Request Lifecycle">&lt;/p>
&lt;h3 id="zuul-netflix">Zuul Netflix&lt;/h3>
&lt;p>使用Netflix的其他组件&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/1*pz6sv69la9ek6yWNTPqymQ.png" alt="Netflix OSS libraries in Zuul">&lt;/p>
&lt;h3 id="zull在netfilx的应用">zull在Netfilx的应用&lt;/h3>
&lt;h4 id="精确路由">精确路由&lt;/h4>
&lt;p>创建一个过滤器是特定的用户或者设备的请求重定向到独立的API集群达到调试的目的.&lt;/p>
&lt;h4 id="多区域弹">多区域弹&lt;/h4>
&lt;p>Zuul是我们称为地峡(Isthmus)的多地区ELB弹性项目的核心. 作为Isthmus的一部分, Zuul被用来将请求从西海岸数据中心传送到东海岸, 以帮助我们在我们的关键领域的ELB中实现多区域冗余.&lt;/p>
&lt;h4 id="压力测试">压力测试&lt;/h4>
&lt;p>在&lt;code>Zuul&lt;/code>过滤器中使用动态&lt;code>Archaius&lt;/code>配置逐步提升进入一部分服务器的流量, 自动实现压力测试.&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;h3 id="如何工作">如何工作&lt;/h3>
&lt;h4 id="startserver初始化">StartServer初始化&lt;/h4>
&lt;p>实现了ServletContextListener接口, 如果需要与netflix oss其他组件集成(如Eureka, Archaius)实例化的时候启动一个Karyon服务器.&lt;/p>
&lt;p>在ServletContext初始化完成后调用&lt;code>initGroovyFilterManager&lt;/code>和&lt;code>initJavaFilters&lt;/code>.&lt;/p>
&lt;h5 id="initgroovyfiltermanager">initGroovyFilterManager&lt;/h5>
&lt;p>向过滤器注册表中添加Groovy过滤器.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">initGroovyFilterManager&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//设置GroovyCompiler
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//GroovyCompiler是DynamicCompiler的实现类
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">FilterLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">setCompiler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">GroovyCompiler&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//从配置中是获取过滤器源文件的根目录
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;zuul.filter.root&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">scriptRoot&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">separator&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//设置文件名过滤器, 这里只过滤`.groovy`类型文件.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">FilterFileManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilenameFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">GroovyFileFilter&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//初始化过滤器文件管理器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//第一个参数是扫描目录的间隔时间, 单位为秒
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//后面跟要扫描的子目录
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//1. 初始化的时候会扫描各个子目录, 使用文件名过滤器获取到所有的过滤器源文件.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//2. 遍历这些文件, 使用`FilterLoader.getInstance().putFilter(file)`, compiler编译之后使用FilterFactory进行实例化, 并添加到过滤器注册表中. 是否实例化的逻辑判断是否在上次修改且文件最后修改时间是否相同. 如果是上次修改之后又有改动, 要重建改类型过滤器的列表. 如果没有修改, 对改文件不做任何处理.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//3. 启动线程, 每个5秒执行一个1和2的操作.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">FilterFileManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">init&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;pre&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;route&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;post&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="initjavafilters">initJavaFilters&lt;/h5>
&lt;p>向过滤器注册表中添加Java过滤器.&lt;/p>
&lt;p>*官方没有提供从java源代码到classs的编译器.&lt;/p>
&lt;h4 id="zuulservlet">ZuulServlet&lt;/h4>
&lt;p>核心zuul servlet, 初始化和卸掉zullFilter的运行.
使用ZuulRunner将Servlet的请求和响应初始化成&lt;code>RequestContext&lt;/code>, 并将&lt;code>FilterProcessor&lt;/code>的调用包装成&lt;code>preRoute()&lt;/code>, &lt;code>route()&lt;/code>, &lt;code>postRoute()&lt;/code>和&lt;code>error()&lt;/code>方法. 初始化时可以选择将请求包装成&lt;code>HttpServletRequestWrapper&lt;/code>并缓冲请求消息体.&lt;/p>
&lt;p>初始化后的&lt;code>RequestContext&lt;/code>会放在&lt;code>ThreadLocal&lt;/code>中, 供后续的filter访问.&lt;/p>
&lt;p>&lt;strong>Service方法&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">service&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">javax&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">servlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ServletRequest&lt;/span> &lt;span class="n">servletRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">javax&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">servlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ServletResponse&lt;/span> &lt;span class="n">servletResponse&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">init&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">servletRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletResponse&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">servletResponse&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// Marks this request as having passed through the &amp;#34;Zuul engine&amp;#34;, as opposed to servlets
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// explicitly bound in web.xml, for which requests will not have the same data attached
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">RequestContext&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RequestContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setZuulEngineRan&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">preRoute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ZuulException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">postRoute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">route&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ZuulException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">postRoute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">postRoute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ZuulException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ZuulException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">500&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;UNHANDLED_EXCEPTION_&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">RequestContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">unset&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过&lt;code>FilterProcessor.getInstnace()&lt;/code>调用&lt;code>FilterProcessor&lt;/code>的&lt;code>preRoute()&lt;/code>, &lt;code>route()&lt;/code>, &lt;code>postRoute()&lt;/code>和&lt;code>error()&lt;/code>方法.&lt;/p>
&lt;p>四个方法都是通过&lt;code>FilterLoader.getInstance()&lt;/code>获取对应类型的filter列表.&lt;/p>
&lt;p>遍历filter列表, 调用filter的&lt;code>runFilter()&lt;/code>方法.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * runFilter checks !isFilterDisabled() and shouldFilter(). The run() method is invoked if both are true.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @return the return from ZuulFilterResult
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span> &lt;span class="nf">runFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ZuulFilterResult&lt;/span> &lt;span class="n">zr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//动态获取`zuul.filerClassName.filterType.disable`的值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//动态获取使用Archaius的DynamicPropertyFactory获取*, 通过这个可实现动态配置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">isFilterDisabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//调用filter类的校验逻辑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">shouldFilter&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Tracer&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TracerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">startMicroTracer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ZUUL::&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getSimpleName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//执行filter的逻辑处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//执行成功
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">zr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ExecutionStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SUCCESS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ZUUL::&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getSimpleName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; failed&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//执行失败
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">zr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ExecutionStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">FAILED&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">zr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stopAndLog&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//filter不适用, 直接跳过
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">zr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ExecutionStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SKIPPED&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">zr&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="contextlifecyclefilter">ContextLifecycleFilter&lt;/h4>
&lt;p>清空&lt;code>ThreadLocal&lt;/code>中的&lt;code>RequestContext&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServletRequest&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletResponse&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">chain&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">chain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">RequestContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">unset&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="调试">调试&lt;/h3>
&lt;p>调试信息中的名词&lt;/p>
&lt;ul>
&lt;li>ZUUL_DEBUG 输出zuul的诊断信息&lt;/li>
&lt;li>REQUEST_DUBG 输出Http请求的信息. REQUEST -&amp;gt; ZUUL -&amp;gt; ORIGIN_RESPONSE -&amp;gt; OUTBOUND
&lt;ul>
&lt;li>REQUEST 进入zuul的请求&lt;/li>
&lt;li>ZUUL zuul转发给原目标的请求&lt;/li>
&lt;li>ORIGIN_RESPONSE 原目标返回的原始响应&lt;/li>
&lt;li>OUTBOND zuul返回给客户端的响应&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="接口和类">接口和类&lt;/h2>
&lt;h3 id="接口">接口&lt;/h3>
&lt;h4 id="dynamiccodecompiler">DynamicCodeCompiler&lt;/h4>
&lt;p>从源代码编译成Classes的接口, 目前只有一个&lt;code>GroovyCompiler&lt;/code>实现类&lt;/p>
&lt;h4 id="filterfactory">FilterFactory&lt;/h4>
&lt;p>生成给定的过滤器类实例的接口, 实现类&lt;code>DefaultFilterFactory&lt;/code>&lt;/p>
&lt;h4 id="filterusagenotifier">FilterUsageNotifier&lt;/h4>
&lt;p>注册过滤器使用时的回调的接口&lt;/p>
&lt;h3 id="类">类&lt;/h3>
&lt;h4 id="defaultfilterfactory">DefaultFilterFactory&lt;/h4>
&lt;p>使用反射实现&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulFilter&lt;/span> &lt;span class="nf">newInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InstantiationException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IllegalAccessException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ZuulFilter&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="filterfilemanager">FilterFileManager&lt;/h4>
&lt;p>从过滤器目录中获取修改和新增的Groovy过滤器文件.&lt;/p>
&lt;h4 id="filterloader">FilterLoader&lt;/h4>
&lt;p>持有过滤器注册表, 加载过滤器.&lt;/p></description></item></channel></rss>