<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工具 on 乱世浮生</title><link>https://atbug.com/tags/%E5%B7%A5%E5%85%B7/</link><description>Recent content in 工具 on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 27 Oct 2023 04:55:13 +0800</lastBuildDate><atom:link href="https://atbug.com/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 k3sup 一分钟快速搭建 K3s 集群</title><link>https://atbug.com/setup-k3s-cluster-with-k3sup-in-one-minute/</link><pubDate>Fri, 27 Oct 2023 04:55:13 +0800</pubDate><guid>https://atbug.com/setup-k3s-cluster-with-k3sup-in-one-minute/</guid><description>背景 在平时的工作中，为了方便在纯净的环境中进行测试，我经常需要在本地或者公有云环境中频繁地搭建和销毁集群。有时是在 我的 HomeLab 环境中，虽然 CPU 不强但胜在内存够大；后来有了微软 MVP 赠送的 Azure 额度之后，我也会经常在 Azure 虚拟机 中搭建，因为没有拉取镜像的网络问题。
在两个环境中我通过 Terraform 实现了虚拟机的快速创建和销毁，然后在虚拟机上创建 K3s 集群。K3s 集群足够轻量级，并支持对组件的定制。结合 Alfred Snippets，我只需要 ssh 到虚拟机上并键入 k3si 就可以快速输入定制好的命令，然后再获取虚拟机上的 kubeconfig 文件并替换其中的 api-server 地址（这些也通过 snippet）解决：
export MASTER_IP=${MASTER_IP:-$(ip addr show eth0 | grep &amp;#39;inet &amp;#39; | awk &amp;#39;{print $2}&amp;#39; | cut -d/ -f1)} export INSTALL_K3S_VERSION=v1.</description></item><item><title>使用 Docker 运行 FRR BGP</title><link>https://atbug.com/run-frr-bgp-with-docker/</link><pubDate>Wed, 30 Aug 2023 13:13:48 +0800</pubDate><guid>https://atbug.com/run-frr-bgp-with-docker/</guid><description>之前写 在 Kubernetes 集群中使用 MetalLB 作为 LoadBalancer（下）- BGP 时，我曾在 OpenWRT 安装 FRR 来进行了测试。需要 OpenWRT 的环境不免会有些繁琐，假如只是做些更简单的测试，比如从 FRR 所在服务器上进行 VIP 的访问，则是不需要 OpenWRT 的，仅仅部署 FRR 就足够了。
今天我就尝试了直接使用 Docker 运行 FRR 来启动 BGP Router 进程，简单的几步即可实现，对环境要求非常低，只需要个 Docker 就行。如果你又更简单的方法，也请留言分享。
配置 创建一个本地目录在管理 FRR 配置，这个目录将会挂载到容器中。
mkdir frr 准备 FRR Daemon 的日志，开启 BGP daemon 进程。</description></item><item><title>使用 Fortio 做代理功能测试</title><link>https://atbug.com/use-fortio-for-proxy-test/</link><pubDate>Sat, 12 Aug 2023 01:11:46 +0800</pubDate><guid>https://atbug.com/use-fortio-for-proxy-test/</guid><description>介绍 Fortio 是一个用于微服务性能负载、性能、延迟测试和 Web UI 的工具。它通常与 Istio 和其他服务网格解决方案一起使用，但可以独立使用来测试网络延迟和 HTTP/gRPC 的负载特性。以下是关于 Fortio 的一些主要特点和信息：
用途：Fortio 可以创建一个定制的负载（查询/秒或 qps）并记录请求延迟的直方图，以及每秒查询的百分位数。 多协议支持：虽然最初是为 HTTP/1.1 设计的，但 Fortio 还支持 HTTP/2, gRPC, TCP 和 UDP。 Web UI：Fortio 提供了一个 Web 界面，使用户能够从浏览器中轻松配置测试并查看结果的直方图和百分位数。 结果存储：可以将结果存储为 JSON 文件，便于进一步的分析和比较。 灵活性：支持多种请求负载模式，包括固定 qps、固定并发连接数和最大自动调整 qps。 轻量级：Fortio 是用 Go 编写的，可以作为一个单一的二进制文件轻松部署。 集成：Fortio 可以与 Istio、Prometheus 等工具集成，以提供更深入的性能分析和观察。 Fortio 作为服务器 fortio server &amp;amp; 08:24:40.</description></item><item><title>Obsidian 图片上传插件：Image Upload Toolkit</title><link>https://atbug.com/obsidian-plugin-image-upload-toolkit/</link><pubDate>Thu, 08 Jun 2023 20:03:19 +0800</pubDate><guid>https://atbug.com/obsidian-plugin-image-upload-toolkit/</guid><description>这篇文章主要来介绍下我开发的 Obsidian 图片上传插件 Image Upload Toolkit。
背景 为什么开发这个插件？这还要从去年说起。
去年我感觉到使用了 6 年的 Mweb Pro 已经无法满足我的需求了，这并不是说 Mweb 不是个好产品，反而过去几年中我经常向身边的朋友推荐这个产品。Mweb 是个非常好的产品，功能多、快捷键方便、界面也满足我个人的审美，而且买断制的付费也很有吸引力。
随着这两年写的内容越来越多，Mweb 即使再多的功能也无法满足一些个性化的需求。就比如说内容自动排版，个人习惯中英文、数字间加上空格、段落间的空行，等等。这些都是 Mweb 这种封闭的产品无法实现的，尤其是对个人开发者（Mweb 是独立开发者开发的）来说，满足个性化需求的成本是非常大的。何况，众口难调。
后面我陆续使用了 NotePlan、Notion 一段时间，Notion 我个人还算喜欢，但其仍是封闭的产品，很难对其进行扩展。
正当我在朋友圈感慨时，有人推荐了 Obsidian。试用之后眼前一亮，这插件系统太强大了。比如上面的自动排版问题，使用 Linter 插件完美得到解决。
于是乎，我通过安装多种插件、将快捷键改成与 Mweb 一致，几乎是平移到了 Obsidian，并收获了更多的功能。唯独令人遗憾的是无法复刻 Mweb 的图片上传功能（我一直用阿里云的 OSS 作为图床，使用 Mweb 可以自动上传并替换 markdown 语法中的图片地址），每次编辑完需要发布到博客前我都要复制到 Mweb 中上传。</description></item><item><title>kubectl foreach 在多个集群中执行 kubectl 命令</title><link>https://atbug.com/multi-clusters-operation-with-kubectl-foreach/</link><pubDate>Thu, 01 Dec 2022 08:04:02 +0800</pubDate><guid>https://atbug.com/multi-clusters-operation-with-kubectl-foreach/</guid><description>上周在写 K8s 多集群的流量调度 的 demo 部分时需要不停地在多个集群中安装组件、部署应用，或者执行各种命令。当时是通过 Linux shell 脚本并通过工具 kubectx 进行集群的切换，像这样：
或者这样：
操作繁琐，很是痛苦。
今天偶然间发现了一个 kubectl 插件 kubectl foreach ，可以在多个集群（contexts）上执行 kubectl 命令。比如 kubectl foreach cluster-1 cluster-2 -- get po -n kube-system 。
插件安装和使用很简单，通过 krew 进行安装：
kubectl krew install foreach 使用也很简单：
kubectl foreach -h Usage: kubectl foreach [OPTIONS] [PATTERN].</description></item></channel></rss>