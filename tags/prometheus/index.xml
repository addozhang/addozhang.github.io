<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Prometheus on 乱世浮生</title><link>https://atbug.com/tags/prometheus/</link><description>Recent content in Prometheus on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 18 Jan 2022 12:03:59 +0800</lastBuildDate><atom:link href="https://atbug.com/tags/prometheus/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes HPA 基于 Prometheus 自定义指标的可控弹性伸缩</title><link>https://atbug.com/kubernetes-pod-autoscale-on-prometheus-metrics/</link><pubDate>Tue, 18 Jan 2022 12:03:59 +0800</pubDate><guid>https://atbug.com/kubernetes-pod-autoscale-on-prometheus-metrics/</guid><description>
&lt;p>在&lt;a href="https://mp.weixin.qq.com/s/GKS3DJHm4p0Tjtj8nJRGmA">《Kubernetes 的自动伸缩你用对了吗？》&lt;/a>
一文中详细说明了如何使用 Kubernetes 的自动伸缩。在 Kubernetes 中弹性伸缩主要有三种：HPA、VPA、CA。本文不再详细说明，有兴趣的可以看那篇文章。这里主要来说下 Pod 水平缩放 &lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/">HPA&lt;/a>。&lt;/p>
&lt;p>随着 Kubernetes v1.23 的发布，HPA 的 API 来到了稳定版 &lt;code>autoscaling/v2&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>基于自定义指标的伸缩&lt;/li>
&lt;li>基于多项指标的伸缩&lt;/li>
&lt;li>可配置的伸缩行为&lt;/li>
&lt;/ul>
&lt;p>从最初的 v1 版本 HPA 只支持 CPU、内存利用率的伸缩，到后来的自定义指标、聚合层 API 的支持，到了 v1.18 版本又加入了配置伸缩行为的支持，HPA 也越来越好用、可靠。&lt;/p>
&lt;p>依靠 CPU 或者内存指标的扩容并非使用所有系统，看起来也没那么可靠。对大部分的 web 后端系统来说，基于 RPS（每秒请求数）的弹性伸缩来处理突发的流量则会更加靠谱。&lt;/p>
&lt;p>Prometheus 也是当下流行开源监控系统，通过 Prometheus 可以获取到系统的实时流量负载指标，今天我们就来尝试下基于 Prometheus 的自定义指标进行弹性伸缩。&lt;/p>
&lt;p>&lt;strong>注：目前 HPA 的缩容0 （scale to 0），则需要在 feature gate 打开 alpha 版本的 &lt;code>HPAScaleToZero&lt;/code> 以及配置一个对象或者外部指标。即使是打开了，从 0 到 1 的扩容需要调度、IP 分配、镜像拉取等过程，存在一定的开销。如果降低这部分开销，这里先卖个关子，后续的文章进行补充。&lt;/strong>&lt;/p>
&lt;p>文章中使用的所有代码都可以&lt;a href="https://github.com/addozhang/hpa-on-prometheus-metrics">从这里下载&lt;/a>。&lt;/p>
&lt;h2 id="整体架构">整体架构&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2022/01/18/hpa2.png" alt="">&lt;/p>
&lt;p>HPA 要获取 Prometheus 的指标数据，这里引入 &lt;a href="https://github.com/kubernetes-sigs/prometheus-adapter">Prometheus Adapter&lt;/a> 组件。Prometheus Adapter 实现了 &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/resource-metrics-api.md">resource metrics&lt;/a>、&lt;a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/custom-metrics-api.md">custom metrics&lt;/a> 和 &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/external-metrics-api.md">external metrics APIs&lt;/a> API，支持 &lt;em>autoscaling/v2&lt;/em> 的 HPA。&lt;/p>
&lt;p>获取到指标数据后，根据预定义的规则对工作负载的示例数进行调整。&lt;/p>
&lt;h2 id="环境搭建">环境搭建&lt;/h2>
&lt;h3 id="k3s">K3s&lt;/h3>
&lt;p>我们使用最新 1.23 版本的 K3s 作为 Kubernetes 环境。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">export&lt;/span> &lt;span class="nv">INSTALL_K3S_VERSION&lt;/span>&lt;span class="o">=&lt;/span>v1.23.1+k3s2
curl -sfL https://get.k3s.io &lt;span class="p">|&lt;/span> sh -s - --write-kubeconfig-mode &lt;span class="m">644&lt;/span> --write-kubeconfig ~/.kube/config
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="示例应用">示例应用&lt;/h3>
&lt;p>我们准备一个简单的 web 应用，可以记录请求次数并通过 &lt;code>/metrics&lt;/code> 端点输出 Prometheus 格式的指标 &lt;code>http_requests_total&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">metrics&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">prometheus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewCounterVec&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">prometheus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CounterOpts&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;http_requests_total&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Help&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Number of total http requests&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;status&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nx">prometheus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustRegister&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">metrics&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResponseWriter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">path&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">URL&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Path&lt;/span>
&lt;span class="nx">statusCode&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">200&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="nx">path&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;/metrics&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">promhttp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Handler&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">ServeHTTP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">w&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WriteHeader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">statusCode&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">w&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello World!&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">metrics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithLabelValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">strconv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Itoa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">statusCode&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nf">Inc&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ListenAndServe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;:3000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将应用部署到集群：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f kubernetes/sample-httpserver-deployment.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="prometheus">Prometheus&lt;/h3>
&lt;p>使用 Helm 安装 Prometheus，先添加 prometheus 的 chart 仓库：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的测试只需要用到 prometheus-server，安装时禁用其他组件。&lt;strong>同时为了演示效果的实效性，将指标的拉取间隔设置为 &lt;code>10s&lt;/code>&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># install prometheus with some components disabled&lt;/span>
&lt;span class="c1"># set scrape interval to 10s&lt;/span>
helm install prometheus prometheus-community/prometheus -n default --set alertmanager.enabled&lt;span class="o">=&lt;/span>false,pushgateway.enabled&lt;span class="o">=&lt;/span>false,nodeExporter.enabled&lt;span class="o">=&lt;/span>false,kubeStateMetrics.enabled&lt;span class="o">=&lt;/span>false,server.global.scrape_interval&lt;span class="o">=&lt;/span>10s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过端口转发，可以在浏览器中访问 web 页面。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># port forward&lt;/span>
kubectl port-forward svc/prometheus-server 9090:80 -n prometheus
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里查询 Pod 的 RPS 使用 &lt;code>sum(rate(http_requests_total[30s])) by (pod)&lt;/code> 语句查询：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2022/01/18/20220118-at-112123.png" alt="">&lt;/p>
&lt;h3 id="prometheus-adapter">Prometheus Adapter&lt;/h3>
&lt;p>同样使用 Helm 安装 Produmetheus Adapter，这里要进行额外的配置。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">helm install prometheus-adapter prometheus-community/prometheus-adapter -n default -f kubernetes/values-adapter.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了要配置 Prometheus server 的访问方式外，还要配置自定义指标的计算规则，告诉 adapter 如何从 Prometheus 获取指标并计算出我们需要的指标：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">rules:
default: false
custom:
- seriesQuery: &amp;#39;{__name__=~&amp;#34;^http_requests.*_total$&amp;#34;,container!=&amp;#34;POD&amp;#34;,namespace!=&amp;#34;&amp;#34;,pod!=&amp;#34;&amp;#34;}&amp;#39;
resources:
overrides:
namespace: { resource: &amp;#34;namespace&amp;#34; }
pod: { resource: &amp;#34;pod&amp;#34; }
name:
matches: &amp;#34;(.*)_total&amp;#34;
as: &amp;#34;${1}_qps&amp;#34;
metricsQuery: sum(rate(&amp;lt;&amp;lt;.Series&amp;gt;&amp;gt;{&amp;lt;&amp;lt;.LabelMatchers&amp;gt;&amp;gt;}[30s])) by (&amp;lt;&amp;lt;.GroupBy&amp;gt;&amp;gt;)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以参考详细的 &lt;a href="https://github.com/kubernetes-sigs/prometheus-adapter/blob/master/docs/sample-config.yaml">Adapter 配置&lt;/a>。&lt;/p>
&lt;p>待 promethues-adapter pod 成功运行后，可以执行 &lt;code>custom.metrics.k8s.io&lt;/code> 请求：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl get --raw &lt;span class="s1">&amp;#39;/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pods/*/http_requests_qps&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> jq .
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;kind&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;MetricValueList&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;apiVersion&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;custom.metrics.k8s.io/v1beta1&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;metadata&amp;#34;&lt;/span>: &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;selfLink&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pods/%2A/http_requests_qps&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;items&amp;#34;&lt;/span>: &lt;span class="o">[&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;describedObject&amp;#34;&lt;/span>: &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;kind&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;Pod&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;namespace&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;sample-httpserver-64c495844f-b58pl&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;apiVersion&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;/v1&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;metricName&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;http_requests_qps&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;timestamp&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;2022-01-18T03:32:51Z&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;value&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;100m&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;selector&amp;#34;&lt;/span>: null
&lt;span class="o">}&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意：这里的 &lt;code>value: 100m&lt;/code>，值的后缀“m” 标识 &lt;code>milli-requests per seconds&lt;/code>，所以这里的 100m 的意思是 0.1/s 每秒0.1 个请求。&lt;/strong>&lt;/p>
&lt;h3 id="hpa">HPA&lt;/h3>
&lt;p>最后就是 HPA 的配置了：&lt;/p>
&lt;ol>
&lt;li>最小最大的副本数分别设置 1、10&lt;/li>
&lt;li>为了测试效果的实效性，设置扩缩容的行为 &lt;code>behavior&lt;/code>&lt;/li>
&lt;li>指定指标 &lt;code>http_requests_qps&lt;/code>、类型 &lt;code>Pods&lt;/code> 以及目标值 &lt;code>50000m&lt;/code>：表示平均每个 pod 的 RPS &lt;code>50&lt;/code> 。比如以 300 的 RPS 访问，副本数就是 300/50=6 。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HorizontalPodAutoscaler&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">autoscaling/v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sample-httpserver&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scaleTargetRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sample-httpserver&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">minReplicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">maxReplicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">behavior&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scaleDown&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stabilizationWindowSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policies&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Percent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">100&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">15&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scaleUp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stabilizationWindowSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policies&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Percent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">100&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">15&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metrics&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pods&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pods&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metric&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http_requests_qps&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">target&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">AverageValue&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">averageValue&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">50000m&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;p>测试工具选用 &lt;a href="https://github.com/tsenart/vegeta">&lt;code>vegeta&lt;/code>&lt;/a>，因为其可以指定 RPS。&lt;/p>
&lt;p>先为应用创建 NodePort service：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl expose deploy sample-httpserver --name sample-httpserver-host --type NodePort --target-port &lt;span class="m">3000&lt;/span>
kubectl get svc sample-httpserver-host
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
sample-httpserver-host NodePort 10.43.66.206 &amp;lt;none&amp;gt; 3000:31617/TCP 12h
&lt;/code>&lt;/pre>&lt;/div>&lt;p>分别使用 &lt;code>240&lt;/code>、&lt;code>120&lt;/code>、&lt;code>40&lt;/code> 的 RPS 发起请求：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 240&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;GET http://192.168.1.92:31617&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> vegeta attack -duration 60s -connections &lt;span class="m">10&lt;/span> -rate &lt;span class="m">240&lt;/span> &lt;span class="p">|&lt;/span> vegeta report
&lt;span class="c1"># 120&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;GET http://192.168.1.92:31617&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> vegeta attack -duration 60s -connections &lt;span class="m">10&lt;/span> -rate &lt;span class="m">120&lt;/span> &lt;span class="p">|&lt;/span> vegeta report
&lt;span class="c1"># 40&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;GET http://192.168.1.92:31617&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> vegeta attack -duration 60s -connections &lt;span class="m">10&lt;/span> -rate &lt;span class="m">40&lt;/span> &lt;span class="p">|&lt;/span> vegeta report
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从 Prometheus 的 web 界面上观察请求量与示例数的变化：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2022/01/18/20220118-at-091913.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2022/01/18/20220118-at-091941.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl describe hpa sample-httpserver
Warning: autoscaling/v2beta2 HorizontalPodAutoscaler is deprecated in v1.23+, unavailable in v1.26+&lt;span class="p">;&lt;/span> use autoscaling/v2 HorizontalPodAutoscaler
Name: sample-httpserver
Namespace: default
Labels: &amp;lt;none&amp;gt;
Annotations: &amp;lt;none&amp;gt;
CreationTimestamp: Mon, &lt;span class="m">17&lt;/span> Jan &lt;span class="m">2022&lt;/span> 23:18:46 +0800
Reference: Deployment/sample-httpserver
Metrics: &lt;span class="o">(&lt;/span> current / target &lt;span class="o">)&lt;/span>
&lt;span class="s2">&amp;#34;http_requests_qps&amp;#34;&lt;/span> on pods: 100m / &lt;span class="m">50&lt;/span>
Min replicas: &lt;span class="m">1&lt;/span>
Max replicas: &lt;span class="m">10&lt;/span>
Behavior:
Scale Up:
Stabilization Window: &lt;span class="m">0&lt;/span> seconds
Select Policy: Max
Policies:
- Type: Percent Value: &lt;span class="m">100&lt;/span> Period: &lt;span class="m">15&lt;/span> seconds
Scale Down:
Stabilization Window: &lt;span class="m">30&lt;/span> seconds
Select Policy: Max
Policies:
- Type: Percent Value: &lt;span class="m">100&lt;/span> Period: &lt;span class="m">15&lt;/span> seconds
Deployment pods: &lt;span class="m">1&lt;/span> current / &lt;span class="m">1&lt;/span> desired
Conditions:
Type Status Reason Message
---- ------ ------ -------
AbleToScale True ReadyForNewScale recommended size matches current size
ScalingActive True ValidMetricFound the HPA was able to successfully calculate a replica count from pods metric http_requests_qps
ScalingLimited False DesiredWithinRange the desired count is within the acceptable range
Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Normal SuccessfulRescale 25m horizontal-pod-autoscaler New size: 6&lt;span class="p">;&lt;/span> reason: pods metric http_requests_qps above target
Normal SuccessfulRescale 19m horizontal-pod-autoscaler New size: 4&lt;span class="p">;&lt;/span> reason: All metrics below target
Normal SuccessfulRescale 12m &lt;span class="o">(&lt;/span>x2 over 9h&lt;span class="o">)&lt;/span> horizontal-pod-autoscaler New size: 4&lt;span class="p">;&lt;/span> reason: pods metric http_requests_qps above target
Normal SuccessfulRescale 11m horizontal-pod-autoscaler New size: 5&lt;span class="p">;&lt;/span> reason: pods metric http_requests_qps above target
Normal SuccessfulRescale 9m40s &lt;span class="o">(&lt;/span>x2 over 12m&lt;span class="o">)&lt;/span> horizontal-pod-autoscaler New size: 2&lt;span class="p">;&lt;/span> reason: pods metric http_requests_qps above target
Normal SuccessfulRescale 9m24s &lt;span class="o">(&lt;/span>x4 over 10h&lt;span class="o">)&lt;/span> horizontal-pod-autoscaler New size: 3&lt;span class="p">;&lt;/span> reason: pods metric http_requests_qps above target
Normal SuccessfulRescale 7m54s &lt;span class="o">(&lt;/span>x3 over 9h&lt;span class="o">)&lt;/span> horizontal-pod-autoscaler New size: 2&lt;span class="p">;&lt;/span> reason: All metrics below target
Normal SuccessfulRescale 7m39s &lt;span class="o">(&lt;/span>x4 over 9h&lt;span class="o">)&lt;/span> horizontal-pod-autoscaler New size: 1&lt;span class="p">;&lt;/span> reason: All metrics below target
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>基于自定义指标比如每秒请求量进行应用的水平扩容相比 CPU/内存 作为依据更加靠谱，适用于大部分的 web 系统。在突发流量时可以进行快速扩容，通过对伸缩行为的控制，可以减少副本数的抖动。Promeheus 作为流行应用的监控系统，在 Adapter 和 Aggregate API 的支持下，可以作为伸缩的指标。&lt;/p>
&lt;p>目前 HPA 的 &lt;em>scale to 0&lt;/em> 还在 alpha 的阶段，还需要关注副本从 0 到 N 的实效性。如果最小副本数大于0 ，对某些服务来说又会占用资源。接下来，我们会为尝试解决 0 到 N 的性能，以及资源占用的问题。&lt;/p></description></item><item><title>开箱即用的 Prometheus 告警规则集</title><link>https://atbug.com/introduction-awesome-prometheus-alerts/</link><pubDate>Thu, 13 May 2021 08:01:00 +0800</pubDate><guid>https://atbug.com/introduction-awesome-prometheus-alerts/</guid><description>
&lt;p>在配置系统监控的时候，是不是即使绞尽脑汁监控的也还是不够全面，或者不知如何获取想要的指标。&lt;/p>
&lt;p>&lt;a href="https://awesome-prometheus-alerts.grep.to/">Awesome Prometheus alerts&lt;/a> 维护了一套开箱即用的 Prometheus 告警规则集合，有 300 多个告警规则。同时，还是说明如何获取对应的指标。这些规则，对每个 Prometheus 都是通用的。&lt;/p>
&lt;p>涉及如主机、硬件、容器等基础资源，到数据库、消息代理、运行时、反向代理、负责均衡器，运行时、服务编排，甚至是网络层面和 Prometheus 自身和集群。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/13/alertrulescover.png" alt="alert_rules">&lt;/p>
&lt;p>Prometheus 的安装和配置不做赘述，配置可以看&lt;a href="https://awesome-prometheus-alerts.grep.to/alertmanager">这里&lt;/a>。下面简单看下几个常用规则&lt;/p>
&lt;h3 id="主机和硬件资源">主机和硬件资源&lt;/h3>
&lt;p>主机和硬件资源的告警依赖 &lt;a href="https://github.com/prometheus/node_exporter">node-exporter&lt;/a> 输出的指标。例如：&lt;/p>
&lt;h4 id="内存不足">内存不足&lt;/h4>
&lt;p>可用内存低于阈值 &lt;code>10%&lt;/code> 就会触发告警。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HostOutOfMemory&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 &amp;lt; 10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Host out of memory (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Node memory is filling up (&amp;lt; 10% left)\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="主机异常的网络吞吐">主机异常的网络吞吐&lt;/h5>
&lt;p>最近两分钟入站的流量超过 &lt;code>100m&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>rate&lt;/code> 语法见&lt;a href="https://prometheus.io/docs/prometheus/latest/querying/functions/#rate">这里&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HostUnusualNetworkThroughputIn&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sum by (instance) (rate(node_network_receive_bytes_total[2m])) / 1024 / 1024 &amp;gt; 100&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">5m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Host unusual network throughput in (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Host network interfaces are probably receiving too much data (&amp;gt; 100 MB/s)\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="mysql">Mysql&lt;/h3>
&lt;p>Mysql 的告警依赖 &lt;a href="https://github.com/prometheus/mysqld_exporter">prometheus/mysqld_exporter&lt;/a> 输出的指标。&lt;/p>
&lt;h4 id="连接数过多">连接数过多&lt;/h4>
&lt;p>Mysql 实例的连接数最近一分钟的连接数超过最大值的 &lt;code>80%&lt;/code> 触发告警&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MysqlTooManyConnections(&amp;gt;80%)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">avg by (instance) (rate(mysql_global_status_threads_connected[1m])) / avg by (instance) (mysql_global_variables_max_connections) * 100 &amp;gt; 80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MySQL too many connections (&amp;gt; 80%) (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;More than 80% of MySQL connections are in use on {{ $labels.instance }}\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="慢查询">慢查询&lt;/h4>
&lt;p>最近一分钟慢查询数量大于 0 时触发。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MysqlSlowQueries&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">increase(mysql_global_status_slow_queries[1m]) &amp;gt; 0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MySQL slow queries (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;MySQL server mysql has some new slow query.\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="运行时-jvm">运行时 JVM&lt;/h3>
&lt;p>JVM 的运行时告警，居然只有可怜巴巴的一个。堆空间占用超过 &lt;code>80%&lt;/code> 触发告警。&lt;/p>
&lt;p>依赖 &lt;a href="https://github.com/prometheus/client_java">java-client&lt;/a> 输出的指标。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">JvmMemoryFillingUp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">(sum by (instance)(jvm_memory_used_bytes{area=&amp;#34;heap&amp;#34;}) / sum by (instance)(jvm_memory_max_bytes{area=&amp;#34;heap&amp;#34;})) * 100 &amp;gt; 80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">JVM memory filling up (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;JVM memory is filling up (&amp;gt; 80%)\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="kubernetes">Kubernetes&lt;/h3>
&lt;p>Kubernetes 相关的告警规则有 33 个，比较丰富。&lt;/p>
&lt;p>摘个比较常见的：容器OOM告警。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">KubernetesContainerOomKiller&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">(kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m &amp;gt;= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason=&amp;#34;OOMKilled&amp;#34;}[10m]) == 1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">0m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Kubernetes container oom killer (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ssl-证书过期">SSL 证书过期&lt;/h3>
&lt;p>通过 &lt;a href="https://github.com/ribbybibby/ssl_exporter">&lt;/a> 输出的指标，可以监控证书过期：未来 &lt;code>7 天&lt;/code> 有证书过期便会触发告警。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">SslCertificateExpiry(&amp;lt;7Days)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ssl_verified_cert_not_after{chain_no=&amp;#34;0&amp;#34;} - time() &amp;lt; 86400 * 7&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">0m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">SSL certificate expiry (&amp;lt; 7 days) (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;{{ $labels.instance }} Certificate is expiring in 7 days\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>今天列出来的也仅仅是冰山一角，而且用户也可以&lt;a href="https://github.com/samber/awesome-prometheus-alerts#-contributing">贡献&lt;/a>出更多的规则。&lt;/p></description></item></channel></rss>