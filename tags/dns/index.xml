<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DNS on 乱世浮生</title><link>https://atbug.com/tags/dns/</link><description>Recent content in DNS on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 15 Jul 2023 16:29:56 +0800</lastBuildDate><atom:link href="https://atbug.com/tags/dns/index.xml" rel="self" type="application/rss+xml"/><item><title>追踪 Kubernetes 中的 DNS 查询</title><link>https://atbug.com/tracing-dns-queries-in-kubernetes/</link><pubDate>Sat, 15 Jul 2023 16:29:56 +0800</pubDate><guid>https://atbug.com/tracing-dns-queries-in-kubernetes/</guid><description>在过去的文章中，我们曾 追踪过 Kubernetes 中的网络数据包，这篇文章将追踪 Kubernetes 中的 DNS 查询。
让我们以在 Pod 中解析 Service 完全限定域名（FQDN） foo.bar.svc.cluster.local 为例。
在开始之前，先回顾下 DNS 的解析流程。
DNS 的解析流程 简化版的 DNS 处理流程：
DNS 客户端（如浏览器、应用程序或者设备）发送域名 example.com 的查询请求。 DNS 解析器收到请求，查询本地缓存，如果本地有记录且未过期会返回本地的记录。 如果本地缓存未命中，DNS 解析器将从 DNS 根服务器开始向下查询，首先是顶级域名（Top Level Domain, TLD） DNS 服务器（这里是 .com），一直向下直到可以解析 example.com 的服务器。 能够解析 example.</description></item><item><title>浅析 CoreDNS 的工作机制</title><link>https://atbug.com/analysis-of-the-working-mechanism-of-coredns/</link><pubDate>Sat, 15 Jul 2023 13:05:47 +0800</pubDate><guid>https://atbug.com/analysis-of-the-working-mechanism-of-coredns/</guid><description>CoreDNS 是一个开源的域名系统（DNS）服务器，用于将域名解析为 IP 地址以实现网络通信。它是一个用 Go 语言编写的可扩展 DNS 服务器，旨在取代传统的 DNS 服务器并提供更灵活、可配置的解析方案。
CoreDNS 提供了模块化的插件系统，允许用户根据需求选择和组合插件，以定制 DNS 服务器的功能和行为。通过添加不同的插件，用户可以实现缓存、转发、重写、策略路由、服务发现等功能，从而满足各种复杂的域名解析需求。
插件由设置（Setup）、**注册（Registration）和处理程序（Handler）**部分组成。
Setup 程序解析配置和插件的指令。 Handler 是处理查询并实现所有逻辑的代码。 Registration 是在 CoreDNS 中注册插件 - 这在编译 CoreDNS 时完成。服务器可以使用所有注册的插件，每个服务器中配置哪些插件的决定在运行时进行，并在 CoreDNS 的配置文件 Corefile 中完成。 安装运行 在 macOS 上安装 CoreDNS：
brew install coredns 可以执行 coredns -plugins 来查看已经安装的插件：</description></item></channel></rss>