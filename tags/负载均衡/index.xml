<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>负载均衡 on 乱世浮生</title><link>https://atbug.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link><description>Recent content in 负载均衡 on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 05 May 2018 11:18:05 +0000</lastBuildDate><atom:link href="https://atbug.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Cloud Ribbon 详解</title><link>https://atbug.com/spring-cloud-ribbon-breakdown-1/</link><pubDate>Sat, 05 May 2018 11:18:05 +0000</pubDate><guid>https://atbug.com/spring-cloud-ribbon-breakdown-1/</guid><description>
&lt;p>客户端负载均衡, Ribbon的核心概念是命名的客户端.&lt;/p>
&lt;h2 id="使用">使用&lt;/h2>
&lt;h3 id="引入ribbon依赖和配置">引入Ribbon依赖和配置&lt;/h3>
&lt;p>加入&lt;code>spring-cloud-starter-netflix-ribbon&lt;/code>依赖&lt;/p>
&lt;h3 id="代码中使用ribbonclient注解">代码中使用RibbonClient注解&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@RibbonClient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">configuration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FooConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TestConfiguration&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span> &lt;span class="kd">protected&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FooConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZonePreferenceServerListFilter&lt;/span> &lt;span class="nf">serverListFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ZonePreferenceServerListFilter&lt;/span> &lt;span class="n">filter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZonePreferenceServerListFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">filter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setZone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;myTestZone&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">filter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">IPing&lt;/span> &lt;span class="nf">ribbonPing&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">PingUrl&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ribbon客户端的配置, 如果不指定会使用默认的实现:&lt;/p>
&lt;ul>
&lt;li>IClientConfig 客户端相关配置&lt;/li>
&lt;li>IRule 定义负载均衡策略&lt;/li>
&lt;li>IPing 定义如何ping目标服务实例来判断是否存活, ribbon使用单独的线程每隔一段时间(默认10s)对本地缓存的ServerList做一次检查&lt;/li>
&lt;li>ServerList&lt;!-- raw HTML omitted --> 定义如何获取服务实例列表. 两种实现基于配置的&lt;code>ConfigurationBasedServerList&lt;/code>和基于Eureka服务发现的&lt;code>DiscoveryEnabledNIWSServerList&lt;/code>&lt;/li>
&lt;li>ServerListFilter&lt;!-- raw HTML omitted --> 用来使用期望的特征过滤静态配置动态获得的候选服务实例列表. 若未提供, 默认使用&lt;code>ZoneAffinityServerListFilter&lt;/code>&lt;/li>
&lt;li>ILoadBalancer 定义了软负载均衡器的操作的接口. 一个典型的负载均衡器至少需要一组用来做负载均衡的服务实例, 一个标记某个服务实例不在旋转中的方法, 和对应的方法调用从实例列表中选出某一个服务实例.&lt;/li>
&lt;li>ServerListUpdater DynamicServerListLoadBalancer用来更新实例列表的策略(推&lt;code>EurekaNotificationServerListUpdater&lt;/code>/拉&lt;code>PollingServerListUpdater&lt;/code>, 默认是拉)&lt;/li>
&lt;/ul>
&lt;h2 id="分析">分析&lt;/h2>
&lt;p>类结构&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/Ribbon.png" alt="Ribbon">&lt;/p>
&lt;h3 id="实现">实现&lt;/h3>
&lt;p>实际使用中, 服务调用使用RestTemplate, 请求地址为&lt;code>http://&amp;lt;serviceName&amp;gt;/&amp;lt;path&amp;gt;&lt;/code>, 如&lt;code>http://foo/&lt;/code>
通过&lt;code>@RibbonClient&lt;/code>注解为服务创建ribbon客户端, 名字为方法名. RestTemplate发送请求的时候, 请求会被&lt;code>LoadBalancerInterceptor&lt;/code>拦截到, 使用服务对应的ribbon客户端. Ribbon客户端的&lt;code>LoadBalancer&lt;/code>会从&lt;code>ServerList&lt;/code>中根据&lt;code>IRule&lt;/code>的规则选择某个服务实例作为请求对象. &lt;code>ServerList&lt;/code>有动态的实现, 更新列表时会使用&lt;code>ServerListFilter&lt;/code>进行过滤.&lt;/p>
&lt;h4 id="ribbonclient注解">RibbonClient注解&lt;/h4>
&lt;p>从注释上&lt;code>@RibbonClient&lt;/code>为一个ribbon客户端声明配置信息. 把这个注解加在任何&lt;code>@Configuration&lt;/code>标注的类上, 然后注入&lt;code>SpringClientFactory&lt;/code>来访问创建的客户端.&lt;/p>
&lt;p>从代码上看&lt;code>@RibbonClient&lt;/code>引入了&lt;code>RibbonClientConfigurationRegistrar&lt;/code>. &lt;code>RibbonClientConfigurationRegistrar&lt;/code>实现了&lt;code>ImportBeanDefinitionRegistrar&lt;/code>接口, 在&lt;code>@Configuration&lt;/code>的解析极端调用接口的&lt;code>registerBeanDefinitions&lt;/code>方法, 为ribbon客户端创建BeanDefinition
使用&lt;code>name/value&lt;/code>和&lt;code>configuration&lt;/code>创建一个&lt;code>BeanDefinition&lt;/code>. Definition的名为&lt;code>&amp;lt;name&amp;gt;.RibbonClientSpecification&lt;/code>, class为&lt;code>RibbonClientSpecification&lt;/code>.&lt;/p>
&lt;p>&lt;code>FooConfiguration.class&lt;/code>也要使用&lt;code>@Configuration&lt;/code>注解, 然后通过&lt;code>RibbonClientConfigurationRegistrar&lt;/code>关联到Ribbon客户端的BeanDefinition. 所以&lt;strong>不能把FooConfiguration放到@ComponentScan的上下文中, 同样@SpringBootApplication也不行. 必要时使用exclude排除&lt;/strong>, 否则会变成所有Ribbon客户端共享.&lt;/p>
&lt;p>&lt;code>RibbonAutoConfiguration&lt;/code>中在创建&lt;code>SpringClientFactory&lt;/code>bean时, 会注入这些&lt;code>RibbonClientSpecification&lt;/code>. &lt;code>SpringClientFactory&lt;/code>继承了类&lt;code>NamedContextFactory&lt;/code>. 从注释看&lt;code>NamedContextFactory&lt;/code>可以创建一组子上下文, 每个子上下文中可以使用一组的Specification来定义bean. 对于Ribbon来说, 每个ribbon客户端各自为一个子上下文, &lt;code>@RibbonClient&lt;/code>的&lt;code>configuration&lt;/code>指定的配置, 就是用来构建该子上下文的配置, 最终被用来构建ribbon客户端. 这些上下文有共同的父上下文, 即&lt;code>ApplicationContext&lt;/code>. 这就是为什么上面提到的&lt;code>FooConfiguration&lt;/code>不能置于&lt;code>ApplicationContext&lt;/code>中, 否则会被所有的Ribbon客户端共享配置.&lt;/p>
&lt;h4 id="loadbalancerautoconfiguration配置类">LoadBalancerAutoConfiguration配置类&lt;/h4>
&lt;p>通过&lt;code>RibbonAutoConfiguration&lt;/code>引入, 定义了几个重要的bean:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>LoadBalancerRequestFactory&lt;/code>: 1) 将Http请求封装成&lt;code>ServiceRequestWrapper&lt;/code>. &lt;code>ServiceRequestWrapper&lt;/code>继承并重写了&lt;code>HttpRquestWrapper&lt;/code>的&lt;code>getURI&lt;/code>方法: 调用&lt;code>LoadBalancerClient&lt;/code>的&lt;code>reconstructURI&lt;/code>方法,创建实际请求的地址. 2) 如果有提供&lt;code>LoadBalancerRequestTransformer&lt;/code>的实例, 则使用这些实例对相求进行响应的转换.
&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15254831654150.jpg" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>LoadBalancerInterceptor&lt;/code>: Http请求拦截器, 将请求的&lt;code>host&lt;/code>作为&lt;code>serviceName&lt;/code>并使用&lt;code>LoadBalancerRequestFactory&lt;/code>封装请求, 调用&lt;code>LoadBalancerClient&lt;/code>的&lt;code>execute&lt;/code>方法, 发送请求到真实的服务实例地址, 返回响应&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>RestTemplateCustomizer&lt;/code>: 提供一个&lt;code>RestTemplateCustomizer&lt;/code>的匿名类实现, 为所有的RestTemplate实例添加一个&lt;code>LoadBalancerInterceptor&lt;/code>拦截器&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="ribbonautoconfiguration配置类">RibbonAutoConfiguration配置类&lt;/h4>
&lt;p>通过spring.factories引入, &lt;code>RibbonAutoConfiguration&lt;/code>定义了几个重要的bean:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>SpringClientFactory&lt;/code>: 使用&lt;code>@RibbonClient&lt;/code>注解引入的ribbon客户端的配置, 构建ribbon客户端的子上下文, 初始化ribbon客户端bean. 四个get方法, 分别返回对应&lt;strong>service&lt;/strong>的&lt;code>IClient&lt;/code>, &lt;code>ILoadBalancer&lt;/code>, &lt;code>IClientConfig&lt;/code>, &lt;code>RibbonLoadBalancerContext&lt;/code>实例.
&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15254844516099.jpg" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>LoadBalancerClient&lt;/code>: 使用Spring Cloud提供的实现&lt;code>RibbonLoadBalancerClient&lt;/code>. 通过&lt;code>SpringClientFactory&lt;/code>创建一个&lt;code>ILoadBalancer&lt;/code>实例, 通过&lt;code>ILoadBalancer&lt;/code>返回一个&lt;code>Server&lt;/code>实例. 使用&lt;code>Server&lt;/code>实例.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>reconstructURI(): 通过&lt;code>SpringClientFactory&lt;/code>获取该服务ribbon客户端子上下文&lt;code>RibbonLoadBalancerContext&lt;/code>对象, 调用&lt;code>RibbonLoadBalancerContext&lt;/code>的&lt;code>reconstructURIWithServer&lt;/code>方法构建最终的请求地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>choose(): 通过&lt;code>SpringClientFactory&lt;/code>获取该服务的服务均衡器, 使用负载均衡器的&lt;code>IRule&lt;/code>返回服务实例.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>execute(): 执行最终的请求, 并记录状态: &lt;code>ServerStats&lt;/code>和&lt;code>Stopwatch&lt;/code>&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15254847309993.jpg" alt="">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>