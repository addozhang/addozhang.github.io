<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring-boot on 乱世浮生</title><link>https://atbug.com/tags/spring-boot/</link><description>Recent content in Spring-boot on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 22 Oct 2019 09:27:03 +0800</lastBuildDate><atom:link href="https://atbug.com/tags/spring-boot/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot 2.2.0 发布</title><link>https://atbug.com/spring-boot-2-2-0-release/</link><pubDate>Tue, 22 Oct 2019 09:27:03 +0800</pubDate><guid>https://atbug.com/spring-boot-2-2-0-release/</guid><description>
&lt;p>译自: &lt;a href="https://spring.io/blog/2019/10/16/spring-boot-2-2-0">https://spring.io/blog/2019/10/16/spring-boot-2-2-0&lt;/a>&lt;/p>
&lt;h3 id="组件升级">组件升级&lt;/h3>
&lt;ul>
&lt;li>Spring AMQP 2.2&lt;/li>
&lt;li>Spring Batch 4.2&lt;/li>
&lt;li>Spring Data Moore&lt;/li>
&lt;li>Spring Framework 5.2&lt;/li>
&lt;li>Spring HATEOAS 1.0&lt;/li>
&lt;li>Spring Integration 5.2&lt;/li>
&lt;li>Spring Kafka 2.3&lt;/li>
&lt;li>Spring Security 5.2&lt;/li>
&lt;li>Spring Session Corn&lt;/li>
&lt;/ul>
&lt;h3 id="第三方库升级">第三方库升级&lt;/h3>
&lt;ul>
&lt;li>Elasticsearch 6.7&lt;/li>
&lt;li>Flyway 6.0&lt;/li>
&lt;li>Jackson 2.10&lt;/li>
&lt;li>JUnit 5.5&lt;/li>
&lt;li>Micrometer 1.3&lt;/li>
&lt;li>Reactor Dysprosium&lt;/li>
&lt;li>Solr 8.0&lt;/li>
&lt;/ul>
&lt;h3 id="性能提升">性能提升&lt;/h3>
&lt;h4 id="延迟初始化lazy-initialization">延迟初始化(Lazy initialization)&lt;/h4>
&lt;p>支持开启全局延迟加载&lt;code>spring.main.lazy-initialization&lt;/code>. 代价:&lt;/p>
&lt;ul>
&lt;li>初次处理HTTP请求耗时长&lt;/li>
&lt;li>本应在启动初始化时出现的问题, 延后出现&lt;/li>
&lt;/ul>
&lt;p>更多参考: &lt;a href="https://spring.io/blog/2019/03/14/lazy-initialization-in-spring-boot-2-2">https://spring.io/blog/2019/03/14/lazy-initialization-in-spring-boot-2-2&lt;/a>&lt;/p>
&lt;h3 id="java-13支持">Java 13支持&lt;/h3>
&lt;p>跟随Spring Framework5.2对Java 13的支持, Spring Boot 2.2现在也支持了Java13. 同时兼容Java 11和8.&lt;/p>
&lt;h3 id="不可变的configurationproperties绑定">不可变的&lt;code>@ConfigurationProperties&lt;/code>绑定&lt;/h3>
&lt;p>现在加入了基于构造器的绑定, 允许&lt;code>@ConfigurationProperties&lt;/code>标注的类不可变(属性不可变).&lt;/p>
&lt;p>可通过&lt;code>@ConfigurationProperties&lt;/code>标注类, 或者使用&lt;code>@ConstructorBinding&lt;/code>标注构造器来开启.&lt;/p>
&lt;p>额外的注解如&lt;code>@DefaultValue&lt;/code>, &lt;code>@DateTimeFormt&lt;/code>可对构造参数进行配置.&lt;/p>
&lt;p>更多参考: &lt;a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config-constructor-binding">https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config-constructor-binding&lt;/a>&lt;/p>
&lt;h3 id="rscoket支持">RScoket支持&lt;/h3>
&lt;p>使用新的starter&lt;code>spring-boot-starter-rsocket&lt;/code>自动配置.&lt;/p>
&lt;p>Spring Security的RScoket集成在classpath中存在&lt;code>spring-security-rsocket&lt;/code>时自动完成配置.&lt;/p>
&lt;p>更多参考: &lt;a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html//spring-boot-features.html#boot-features-rsocket">https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html//spring-boot-features.html#boot-features-rsocket&lt;/a>&lt;/p>
&lt;h3 id="健康指示器分组">健康指示器分组&lt;/h3>
&lt;p>支持对健康指示器(Health Indicator)进行分组. 比如将应用部署到Kubernetes时, 希望针对&amp;quot;liveness&amp;quot;和&amp;quot;readiness&amp;quot;对指示器进行分组&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">management.endpoint.health.group.custom.include=db
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查时使用&lt;code>localhost:8080/actuator/health/custom&lt;/code>&lt;/p>
&lt;p>更多参考: &lt;a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html//production-ready-features.html#health-groups">https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html//production-ready-features.html#health-groups&lt;/a>&lt;/p>
&lt;h3 id="其他变化">其他变化&lt;/h3>
&lt;p>参考: &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes&lt;/a>&lt;/p></description></item><item><title>Spring Boot源码分析 - Configuration注解</title><link>https://atbug.com/spring-boot-configuration-annotation/</link><pubDate>Mon, 10 Dec 2018 16:24:33 +0000</pubDate><guid>https://atbug.com/spring-boot-configuration-annotation/</guid><description>
&lt;h1 id="configuration注解">@Configuration注解&lt;/h1>
&lt;p>&lt;code>@Configuration&lt;/code>注解指示一个类声明一个或多个@Bean方法, 并且可以由Spring容器处理, 以在运行时为这些bean生成bean定义和服务请求.&lt;/p>
&lt;p>使用&lt;code>ConfigurationClassParser&lt;/code>来对&lt;code>@Configuration&lt;/code>标注的类进行解析, 封装成&lt;code>ConfigurationClass&lt;/code>实例. 具体的实现通过&lt;code>ConfigurationClassPostProcessor&lt;/code>来实现的.&lt;/p>
&lt;h2 id="configurationclasspostprocessor">ConfigurationClassPostProcessor&lt;/h2>
&lt;p>实现了&lt;code>BeanDefinitionRegistryPostProcessor&lt;/code>接口, 间接实现了&lt;code>BeanFactorPostProcessor&lt;/code>接口.&lt;/p>
&lt;ul>
&lt;li>&lt;code>#postProcessBeanDefinitionRegistry()&lt;/code>: 注册所有&lt;code>ConfigurationClass&lt;/code>中的&lt;code>BeanDefinition&lt;/code>, 包括&lt;code>@Bean&lt;/code>注解的方法, &lt;code>@ImporResource&lt;/code>引入的资源中定义的bean, 和&lt;code>@Import&lt;/code>注解引入的&lt;code>ImportBeanDefinitionRegistrar&lt;/code>中注册的&lt;code>BeanDefinition&lt;/code>&lt;/li>
&lt;li>&lt;code>#postProcessBeanFactory()&lt;/code>: 在运行时以通过&lt;code>cglig&lt;/code>增强的类来替换&lt;code>ConfigurationClass&lt;/code>, 为服务bean请求做准备. 增强的实现是通过&lt;code>ConfigurationClassEnhancer&lt;/code>完成的.&lt;/li>
&lt;/ul>
&lt;p>插入一点, &lt;code>ConfigurationClassEnhancer&lt;/code>实现了直接使用bean注册方法来获取bean的操作, 提供了一个&lt;code>BeanMethodInterceptor&lt;/code>的内部类来实行.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Config&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="nf">a&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">B&lt;/span> &lt;span class="nf">b&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setA&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="full-configurationclass-vs-lite-configurationclass">Full ConfigurationClass VS Lite ConfigurationClass&lt;/h3>
&lt;p>先说区别: full的&lt;code>ConfigurationClass&lt;/code>会使用CGLIB进行增强.&lt;/p>
&lt;p>查看类&lt;code>ConfigurationClassUtils&lt;/code>, 其中有两个方法&lt;code>#isFullConfigurationClass()&lt;/code>和&lt;code>#isLiteConfigurationClass()&lt;/code>.&lt;/p>
&lt;p>方法的实现是去检查&lt;code>BeanDefinition&lt;/code>中的&lt;code>ConfigurationClassPostProcessor.configurationClass&lt;/code>属性, 是&lt;code>full&lt;/code>还是&lt;code>lite&lt;/code>.&lt;/p>
&lt;p>这个属性的值又来源于&lt;code>#checkConfigurationClassCandidate()&lt;/code>方法, 如果&lt;code>BeanDefinition&lt;/code>使用的是&lt;code>@Configuration&lt;/code>注解, 则为&lt;code>full&lt;/code>; 如果是&lt;code>@Component&lt;/code>, &lt;code>@ComponentScan&lt;/code>, &lt;code>@Import&lt;/code>或者&lt;code>@ImportResource&lt;/code>中的任何一种, 则为&lt;code>lite&lt;/code>. 如果是&lt;code>ConfigurationClass&lt;/code>, 则会继续为其添加顺序属性.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">checkConfigurationClassCandidate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BeanDefinition&lt;/span> &lt;span class="n">beanDef&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MetadataReaderFactory&lt;/span> &lt;span class="n">metadataReaderFactory&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isFullConfigurationCandidate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">beanDef&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CONFIGURATION_CLASS_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">CONFIGURATION_CLASS_FULL&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isLiteConfigurationCandidate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">beanDef&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CONFIGURATION_CLASS_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">CONFIGURATION_CLASS_LITE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// It&amp;#39;s a full or lite configuration candidate... Let&amp;#39;s determine the order value, if any.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">orderAttributes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">metadata&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAnnotationAttributes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">orderAttributes&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">beanDef&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ORDER_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">orderAttributes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AnnotationUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">VALUE&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>从零开始用docker运行spring boot应用</title><link>https://atbug.com/run-spring-boot-app-in-docker/</link><pubDate>Thu, 20 Apr 2017 21:58:42 +0000</pubDate><guid>https://atbug.com/run-spring-boot-app-in-docker/</guid><description>
&lt;p>假设已经安装好Docker&lt;/p>
&lt;h3 id="springboot应用">Springboot应用&lt;/h3>
&lt;h4 id="pom添加依赖和构建插件">pom添加依赖和构建插件&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;parent&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-parent&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.5.3.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/parent&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-web&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;build&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;plugins&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/build&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="应用代码">应用代码&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.atbug.spring.boot.test&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.boot.SpringApplication&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.boot.web.servlet.FilterRegistrationBean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.bind.annotation.RequestMapping&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.bind.annotation.RestController&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Created by addo on 2017/5/15.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="nd">@RestController&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Application&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">home&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Application&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="应用构建">应用构建&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">mvn clean package
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="centos-7-with-java8">Centos 7 with Java8&lt;/h3>
&lt;h4 id="获取centos7-镜像">获取Centos7 镜像&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker pull centos:7
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="准备centos-java8的dockerfile">准备centos-java8的dockerfile&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">FROM centos:7
MAINTAINER Addo Zhang &lt;span class="s2">&amp;#34;duwasai@gmail.com&amp;#34;&lt;/span>
&lt;span class="c1"># Set correct environment variables.&lt;/span>
ENV HOME /root
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8
RUN yum install -y curl&lt;span class="p">;&lt;/span> yum upgrade -y&lt;span class="p">;&lt;/span> yum update -y&lt;span class="p">;&lt;/span> yum clean all
ENV JDK_VERSION 8u11
ENV JDK_BUILD_VERSION b12
RUN curl -LO &lt;span class="s2">&amp;#34;http://download.oracle.com/otn-pub/java/jdk/&lt;/span>&lt;span class="nv">$JDK_VERSION&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$JDK_BUILD_VERSION&lt;/span>&lt;span class="s2">/jdk-&lt;/span>&lt;span class="nv">$JDK_VERSION&lt;/span>&lt;span class="s2">-linux-x64.rpm&amp;#34;&lt;/span> -H &lt;span class="s1">&amp;#39;Cookie: oraclelicense=accept-securebackup-cookie&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rpm -i jdk-&lt;span class="nv">$JDK_VERSION&lt;/span>-linux-x64.rpm&lt;span class="p">;&lt;/span> rm -f jdk-&lt;span class="nv">$JDK_VERSION&lt;/span>-linux-x64.rpm&lt;span class="p">;&lt;/span> yum clean all
ENV JAVA_HOME /usr/java/default
RUN yum remove curl&lt;span class="p">;&lt;/span> yum clean all
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="创建centos-java8镜像">创建centos-java8镜像&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker build -t addo/centos-java8 .
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="docker中运行应用">Docker中运行应用&lt;/h3>
&lt;h4 id="准备应用镜像的dockerfile">准备应用镜像的dockerfile&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">FROM addo/centos-java8
ADD target/boot-test-1.0-SNAPSHOT.jar /opt/app.jar
EXPOSE &lt;span class="m">8080&lt;/span>
CMD java -jar /opt/app.jar
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="构建应用镜像">构建应用镜像&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker build -t temp/spring-boot-app .
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="运行">运行&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --name spring-boot-app -p 8080:8080 temp/spring-boot-app
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>