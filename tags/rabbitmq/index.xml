<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rabbitmq on 乱世浮生</title><link>https://atbug.com/tags/rabbitmq/</link><description>Recent content in Rabbitmq on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 09 Oct 2016 09:20:07 +0000</lastBuildDate><atom:link href="https://atbug.com/tags/rabbitmq/index.xml" rel="self" type="application/rss+xml"/><item><title>探索Rabbitmq的Java客户端</title><link>https://atbug.com/deep-in-rabbitmq-java-client/</link><pubDate>Sun, 09 Oct 2016 09:20:07 +0000</pubDate><guid>https://atbug.com/deep-in-rabbitmq-java-client/</guid><description>
&lt;h2 id="amqpconnection">AMQPConnection&lt;/h2>
&lt;h3 id="实例初始化">实例初始化&lt;/h3>
&lt;p>创建Connection时会通过FrameHandlerFacotry创建一个SocketFrameHandler，SocketFrameHandler对Socket进行了封装。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">AMQConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConnectionParams&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FrameHandler&lt;/span> &lt;span class="n">frameHandler&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="n">checkPreconditions&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getUsername&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPassword&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_frameHandler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">frameHandler&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_virtualHost&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getVirtualHost&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_exceptionHandler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getExceptionHandler&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_clientProperties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClientProperties&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requestedFrameMax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestedFrameMax&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requestedChannelMax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestedChannelMax&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requestedHeartbeat&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestedHeartbeat&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">shutdownTimeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getShutdownTimeout&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">saslConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSaslConfig&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getExecutor&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">threadFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getThreadFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_channelManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_brokerInitiatedShutdown&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_inConnectionNegotiation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// we start out waiting for the first protocol response
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启动连接">启动连接&lt;/h3>
&lt;p>初始化WorkService和HeartBeatSender。&lt;/p>
&lt;p>创建一个channel0的AMQChannel，这个channel&lt;strong>不会被ChannelManager管理&lt;/strong>。&lt;/p>
&lt;p>首先channel0会将一个BlockingRpcContinuation作为当前未完成的Rpc请求，用于接收&lt;strong>handshake&lt;/strong>的响应。&lt;/p>
&lt;p>然后channel0会向socket中写入一条只有header的消息作为&lt;strong>handshake&lt;/strong>，header中包含了客户端的版本号。&lt;/p>
&lt;p>紧接着会启动主循环线程，主循环会通过SocketFrameHandler从socket接收字节流。此时接收到的第一条数据是服务端响应handshake返回的Connection.Start信息（包含服务端版本、机制、基础信息）。&lt;/p>
&lt;p>主循环线程启动后，主线程会阻塞地等待服务端的handshake响应。拿到响应之后会对服务器回传的信息进行比对，然后发送Connection.StartOK的信息去服务端（这个请求也还是阻塞式的），等待服务端回传Connection.Tune（包含最大channel数、最大frame长度和heartbeat间隔）。将这些信息与实例初始化是的设置信息进行对比，初始化ChannelManager&lt;/p>
&lt;p>紧接着发送Connection.TuneOk和Connection.Open消息去服务端，完成connection的建立。&lt;/p>
&lt;blockquote>
&lt;p>Connection &amp;gt; MainLoop &amp;gt; readFrame&lt;/p>
&lt;/blockquote>
&lt;h2 id="消息体">消息体&lt;/h2>
&lt;p>Frame是对AMQP消息的封装：包含frame的type、channel号、消息内容&lt;/p>
&lt;blockquote>
&lt;p>type|channelNumber|payloadSize|payload|frameEndMarker&lt;/p>
&lt;/blockquote>
&lt;p>Payload包含了消息类型、消息头和消息主题&lt;/p>
&lt;blockquote>
&lt;p>method|header|body&lt;/p>
&lt;/blockquote>
&lt;h2 id="消息发送和接收">消息发送和接收&lt;/h2>
&lt;p>消息的发送和接收都要channel来完成。&lt;/p>
&lt;h3 id="创建channel">创建Channel&lt;/h3>
&lt;p>通过Connection的ChannelManager来创建Channel，通过指定的ChannelNumber或者由分配器分配。创建好的Channel实例会放入ChannelManager的Map中，&lt;strong>key为ChannelNumber&lt;/strong>。由此可见Channel是Connection唯一的。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">ChannelN&lt;/span> &lt;span class="nf">createChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AMQConnection&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ChannelN&lt;/span> &lt;span class="nf">createChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AMQConnection&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">channelNumber&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ChannelN&lt;/span> &lt;span class="nf">addNewChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AMQConnection&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">channelNumber&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">ChannelN&lt;/span> &lt;span class="nf">instantiateChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AMQConnection&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">channelNumber&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ConsumerWorkService&lt;/span> &lt;span class="n">workService&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Channel实例化之后会调用Channel.open方法，发送Channel.Open去服务端（阻塞式），等待服务端响应Channel.OpenOk。&lt;/p>
&lt;h3 id="消息发送">消息发送&lt;/h3>
&lt;p>Channel.transmit 发送消息，调用AMQCommand.transmit完成发送。&lt;/p>
&lt;p>AMQCommand.transmit将消息封装成Frame，通过connection的SocketFrameHandler写入OutpuStream。&lt;/p>
&lt;h3 id="消息接收">消息接收&lt;/h3>
&lt;p>主循环线程在链接创建完成后会监听socket，从InputStream中读取二进制流封装成Frame。通过Frame中的ChannelNumber从ChannelManager中获取对应的Channel实例处理Frame。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">_running&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Frame&lt;/span> &lt;span class="n">frame&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_frameHandler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readFrame&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">_missedHeartbeats&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">AMQP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">FRAME_HEARTBEAT&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Ignore it: we&amp;#39;ve already just reset the heartbeat counter.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">channel&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// the special channel
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">_channel0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isOpen&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// If we&amp;#39;re still _running, but not isOpen(), then we
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// must be quiescing, which means any inbound frames
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// for non-zero channels (and any inbound commands on
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// channel zero that aren&amp;#39;t Connection.CloseOk) must
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// be discarded.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ChannelManager&lt;/span> &lt;span class="n">cm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_channelManager&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cm&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">cm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">channel&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Socket timeout waiting for a frame.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Maybe missed heartbeat.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">handleSocketTimeout&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Channel会使用已经准备好的AMQCommand处理Frame，并未下一个Frame准备新的AMQCommand。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Frame&lt;/span> &lt;span class="n">frame&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">AMQCommand&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_command&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// a complete command has rolled off the assembly line
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">_command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AMQCommand&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// prepare for the next one
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">handleCompleteInboundCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>AMQCommad会使用CommandAssembler依次从Frame的payload中检出对应的Method、Header和Body。如果检出了Body，整个Frame会被检出完成。如过未完成，会进入主循环再次处理直至完成。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Frame&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">state&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">EXPECTING_METHOD&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">consumeMethodFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">EXPECTING_CONTENT_HEADER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">consumeHeaderFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">EXPECTING_CONTENT_BODY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">consumeBodyFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AssertionError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Bad Command State &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">state&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">isComplete&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Frame被检出完后，会根据Method的类型进入不同的异步处理流程。&lt;/p>
&lt;p>Method在channel打开和关闭的情况下会以下的可能：&lt;/p>
&lt;blockquote>
&lt;p>Channel打开：Basic.Deliver, Basic.Return, Basic.Flow, Basic.Ack, Basic.Nack, Basic.RecoveryOk, Basic.Cancel&lt;/p>
&lt;p>Channel关闭：Channel.CloseOk&lt;/p>
&lt;/blockquote>
&lt;h2 id="生产和消费">生产和消费&lt;/h2>
&lt;h3 id="生产">生产&lt;/h3>
&lt;p>调用Channel.basicPublish()方法，指定exchange、routingKey等信息，消息属性、消息体。封装成Baisc.Publish，放入AMQCommand，最后调用transmit方法完成发送。参考&lt;a href="http://atbug.com/deep-in-rabbitmq-java-client/#%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81">消息发送&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">basicPublish&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">exchange&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">routingKey&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">mandatory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">immediate&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">BasicProperties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">nextPublishSeqNo&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">unconfirmedSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getNextPublishSeqNo&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">nextPublishSeqNo&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">BasicProperties&lt;/span> &lt;span class="n">useProps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">props&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">useProps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MessageProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MINIMAL_BASIC&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">transmit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">AMQCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Basic&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Publish&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Builder&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">exchange&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">exchange&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">routingKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routingKey&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">mandatory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mandatory&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">immediate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">immediate&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">(),&lt;/span>
&lt;span class="n">useProps&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="消费">消费&lt;/h3>
&lt;p>创建QueueingConsumer实例，然后调用Channel.basicConsume方法。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">queueingConsumer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">QueueingConsumer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">channel&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">channel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">basicConsume&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;queue_name&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">queueingConsumer&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">QueueingConsumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Delivery&lt;/span> &lt;span class="n">delivery&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">queueingConsumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextDelivery&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="n">delivery&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getEnvelope&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//消息头
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">delivery&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperties&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//消息属性
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">delivery&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBody&lt;/span>&lt;span class="o">()&lt;/span>&lt;span class="err">；&lt;/span>&lt;span class="c1">//消息体
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>&lt;span class="k">finally&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="c1">//channel.basicAck();
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//channel.basicNack()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>QueueingConsumer实现了Consumer接口。&lt;/p>
&lt;p>Channel.basicConsume方法会封装Channel.Consume消息发送到服务端（阻塞式），等待服务端的Channel.ConsumeOk响应（包含了服务端为Consumer分配的ConsumerTag）。然后将QueueingConsumer放入Map中，&lt;strong>key为ConsumerTag&lt;/strong>。consumer是Channel唯一。&lt;/p>
&lt;p>当客户端接收到消息，参考&lt;a href="http://atbug.com/deep-in-rabbitmq-java-client/#%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6">消息接收&lt;/a>。Basic.Deliver类型的消息（consumerTag、deliveryTag、redelivered、exchange、routingKey）会进入消费处理流程。Channel根据ConsumerTag从Map中获取对应的QueueConsumer实例，由Channel的ConsumerDispatcher通过Connection初始化的WorkService创建新的处理线程，调用QueueConsumer实例的handleDelivery方法。QueueConsumer将消息封装成Delivery对象，放入BlockingQueue中。&lt;/p>
&lt;p>消费线程等待新的Delivery（阻塞式），之后创建新的线程完成消息的处理。&lt;/p></description></item></channel></rss>