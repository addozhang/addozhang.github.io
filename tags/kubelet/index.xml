<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubelet on 乱世浮生</title><link>https://atbug.com/tags/kubelet/</link><description>Recent content in Kubelet on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 15 Jun 2021 08:25:25 +0800</lastBuildDate><atom:link href="https://atbug.com/tags/kubelet/index.xml" rel="self" type="application/rss+xml"/><item><title>源码解析：一文读懂 Kubelet</title><link>https://atbug.com/kubelet-source-code-analysis/</link><pubDate>Tue, 15 Jun 2021 08:25:25 +0800</pubDate><guid>https://atbug.com/kubelet-source-code-analysis/</guid><description>
&lt;p>本文主要介绍 kubelet 功能、核心组件，以及启动流程的源码分析，总结了 kubelet 的工作原理。&lt;/p>
&lt;h2 id="kubelet-简介">kubelet 简介&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/15/20210613091144.png" alt="Kubernetes 的架构图">&lt;/p>
&lt;p>从官方的架构图中很容易就能找到 &lt;code>kubelet&lt;/code>&lt;/p>
&lt;p>执行 &lt;code>kubelet -h&lt;/code> 看到 kubelet 的功能介绍：&lt;/p>
&lt;ul>
&lt;li>kubelet 是每个 Node 节点上都运行的主要“节点代理”。使用如下的一个向 apiserver 注册 Node 节点：主机的 &lt;code>hostname&lt;/code>；覆盖 &lt;code>host&lt;/code> 的参数；或者云提供商指定的逻辑。&lt;/li>
&lt;li>kubelet 基于 &lt;code>PodSpec&lt;/code> 工作。&lt;code>PodSpec&lt;/code> 是用 &lt;code>YAML&lt;/code> 或者 &lt;code>JSON&lt;/code> 对象来描述 Pod。Kubelet 接受通过各种机制（主要是 apiserver）提供的一组 &lt;code>PodSpec&lt;/code>，并确保里面描述的容器良好运行。&lt;/li>
&lt;/ul>
&lt;p>除了由 apiserver 提供 &lt;code>PodSpec&lt;/code>，还可以通过以下方式提供：&lt;/p>
&lt;ul>
&lt;li>文件&lt;/li>
&lt;li>HTTP 端点&lt;/li>
&lt;li>HTTP 服务器&lt;/li>
&lt;/ul>
&lt;p>kubelet 功能归纳一下就是上报 Node 节点信息，和管理（创建、销毁）Pod。 功能看似简单，实际不然。每一个点拿出来都需要很大的篇幅来讲，比如 Node 节点的计算资源，除了传统的 CPU、内存、硬盘，还提供扩展来支持类似 GPU 等资源；Pod 不仅仅有容器，还有相关的网络、安全策略等。&lt;/p>
&lt;h2 id="kubelet-架构">kubelet 架构&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/15/20210614215508.png" alt="2021-06-14-21-55-08">&lt;/p>
&lt;h3 id="重要组件">重要组件&lt;/h3>
&lt;p>kubelet 的架构由 N 多的组件组成，下面简单介绍下比较重要的几个：&lt;/p>
&lt;h4 id="pleg">PLEG&lt;/h4>
&lt;p>即 &lt;strong>Pod Lifecycle Event Generator&lt;/strong>，字面意思 Pod 生命周期事件（&lt;code>ContainerStarted&lt;/code>、&lt;code>ContainerDied&lt;/code>、&lt;code>ContainerRemoved&lt;/code>、&lt;code>ContainerChanged&lt;/code>）生成器。&lt;/p>
&lt;p>其维护着 Pod 缓存；定期通过 &lt;code>ContainerRuntime&lt;/code> 获取 Pod 的信息，与缓存中的信息比较，生成如上的事件；将事件写入其维护的通道（channel）中。&lt;/p>
&lt;h4 id="podworkers">PodWorkers&lt;/h4>
&lt;p>处理事件中 Pod 的同步。核心方法 &lt;code>managePodLoop()&lt;/code> 间接调用 &lt;code>kubelet.syncPod()&lt;/code> 完成 Pod 的同步：&lt;/p>
&lt;ul>
&lt;li>如果 Pod 正在被创建，记录其延迟&lt;/li>
&lt;li>生成 Pod 的 API Status，即 &lt;code>v1.PodStatus&lt;/code>：从运行时的 status 转换成 api status&lt;/li>
&lt;li>记录 Pod 从 &lt;code>pending&lt;/code> 到 &lt;code>running&lt;/code> 的耗时&lt;/li>
&lt;li>在 &lt;code>StatusManager&lt;/code> 中更新 pod 的状态&lt;/li>
&lt;li>杀掉不应该运行的 Pod&lt;/li>
&lt;li>如果网络插件未就绪，只启动使用了主机网络（host network）的 Pod&lt;/li>
&lt;li>如果 static pod 不存在，为其创建镜像（Mirror）Pod&lt;/li>
&lt;li>为 Pod 创建文件系统目录：Pod 目录、卷目录、插件目录&lt;/li>
&lt;li>使用 &lt;code>VolumeManager&lt;/code> 为 Pod 挂载卷&lt;/li>
&lt;li>获取 image pull secrets&lt;/li>
&lt;li>调用容器运行时（container runtime）的 &lt;code>#SyncPod()&lt;/code> 方法&lt;/li>
&lt;/ul>
&lt;h4 id="podmanager">PodManager&lt;/h4>
&lt;p>存储 Pod 的期望状态，kubelet 服务的不同渠道的 Pod&lt;/p>
&lt;h4 id="statsprovider">StatsProvider&lt;/h4>
&lt;p>提供节点和容器的统计信息，有 &lt;code>cAdvisor&lt;/code> 和 &lt;code>CRI&lt;/code> 两种实现。&lt;/p>
&lt;h4 id="containerruntime">ContainerRuntime&lt;/h4>
&lt;p>顾名思义，容器运行时。与遵循 CRI 规范的高级容器运行时进行交互。&lt;/p>
&lt;h4 id="depspodconfig">Deps.PodConfig&lt;/h4>
&lt;p>PodConfig 是一个配置多路复用器，它将许多 Pod 配置源合并成一个单一的一致结构，然后按顺序向监听器传递增量变更通知。&lt;/p>
&lt;p>配置源有：文件、apiserver、HTTP&lt;/p>
&lt;h4 id="syncloop">&lt;code>#syncLoop&lt;/code>&lt;/h4>
&lt;p>接收来自 &lt;code>PodConfig&lt;/code> 的 Pod 变更通知、定时任务、&lt;code>PLEG&lt;/code> 的事件，以及 &lt;code>ProbeManager&lt;/code> 的事件，将 Pod 同步到&lt;strong>期望状态&lt;/strong>。&lt;/p>
&lt;h4 id="podadmithandlers">PodAdmitHandlers&lt;/h4>
&lt;p>Pod admission 过程中调用的一系列处理器，比如 eviction handler（节点内存有压力时，不会驱逐 QoS 设置为 &lt;code>BestEffort&lt;/code> 的 Pod）、shutdown admit handler（当节点关闭时，不处理 pod 的同步操作）等。&lt;/p>
&lt;h4 id="oomwatcher">OOMWatcher&lt;/h4>
&lt;p>从系统日志中获取容器的 OOM 日志，将其封装成事件并记录。&lt;/p>
&lt;h4 id="volumemanger">VolumeManger&lt;/h4>
&lt;p>VolumeManager 运行一组异步循环，根据在此节点上调度的 pod 确定需要附加/挂载/卸载/分离哪些卷并执行操作。&lt;/p>
&lt;h4 id="certificatemanager">CertificateManager&lt;/h4>
&lt;p>处理证书轮换。&lt;/p>
&lt;h4 id="probemanager">ProbeManager&lt;/h4>
&lt;p>实际上包含了三种 Probe，提供 probe 结果缓存和通道。&lt;/p>
&lt;ul>
&lt;li>LivenessManager&lt;/li>
&lt;li>ReadinessManager&lt;/li>
&lt;li>StartupManager&lt;/li>
&lt;/ul>
&lt;h4 id="evictionmanager">EvictionManager&lt;/h4>
&lt;p>监控 Node 节点的资源占用情况，根据驱逐规则驱逐 Pod 释放资源，缓解节点的压力。&lt;/p>
&lt;h4 id="pluginmanager">PluginManager&lt;/h4>
&lt;p>PluginManager 运行一组异步循环，根据此节点确定哪些插件需要注册/取消注册并执行。如 CSI 驱动和设备管理器插件（Device Plugin）。&lt;/p>
&lt;h5 id="csi">CSI&lt;/h5>
&lt;p>Container Storage Interface，由存储厂商实现的存储驱动。&lt;/p>
&lt;h5 id="设备管理器插件device-plugin">设备管理器插件（Device Plugin）&lt;/h5>
&lt;p>Kubernetes 提供了一个 设备插件框架，你可以用它来将系统硬件资源发布到 Kubelet。&lt;/p>
&lt;p>供应商可以实现设备插件，由你手动部署或作为 DaemonSet 来部署，而不必定制 Kubernetes 本身的代码。目标设备包括 GPU、高性能 NIC、FPGA、 InfiniBand 适配器以及其他类似的、可能需要特定于供应商的初始化和设置的计算资源。&lt;/p>
&lt;h2 id="kubelet-的启动流程">kubelet 的启动流程&lt;/h2>
&lt;p>要分析 kubelet 的启动流程，可以从 kubelet 运行方式着手。找一个 Node 节点，很容易就能找到 kubelet 的进程。由于其是以 &lt;code>systemd&lt;/code> 的方式启动，也可以通过 &lt;code>systemctl&lt;/code> 查看其状态。&lt;/p>
&lt;h3 id="kubelet-启动命令">kubelet 启动命令&lt;/h3>
&lt;p>kubelet 的启动命令（minikube 环境）&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ps -aux &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;/kubelet&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> grep -v grep
root &lt;span class="m">4917&lt;/span> 2.6 0.3 &lt;span class="m">1857652&lt;/span> &lt;span class="m">106152&lt;/span> ? Ssl 01:34 13:05 /var/lib/minikube/binaries/v1.21.0/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>1.21.0 --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64.5
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ systemctl status kubelet.service
● kubelet.service - kubelet: The Kubernetes Node Agent
Loaded: loaded &lt;span class="o">(&lt;/span>/usr/lib/systemd/system/kubelet.service&lt;span class="p">;&lt;/span> disabled&lt;span class="p">;&lt;/span> vendor preset: enabled&lt;span class="o">)&lt;/span>
Drop-In: /etc/systemd/system/kubelet.service.d
└─10-kubeadm.conf
Active: active &lt;span class="o">(&lt;/span>running&lt;span class="o">)&lt;/span> since Sun 2021-06-13 01:34:42 UTC&lt;span class="p">;&lt;/span> 11h ago
Docs: http://kubernetes.io/docs/
Main PID: &lt;span class="m">4917&lt;/span> &lt;span class="o">(&lt;/span>kubelet&lt;span class="o">)&lt;/span>
Tasks: &lt;span class="m">15&lt;/span> &lt;span class="o">(&lt;/span>limit: 38314&lt;span class="o">)&lt;/span>
Memory: 39.4M
CGroup: /system.slice/kubelet.service
└─4917 /var/lib/minikube/binaries/v1.21.0/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>1.21.0 --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="源码分析">源码分析&lt;/h3>
&lt;p>从 &lt;code>git@github.com:kubernetes/kubernetes.git&lt;/code> 仓库获取代码，使用最新的 &lt;code>release-1.21&lt;/code> 分支。&lt;/p>
&lt;ul>
&lt;li>&lt;code>cmd/kubelet/kubelet.go:35&lt;/code> 的 &lt;code>main&lt;/code> 方法为程序入口。
&lt;ul>
&lt;li>调用 &lt;code>NewKubeletCommand&lt;/code> 方法，创建 command&lt;/li>
&lt;li>执行 command
&lt;ul>
&lt;li>&lt;code>cmd/kubelet/app/server.go:434&lt;/code> 的 &lt;code>Run&lt;/code> 方法。
&lt;ul>
&lt;li>调用 &lt;code>RunKubelet&lt;/code> 方法。
&lt;ul>
&lt;li>调用 &lt;code>createAndInitKubelet&lt;/code> 方法，创建并初始化 kubelet
&lt;ul>
&lt;li>&lt;code>pkg/kubelet/kubelet.go&lt;/code> 的 &lt;code>NewMainKubelet&lt;/code> 方法，创建 kubelet的 各种组件。共十几个组件，见 &lt;a href="#kubelet-%E6%9E%B6%E6%9E%84">kubelet 的构架&lt;/a>。&lt;/li>
&lt;li>调用 &lt;code>BirtyCry&lt;/code> 方法：放出 &lt;code>Starting&lt;/code> 事件&lt;/li>
&lt;li>调用 &lt;code>StartGarbageCollection&lt;/code> 方法，开启 &lt;code>ContainerGC&lt;/code> 和 &lt;code>ImageGC&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>调用 &lt;code>startKubelet&lt;/code> 方法（大量使用 goroutine 和通道）
&lt;ul>
&lt;li>goroutine：&lt;code>kubelet.Run()&lt;/code>
&lt;ul>
&lt;li>初始化模块
&lt;ul>
&lt;li>metrics 相关&lt;/li>
&lt;li>创建文件系统目录目录&lt;/li>
&lt;li>创建容器日志目录&lt;/li>
&lt;li>启动 &lt;code>ImageGCManager&lt;/code>&lt;/li>
&lt;li>启动 &lt;code>ServerCertificateManager&lt;/code>&lt;/li>
&lt;li>启动 &lt;code>OOMWatcher&lt;/code>&lt;/li>
&lt;li>启动 &lt;code>ResourceAnalyzer&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>goroutine：&lt;code>VolumeManager.Run()&lt;/code> 开始处理 Pod Volume 的卸载和挂载&lt;/li>
&lt;li>goroutine：状态更新 &lt;code>fastStatusUpdateOnce()&lt;/code> （更新 Pod CIDR -&amp;gt; 更新 &lt;code>ContainerRuntime&lt;/code> 状态 -&amp;gt; 更新 Node 节点状态）&lt;/li>
&lt;li>goroutine： &lt;code>NodeLeaseController.Run()&lt;/code> 更新节点租约&lt;/li>
&lt;li>goroutine：&lt;code>podKiller.PerformPodKillingWork&lt;/code> 杀掉未被正确处理的 pod&lt;/li>
&lt;li>&lt;code>StatusManager.Start()&lt;/code> 开始向 apiserver 更新 Pod 状态&lt;/li>
&lt;li>&lt;code>RuntimeClassManager.Start()&lt;/code>&lt;/li>
&lt;li>&lt;code>PLEG.Start()&lt;/code>：持续从 &lt;code>ContainerRuntime&lt;/code> 获取 Pod/容器的状态，并与 kubelet 本地 cache 中的比较，生成对应的 &lt;code>Event&lt;/code>&lt;/li>
&lt;li>&lt;code>syncLoop()&lt;/code> 重点，&lt;strong>&lt;em>持续监控并处理来自文件、apiserver、http 的变更&lt;/em>&lt;/strong>。包括 Pod 的增加、更新、优雅删除、非优雅删除、调和。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>启动 server，暴露 &lt;code>/healthz&lt;/code> 端点&lt;/li>
&lt;li>通知 &lt;code>systemd&lt;/code> &lt;code>kuberlet&lt;/code> 服务已经启动&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="kubelet-的工作原理">kubelet 的工作原理&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/15/20210615000611.png" alt="">&lt;/p>
&lt;ol>
&lt;li>来静态文件、apiserver 以及 HTTP 请求的 Pod 配置变更，被发送到 &lt;code>kubelet.syncLoop&lt;/code>&lt;/li>
&lt;li>PLEG 会定期通过容器运行时获取节点上 Pod 的状态，与其缓存中的 Pod 信息进行比较，封装成事件，进入 PLEG 的通道&lt;/li>
&lt;li>定期检查工作队列中的 Pod&lt;/li>
&lt;li>ProbeManager 的通道中的 Pod&lt;/li>
&lt;li>以上 1~4，都会进入 &lt;code>syncLoopIteration&lt;/code>，并从对应的通道中获取到对应 Pod，将 Pod 的信息保存到 &lt;code>PodManager&lt;/code>；然后分发给 &lt;code>PodWorker&lt;/code>，&lt;a href="#PodWorkers">完成一些列的同步工作&lt;/a>。&lt;/li>
&lt;/ol>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>kubelet 启动流量就讲到这里，虽然复杂，还是有迹可循。只要了解了 kubelet 在 Kubernetes 中的定位及角色，就很容易理解其工作流量。&lt;/p>
&lt;p>后面会再深入分析 Pod 创建及启动流程。&lt;/p></description></item></channel></rss>