<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>网关 on 乱世浮生</title><link>https://atbug.com/tags/%E7%BD%91%E5%85%B3/</link><description>Recent content in 网关 on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 11 Jun 2021 08:27:36 +0800</lastBuildDate><atom:link href="https://atbug.com/tags/%E7%BD%91%E5%85%B3/index.xml" rel="self" type="application/rss+xml"/><item><title>Pipy 第二弹：编程实现 Metrics 及源码分析</title><link>https://atbug.com/programming-archive-metrics-with-pipy/</link><pubDate>Fri, 11 Jun 2021 08:27:36 +0800</pubDate><guid>https://atbug.com/programming-archive-metrics-with-pipy/</guid><description>
&lt;p>由于要给团队做一下关于 Flomesh 的分享，准备下材料。&lt;/p>
&lt;p>“分享是最好的学习方法。”&lt;/p>
&lt;p>上一回&lt;a href="https://mp.weixin.qq.com/s/l8JzYRn350fjuCAOoo8pcg">初探可编程网关 Pipy&lt;/a>，领略了 Pipy 的“风骚”。从 Pipy 的 GUI 交互深入了解了 Pipy 的配置加载流程。&lt;/p>
&lt;p>今天看一下 Pipy 如何实现 Metrics 的功能，顺便看下数据如何在多个 Pipeline 中进行流转。&lt;/p>
&lt;h2 id="前置">前置&lt;/h2>
&lt;p>首先，需要对 Pipy 有一定的了解，如果不了解看一下&lt;a href="https://mp.weixin.qq.com/s/l8JzYRn350fjuCAOoo8pcg">上一篇文章&lt;/a>。&lt;/p>
&lt;p>其次构建好 Pipy 环境，关于构建还是去看上一篇文章。&lt;/p>
&lt;h2 id="metrics-功能实现">Metrics 功能实现&lt;/h2>
&lt;p>至于 Pipy 实现 Metrics 的方式，源码中就有，位于 &lt;code>test/006-metrics/pipy.js&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610202734.png" alt="">&lt;/p>
&lt;ul>
&lt;li>代理监听 &lt;code>6080&lt;/code> 端口，后端服务在 &lt;code>8080&lt;/code> 端口，Metrics 在 &lt;code>9090&lt;/code> 端口&lt;/li>
&lt;li>共有 5 个 Pipeline：3 个 listen 类型，2 个 Pipeline 类型&lt;/li>
&lt;li>7 种过滤器：&lt;code>fork&lt;/code>、&lt;code>connect&lt;/code>、&lt;code>decodeHttpRequest&lt;/code>、&lt;code>onMessageStart&lt;/code>、&lt;code>decodeHttpResponse&lt;/code>、&lt;code>encodeHttpRespnse&lt;/code>、&lt;code>replaceMessage&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>贴一下源码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">pipy&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">_metrics&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">count&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">_statuses&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="nx">_latencies&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">25&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">70&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">90&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">300&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Number&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">POSITIVE_INFINITY&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">_buckets&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;span class="nx">_timestamp&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6080&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">fork&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;in&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;127.0.0.1:8080&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">fork&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;out&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Extract request info
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipeline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;in&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">onMessageStart&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">_timestamp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="nx">_metrics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Extract response info
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipeline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;out&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">onMessageStart&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">e&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="p">((&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">latency&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">latency&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">_timestamp&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">_latencies&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findIndex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">latency&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="nx">t&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">_buckets&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">_statuses&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">_statuses&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">))()&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Expose as Prometheus metrics
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">9090&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceMessage&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">sum&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Message&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">[&lt;/span>
&lt;span class="sb">`count &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">_metrics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">...&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">entries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">_statuses&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">([&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`status{code=&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">&amp;#34;} &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">...&lt;/span>&lt;span class="nx">_buckets&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`bucket{le=&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">_latencies&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">&amp;#34;} &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">))(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">encodeHttpResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">// Mock service on port 8080
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8080&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceMessage&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">Message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello!\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">encodeHttpResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;p>使用 ab 做请求模拟 &lt;code>ab -n 2000 -c 10 http://localhost:6080/&lt;/code>，然后检查下记录的指标。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http :9090 --body
count &lt;span class="m">2000&lt;/span>
status&lt;span class="o">{&lt;/span>&lt;span class="nv">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;200&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">2000&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1762&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1989&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;5&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1994&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;7&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1999&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;10&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">2000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="分析">分析&lt;/h2>
&lt;p>&lt;strong>TL;DR：本次示例的核心是 &lt;code>fork&lt;/code>，从字面意思就很容易理解：新开一个处理分支（Pipeline），与主线并行执行。&lt;/strong>&lt;/p>
&lt;p>在 &lt;code>src/inbound.cpp:104 109&lt;/code> 处，Pipy 接收一个新的连接。
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610210104.png" alt="">&lt;/p>
&lt;p>创建 &lt;code>Context&lt;/code> 和 &lt;code>Session&lt;/code>，并在 L178 处注册事件的处理器，然后在 L187 处开始接收数据。
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610210414.png" alt="">&lt;/p>
&lt;p>在 &lt;code>#receive&lt;/code> 方法中，定义了数据接收处理器：将读到的数据写入 &lt;code>buffer&lt;/code> 中。这个 &lt;code>buffer&lt;/code> 存储的是 &lt;code>Event&lt;/code>类型数据。（所以说 Pipy 是基于数据流事件，将一些封装成了事件）&lt;/p>
&lt;p>接着调用 &lt;code>Session#input&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610211221.png" alt="">&lt;/p>
&lt;p>实际上调用的是 &lt;code>ReusableSession#input&lt;/code>，调用 &lt;code>m_filters&lt;/code> 的 &lt;code>#process&lt;/code> 方法。&lt;code>m_filters&lt;/code> 实际上是 &lt;code>Filter&lt;/code> 类型。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610212917.png" alt="">&lt;/p>
&lt;p>为什么只有一个 &lt;code>Filter&lt;/code>？重点来了，看下 &lt;code>ReusableSession&lt;/code> 的构造过程就能明白了（这里用了个反向迭代器）。&lt;code>output&lt;/code> 是当前 &lt;code>Filter&lt;/code> 处理完要执行的，实现类似链式的执行。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610213338.png" alt="">&lt;/p>
&lt;p>再回头看上面的示例，可以想象 &lt;code>fork&lt;/code> 就是 &lt;code>Session&lt;/code> 的 &lt;code>m_filters&lt;/code>。&lt;/p>
&lt;p>&lt;code>src/filters/fork.cpp:85&lt;/code>，在 &lt;code>fork&lt;/code> 过滤器中，在 &lt;em>1&lt;/em> 处从 &lt;code>module&lt;/code> 中获取到目标 &lt;code>Pipeline&lt;/code>，并在 &lt;em>3&lt;/em> 和 &lt;em>4&lt;/em> 处 创建了新的 &lt;code>Session&lt;/code> 并保存原 &lt;code>Session&lt;/code> 的数据。&lt;/p>
&lt;p>然后在 &lt;em>5&lt;/em> 处将原 &lt;code>Event&lt;/code> 输入到新的 &lt;code>Session&lt;/code> 中，触发目标 &lt;code>Pipeline&lt;/code> 的 &lt;code>Filter&lt;/code> 链。&lt;strong>值得注意的是，这里是基于事件的处理，并不是阻塞的。这就意味着，&lt;code>fork&lt;/code> 的目标 &lt;code>pipline&lt;/code>，与 &lt;code>fork&lt;/code> 所在的 pipeline 是并行执行的。&lt;/strong> 在示例中，就是 &lt;code>Pipeline&lt;/code> ‘in’ 与 主 &lt;code>Pipeline&lt;/code> 的 &lt;code>connect&lt;/code> 是并行执行的。&lt;/p>
&lt;p>最终在 &lt;em>6&lt;/em> 处，继续使用原 &lt;code>Session&lt;/code> 的 &lt;code>Filter&lt;/code> 链。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610214811.png" alt="">&lt;/p></description></item><item><title>初探可编程网关 Pipy</title><link>https://atbug.com/glance-at-programmable-gateway-pipy/</link><pubDate>Mon, 31 May 2021 00:45:08 +0800</pubDate><guid>https://atbug.com/glance-at-programmable-gateway-pipy/</guid><description>
&lt;p>有幸参加了 &lt;a href="https://flomesh.cn/">Flomesh&lt;/a> 组织的workshop，了解了他们的 Pipy 网络代理，以及围绕 Pipy 构建起来的生态。Pipy 在生态中，不止是代理的角色，还是 Flomesh 服务网格​中的数据平面。&lt;/p>
&lt;p>整理一下，做个记录，顺便瞄一下 Pipy 的部分源码。&lt;/p>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>下面是摘自 Github 上关于 Pipy 的介绍：&lt;/p>
&lt;blockquote>
&lt;p>Pipy 是一个轻量级、高性能、高稳定、可编程的网络代理。Pipy 核心框架使用 C++ 开发，网络 IO 采用 ASIO 库。 Pipy 的可执行文件仅有 5M 左右，运行期的内存占用 10M 左右，因此 Pipy 非常适合做 Sidecar proxy。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Pipy 内置了自研的 pjs 作为脚本扩展，使得Pipy 可以用 JS 脚本根据特定需求快速定制逻辑与功能。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Pipy 采用了模块化、链式的处理架构，用顺序执行的模块来对网络数据块进行处理。这种简单的架构使得 Pipy 底层简单可靠，同时具备了动态编排流量的能力，兼顾了简单和灵活。通过使用 REUSE_PORT 的机制（主流 Linux 和 BSD 版本都支持该功能），Pipy 可以以多进程模式运行，使得 Pipy 不仅适用于 Sidecar 模式，也适用于大规模的流量处理场景。 在实践中，Pipy 独立部署的时候用作“软负载”，可以在低延迟的情况下，实现媲美硬件的负载均衡吞吐能力，同时具有灵活的扩展性。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16221838193789.jpg" alt="">&lt;/p>
&lt;p>Pipy 的核心是消息流处理器：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16221838399668.jpg" alt="">&lt;/p>
&lt;p>Pipy 流量处理的流程：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16221838630400.jpg" alt="">&lt;/p>
&lt;h3 id="核心概念">核心概念&lt;/h3>
&lt;ul>
&lt;li>流（Stream）&lt;/li>
&lt;li>管道（Pipeline）&lt;/li>
&lt;li>模块（Module）&lt;/li>
&lt;li>会话（Session）&lt;/li>
&lt;li>上下文（Context）&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->以下是个人浅见&lt;!-- raw HTML omitted -->：&lt;/p>
&lt;p>Pipy 使用 &lt;code>pjs&lt;/code> 引擎将 JavaScript格式的配置，解析成其抽象的 &lt;code>Configuration&lt;/code> 对象。每个 &lt;code>Configuration&lt;/code> 中包含了多个 &lt;code>Pipeline&lt;/code>，每个 &lt;code>Configuration&lt;/code> 中又会用到多个 &lt;code>Filter&lt;/code>。这些都属于 Pipy 的&lt;em>静态&lt;/em>配置部分。（后面会提到 Pipeline 的三种不同类型）&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223905428188.jpg" alt="">&lt;/p>
&lt;p>而属于&lt;strong>运行时&lt;/strong>的就是流、会话和上下文了，在 Pipy 中，数据流是由对象（Pipy 的&lt;em>抽象&lt;/em>）组成的。而这些对象抵达 Pipy，被抽象成不同的&lt;!-- raw HTML omitted -->事件&lt;!-- raw HTML omitted -->。而事件触发不同的过滤器的执行。&lt;/p>
&lt;p>我个人更喜欢将其核心理解为：对数据流的事件处理引擎。&lt;/p>
&lt;p>理解归理解，实践出真知。“大胆假设，小心求证！”&lt;/p>
&lt;h2 id="本地编译">本地编译&lt;/h2>
&lt;p>从编译 Pipy 开始。&lt;/p>
&lt;h3 id="环境准备">环境准备&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#安装 nodejs&lt;/span>
$ nvm install lts/erbium
&lt;span class="c1">#安装 cmake&lt;/span>
$ brew install cmake
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="编译-pipy">编译 Pipy&lt;/h3>
&lt;p>从 &lt;code>https://github.com/flomesh-io/pipy.git&lt;/code> 克隆代码。&lt;/p>
&lt;p>Pipy 的编译包括了两个部分，GUI 和 Pipy 本体。&lt;/p>
&lt;p>GUI 是 Pipy 提供的一个用于开发模式下进行配置的界面，首先编译Pipy GUI。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># pipy root folder&lt;/span>
$ &lt;span class="nb">cd&lt;/span> gui
$ npm install
$ npm run build
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着编译 Pipy 的本体&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># pipy root folder&lt;/span>
$ mkdir build
$ &lt;span class="nb">cd&lt;/span> build
$ cmake -DCMAKE_BUILD_TYPE&lt;span class="o">=&lt;/span>Release -DPIPY_GUI&lt;span class="o">=&lt;/span>ON ..
$ make
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完成后检查根目录下的 &lt;code>bin&lt;/code> 目录，可以看到 pipy 的可执行文件，大小只有 11M。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223857141237.jpg" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ bin/pipy --help
Usage: pipy &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span> &amp;lt;script filename&amp;gt;
Options:
-h, -help, --help Show &lt;span class="nb">help&lt;/span> information
-v, -version, --version Show version information
--list-filters List all filters
--help-filters Show detailed usage information &lt;span class="k">for&lt;/span> all filters
--log-level&lt;span class="o">=&lt;/span>&amp;lt;debug&lt;span class="p">|&lt;/span>info&lt;span class="p">|&lt;/span>warn&lt;span class="p">|&lt;/span>error&amp;gt; Set the level of log output
--verify Verify configuration only
--reuse-port Enable kernel load balancing &lt;span class="k">for&lt;/span> all listening ports
--gui-port&lt;span class="o">=&lt;/span>&amp;lt;port&amp;gt; Enable web GUI on the specified port
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="demohello-pipy">Demo：Hello Pipy&lt;/h3>
&lt;p>开发模式下可以让 Pipy 携带 GUI 启动，通过 GUI 进行配置。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#指定 gui 的端口为 6060，从 test 目录中加载配置&lt;/span>
$ bin/pipy --gui-port&lt;span class="o">=&lt;/span>&lt;span class="m">6060&lt;/span> test/
2021-05-30 22:48:41 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>gui&lt;span class="o">]&lt;/span> Starting GUI service...
2021-05-30 22:48:41 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>listener&lt;span class="o">]&lt;/span> Listening on 0.0.0.0:6060
&lt;/code>&lt;/pre>&lt;/div>&lt;p>浏览器中打开
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223862683344.jpg" alt="">&lt;/p>
&lt;p>配置界面
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223865498871.jpg" alt="">&lt;/p>
&lt;p>展开 &lt;code>002-hello&lt;/code> 子目录点选 &lt;code>pipy&lt;/code> 并点击运行按钮：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223866403409.jpg" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ curl -i localhost:6080
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Connection: keep-alive
Content-Length: &lt;span class="m">7&lt;/span>
Hello!
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pipy-过滤器">Pipy 过滤器&lt;/h3>
&lt;p>通过 pipe 的命令可以输出其支持的过滤器列表，一共 31 个。通过将一系列过滤器进行组装，可以实现复杂的流处理。&lt;/p>
&lt;p>比如 &lt;code>007-logging&lt;/code> 的配置实现了日志的功能：记录请求和响应的数据，并批量发送到 ElasticSearch。这里就用到了 &lt;code>fork&lt;/code>、&lt;code>connect&lt;/code>、&lt;code>onSessionStart&lt;/code>、&lt;code>encodeHttpRequest&lt;/code>、&lt;code>decodeHttpRequest&lt;/code>、&lt;code>onMessageStart&lt;/code>、&lt;code>onMessage&lt;/code>、&lt;code>decodeHttpResponse&lt;/code>、&lt;code>replaceMessage&lt;/code>、&lt;code>link&lt;/code>、&lt;code>mux&lt;/code>、&lt;code>task&lt;/code> 等十多种过滤器。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223878872474.jpg" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ bin/pipy --list-filters
connect &lt;span class="o">(&lt;/span>target&lt;span class="o">[&lt;/span>, options&lt;span class="o">])&lt;/span> Sends data to a remote endpoint and receives data from it
demux &lt;span class="o">(&lt;/span>target&lt;span class="o">)&lt;/span> Sends messages to a different pipline with each one in its own session and context
decodeDubbo &lt;span class="o">()&lt;/span> Deframes a Dubbo message
decodeHttpRequest &lt;span class="o">()&lt;/span> Deframes an HTTP request message
decodeHttpResponse &lt;span class="o">()&lt;/span> Deframes an HTTP response message
dummy &lt;span class="o">()&lt;/span> Eats up all events
dump &lt;span class="o">([&lt;/span>tag&lt;span class="o">])&lt;/span> Outputs events to the standard output
encodeDubbo &lt;span class="o">([&lt;/span>head&lt;span class="o">])&lt;/span> Frames a Dubbo message
encodeHttpRequest &lt;span class="o">([&lt;/span>head&lt;span class="o">])&lt;/span> Frames an HTTP request message
encodeHttpResponse &lt;span class="o">([&lt;/span>head&lt;span class="o">])&lt;/span> Frames an HTTP response message
&lt;span class="nb">exec&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nb">command&lt;/span>&lt;span class="o">)&lt;/span> Spawns a child process and connects to its input/output
fork &lt;span class="o">(&lt;/span>target&lt;span class="o">[&lt;/span>, sessionData&lt;span class="o">])&lt;/span> Sends copies of events to other pipeline sessions
link &lt;span class="o">(&lt;/span>target&lt;span class="o">[&lt;/span>, when&lt;span class="o">[&lt;/span>, target2&lt;span class="o">[&lt;/span>, when2, ...&lt;span class="o">]]])&lt;/span> Sends events to a different pipeline
mux &lt;span class="o">(&lt;/span>target&lt;span class="o">[&lt;/span>, selector&lt;span class="o">])&lt;/span> Sends messages from different sessions to a shared pipeline session
onSessionStart &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles the initial event in a session
onData &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles a Data event
onMessageStart &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles a MessageStart event
onMessageEnd &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles a MessageEnd event
onSessionEnd &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles a SessionEnd event
onMessageBody &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles a &lt;span class="nb">complete&lt;/span> message body
onMessage &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles a &lt;span class="nb">complete&lt;/span> message including the head and the body
print &lt;span class="o">()&lt;/span> Outputs raw data to the standard output
replaceSessionStart &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Replaces the initial event in a session
replaceData &lt;span class="o">([&lt;/span>replacement&lt;span class="o">])&lt;/span> Replaces a Data event
replaceMessageStart &lt;span class="o">([&lt;/span>replacement&lt;span class="o">])&lt;/span> Replaces a MessageStart event
replaceMessageEnd &lt;span class="o">([&lt;/span>replacement&lt;span class="o">])&lt;/span> Replaces a MessageEnd event
replaceSessionEnd &lt;span class="o">([&lt;/span>replacement&lt;span class="o">])&lt;/span> Replaces a SessionEnd event
replaceMessageBody &lt;span class="o">([&lt;/span>replacement&lt;span class="o">])&lt;/span> Replaces an entire message body
replaceMessage &lt;span class="o">([&lt;/span>replacement&lt;span class="o">])&lt;/span> Replaces a &lt;span class="nb">complete&lt;/span> message including the head and the body
tap &lt;span class="o">(&lt;/span>quota&lt;span class="o">[&lt;/span>, account&lt;span class="o">])&lt;/span> Throttles message rate or data rate
use &lt;span class="o">(&lt;/span>module, pipeline&lt;span class="o">[&lt;/span>, argv...&lt;span class="o">])&lt;/span> Sends events to a pipeline in a different module
&lt;span class="nb">wait&lt;/span> &lt;span class="o">(&lt;/span>condition&lt;span class="o">)&lt;/span> Buffers up events &lt;span class="k">until&lt;/span> a condition is fulfilled
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="原理">原理&lt;/h3>
&lt;p>“Talk is cheap, show me the code.”&lt;/p>
&lt;h4 id="配置加载">配置加载&lt;/h4>
&lt;p>个人比较喜欢看源码来理解实现，即使是 C++。从浏览器请求入手发现运行时向&lt;code>/api/program&lt;/code> 发送了 &lt;code>POST&lt;/code> 请求，请求的内容是配置文件的地址。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223870171916.jpg" alt="">&lt;/p>
&lt;p>检查源码后，找到逻辑的实现在 &lt;code>src/gui.cpp:189&lt;/code>：&lt;/p>
&lt;ol>
&lt;li>创建新的 worker&lt;/li>
&lt;li>加载配置，将 JavaScrip 代码解析成 &lt;code>Configuration&lt;/code> 对象&lt;/li>
&lt;li>启动 worker，执行&lt;code>Configuration::apply()&lt;/code>&lt;/li>
&lt;li>卸载旧的 worker&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16224186469477.jpg" alt="">&lt;/p>
&lt;p>从 &lt;code>src/api/configuration.cpp:267&lt;/code> 处看：&lt;code>pipeline&lt;/code>、&lt;code>listen&lt;/code> 和 &lt;code>task&lt;/code> 配置实际在 Pipy 的配置中都是被抽象为 &lt;code>Pipeline&lt;/code> 对象，只是在类型上有差异分别为：&lt;code>NAMED&lt;/code>、&lt;code>LISTEN&lt;/code> 和 &lt;code>TASK&lt;/code>。比如 &lt;code>listen&lt;/code> 中可以通过 &lt;code>fork&lt;/code> 过滤器将事件的副本发送到指定的 &lt;code>pipeline&lt;/code> 中。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223897550113.jpg" alt="">&lt;/p>
&lt;h4 id="基于数据流事件的处理">基于数据流事件的处理&lt;/h4>
&lt;p>&lt;code>src/inbound.cpp:171&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223918853729.jpg" alt="">&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>Pipy 虽小（只有 11M），但以其可编程的特性提供了灵活的配置能力，潜力无限。&lt;/p>
&lt;p>Pipy 像处理 HTTP 一样处理任意的七层协议。内部版本支持Dubbo、Redis、Socks 等，目前正在迁移到开源版本。&lt;/p>
&lt;p>期待即将开源的 Portal，以及服务网格 Flomesh。持续关注，后面考虑再写几篇。&lt;/p>
&lt;p>“未来可期！”&lt;/p></description></item></channel></rss>