<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CKA on 乱世浮生</title><link>https://atbug.com/tags/cka/</link><description>Recent content in CKA on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 02 Jul 2021 08:02:15 +0800</lastBuildDate><atom:link href="https://atbug.com/tags/cka/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes CKA 证书备考笔记</title><link>https://atbug.com/notes-for-cka-preparation/</link><pubDate>Fri, 02 Jul 2021 08:02:15 +0800</pubDate><guid>https://atbug.com/notes-for-cka-preparation/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/01/pexelsskitterphoto419635.jpg" alt="exam">&lt;/p>
&lt;p>Kubernetes 使用有好几年了，但在今年 5 月才完成 CKA 的考试。虽说用了几年，还是提前刷了部分题熟悉下。&lt;/p>
&lt;p>绝大部分题都是有在 minikube 的环境上操作过，只有部分比如升级集群受限于环境问题没有实地操作。&lt;/p>
&lt;h2 id="写在最前">写在最前&lt;/h2>
&lt;ol>
&lt;li>保存常用文档进书签，如果有 Alfred 启用浏览器书签 workflow。效果见下图&lt;/li>
&lt;li>kubectl 自动补全 &lt;code>echo &amp;quot;source &amp;lt;(kubectl completion bash)&amp;quot; &amp;gt;&amp;gt; ~/.bashrc; source ~/.bashrc&lt;/code>&lt;/li>
&lt;li>每道题开始前要切换 context 和 namespace，直接复制题目里的命令即可&lt;/li>
&lt;li>必要的 alias&lt;/li>
&lt;li>善用 &lt;code>--dry-run=client -o yaml&lt;/code> 避免手动敲太多&lt;/li>
&lt;li>善用 &lt;code>kubectl explain [resource[.field]]&lt;/code>&lt;/li>
&lt;li>看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/li>
&lt;li>看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/li>
&lt;li>看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/li>
&lt;/ol>
&lt;p>书签地址：&lt;a href="https://gist.github.com/addozhang/3ca950ce9b38930abfe7c5fb067e74de">K8s-CKA-CAKD-Bookmarks.html&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/01/20210630162758.png" alt="alfred-bookmarks-workflow">&lt;/p>
&lt;h2 id="安全rbac">安全：RBAC&lt;/h2>
&lt;blockquote>
&lt;p>在默认命名空间中创建一个名为 dev-sa 的服务帐户，dev-sa 可以在 dev 命名空间中创建以下组件：
&lt;code>Deployment&lt;/code>、&lt;code>StatefulSet&lt;/code>、&lt;code>DaemonSet&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点">知识点&lt;/h3>
&lt;ul>
&lt;li>role&lt;/li>
&lt;li>sa&lt;/li>
&lt;li>rolebinding&lt;/li>
&lt;li>auth can-i&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#command-line-utilities">https://kubernetes.io/docs/reference/access-authn-authz/rbac/#command-line-utilities&lt;/a>&lt;/p>
&lt;h3 id="解题思路">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create sa dev-sa
$ kubectl create role dev-role --verb&lt;span class="o">=&lt;/span>create --resource&lt;span class="o">=&lt;/span>deployment,statefulset,daemonset
&lt;span class="c1">#检查&lt;/span>
$ kubectl describe role dev-role
Name: dev-role
Labels: &amp;lt;none&amp;gt;
Annotations: &amp;lt;none&amp;gt;
PolicyRule:
Resources Non-Resource URLs Resource Names Verbs
--------- ----------------- -------------- -----
daemonsets.apps &lt;span class="o">[]&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="o">[&lt;/span>create&lt;span class="o">]&lt;/span>
deployments.apps &lt;span class="o">[]&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="o">[&lt;/span>create&lt;span class="o">]&lt;/span>
statefulsets.apps &lt;span class="o">[]&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="o">[&lt;/span>create&lt;span class="o">]&lt;/span>
$ kubectl create rolebinding dev --serviceaccount default:dev-sa --role dev-role
&lt;span class="c1">#检查&lt;/span>
$ kubectl auth can-i create deployment --as system:serviceaccount:default:dev-sa
yes
$ kubectl auth can-i create statefulset --as system:serviceaccount:default:dev-sa
yes
$ kubectl auth can-i create daemonset --as system:serviceaccount:default:dev-sa
yes
$ kubectl auth can-i create pod --as system:serviceaccount:default:dev-sa
no
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="多容器-pod">多容器 Pod&lt;/h2>
&lt;blockquote>
&lt;p>创建一个pod名称日志，容器名称 &lt;code>log-pro&lt;/code> 使用image &lt;code>busybox&lt;/code>，在 &lt;code>/log/data/output.log&lt;/code> 输出重要信息。然后另一个容器名称 &lt;code>log-cus&lt;/code> 使用 image &lt;code>busybox&lt;/code>，在 &lt;code>/log/data/output.log&lt;/code> 加载 &lt;code>output.log&lt;/code> 并打印它。 请注意，此日志文件只能在 pod 内共享。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-1">知识点&lt;/h3>
&lt;ul>
&lt;li>pod&lt;/li>
&lt;li>volume: emptyDir&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir">https://kubernetes.io/docs/concepts/storage/volumes/#emptydir&lt;/a>&lt;/p>
&lt;h3 id="解题思路-1">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl run log --image busybox --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; log.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 log.yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo important information &amp;gt; /log/data/output.log; sleep 1d&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log-pro&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/log/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">tail -f /log/data/output.log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log-cus&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/log/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">emptyDir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行创建 &lt;code>kubectl apply -f log.yaml&lt;/code>&lt;/p>
&lt;p>检查&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl logs log -c log-cus
important information
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安全网络策略-networkpolicy">安全：网络策略 NetworkPolicy&lt;/h2>
&lt;blockquote>
&lt;p>只有命名空间 &lt;code>mysql&lt;/code> 的 pod 只能被另一个命名空间 &lt;code>internal&lt;/code> 的 pod 通过 8080 端口进行访问&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-2">知识点&lt;/h3>
&lt;ul>
&lt;li>NetworkPolicy&lt;/li>
&lt;li>Ingress&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource">https://kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource&lt;/a>&lt;/p>
&lt;h3 id="解题思路-2">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NetworkPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cka-network&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">target&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#目的命名空间&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policyTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Ingress&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#策略影响入栈流量&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ingress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">from&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#允许流量的来源&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">namespaceSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ns&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#源命名空间的 label&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#允许访问的端口&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="节点状态及污点">节点状态及污点&lt;/h2>
&lt;blockquote>
&lt;p>统计这个集群中没有污染的就绪节点，并输出到文件 &lt;code>/root/cka/readyNode.txt&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-3">知识点&lt;/h3>
&lt;ul>
&lt;li>Node&lt;/li>
&lt;li>Taint（污点）&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/&lt;/p>
&lt;h3 id="解题思路-3">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># Ready 状态的数量&lt;/span>
$ kubectl get node &lt;span class="p">|&lt;/span> grep -w Ready &lt;span class="p">|&lt;/span> wc -l
&lt;span class="c1"># 查看含有 Taint 的数量，需要排除掉这些&lt;/span>
$ kubectl describe node &lt;span class="p">|&lt;/span> grep Taints &lt;span class="p">|&lt;/span> grep -i NoSchedule &lt;span class="p">|&lt;/span> wc -l
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="资源">资源&lt;/h2>
&lt;blockquote>
&lt;p>将占用CPU资源最多的pod名称输出到文件 &lt;code>/root/cka/name.txt&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-4">知识点&lt;/h3>
&lt;ul>
&lt;li>kubectl top 命令&lt;/li>
&lt;li>metrics&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-4">解题思路&lt;/h3>
&lt;p>如果是 minikube 环境，报错 &lt;code>error: Metrics API not available&lt;/code>，可以执行 &lt;code>minikube addons enable metrics-server&lt;/code> 命令开启 metrics server。&lt;/p>
&lt;p>通过 &lt;code>kubectl top&lt;/code> 命令找到 cpu 最高的 pod，将其名字写入 &lt;code>/root/cka/name.txt&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl top pod
&lt;span class="c1"># 或者&lt;/span>
$ kubectl top pod &lt;span class="p">|&lt;/span> sort -k &lt;span class="m">2&lt;/span> -n
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="网络dns">网络：DNS&lt;/h2>
&lt;blockquote>
&lt;p>有 pod 名称 &lt;code>pod-nginx&lt;/code>，创建服务名称 &lt;code>service-nginx&lt;/code>，使用 &lt;code>nodePort&lt;/code> 暴露pod。 然后创建一个 pod 使用 image &lt;code>busybox&lt;/code> 来 &lt;code>nslookup&lt;/code> pod &lt;code>pod-nginx&lt;/code> 和 service &lt;code>service-nginx&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-5">知识点&lt;/h3>
&lt;ul>
&lt;li>service with nodePort&lt;/li>
&lt;li>kubectl expose&lt;/li>
&lt;li>kubectl run&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/&lt;/p>
&lt;h3 id="解题思路-5">解题思路&lt;/h3>
&lt;p>使用 &lt;code>kubectl expose&lt;/code> 创建 service。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 创建 service&lt;/span>
kubectl expose pod pod-nginx --name service-nginx --type NodePort --target-port &lt;span class="m">80&lt;/span>
&lt;span class="c1"># 创建 pod&lt;/span>
kubectl run busybox --image busybox:latest --command sleep 1h
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 pod 的 ip 地址，pod 的 dns lookup 需要用用到 ip。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get po -o wide
NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
busybox 1/1 Running &lt;span class="m">0&lt;/span> 2m17s 172.17.0.5 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
pod-nginx 1/1 Running &lt;span class="m">0&lt;/span> 59m 172.17.0.4 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行 nslookup&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl &lt;span class="nb">exec&lt;/span> busybox -it -- nslookup 172.17.0.4
4.0.17.172.in-addr.arpa &lt;span class="nv">name&lt;/span> &lt;span class="o">=&lt;/span> 172-17-0-4.service-nginx.default.svc.cluster.local.
$ kubectl &lt;span class="nb">exec&lt;/span> busybox -it -- nslookup service-nginx
Server: 10.96.0.10
Address: 10.96.0.10#53
Name: service-nginx.default.svc.cluster.local
Address: 10.110.253.70
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工作负载扩容">工作负载：扩容&lt;/h2>
&lt;blockquote>
&lt;p>将命名空间 &lt;code>dev&lt;/code> 中的 Deployment &lt;code>scale-deploy&lt;/code> 缩放到三个 pod 并记录下来。&lt;/p>
&lt;/blockquote>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment&lt;/p>
&lt;h3 id="知识点-6">知识点&lt;/h3>
&lt;ul>
&lt;li>deployment scale up&lt;/li>
&lt;li>kubectl scale&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-6">解题思路&lt;/h3>
&lt;p>&lt;code>kubectl scale&lt;/code> 的使用，需要参数 &lt;code>--record&lt;/code> 进行记录（将操作命令记录到 deployment 的 &lt;code>kubernetes.io/change-cause&lt;/code> annotation 中）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl scale deployment scale-deploy --replicas &lt;span class="m">3&lt;/span> --record
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群备份及恢复">集群备份及恢复&lt;/h2>
&lt;blockquote>
&lt;p>备份 etcd 并将其保存在主节点上的 &lt;code>/root/cka/etcd-backup.db&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后恢复备份。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-7">知识点&lt;/h3>
&lt;ul>
&lt;li>etcd 的备份及恢复&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster&lt;/p>
&lt;h3 id="解题思路-7">解题思路&lt;/h3>
&lt;p>Kubernetes 的所有数据都记录在 etcd 中，对 etcd 进行备份就是对集群进行备份。&lt;/p>
&lt;p>连接 etcd 需要证书，证书可以从 apiserver 获取，因为 apiserver 需要连接 etcd。新版本的 apiserver 都是以 static pod 的方式运行，证书是通过 volume 挂载到 pod 中的。&lt;/p>
&lt;p>比如 minikube 环境，证书是从 node 节点的 &lt;code>/var/lib/minikube/certs&lt;/code> 挂载进去的。&lt;/p>
&lt;p>要先 ssh 到 master 节点上。命令的执行非常快，如果长时间没结束，那就说名有问题了。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#备份&lt;/span>
$ &lt;span class="nv">ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl snapshot save /root/cka/etcd-backup.db &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于只说了 restore，所以就执行 restore 的命令，默认会恢复到当前目录的 &lt;code>default.etcd&lt;/code> 下。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#恢复&lt;/span>
$ &lt;span class="nv">ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl snapshot restore /root/cka/etcd-backup.db &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群节点升级">集群节点升级&lt;/h2>
&lt;blockquote>
&lt;p>将master节点版本从 1.20.0 升级到 1.21.0，确保 master 节点上的 pod 重新调度到其他节点，升级完成后，使 master 节点可用。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-8">知识点&lt;/h3>
&lt;ul>
&lt;li>drain&lt;/li>
&lt;li>cordon&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/#upgrading-control-plane-nodes&lt;/p>
&lt;h3 id="解题思路-8">解题思路&lt;/h3>
&lt;p>受限于环境，没有实地操作。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 将节点设置为不可调度&lt;/span>
$ kubectl cordon master
&lt;span class="c1"># 驱逐 master 节点上的 pod&lt;/span>
$ kubectl drain master --ignore-daemonsets
&lt;span class="c1"># 进行升级&lt;/span>
$ apt-mark unhold kubelet kubectl &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install -y &lt;span class="nv">kubelet&lt;/span>&lt;span class="o">=&lt;/span>1.21.0-00 &lt;span class="nv">kubectl&lt;/span>&lt;span class="o">=&lt;/span>1.21.0-00 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>apt-mark hold kubelet kubectl
&lt;span class="c1"># 重新启动kubelet&lt;/span>
$ systemctl daemon-reload
$ systemctl restart kubelet
&lt;span class="c1"># 将节点设置为可调度&lt;/span>
$ kubectl uncordon master
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群节点故障排查">集群：节点故障排查&lt;/h2>
&lt;blockquote>
&lt;p>现在 node01 还没有准备好，请找出根本原因并使其准备好，然后创建一个确保它在 node01 上运行的 pod。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-9">知识点&lt;/h3>
&lt;ul>
&lt;li>节点故障排查&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-9">解题思路&lt;/h3>
&lt;p>这种问题大概率问题出在 kubelet 上&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ssh node01
systemctl status kubelet
systemctl restart kubelet
&lt;span class="c1"># 再检查node状态&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>插播一个故障，本地安装 2 个节点的 minikube 集群时，第二个节点持续 &lt;code>NotReady&lt;/code>。使用 &lt;code>systemctl status kubelet&lt;/code> 看到 &lt;code>unable to update cni config: no networks found in /etc/cni/net.mk&lt;/code>。&lt;/p>
&lt;p>检查该目录确实没有文件，从 master 节点复制到该节点后重启 kubelet 解决。&lt;/p>
&lt;h2 id="存储持久化卷">存储：持久化卷&lt;/h2>
&lt;blockquote>
&lt;p>集群中有一个持久卷名称 &lt;code>dev-pv&lt;/code>，创建一个持久卷声明名称 &lt;code>dev-pvc&lt;/code>，确保这个持久卷声明会绑定持久卷，然后创建一个 pod 名称 &lt;code>test-pvc&lt;/code>，将这个 pvc 挂载到 path &lt;code>/tmp/data&lt;/code>，使用 nginx 镜像。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-10">知识点&lt;/h3>
&lt;ul>
&lt;li>PersistentVolume&lt;/li>
&lt;li>PersistentVolumeClaim&lt;/li>
&lt;li>Mount Volume&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume&lt;/p>
&lt;h3 id="解题思路-10">解题思路&lt;/h3>
&lt;p>创建 pvc 前先获取 pv的信息&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pv dev-pv -o yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pv&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; pvc.yaml &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">apiVersion: v1
&lt;/span>&lt;span class="s">kind: PersistentVolumeClaim
&lt;/span>&lt;span class="s">metadata:
&lt;/span>&lt;span class="s"> name: dev-pvc
&lt;/span>&lt;span class="s">spec:
&lt;/span>&lt;span class="s"> accessModes:
&lt;/span>&lt;span class="s"> - ReadWriteOnce
&lt;/span>&lt;span class="s"> resources:
&lt;/span>&lt;span class="s"> requests:
&lt;/span>&lt;span class="s"> storage: 1Gi
&lt;/span>&lt;span class="s">EOF&lt;/span>
$ kubectl apply -f pvc.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pod 的 manifest，记得使用 &lt;code>kubectl run --dry-run=client -o yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl run test-pvc --image nginx --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; test-pvc.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改之后得到最终的 pod yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dev-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>理论上只要 pod 能运行，就说明成功。也可以进一步确认挂载是否成功，在 pod 的 &lt;code>/tmp/data&lt;/code> 中 touch 个文件，然后到节点的目录中查看是有该文件。&lt;/p>
&lt;h2 id="工作负载多容器的-deployment">工作负载：多容器的 Deployment&lt;/h2>
&lt;blockquote>
&lt;p>创建一个名为 &lt;code>deploy-important&lt;/code> 的 Deployment，标签为 &lt;code>id=very-important&lt;/code>（pod 也应该有这个标签）和命名空间 dev 中的 3 个副本。 它应该包含两个容器，第一个名为 &lt;code>container1&lt;/code> 并带有镜像，第二个名为 container2 的图像为 &lt;code>kubernetes/pause&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在一个工作节点上应该只运行该部署的一个 Pod。 我们有两个工作节点：&lt;code>cluster1-worker1&lt;/code> 和 &lt;code>cluster1-worker2&lt;/code>。 因为 Deployment 有三个副本，所以结果应该是在两个节点上都有一个 Pod 正在运行。 不会调度第三个 Pod，除非添加新的工作节点。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-11">知识点&lt;/h3>
&lt;ul>
&lt;li>deployment&lt;/li>
&lt;li>pod label&lt;/li>
&lt;li>replicas&lt;/li>
&lt;li>multi container pod&lt;/li>
&lt;li>pod anti affinity&lt;/li>
&lt;/ul>
&lt;p>官方文档参考：https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#never-co-located-in-the-same-node&lt;/p>
&lt;h3 id="解题思路-11">解题思路&lt;/h3>
&lt;p>先创建模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create deployment deploy-important --image nginx --replicas &lt;span class="m">3&lt;/span> --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; deploy-important.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改后的 yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">affinity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podAntiAffinity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requiredDuringSchedulingIgnoredDuringExecution&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">labelSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">id&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">In&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">topologyKey&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetes.io/hostname&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">container1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetes/pause&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">container2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>minikube 上测试只能调度一个 pod，符合预期&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kgpo
NAME READY STATUS RESTARTS AGE
deploy-important-659d54fc47-6cp8r 0/2 Pending &lt;span class="m">0&lt;/span> 3h10m
deploy-important-659d54fc47-92z4d 2/2 Running &lt;span class="m">0&lt;/span> 3h10m
deploy-important-659d54fc47-c6llc 0/2 Pending &lt;span class="m">0&lt;/span> 3h10m
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="存储secret的使用">存储：Secret的使用&lt;/h2>
&lt;blockquote>
&lt;p>在 &lt;code>secret&lt;/code> 命名空间下，使用镜像 &lt;code> busybox:1.31.1&lt;/code> 创建一个名为 &lt;code>secret-pod&lt;/code> 的 pod，并保证 pod 运行一段时间&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>有个名为 &lt;code>sercret1.yaml&lt;/code> 的 Secret 文件，在 &lt;code>secret&lt;/code> 命名空间下创建 Secret，并以只读的方式挂在到 Pod 的 &lt;code>/tmp/secret1&lt;/code> 目录
创建一个新的 Secret &lt;code>secret2&lt;/code> 包含 &lt;code>user=user1&lt;/code> 和 &lt;code>pass=1234&lt;/code>，分别以缓解变量 &lt;code>APP_USER&lt;/code> 和 &lt;code>APP_PASS&lt;/code> 输入到 Pod 中&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-12">知识点&lt;/h3>
&lt;ul>
&lt;li>secret&lt;/li>
&lt;li>toleration&lt;/li>
&lt;li>taints&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets">https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets&lt;/a>
&lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables">https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables&lt;/a>&lt;/p>
&lt;h3 id="解题思路-12">解题思路&lt;/h3>
&lt;p>创建 namespace&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create ns secret
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pod 模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubectl run secret-pod --image busybox:1.31.1 --dry-run=client -o yaml --command -- sleep 1d &amp;gt; secret-pod.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 secret1.yaml，使用 secret namespace&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">halt&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IyEvYmluL2Jhc2g=&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2021-05-15T07:48:02Z&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Opaque&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 secret2&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create secret generic secret2 --from-literal &lt;span class="nv">user&lt;/span>&lt;span class="o">=&lt;/span>user1 --from-literal &lt;span class="nv">pass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1234&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sleep&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">1d&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox:1.31.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">APP_USER&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">user&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">APP_PASS&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pass&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/secret1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sec&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sec&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl &lt;span class="nb">exec&lt;/span> secret-pod -- cat /tmp/secret1/halt
&lt;span class="c1">#!/bin/bash&lt;/span>
$ kubectl &lt;span class="nb">exec&lt;/span> secret-pod -- env &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;APP_&amp;#39;&lt;/span>
&lt;span class="nv">APP_USER&lt;/span>&lt;span class="o">=&lt;/span>user1
&lt;span class="nv">APP_PASS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1234&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工作负载静态-pod">工作负载：静态 Pod&lt;/h2>
&lt;blockquote>
&lt;p>在 &lt;code>cluster3-master1&lt;/code> 上的 &lt;code>default&lt;/code> 命名空间中创建一个名为 &lt;code>my-static-pod&lt;/code> 的静态 Pod。 使用镜像 &lt;code>nginx:1.16-alpine&lt;/code> 并分配 10m CPU 和 20Mi 内存的资源。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Then create a NodePort Service named static-pod-service which exposes that static Pod on port 80 and check if it has Endpoints and if its reachable through the cluster3-master1 internal IP address. You can connect to the internal node IPs from your main terminal.
然后创建一个名为&lt;code> static-pod-service&lt;/code> 的 NodePort Service，该服务在端口 80 上公开该静态 Pod，并检查它是否具有端点以及是否可以通过 &lt;code>cluster3-master1&lt;/code> 内部 IP 地址访问它。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-13">知识点&lt;/h3>
&lt;ul>
&lt;li>static pod&lt;/li>
&lt;li>resource&lt;/li>
&lt;li>nodeport service&lt;/li>
&lt;li>endpoints&lt;/li>
&lt;/ul>
&lt;p>参考文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/static-pod/">https://kubernetes.io/docs/tasks/configure-pod-container/static-pod/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory">https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-13">解题思路&lt;/h3>
&lt;p>创建pod模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run my-static-pod --image nginx:1.16-alpine --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; static-pod.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改模板，增加资源配置&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-static-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-static-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.16-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-static-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;10m&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;20Mi&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ssh 到主机，找到 kubelet 配置文件的位置 &lt;code>ps -ef | grep kubelet&lt;/code>&lt;/p>
&lt;p>查看配置文件（minikube：/var/lib/kubelet/config.yaml）中 &lt;code>staticPodPath&lt;/code> 配置的就是静态 pod 的 manifest 的位置（minikube：/etc/kubernetes/manifests）&lt;/p>
&lt;p>将 &lt;code>static-pod.yaml&lt;/code> 放到正确的文件夹中，然后重启 kubelet&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查pod是否正确运行&lt;/p>
&lt;p>创建 node port&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl expose pod my-static-pod --name static-pod-service --type NodePort --port &lt;span class="m">80&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否创建成功&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get svc
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
static-pod-service NodePort 10.97.248.99 &amp;lt;none&amp;gt; 80:31938/TCP 68s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 node 的 ip&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get node -o wide
NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME
cka Ready master 10h v1.18.8 192.168.64.3 &amp;lt;none&amp;gt; Buildroot 2020.02.10 4.19.171 docker://20.10.4
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 minikube 的环境下可直接通过 &lt;code>minikube ip&lt;/code> 获取&lt;/p>
&lt;p>测试&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http 192.168.64.3:31938 --headers
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Accept-Ranges: bytes
Connection: keep-alive
Content-Length: &lt;span class="m">612&lt;/span>
Content-Type: text/html
Date: Sat, &lt;span class="m">15&lt;/span> May &lt;span class="m">2021&lt;/span> 08:35:11 GMT
ETag: &lt;span class="s2">&amp;#34;5d52db33-264&amp;#34;&lt;/span>
Last-Modified: Tue, &lt;span class="m">13&lt;/span> Aug &lt;span class="m">2019&lt;/span> 15:45:55 GMT
Server: nginx/1.16.1
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="调度污点和容忍度">调度：污点和容忍度&lt;/h2>
&lt;blockquote>
&lt;p>在命名空间 &lt;code>default&lt;/code> 中创建图像 &lt;code>httpd:2.4.41-alpine&lt;/code> 的单个 Pod。Pod 应命名为 &lt;code>pod1&lt;/code>，容器名为 &lt;code>pod1-container&lt;/code>。在不给任何节点添加新标签的前提下，将该 pod 调度到主节点上。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-14">知识点&lt;/h3>
&lt;ul>
&lt;li>Taint&lt;/li>
&lt;li>Label&lt;/li>
&lt;li>Tolerance&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/&lt;/p>
&lt;h3 id="解题思路-14">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#找出master节点（一般考试只有一个节点）
$ kubectl get node
#找到 master 节点的 taints，需要在 pod 的 .spec.tolerations 排除掉
$ kubectl describe node xxxx | grep -w Taints
#找到 master 节点的 labels
$ kubectl describe node xxxx | grep -w Labels -A10
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建pod模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run pod1 --image httpd:2.4.41-alpine --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; pod1.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改模板： 这里假设主节点的 Taint 为 &lt;code>node-role.kubernetes.io/master=:NoSchedule&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># minikube 集群名为 cka，主节点同名&lt;/span>
$ kubectl describe node cka &lt;span class="p">|&lt;/span> grep -i taint
Taints: node-role.kubernetes.io/master:NoSchedule
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终的 pod 如下&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd:2.4.41-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node-role.kubernetes.io/master&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NoSchedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">node-role.kubernetes.io/master&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后检查下是否调度到主节点上：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -o wide
NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
pod1 1/1 Running &lt;span class="m">0&lt;/span> 102s 10.244.0.3 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubectl-命令和排序">kubectl 命令和排序&lt;/h2>
&lt;blockquote>
&lt;p>所有命名空间中都有各种 Pod。 将命令写入 /opt/course/5/find_pods.sh，其中列出所有按 AGE 排序的 Pod（metadata.creationTimestamp）。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将第二个命令写入 /opt/course/5/find_pods_uid.sh，其中列出按字段 metadata.uid 排序的所有 Pod。对这两个命令都使用 kubectl 排序。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-15">知识点&lt;/h3>
&lt;ul>
&lt;li>kubectl 命令的使用，主要是 &lt;code>--all-namespaces&lt;/code> （缩写 &lt;code>-A&lt;/code>） 和 &lt;code>--sort-by&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-15">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; /opt/course/5/find_pods.sh &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kubectl get pod -A --sort-by &amp;#39;.metadata.creationTimestamp&amp;#39;
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; /opt/course/5/find_pods_uid.sh &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kubectl get pod -A --sort-by &amp;#39;.metadata.uid&amp;#39;
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="存储持久化卷和挂载">存储：持久化卷和挂载&lt;/h2>
&lt;blockquote>
&lt;p>创建一个名为 &lt;code>safari-pv&lt;/code> 的新 &lt;code>PersistentVolume&lt;/code>。它应该具有 2Gi 的容量、&lt;code>accessMode&lt;/code> &lt;code>ReadWriteOnce&lt;/code>、&lt;code>hostPath&lt;/code> &lt;code>/Volumes/Data&lt;/code> 并且没有定义 &lt;code>storageClassName&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>接下来在命名空间 &lt;code>project-tiger&lt;/code> 中创建一个名为 &lt;code>safari-pvc&lt;/code> 的新 &lt;code>PersistentVolumeClaim&lt;/code>。 它应该请求 2Gi 存储，&lt;code>accessMode&lt;/code> &lt;code>ReadWriteOnce&lt;/code> 并且不应定义 &lt;code>storageClassName&lt;/code>。 PVC 应该正确绑定到 PV。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后在命名空间 &lt;code>project-tiger&lt;/code> 中创建一个新的 Deployment &lt;code>safari&lt;/code>，它将该卷挂载到 &lt;code>/tmp/safari-data&lt;/code>。该 Deployment 的 Pod 应该是镜像 httpd:2.4.41-alpine。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-16">知识点&lt;/h3>
&lt;ul>
&lt;li>pv&lt;/li>
&lt;li>pvc&lt;/li>
&lt;li>pod 使用 pvc&lt;/li>
&lt;li>deployment&lt;/li>
&lt;li>mount PVC volume&lt;/li>
&lt;/ul>
&lt;p>参考文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume">https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolumeclaim">https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolumeclaim&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#claims-as-volumes">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#claims-as-volumes&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-16">解题思路&lt;/h3>
&lt;p>创建 pv&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolume&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari-pv&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">local&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">capacity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/Volumes/Data&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pvc&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolumeClaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否绑定成功&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pvc
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE
safari-pvc Bound pvc-d4c15825-2de3-470f-8ed0-9519cacaad21 2Gi RWO standard 24s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 deployment 模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create deployment safari --image httpd:2.4.41-alpine --dry-run&lt;span class="o">=&lt;/span>client -o yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终的yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd:2.4.41-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/safari-data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubectl-命令和-context">kubectl 命令和 context&lt;/h2>
&lt;blockquote>
&lt;p>可以通过 kubectl 上下文从主终端访问多个集群。将所有这些上下文名称写入 /opt/course/1/contexts。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>接下来在 /opt/course/1/context_default_kubectl.sh 中写一个显示当前上下文的命令，该命令应该使用kubectl。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后在 /opt/course/1/context_default_no_kubectl.sh 中写入第二个执行相同操作的命令，但不使用 kubectl。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-17">知识点&lt;/h3>
&lt;p>kubectl config 相关命令的使用&lt;/p>
&lt;h3 id="解题思路-17">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl config get-contexts -o name &amp;gt; /opt/course/1/contexts
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat &amp;gt; /opt/course/1/context_default_kubectl.sh &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kubectl config current-context
&lt;/span>&lt;span class="s">EOF&lt;/span>
chmod +x /opt/course/1/context_default_kubectl.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat ~/.kube/config &lt;span class="p">|&lt;/span> grep current-context &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $2}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工作负载缩容">工作负载：缩容&lt;/h2>
&lt;blockquote>
&lt;p>命名空间 &lt;code>project-c13&lt;/code> 中有两个名为 &lt;code>o3db-*&lt;/code> 的 Pod。 C13 管理层要求将 Pod 缩减为一个副本以节省资源。 记录动作。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-18">知识点&lt;/h3>
&lt;ul>
&lt;li>scale&lt;/li>
&lt;li>deploy&lt;/li>
&lt;li>statefulset&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/zh/docs/tasks/run-application/scale-stateful-set/">https://kubernetes.io/zh/docs/tasks/run-application/scale-stateful-set/&lt;/a>
&lt;a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment">https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment&lt;/a>&lt;/p>
&lt;h3 id="解题思路-18">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl scale &amp;lt;resource&amp;gt; xxx --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>scale 命令需要确认资源类型：deployment/statefulset&lt;/p>
&lt;h2 id="应用就绪和探活">应用就绪和探活&lt;/h2>
&lt;blockquote>
&lt;p>在命名空间 &lt;code>default&lt;/code> 中执行以下操作。为 &lt;code>nginx:1.16.1-alpine&lt;/code> 创建一个名为 &lt;code>ready-if-service-ready&lt;/code> 的 Pod。配置一个 &lt;code>LivenessProbe&lt;/code>，它只是运行 &lt;code>true&lt;/code>。还要配置一个 &lt;code>ReadinessProbe&lt;/code> 来检查 &lt;code>url&lt;/code> &lt;code>http://service-am-i-ready:80&lt;/code> 是否可达，可以使用 &lt;code>wget -T2 -O- http://service-am-i-ready:80&lt;/code>。 启动 Pod 并确认它因为 &lt;code>ReadinessProbe&lt;/code> 而没有准备好。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>创建第二个名为 &lt;code>am-i-ready&lt;/code> 的 Pod 镜像 &lt;code>nginx:1.16.1-alpine&lt;/code>，标签 &lt;code>id:cross-server-ready&lt;/code>。已经存在的服务 &lt;code>service-am-i-ready&lt;/code> 现在应该有第二个 Pod 作为端点。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-19">知识点&lt;/h3>
&lt;ul>
&lt;li>probe&lt;/li>
&lt;li>pod&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&lt;/a>&lt;/p>
&lt;h3 id="解题思路-19">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl run ready-if-service-ready --image nginx:1.16.1-alpine --dry-run=client -o yaml &amp;gt; ready-if-service-ready.yaml
kubectl run am-i-ready --image nginx:1.16.1-alpine --labels id=cross-server-ready --dry-run=client -o yaml &amp;gt; am-i-ready.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加 probes&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready-if-service-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready-if-service-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.16.1-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready-if-service-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">hi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">wget&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">T2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">O-&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">http://service-am-i-ready:80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群控制平面">集群：控制平面&lt;/h2>
&lt;blockquote>
&lt;p>使用 &lt;code>ssh cluster1-master1&lt;/code> ssh 进入主节点。检查 master 组件 kubelet、kube-apiserver、kube-scheduler、kube-controller-manager 和 etcd 如何在 master 节点上启动/安装。还要找出 DNS 应用的名称以及它是如何在主节点上启动/安装的。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将结果写入文件 /opt/course/8/master-components.txt。该文件的结构应如下所示：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># /opt/course/8/master-components.txt
kubelet: [TYPE]
kube-apiserver: [TYPE]
kube-scheduler: [TYPE]
kube-controller-manager: [TYPE]
etcd: [TYPE]
dns: [TYPE] [NAME]
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;blockquote>
&lt;p>Choices of [TYPE] are: not-installed, process, static-pod, pod&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-20">知识点&lt;/h3>
&lt;p>Kubernetes components 的安装方式&lt;/p>
&lt;h3 id="解题思路-20">解题思路&lt;/h3>
&lt;p>当前比较的组件都是以static pod的形式运行的，而 static pod 都是由 Kubelet 管理的，所以从 kubelet 处入手。&lt;/p>
&lt;p>以 minikube 为例：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ps -ef &lt;span class="p">|&lt;/span> grep -w kubelet
root &lt;span class="m">140597&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> May15 ? 00:36:00 /var/lib/minikube/binaries/v1.18.8/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>cka --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64.3
$ systemctl is-active kubelet
active
&lt;span class="c1">#kubelet: process&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据前面进程中的信息，查看 &lt;code>/var/lib/kubelet/config.yaml&lt;/code>中的内容。可以得到：&lt;/p>
&lt;p>etcd: static-pod
kube-apiserver: static-pod
kube-controller-manager: static-pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat /var/lib/kubelet/config.yaml &lt;span class="p">|&lt;/span> grep -i staticpod
staticPodPath: /etc/kubernetes/manifests
ls /etc/kubernetes/manifests
etcd.yaml kube-apiserver.yaml kube-controller-manager.yaml kube-scheduler.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后上下dns，查看下pod，得知 dns: pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -A &lt;span class="p">|&lt;/span> grep dns
kube-system coredns-66bff467f8-6k2br 1/1 Running &lt;span class="m">0&lt;/span> 32h
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后将上面的结果写入到 &lt;code>/opt/course/8/master-components.txt&lt;/code>，不能前功尽弃。&lt;/p>
&lt;h2 id="集群pod-调度">集群：Pod 调度&lt;/h2>
&lt;blockquote>
&lt;p>使用 &lt;code>ssh cluster2-master1&lt;/code> ssh 进入主节点。暂时停止 &lt;code>kube-scheduler&lt;/code>，这意味着可以在之后再次启动它。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>为镜像 &lt;code>httpd:2.4-alpine&lt;/code> 创建一个名为 &lt;code>manual-schedule&lt;/code> 的 Pod，确认它已启动但未在任何节点上调度。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>现在您是调度程序并拥有所有权力，在节点 &lt;code>cluster2-master1&lt;/code> 上手动调度该 Pod。 确保它正在运行。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>再次启动 &lt;code>kube-scheduler&lt;/code> 并通过在镜像 &lt;code>httpd:2.4-alpine&lt;/code> 创建第二个名为 &lt;code>manual-schedule2&lt;/code> 的 Pod 并检查它是否在 &lt;code>cluster2-worker1&lt;/code> 上运行来确认其运行正常。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-21">知识点&lt;/h3>
&lt;ul>
&lt;li>kubernetes 组件的运行方式&lt;/li>
&lt;li>创建 pod&lt;/li>
&lt;li>pod 调度&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-21">解题思路&lt;/h3>
&lt;p>kube-scheduler 是以 static pod 的方式运行，因此我们需要 ssh 到节点上，将 scheduler 的 yaml 移出（记住不要删掉，还要还原回去），重启 kubelet&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ps -ef &lt;span class="p">|&lt;/span> grep -w kubelet
root &lt;span class="m">140597&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> May15 ? 00:36:00 /var/lib/minikube/binaries/v1.18.8/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>cka --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64.3
$ cat /var/lib/kubelet/config.yaml &lt;span class="p">|&lt;/span> grep -i staticpod
staticPodPath: /etc/kubernetes/manifests
$ ls /etc/kubernetes/manifests
etcd.yaml kube-apiserver.yaml kube-controller-manager.yaml kube-scheduler.yaml
$ mv /etc/kubernetes/manifests/kube-scheduler.yaml /etc/kubernetes
$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查下 schedule pod 没有运行，然后尝试创建 pod，并查看 pod 处于 pending 状态，即没有 kube-scheduler 为其调度。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run manual-schedule --image httpd:2.4-alpine
$ kubectl get pod &lt;span class="p">|&lt;/span> grep manual-schedule
manual-schedule 0/1 Pending &lt;span class="m">0&lt;/span> 16s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>手动调度，即为 pod 指定一个 &lt;code>nodeName&lt;/code>，我的 minikube 只有一个 node 名为 cka，修改pod：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod manual-schedule -o yaml &amp;gt; manual-schedule.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加 nodeName 之后&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2021-05-16T07:27:16Z&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dev&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resourceVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;84805&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selfLink&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/api/v1/namespaces/dev/pods/manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uid&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">c4b592f6-1e07-4911-a7fe-867d813c7a55&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd:2.4-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationMessagePath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/dev/termination-log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationMessagePolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">File&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/run/secrets/kubernetes.io/serviceaccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-token-v7f28&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readOnly&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cka&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#node name here&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enableServiceLinks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">priority&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">schedulerName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-scheduler&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">securityContext&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccount&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccountName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationGracePeriodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NoExecute&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node.kubernetes.io/not-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Exists&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerationSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">300&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NoExecute&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node.kubernetes.io/unreachable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Exists&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerationSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">300&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-token-v7f28&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">defaultMode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">420&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-token-v7f28&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">phase&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pending&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">qosClass&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">BestEffort&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>强制更新 pod（运行时只能修改部分内容）：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl replace -f manual-schedule.yaml --force
pod &lt;span class="s2">&amp;#34;manual-schedule&amp;#34;&lt;/span> deleted
pod/manual-schedule replaced
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再次检查&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod &lt;span class="p">|&lt;/span> grep manual-schedule
manual-schedule 1/1 Running &lt;span class="m">0&lt;/span> 15s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>恢复 kube-scheduler 的运行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ mv /etc/kubernetes/kube-scheduler.yaml /etc/kubernetes/manifests
$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否运行&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -A &lt;span class="p">|&lt;/span> grep kube-scheduler
kube-system kube-scheduler-cka 1/1 Running &lt;span class="m">0&lt;/span> 66s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建第二个pod，并检查是否在运行（running）状态&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run manual-schedule2 --image httpd:2.4-alpine
pod/manual-schedule2 created
kubectl get pod manual-schedule2
NAME READY STATUS RESTARTS AGE
manual-schedule2 1/1 Running &lt;span class="m">0&lt;/span> 6s
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群备份及恢复-1">集群：备份及恢复&lt;/h2>
&lt;blockquote>
&lt;p>对在 &lt;code>cluster3-master1&lt;/code> 上运行的 etcd 进行备份，并将其保存在主节点上的 &lt;code>/tmp/etcd-backup.db&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>然后在集群中创建一个你喜欢的 Pod。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后恢复备份，确认集群仍在工作并且创建的 Pod 不再与我们在一起。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-22">知识点&lt;/h3>
&lt;ul>
&lt;li>etc 的作用：存储集群的状态信息，包括 pod 信息&lt;/li>
&lt;li>etc 的备份和恢复&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster">https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster&lt;/a>&lt;/p>
&lt;h3 id="解题思路-22">解题思路&lt;/h3>
&lt;p>etcd的命令执行，记得设置API的版本 &lt;code>ETCDCTL_API=3&lt;/code>&lt;/p>
&lt;p>操作 etcd 需要 &lt;code>endpoints&lt;/code>、&lt;code>cacert&lt;/code>、&lt;code>cert&lt;/code>、&lt;code>key&lt;/code>。Kubernetes 的所有组件与 etcd 的数据交互都是通过 api-server 完成的，我只需要找到 api-server 的运行命令就行，两种方式：到 master 主机查看 api-server 的进程；或者去 api-server 的 pod 查看 &lt;code>.spec.containers[].command&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#ssh to master&lt;/span>
$ ps -ef &lt;span class="p">|&lt;/span> grep kube-apiserver
$ kubectl get pod -n kube-system kube-apiserver-cka -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.spec.containers[].command}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>etcd 备份，命令直接从 Kubernetes 官方文档复制再修改&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#ssh to master&lt;/span>
&lt;span class="nv">$ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl --endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt --cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt --key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> snapshot save /tmp/etcd-backup.db
Snapshot saved at /tmp/etcd-backup.db
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run sleep1d --image busybox --command -- sleep 1d
&lt;span class="c1">#检查 pod 运行情况&lt;/span>
$ kubectl get pod
NAME READY STATUS RESTARTS AGE
sleep1d 1/1 Running &lt;span class="m">0&lt;/span> 10s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>恢复 etcd 的备份，复制前面的命令并修改，恢复备份到 &lt;code>/var/lib/etcd-backup&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ &lt;span class="nv">ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl --endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 --cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt --cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt --key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key snapshot restore /tmp/etcd-backup.db --data-dir /var/lib/etcd-backup
2021-05-16 08:09:17.797061 I &lt;span class="p">|&lt;/span> mvcc: restore compact to &lt;span class="m">85347&lt;/span>
2021-05-16 08:09:17.803208 I &lt;span class="p">|&lt;/span> etcdserver/membership: added member 8e9e05c52164694d &lt;span class="o">[&lt;/span>http://localhost:2380&lt;span class="o">]&lt;/span> to cluster cdf818194e3a8c32
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 etcd 的配置， &lt;code>/etc/kubernetes/manifests/etcd.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/lib/minikube/certs/etcd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DirectoryOrCreate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">etcd-certs&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/lib/etcd-backup &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#原来是/var/lib/minikube/etcd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DirectoryOrCreate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">etcd-data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存后重启kubelet&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查pod是否存在：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod sleep1d
Error from server &lt;span class="o">(&lt;/span>NotFound&lt;span class="o">)&lt;/span>: pods &lt;span class="s2">&amp;#34;sleep1d&amp;#34;&lt;/span> not found
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安全网络策略">安全：网络策略&lt;/h2>
&lt;blockquote>
&lt;p>发生了一起安全事件，入侵者能够从一个被黑的后端 Pod 访问整个集群。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>为了防止这种情况，在命名空间 &lt;code>project-snake&lt;/code> 中创建一个名为 &lt;code>np-backend&lt;/code> 的 &lt;code>NetworkPolicy&lt;/code>。它应该只允许 &lt;code>backend-*&lt;/code> Pods：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>连接到端口 &lt;code>1111&lt;/code> 上的 &lt;code>db1-*&lt;/code> Pod
连接到端口 &lt;code>2222&lt;/code> 上的 &lt;code>db2-*&lt;/code> Pod
在策略中使用 Pod 的应用程序标签。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>实施后，例如，端口 3333 上从 &lt;code>backend-*&lt;/code> Pod 到 &lt;code>vault-*&lt;/code> Pod 的连接应该不再有效。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-23">知识点&lt;/h3>
&lt;ul>
&lt;li>NetworkPolicy&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies">https://kubernetes.io/docs/concepts/services-networking/network-policies&lt;/a>&lt;/p>
&lt;h3 id="解题思路-23">解题思路&lt;/h3>
&lt;p>为 backend-* pod 设置 egress 的 NetworkPolicy，只允许其访问 db1-* 的 1111 端口和 db2-* 的 2222 端口，策略中使用 app label 来进行匹配。&lt;/p>
&lt;p>从 Kubernetes 官网文档中复制一段yaml配置进行修改。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NetworkPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">np-backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">project-snake&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policyTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Egress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">egress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1111&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db2 &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2222&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设 backend pod 的 app label 为 backend，db1 的 为 db1，db2 的为 db2。&lt;/p>
&lt;p>创建环境：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run backend --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>backend
$ kubectl run db1 --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>db1
$ kubectl run db2 --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>db2
$ kubectl run vault --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>vault
$ kubectl get pod -L app
NAME READY STATUS RESTARTS AGE APP
backend 1/1 Running &lt;span class="m">0&lt;/span> 13s backend
db1 1/1 Running &lt;span class="m">0&lt;/span> 66s db1
db2 1/1 Running &lt;span class="m">0&lt;/span> 71s db2
vault 1/1 Running &lt;span class="m">0&lt;/span> 79s vault
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于我们用的 nginx 镜像，将前面的 NetworkPolicy 端口修改一下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NetworkPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">np-backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policyTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Egress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">egress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db2 &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查一下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get networkpolicy
NAME POD-SELECTOR AGE
np-backend &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>backend 31s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试下网络：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#获取pod ip&lt;/span>
$ kubectl get pod -o wide
NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
backend 1/1 Running &lt;span class="m">0&lt;/span> 3m15s 172.17.0.7 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
db1 1/1 Running &lt;span class="m">0&lt;/span> 4m8s 172.17.0.6 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
db2 1/1 Running &lt;span class="m">0&lt;/span> 4m13s 172.17.0.3 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
vault 1/1 Running &lt;span class="m">0&lt;/span> 4m21s 172.17.0.4 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群kubelet-启动方式">集群：kubelet 启动方式&lt;/h2>
&lt;blockquote>
&lt;p>节点 &lt;code>cluster2-worker1&lt;/code> 已使用 kubeadm 和 TLS 引导添加到集群中。
找到 &lt;code>cluster2-worker1&lt;/code> 的 “Issuer” 和 “Extended Key Usage” 值：
kubelet 客户端证书，用于向外连接到 kube-apiserver 的证书。
kubelet 服务器证书，用于来自 kube-apiserver 的传入连接。
将信息写入文件 &lt;code>/opt/course/23/certificate-info.txt&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="知识点-24">知识点&lt;/h2>
&lt;ul>
&lt;li>kubelet 的功能：连接 api-server；接受来自 api-server 的响应。两种情况都需要 TLS&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-24">解题思路&lt;/h3>
&lt;p>kubelet 连接 apiserver 的方式在配置文件中，先找出配置文件的保存位置。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># ssh 到节点上，查看 kubelet 的启动命令&lt;/span>
$ ps -ef &lt;span class="p">|&lt;/span> grep kubelet
root &lt;span class="m">3935&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 12:54 ? 00:00:23 /var/lib/minikube/binaries/v1.20.0/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --cni-conf-dir&lt;span class="o">=&lt;/span>/etc/cni/net.mk --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>cka-m02 --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --network-plugin&lt;span class="o">=&lt;/span>cni --node-ip&lt;span class="o">=&lt;/span>192.168.64.9
docker &lt;span class="m">13653&lt;/span> &lt;span class="m">13616&lt;/span> &lt;span class="m">0&lt;/span> 13:22 pts/0 00:00:00 grep kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#kubelet 连接 api server 的信息， client cert 的配置所在 /var/lib/kubelet/pki/kubelet-client-current.pem&lt;/span>
cat /var/lib/kubelet/config.yaml
&lt;span class="c1">#kubelet 的启动信息， servert cert 的配置所在 /var/lib/minikube/certs/ca.crt&lt;/span>
cat /etc/kubernetes/kubelet.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ openssl x509 -noout -text -in /var/lib/kubelet/pki/kubelet-client-current.pem &lt;span class="p">|&lt;/span> grep -i issuer
Issuer: &lt;span class="nv">CN&lt;/span> &lt;span class="o">=&lt;/span> minikubeCA
$ openssl x509 -noout -text -in /var/lib/kubelet/pki/kubelet-client-current.pem &lt;span class="p">|&lt;/span> grep -i -A1 extended
X509v3 Extended Key Usage:
TLS Web Client Authentication
$ openssl x509 -noout -text -in /var/lib/minikube/certs/ca.crt &lt;span class="p">|&lt;/span> grep -i issuer
Issuer: &lt;span class="nv">CN&lt;/span> &lt;span class="o">=&lt;/span> minikubeCA
$ openssl x509 -noout -text -in /var/lib/minikube/certs/ca.crt &lt;span class="p">|&lt;/span> grep -i -A1 extended
X509v3 Extended Key Usage:
TLS Web Client Authentication, TLS Web Server Authentication
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后记得将信息写入到 &lt;code>/opt/course/23/certificate-info.txt&lt;/code>&lt;/p>
&lt;h2 id="集群证书">集群：证书&lt;/h2>
&lt;blockquote>
&lt;p>检查 kube-apiserver 服务器证书在 &lt;code>cluster2-master1&lt;/code> 上的有效期。使用 openssl 或 cfssl 执行此操作。将到期日期写入 &lt;code>/opt/course/22/expiration&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>同时运行正确的 kubeadm 命令以列出到期日期并确认两种方法显示相同的日期。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将更新 apiserver 服务器证书的正确 kubeadm 命令写入 &lt;code>/opt/course/22/kubeadm-renew-certs.sh&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-25">知识点&lt;/h3>
&lt;ul>
&lt;li>api-server&lt;/li>
&lt;li>openssl&lt;/li>
&lt;li>kubeadm&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/#check-certificate-expiration&lt;/p>
&lt;h3 id="解题思路-25">解题思路&lt;/h3>
&lt;p>通过 kube-apiserver pod 的启动命令，或者 ssh 到 master 来查看命令参数，&lt;code>tls-cert-file=/var/lib/minikube/certs/apiserver.crt&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ openssl x509 -noout -text -in /var/lib/minikube/certs/apiserver.crt &lt;span class="p">|&lt;/span> grep -i valid -A2
Validity
Not Before: May &lt;span class="m">13&lt;/span> 22:33:43 &lt;span class="m">2021&lt;/span> GMT
Not After : May &lt;span class="m">14&lt;/span> 22:33:43 &lt;span class="m">2022&lt;/span> GMT
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 &lt;code>May 14 22:33:43 2022 GMT&lt;/code> 写入 &lt;code>/opt/course/22/expiration&lt;/code>&lt;/p>
&lt;p>通过 kubeadm 来检查&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubeadm certs check-expiration | grep -i apiserver
#macos 无法安装 kubeadm
#minikube 无法使用 kubeadm 检查
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 &lt;code>kubeadm certs renew apiserver&lt;/code> 写入 /opt/course/22/kubeadm-renew-certs.sh&lt;/p>
&lt;h2 id="集群升级节点">集群：升级节点&lt;/h2>
&lt;blockquote>
&lt;p>你的同事说节点 &lt;code>cluster3-worker2&lt;/code> 运行的是较旧的 Kubernetes 版本，甚至不属于集群的一部分。将 kubectl 和 kubeadm 更新为在 &lt;code>cluster3-master1&lt;/code> 上运行的确切版本。然后将此节点添加到集群中，您可以为此使用kubeadm。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-26">知识点&lt;/h3>
&lt;ul>
&lt;li>kubeadm 升级集群&lt;/li>
&lt;/ul>
&lt;p>参考文档：&lt;/p>
&lt;h3 id="解题思路-26">解题思路&lt;/h3>
&lt;p>检查node&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get nodes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查当前组件版本&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ssh cluster3-worker2
$ kubeadm version
$ kubectl version --short
Client Version: vx.xx.x
Server Version: vx.xx.x
$ kubelet --version
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#使用命令并升级各个组件，并重启 kubelet
#如果启动失败，一般是需要token连接到api-server，需要ssh到master上运行 kubeadm create token --print-join-command
#再ssh到 node上，执行打印的命令，重启kubelet并检查装填
#最后检查node是否成功加入集群
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-命令">Docker 命令&lt;/h2>
&lt;blockquote>
&lt;p>在命名空间 &lt;code>project-tiger&lt;/code> 中创建一个名为 &lt;code>Tigers-reunite&lt;/code> 的 Pod 镜像 &lt;code>httpd:2.4.41-alpine&lt;/code>，标签为 &lt;code>pod=container&lt;/code> 和 &lt;code>container=pod&lt;/code>。找出 Pod 被安排在哪个节点上。ssh 进入该节点并找到属于该 Pod 的 docker 容器。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将容器的 docker ID 和这些正在运行的进程/命令写入 &lt;code>/opt/course/17/pod-container.txt&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后，使用 docker 命令将主 Docker 容器（来自 yaml 中指定的那个）的日志写入 &lt;code>/opt/course/17/pod-container.log&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-27">知识点&lt;/h3>
&lt;ul>
&lt;li>docker 命令：ps、logs、inspect&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-27">解题思路&lt;/h3>
&lt;p>创建 pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run tigers-reunite --image httpd:2.4.41-alpine --labels &lt;span class="nv">pod&lt;/span>&lt;span class="o">=&lt;/span>container,container&lt;span class="o">=&lt;/span>pod
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查 pod 的信息&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pods --show-labels
NAME READY STATUS RESTARTS AGE LABELS
tigers-reunite 1/1 Running &lt;span class="m">0&lt;/span> 34s &lt;span class="nv">container&lt;/span>&lt;span class="o">=&lt;/span>pod,pod&lt;span class="o">=&lt;/span>container
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取pod所在的节点&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod tigers-reunite -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.spec.nodeName}&amp;#39;&lt;/span>
cka
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ssh到节点上&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker ps &lt;span class="p">|&lt;/span> grep tigers-reunite
e6ff69b437bc 54b0995a6305 &lt;span class="s2">&amp;#34;httpd-foreground&amp;#34;&lt;/span> About a minute ago Up About a minute k8s_tigers-reunite_tigers-reunite_dev_53391212-911d-4275-a19d-e8f8b0f85a98_0
06d3ca65eb08 k8s.gcr.io/pause:3.2 &lt;span class="s2">&amp;#34;/pause&amp;#34;&lt;/span> About a minute ago Up About a minute k8s_POD_tigers-reunite_dev_53391212-911d-4275-a19d-e8f8b0f85a98_0
&lt;span class="c1">#使用docker inspect 或者 进入容器直接查看进程&lt;/span>
$ docker inspect e6ff69b437bc &lt;span class="p">|&lt;/span> grep -i &lt;span class="s1">&amp;#39;cmd\|entrypoint&amp;#39;&lt;/span> -A1
&lt;span class="s2">&amp;#34;Cmd&amp;#34;&lt;/span>: &lt;span class="o">[&lt;/span>
&lt;span class="s2">&amp;#34;httpd-foreground&amp;#34;&lt;/span>
--
&lt;span class="s2">&amp;#34;Entrypoint&amp;#34;&lt;/span>: null,
&lt;span class="s2">&amp;#34;OnBuild&amp;#34;&lt;/span>: null,
$ docker inspect 06d3ca65eb08 &lt;span class="p">|&lt;/span> grep -i &lt;span class="s1">&amp;#39;cmd\|entrypoint&amp;#39;&lt;/span> -A1
&lt;span class="s2">&amp;#34;Cmd&amp;#34;&lt;/span>: null,
&lt;span class="s2">&amp;#34;Image&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;k8s.gcr.io/pause:3.2&amp;#34;&lt;/span>,
--
&lt;span class="s2">&amp;#34;Entrypoint&amp;#34;&lt;/span>: &lt;span class="o">[&lt;/span>
&lt;span class="s2">&amp;#34;/pause&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果写入文件&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">e6ff69b437bc httpd-foreground
06d3ca65eb08 pause
&lt;/code>&lt;/pre>&lt;/div>&lt;p>写日志到文件&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="l">docker logs e6ff69b437bc &amp;gt; /opt/course/17/pod-container.log&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>