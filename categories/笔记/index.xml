<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>笔记 on 乱世浮生</title><link>https://atbug.com/categories/%E7%AC%94%E8%AE%B0/</link><description>Recent content in 笔记 on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 02 Jul 2021 08:02:15 +0800</lastBuildDate><atom:link href="https://atbug.com/categories/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes CKA 证书备考笔记</title><link>https://atbug.com/notes-for-cka-preparation/</link><pubDate>Fri, 02 Jul 2021 08:02:15 +0800</pubDate><guid>https://atbug.com/notes-for-cka-preparation/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/01/pexelsskitterphoto419635.jpg" alt="exam">&lt;/p>
&lt;p>Kubernetes 使用有好几年了，但在今年 5 月才完成 CKA 的考试。虽说用了几年，还是提前刷了部分题熟悉下。&lt;/p>
&lt;p>绝大部分题都是有在 minikube 的环境上操作过，只有部分比如升级集群受限于环境问题没有实地操作。&lt;/p>
&lt;h2 id="写在最前">写在最前&lt;/h2>
&lt;ol>
&lt;li>保存常用文档进书签，如果有 Alfred 启用浏览器书签 workflow。效果见下图&lt;/li>
&lt;li>kubectl 自动补全 &lt;code>echo &amp;quot;source &amp;lt;(kubectl completion bash)&amp;quot; &amp;gt;&amp;gt; ~/.bashrc; source ~/.bashrc&lt;/code>&lt;/li>
&lt;li>每道题开始前要切换 context 和 namespace，直接复制题目里的命令即可&lt;/li>
&lt;li>必要的 alias&lt;/li>
&lt;li>善用 &lt;code>--dry-run=client -o yaml&lt;/code> 避免手动敲太多&lt;/li>
&lt;li>善用 &lt;code>kubectl explain [resource[.field]]&lt;/code>&lt;/li>
&lt;li>看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/li>
&lt;li>看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/li>
&lt;li>看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/li>
&lt;/ol>
&lt;p>书签地址：&lt;a href="https://gist.github.com/addozhang/3ca950ce9b38930abfe7c5fb067e74de">K8s-CKA-CAKD-Bookmarks.html&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/01/20210630162758.png" alt="alfred-bookmarks-workflow">&lt;/p>
&lt;h2 id="安全rbac">安全：RBAC&lt;/h2>
&lt;blockquote>
&lt;p>在默认命名空间中创建一个名为 dev-sa 的服务帐户，dev-sa 可以在 dev 命名空间中创建以下组件：
&lt;code>Deployment&lt;/code>、&lt;code>StatefulSet&lt;/code>、&lt;code>DaemonSet&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点">知识点&lt;/h3>
&lt;ul>
&lt;li>role&lt;/li>
&lt;li>sa&lt;/li>
&lt;li>rolebinding&lt;/li>
&lt;li>auth can-i&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#command-line-utilities">https://kubernetes.io/docs/reference/access-authn-authz/rbac/#command-line-utilities&lt;/a>&lt;/p>
&lt;h3 id="解题思路">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create sa dev-sa
$ kubectl create role dev-role --verb&lt;span class="o">=&lt;/span>create --resource&lt;span class="o">=&lt;/span>deployment,statefulset,daemonset
&lt;span class="c1">#检查&lt;/span>
$ kubectl describe role dev-role
Name: dev-role
Labels: &amp;lt;none&amp;gt;
Annotations: &amp;lt;none&amp;gt;
PolicyRule:
Resources Non-Resource URLs Resource Names Verbs
--------- ----------------- -------------- -----
daemonsets.apps &lt;span class="o">[]&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="o">[&lt;/span>create&lt;span class="o">]&lt;/span>
deployments.apps &lt;span class="o">[]&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="o">[&lt;/span>create&lt;span class="o">]&lt;/span>
statefulsets.apps &lt;span class="o">[]&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="o">[&lt;/span>create&lt;span class="o">]&lt;/span>
$ kubectl create rolebinding dev --serviceaccount default:dev-sa --role dev-role
&lt;span class="c1">#检查&lt;/span>
$ kubectl auth can-i create deployment --as system:serviceaccount:default:dev-sa
yes
$ kubectl auth can-i create statefulset --as system:serviceaccount:default:dev-sa
yes
$ kubectl auth can-i create daemonset --as system:serviceaccount:default:dev-sa
yes
$ kubectl auth can-i create pod --as system:serviceaccount:default:dev-sa
no
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="多容器-pod">多容器 Pod&lt;/h2>
&lt;blockquote>
&lt;p>创建一个pod名称日志，容器名称 &lt;code>log-pro&lt;/code> 使用image &lt;code>busybox&lt;/code>，在 &lt;code>/log/data/output.log&lt;/code> 输出重要信息。然后另一个容器名称 &lt;code>log-cus&lt;/code> 使用 image &lt;code>busybox&lt;/code>，在 &lt;code>/log/data/output.log&lt;/code> 加载 &lt;code>output.log&lt;/code> 并打印它。 请注意，此日志文件只能在 pod 内共享。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-1">知识点&lt;/h3>
&lt;ul>
&lt;li>pod&lt;/li>
&lt;li>volume: emptyDir&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir">https://kubernetes.io/docs/concepts/storage/volumes/#emptydir&lt;/a>&lt;/p>
&lt;h3 id="解题思路-1">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl run log --image busybox --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; log.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 log.yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo important information &amp;gt; /log/data/output.log; sleep 1d&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log-pro&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/log/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">tail -f /log/data/output.log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log-cus&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/log/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">emptyDir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行创建 &lt;code>kubectl apply -f log.yaml&lt;/code>&lt;/p>
&lt;p>检查&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl logs log -c log-cus
important information
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安全网络策略-networkpolicy">安全：网络策略 NetworkPolicy&lt;/h2>
&lt;blockquote>
&lt;p>只有命名空间 &lt;code>mysql&lt;/code> 的 pod 只能被另一个命名空间 &lt;code>internal&lt;/code> 的 pod 通过 8080 端口进行访问&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-2">知识点&lt;/h3>
&lt;ul>
&lt;li>NetworkPolicy&lt;/li>
&lt;li>Ingress&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource">https://kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource&lt;/a>&lt;/p>
&lt;h3 id="解题思路-2">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NetworkPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cka-network&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">target&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#目的命名空间&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policyTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Ingress&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#策略影响入栈流量&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ingress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">from&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#允许流量的来源&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">namespaceSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ns&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#源命名空间的 label&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#允许访问的端口&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="节点状态及污点">节点状态及污点&lt;/h2>
&lt;blockquote>
&lt;p>统计这个集群中没有污染的就绪节点，并输出到文件 &lt;code>/root/cka/readyNode.txt&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-3">知识点&lt;/h3>
&lt;ul>
&lt;li>Node&lt;/li>
&lt;li>Taint（污点）&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/&lt;/p>
&lt;h3 id="解题思路-3">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># Ready 状态的数量&lt;/span>
$ kubectl get node &lt;span class="p">|&lt;/span> grep -w Ready &lt;span class="p">|&lt;/span> wc -l
&lt;span class="c1"># 查看含有 Taint 的数量，需要排除掉这些&lt;/span>
$ kubectl describe node &lt;span class="p">|&lt;/span> grep Taints &lt;span class="p">|&lt;/span> grep -i NoSchedule &lt;span class="p">|&lt;/span> wc -l
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="资源">资源&lt;/h2>
&lt;blockquote>
&lt;p>将占用CPU资源最多的pod名称输出到文件 &lt;code>/root/cka/name.txt&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-4">知识点&lt;/h3>
&lt;ul>
&lt;li>kubectl top 命令&lt;/li>
&lt;li>metrics&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-4">解题思路&lt;/h3>
&lt;p>如果是 minikube 环境，报错 &lt;code>error: Metrics API not available&lt;/code>，可以执行 &lt;code>minikube addons enable metrics-server&lt;/code> 命令开启 metrics server。&lt;/p>
&lt;p>通过 &lt;code>kubectl top&lt;/code> 命令找到 cpu 最高的 pod，将其名字写入 &lt;code>/root/cka/name.txt&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl top pod
&lt;span class="c1"># 或者&lt;/span>
$ kubectl top pod &lt;span class="p">|&lt;/span> sort -k &lt;span class="m">2&lt;/span> -n
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="网络dns">网络：DNS&lt;/h2>
&lt;blockquote>
&lt;p>有 pod 名称 &lt;code>pod-nginx&lt;/code>，创建服务名称 &lt;code>service-nginx&lt;/code>，使用 &lt;code>nodePort&lt;/code> 暴露pod。 然后创建一个 pod 使用 image &lt;code>busybox&lt;/code> 来 &lt;code>nslookup&lt;/code> pod &lt;code>pod-nginx&lt;/code> 和 service &lt;code>service-nginx&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-5">知识点&lt;/h3>
&lt;ul>
&lt;li>service with nodePort&lt;/li>
&lt;li>kubectl expose&lt;/li>
&lt;li>kubectl run&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/&lt;/p>
&lt;h3 id="解题思路-5">解题思路&lt;/h3>
&lt;p>使用 &lt;code>kubectl expose&lt;/code> 创建 service。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 创建 service&lt;/span>
kubectl expose pod pod-nginx --name service-nginx --type NodePort --target-port &lt;span class="m">80&lt;/span>
&lt;span class="c1"># 创建 pod&lt;/span>
kubectl run busybox --image busybox:latest --command sleep 1h
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 pod 的 ip 地址，pod 的 dns lookup 需要用用到 ip。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get po -o wide
NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
busybox 1/1 Running &lt;span class="m">0&lt;/span> 2m17s 172.17.0.5 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
pod-nginx 1/1 Running &lt;span class="m">0&lt;/span> 59m 172.17.0.4 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行 nslookup&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl &lt;span class="nb">exec&lt;/span> busybox -it -- nslookup 172.17.0.4
4.0.17.172.in-addr.arpa &lt;span class="nv">name&lt;/span> &lt;span class="o">=&lt;/span> 172-17-0-4.service-nginx.default.svc.cluster.local.
$ kubectl &lt;span class="nb">exec&lt;/span> busybox -it -- nslookup service-nginx
Server: 10.96.0.10
Address: 10.96.0.10#53
Name: service-nginx.default.svc.cluster.local
Address: 10.110.253.70
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工作负载扩容">工作负载：扩容&lt;/h2>
&lt;blockquote>
&lt;p>将命名空间 &lt;code>dev&lt;/code> 中的 Deployment &lt;code>scale-deploy&lt;/code> 缩放到三个 pod 并记录下来。&lt;/p>
&lt;/blockquote>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment&lt;/p>
&lt;h3 id="知识点-6">知识点&lt;/h3>
&lt;ul>
&lt;li>deployment scale up&lt;/li>
&lt;li>kubectl scale&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-6">解题思路&lt;/h3>
&lt;p>&lt;code>kubectl scale&lt;/code> 的使用，需要参数 &lt;code>--record&lt;/code> 进行记录（将操作命令记录到 deployment 的 &lt;code>kubernetes.io/change-cause&lt;/code> annotation 中）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl scale deployment scale-deploy --replicas &lt;span class="m">3&lt;/span> --record
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群备份及恢复">集群备份及恢复&lt;/h2>
&lt;blockquote>
&lt;p>备份 etcd 并将其保存在主节点上的 &lt;code>/root/cka/etcd-backup.db&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后恢复备份。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-7">知识点&lt;/h3>
&lt;ul>
&lt;li>etcd 的备份及恢复&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster&lt;/p>
&lt;h3 id="解题思路-7">解题思路&lt;/h3>
&lt;p>Kubernetes 的所有数据都记录在 etcd 中，对 etcd 进行备份就是对集群进行备份。&lt;/p>
&lt;p>连接 etcd 需要证书，证书可以从 apiserver 获取，因为 apiserver 需要连接 etcd。新版本的 apiserver 都是以 static pod 的方式运行，证书是通过 volume 挂载到 pod 中的。&lt;/p>
&lt;p>比如 minikube 环境，证书是从 node 节点的 &lt;code>/var/lib/minikube/certs&lt;/code> 挂载进去的。&lt;/p>
&lt;p>要先 ssh 到 master 节点上。命令的执行非常快，如果长时间没结束，那就说名有问题了。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#备份&lt;/span>
$ &lt;span class="nv">ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl snapshot save /root/cka/etcd-backup.db &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于只说了 restore，所以就执行 restore 的命令，默认会恢复到当前目录的 &lt;code>default.etcd&lt;/code> 下。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#恢复&lt;/span>
$ &lt;span class="nv">ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl snapshot restore /root/cka/etcd-backup.db &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群节点升级">集群节点升级&lt;/h2>
&lt;blockquote>
&lt;p>将master节点版本从 1.20.0 升级到 1.21.0，确保 master 节点上的 pod 重新调度到其他节点，升级完成后，使 master 节点可用。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-8">知识点&lt;/h3>
&lt;ul>
&lt;li>drain&lt;/li>
&lt;li>cordon&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/#upgrading-control-plane-nodes&lt;/p>
&lt;h3 id="解题思路-8">解题思路&lt;/h3>
&lt;p>受限于环境，没有实地操作。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 将节点设置为不可调度&lt;/span>
$ kubectl cordon master
&lt;span class="c1"># 驱逐 master 节点上的 pod&lt;/span>
$ kubectl drain master --ignore-daemonsets
&lt;span class="c1"># 进行升级&lt;/span>
$ apt-mark unhold kubelet kubectl &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install -y &lt;span class="nv">kubelet&lt;/span>&lt;span class="o">=&lt;/span>1.21.0-00 &lt;span class="nv">kubectl&lt;/span>&lt;span class="o">=&lt;/span>1.21.0-00 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>apt-mark hold kubelet kubectl
&lt;span class="c1"># 重新启动kubelet&lt;/span>
$ systemctl daemon-reload
$ systemctl restart kubelet
&lt;span class="c1"># 将节点设置为可调度&lt;/span>
$ kubectl uncordon master
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群节点故障排查">集群：节点故障排查&lt;/h2>
&lt;blockquote>
&lt;p>现在 node01 还没有准备好，请找出根本原因并使其准备好，然后创建一个确保它在 node01 上运行的 pod。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-9">知识点&lt;/h3>
&lt;ul>
&lt;li>节点故障排查&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-9">解题思路&lt;/h3>
&lt;p>这种问题大概率问题出在 kubelet 上&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ssh node01
systemctl status kubelet
systemctl restart kubelet
&lt;span class="c1"># 再检查node状态&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>插播一个故障，本地安装 2 个节点的 minikube 集群时，第二个节点持续 &lt;code>NotReady&lt;/code>。使用 &lt;code>systemctl status kubelet&lt;/code> 看到 &lt;code>unable to update cni config: no networks found in /etc/cni/net.mk&lt;/code>。&lt;/p>
&lt;p>检查该目录确实没有文件，从 master 节点复制到该节点后重启 kubelet 解决。&lt;/p>
&lt;h2 id="存储持久化卷">存储：持久化卷&lt;/h2>
&lt;blockquote>
&lt;p>集群中有一个持久卷名称 &lt;code>dev-pv&lt;/code>，创建一个持久卷声明名称 &lt;code>dev-pvc&lt;/code>，确保这个持久卷声明会绑定持久卷，然后创建一个 pod 名称 &lt;code>test-pvc&lt;/code>，将这个 pvc 挂载到 path &lt;code>/tmp/data&lt;/code>，使用 nginx 镜像。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-10">知识点&lt;/h3>
&lt;ul>
&lt;li>PersistentVolume&lt;/li>
&lt;li>PersistentVolumeClaim&lt;/li>
&lt;li>Mount Volume&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume&lt;/p>
&lt;h3 id="解题思路-10">解题思路&lt;/h3>
&lt;p>创建 pvc 前先获取 pv的信息&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pv dev-pv -o yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pv&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; pvc.yaml &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">apiVersion: v1
&lt;/span>&lt;span class="s">kind: PersistentVolumeClaim
&lt;/span>&lt;span class="s">metadata:
&lt;/span>&lt;span class="s"> name: dev-pvc
&lt;/span>&lt;span class="s">spec:
&lt;/span>&lt;span class="s"> accessModes:
&lt;/span>&lt;span class="s"> - ReadWriteOnce
&lt;/span>&lt;span class="s"> resources:
&lt;/span>&lt;span class="s"> requests:
&lt;/span>&lt;span class="s"> storage: 1Gi
&lt;/span>&lt;span class="s">EOF&lt;/span>
$ kubectl apply -f pvc.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pod 的 manifest，记得使用 &lt;code>kubectl run --dry-run=client -o yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl run test-pvc --image nginx --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; test-pvc.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改之后得到最终的 pod yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dev-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>理论上只要 pod 能运行，就说明成功。也可以进一步确认挂载是否成功，在 pod 的 &lt;code>/tmp/data&lt;/code> 中 touch 个文件，然后到节点的目录中查看是有该文件。&lt;/p>
&lt;h2 id="工作负载多容器的-deployment">工作负载：多容器的 Deployment&lt;/h2>
&lt;blockquote>
&lt;p>创建一个名为 &lt;code>deploy-important&lt;/code> 的 Deployment，标签为 &lt;code>id=very-important&lt;/code>（pod 也应该有这个标签）和命名空间 dev 中的 3 个副本。 它应该包含两个容器，第一个名为 &lt;code>container1&lt;/code> 并带有镜像，第二个名为 container2 的图像为 &lt;code>kubernetes/pause&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在一个工作节点上应该只运行该部署的一个 Pod。 我们有两个工作节点：&lt;code>cluster1-worker1&lt;/code> 和 &lt;code>cluster1-worker2&lt;/code>。 因为 Deployment 有三个副本，所以结果应该是在两个节点上都有一个 Pod 正在运行。 不会调度第三个 Pod，除非添加新的工作节点。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-11">知识点&lt;/h3>
&lt;ul>
&lt;li>deployment&lt;/li>
&lt;li>pod label&lt;/li>
&lt;li>replicas&lt;/li>
&lt;li>multi container pod&lt;/li>
&lt;li>pod anti affinity&lt;/li>
&lt;/ul>
&lt;p>官方文档参考：https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#never-co-located-in-the-same-node&lt;/p>
&lt;h3 id="解题思路-11">解题思路&lt;/h3>
&lt;p>先创建模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create deployment deploy-important --image nginx --replicas &lt;span class="m">3&lt;/span> --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; deploy-important.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改后的 yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">affinity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podAntiAffinity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requiredDuringSchedulingIgnoredDuringExecution&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">labelSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">id&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">In&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">topologyKey&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetes.io/hostname&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">container1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetes/pause&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">container2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>minikube 上测试只能调度一个 pod，符合预期&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kgpo
NAME READY STATUS RESTARTS AGE
deploy-important-659d54fc47-6cp8r 0/2 Pending &lt;span class="m">0&lt;/span> 3h10m
deploy-important-659d54fc47-92z4d 2/2 Running &lt;span class="m">0&lt;/span> 3h10m
deploy-important-659d54fc47-c6llc 0/2 Pending &lt;span class="m">0&lt;/span> 3h10m
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="存储secret的使用">存储：Secret的使用&lt;/h2>
&lt;blockquote>
&lt;p>在 &lt;code>secret&lt;/code> 命名空间下，使用镜像 &lt;code> busybox:1.31.1&lt;/code> 创建一个名为 &lt;code>secret-pod&lt;/code> 的 pod，并保证 pod 运行一段时间&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>有个名为 &lt;code>sercret1.yaml&lt;/code> 的 Secret 文件，在 &lt;code>secret&lt;/code> 命名空间下创建 Secret，并以只读的方式挂在到 Pod 的 &lt;code>/tmp/secret1&lt;/code> 目录
创建一个新的 Secret &lt;code>secret2&lt;/code> 包含 &lt;code>user=user1&lt;/code> 和 &lt;code>pass=1234&lt;/code>，分别以缓解变量 &lt;code>APP_USER&lt;/code> 和 &lt;code>APP_PASS&lt;/code> 输入到 Pod 中&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-12">知识点&lt;/h3>
&lt;ul>
&lt;li>secret&lt;/li>
&lt;li>toleration&lt;/li>
&lt;li>taints&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets">https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets&lt;/a>
&lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables">https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables&lt;/a>&lt;/p>
&lt;h3 id="解题思路-12">解题思路&lt;/h3>
&lt;p>创建 namespace&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create ns secret
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pod 模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubectl run secret-pod --image busybox:1.31.1 --dry-run=client -o yaml --command -- sleep 1d &amp;gt; secret-pod.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 secret1.yaml，使用 secret namespace&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">halt&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IyEvYmluL2Jhc2g=&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2021-05-15T07:48:02Z&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Opaque&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 secret2&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create secret generic secret2 --from-literal &lt;span class="nv">user&lt;/span>&lt;span class="o">=&lt;/span>user1 --from-literal &lt;span class="nv">pass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1234&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sleep&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">1d&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox:1.31.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">APP_USER&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">user&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">APP_PASS&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pass&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/secret1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sec&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sec&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl &lt;span class="nb">exec&lt;/span> secret-pod -- cat /tmp/secret1/halt
&lt;span class="c1">#!/bin/bash&lt;/span>
$ kubectl &lt;span class="nb">exec&lt;/span> secret-pod -- env &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;APP_&amp;#39;&lt;/span>
&lt;span class="nv">APP_USER&lt;/span>&lt;span class="o">=&lt;/span>user1
&lt;span class="nv">APP_PASS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1234&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工作负载静态-pod">工作负载：静态 Pod&lt;/h2>
&lt;blockquote>
&lt;p>在 &lt;code>cluster3-master1&lt;/code> 上的 &lt;code>default&lt;/code> 命名空间中创建一个名为 &lt;code>my-static-pod&lt;/code> 的静态 Pod。 使用镜像 &lt;code>nginx:1.16-alpine&lt;/code> 并分配 10m CPU 和 20Mi 内存的资源。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Then create a NodePort Service named static-pod-service which exposes that static Pod on port 80 and check if it has Endpoints and if its reachable through the cluster3-master1 internal IP address. You can connect to the internal node IPs from your main terminal.
然后创建一个名为&lt;code> static-pod-service&lt;/code> 的 NodePort Service，该服务在端口 80 上公开该静态 Pod，并检查它是否具有端点以及是否可以通过 &lt;code>cluster3-master1&lt;/code> 内部 IP 地址访问它。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-13">知识点&lt;/h3>
&lt;ul>
&lt;li>static pod&lt;/li>
&lt;li>resource&lt;/li>
&lt;li>nodeport service&lt;/li>
&lt;li>endpoints&lt;/li>
&lt;/ul>
&lt;p>参考文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/static-pod/">https://kubernetes.io/docs/tasks/configure-pod-container/static-pod/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory">https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-13">解题思路&lt;/h3>
&lt;p>创建pod模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run my-static-pod --image nginx:1.16-alpine --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; static-pod.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改模板，增加资源配置&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-static-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-static-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.16-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-static-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;10m&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;20Mi&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ssh 到主机，找到 kubelet 配置文件的位置 &lt;code>ps -ef | grep kubelet&lt;/code>&lt;/p>
&lt;p>查看配置文件（minikube：/var/lib/kubelet/config.yaml）中 &lt;code>staticPodPath&lt;/code> 配置的就是静态 pod 的 manifest 的位置（minikube：/etc/kubernetes/manifests）&lt;/p>
&lt;p>将 &lt;code>static-pod.yaml&lt;/code> 放到正确的文件夹中，然后重启 kubelet&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查pod是否正确运行&lt;/p>
&lt;p>创建 node port&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl expose pod my-static-pod --name static-pod-service --type NodePort --port &lt;span class="m">80&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否创建成功&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get svc
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
static-pod-service NodePort 10.97.248.99 &amp;lt;none&amp;gt; 80:31938/TCP 68s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 node 的 ip&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get node -o wide
NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME
cka Ready master 10h v1.18.8 192.168.64.3 &amp;lt;none&amp;gt; Buildroot 2020.02.10 4.19.171 docker://20.10.4
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 minikube 的环境下可直接通过 &lt;code>minikube ip&lt;/code> 获取&lt;/p>
&lt;p>测试&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http 192.168.64.3:31938 --headers
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Accept-Ranges: bytes
Connection: keep-alive
Content-Length: &lt;span class="m">612&lt;/span>
Content-Type: text/html
Date: Sat, &lt;span class="m">15&lt;/span> May &lt;span class="m">2021&lt;/span> 08:35:11 GMT
ETag: &lt;span class="s2">&amp;#34;5d52db33-264&amp;#34;&lt;/span>
Last-Modified: Tue, &lt;span class="m">13&lt;/span> Aug &lt;span class="m">2019&lt;/span> 15:45:55 GMT
Server: nginx/1.16.1
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="调度污点和容忍度">调度：污点和容忍度&lt;/h2>
&lt;blockquote>
&lt;p>在命名空间 &lt;code>default&lt;/code> 中创建图像 &lt;code>httpd:2.4.41-alpine&lt;/code> 的单个 Pod。Pod 应命名为 &lt;code>pod1&lt;/code>，容器名为 &lt;code>pod1-container&lt;/code>。在不给任何节点添加新标签的前提下，将该 pod 调度到主节点上。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-14">知识点&lt;/h3>
&lt;ul>
&lt;li>Taint&lt;/li>
&lt;li>Label&lt;/li>
&lt;li>Tolerance&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/&lt;/p>
&lt;h3 id="解题思路-14">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#找出master节点（一般考试只有一个节点）
$ kubectl get node
#找到 master 节点的 taints，需要在 pod 的 .spec.tolerations 排除掉
$ kubectl describe node xxxx | grep -w Taints
#找到 master 节点的 labels
$ kubectl describe node xxxx | grep -w Labels -A10
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建pod模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run pod1 --image httpd:2.4.41-alpine --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; pod1.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改模板： 这里假设主节点的 Taint 为 &lt;code>node-role.kubernetes.io/master=:NoSchedule&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># minikube 集群名为 cka，主节点同名&lt;/span>
$ kubectl describe node cka &lt;span class="p">|&lt;/span> grep -i taint
Taints: node-role.kubernetes.io/master:NoSchedule
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终的 pod 如下&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd:2.4.41-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node-role.kubernetes.io/master&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NoSchedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">node-role.kubernetes.io/master&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后检查下是否调度到主节点上：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -o wide
NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
pod1 1/1 Running &lt;span class="m">0&lt;/span> 102s 10.244.0.3 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubectl-命令和排序">kubectl 命令和排序&lt;/h2>
&lt;blockquote>
&lt;p>所有命名空间中都有各种 Pod。 将命令写入 /opt/course/5/find_pods.sh，其中列出所有按 AGE 排序的 Pod（metadata.creationTimestamp）。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将第二个命令写入 /opt/course/5/find_pods_uid.sh，其中列出按字段 metadata.uid 排序的所有 Pod。对这两个命令都使用 kubectl 排序。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-15">知识点&lt;/h3>
&lt;ul>
&lt;li>kubectl 命令的使用，主要是 &lt;code>--all-namespaces&lt;/code> （缩写 &lt;code>-A&lt;/code>） 和 &lt;code>--sort-by&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-15">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; /opt/course/5/find_pods.sh &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kubectl get pod -A --sort-by &amp;#39;.metadata.creationTimestamp&amp;#39;
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; /opt/course/5/find_pods_uid.sh &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kubectl get pod -A --sort-by &amp;#39;.metadata.uid&amp;#39;
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="存储持久化卷和挂载">存储：持久化卷和挂载&lt;/h2>
&lt;blockquote>
&lt;p>创建一个名为 &lt;code>safari-pv&lt;/code> 的新 &lt;code>PersistentVolume&lt;/code>。它应该具有 2Gi 的容量、&lt;code>accessMode&lt;/code> &lt;code>ReadWriteOnce&lt;/code>、&lt;code>hostPath&lt;/code> &lt;code>/Volumes/Data&lt;/code> 并且没有定义 &lt;code>storageClassName&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>接下来在命名空间 &lt;code>project-tiger&lt;/code> 中创建一个名为 &lt;code>safari-pvc&lt;/code> 的新 &lt;code>PersistentVolumeClaim&lt;/code>。 它应该请求 2Gi 存储，&lt;code>accessMode&lt;/code> &lt;code>ReadWriteOnce&lt;/code> 并且不应定义 &lt;code>storageClassName&lt;/code>。 PVC 应该正确绑定到 PV。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后在命名空间 &lt;code>project-tiger&lt;/code> 中创建一个新的 Deployment &lt;code>safari&lt;/code>，它将该卷挂载到 &lt;code>/tmp/safari-data&lt;/code>。该 Deployment 的 Pod 应该是镜像 httpd:2.4.41-alpine。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-16">知识点&lt;/h3>
&lt;ul>
&lt;li>pv&lt;/li>
&lt;li>pvc&lt;/li>
&lt;li>pod 使用 pvc&lt;/li>
&lt;li>deployment&lt;/li>
&lt;li>mount PVC volume&lt;/li>
&lt;/ul>
&lt;p>参考文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume">https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolumeclaim">https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolumeclaim&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#claims-as-volumes">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#claims-as-volumes&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-16">解题思路&lt;/h3>
&lt;p>创建 pv&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolume&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari-pv&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">local&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">capacity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/Volumes/Data&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pvc&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolumeClaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否绑定成功&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pvc
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE
safari-pvc Bound pvc-d4c15825-2de3-470f-8ed0-9519cacaad21 2Gi RWO standard 24s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 deployment 模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create deployment safari --image httpd:2.4.41-alpine --dry-run&lt;span class="o">=&lt;/span>client -o yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终的yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd:2.4.41-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/safari-data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubectl-命令和-context">kubectl 命令和 context&lt;/h2>
&lt;blockquote>
&lt;p>可以通过 kubectl 上下文从主终端访问多个集群。将所有这些上下文名称写入 /opt/course/1/contexts。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>接下来在 /opt/course/1/context_default_kubectl.sh 中写一个显示当前上下文的命令，该命令应该使用kubectl。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后在 /opt/course/1/context_default_no_kubectl.sh 中写入第二个执行相同操作的命令，但不使用 kubectl。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-17">知识点&lt;/h3>
&lt;p>kubectl config 相关命令的使用&lt;/p>
&lt;h3 id="解题思路-17">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl config get-contexts -o name &amp;gt; /opt/course/1/contexts
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat &amp;gt; /opt/course/1/context_default_kubectl.sh &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kubectl config current-context
&lt;/span>&lt;span class="s">EOF&lt;/span>
chmod +x /opt/course/1/context_default_kubectl.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat ~/.kube/config &lt;span class="p">|&lt;/span> grep current-context &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $2}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工作负载缩容">工作负载：缩容&lt;/h2>
&lt;blockquote>
&lt;p>命名空间 &lt;code>project-c13&lt;/code> 中有两个名为 &lt;code>o3db-*&lt;/code> 的 Pod。 C13 管理层要求将 Pod 缩减为一个副本以节省资源。 记录动作。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-18">知识点&lt;/h3>
&lt;ul>
&lt;li>scale&lt;/li>
&lt;li>deploy&lt;/li>
&lt;li>statefulset&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/zh/docs/tasks/run-application/scale-stateful-set/">https://kubernetes.io/zh/docs/tasks/run-application/scale-stateful-set/&lt;/a>
&lt;a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment">https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment&lt;/a>&lt;/p>
&lt;h3 id="解题思路-18">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl scale &amp;lt;resource&amp;gt; xxx --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>scale 命令需要确认资源类型：deployment/statefulset&lt;/p>
&lt;h2 id="应用就绪和探活">应用就绪和探活&lt;/h2>
&lt;blockquote>
&lt;p>在命名空间 &lt;code>default&lt;/code> 中执行以下操作。为 &lt;code>nginx:1.16.1-alpine&lt;/code> 创建一个名为 &lt;code>ready-if-service-ready&lt;/code> 的 Pod。配置一个 &lt;code>LivenessProbe&lt;/code>，它只是运行 &lt;code>true&lt;/code>。还要配置一个 &lt;code>ReadinessProbe&lt;/code> 来检查 &lt;code>url&lt;/code> &lt;code>http://service-am-i-ready:80&lt;/code> 是否可达，可以使用 &lt;code>wget -T2 -O- http://service-am-i-ready:80&lt;/code>。 启动 Pod 并确认它因为 &lt;code>ReadinessProbe&lt;/code> 而没有准备好。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>创建第二个名为 &lt;code>am-i-ready&lt;/code> 的 Pod 镜像 &lt;code>nginx:1.16.1-alpine&lt;/code>，标签 &lt;code>id:cross-server-ready&lt;/code>。已经存在的服务 &lt;code>service-am-i-ready&lt;/code> 现在应该有第二个 Pod 作为端点。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-19">知识点&lt;/h3>
&lt;ul>
&lt;li>probe&lt;/li>
&lt;li>pod&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&lt;/a>&lt;/p>
&lt;h3 id="解题思路-19">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl run ready-if-service-ready --image nginx:1.16.1-alpine --dry-run=client -o yaml &amp;gt; ready-if-service-ready.yaml
kubectl run am-i-ready --image nginx:1.16.1-alpine --labels id=cross-server-ready --dry-run=client -o yaml &amp;gt; am-i-ready.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加 probes&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready-if-service-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready-if-service-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.16.1-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready-if-service-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">hi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">wget&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">T2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">O-&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">http://service-am-i-ready:80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群控制平面">集群：控制平面&lt;/h2>
&lt;blockquote>
&lt;p>使用 &lt;code>ssh cluster1-master1&lt;/code> ssh 进入主节点。检查 master 组件 kubelet、kube-apiserver、kube-scheduler、kube-controller-manager 和 etcd 如何在 master 节点上启动/安装。还要找出 DNS 应用的名称以及它是如何在主节点上启动/安装的。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将结果写入文件 /opt/course/8/master-components.txt。该文件的结构应如下所示：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># /opt/course/8/master-components.txt
kubelet: [TYPE]
kube-apiserver: [TYPE]
kube-scheduler: [TYPE]
kube-controller-manager: [TYPE]
etcd: [TYPE]
dns: [TYPE] [NAME]
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;blockquote>
&lt;p>Choices of [TYPE] are: not-installed, process, static-pod, pod&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-20">知识点&lt;/h3>
&lt;p>Kubernetes components 的安装方式&lt;/p>
&lt;h3 id="解题思路-20">解题思路&lt;/h3>
&lt;p>当前比较的组件都是以static pod的形式运行的，而 static pod 都是由 Kubelet 管理的，所以从 kubelet 处入手。&lt;/p>
&lt;p>以 minikube 为例：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ps -ef &lt;span class="p">|&lt;/span> grep -w kubelet
root &lt;span class="m">140597&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> May15 ? 00:36:00 /var/lib/minikube/binaries/v1.18.8/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>cka --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64.3
$ systemctl is-active kubelet
active
&lt;span class="c1">#kubelet: process&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据前面进程中的信息，查看 &lt;code>/var/lib/kubelet/config.yaml&lt;/code>中的内容。可以得到：&lt;/p>
&lt;p>etcd: static-pod
kube-apiserver: static-pod
kube-controller-manager: static-pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat /var/lib/kubelet/config.yaml &lt;span class="p">|&lt;/span> grep -i staticpod
staticPodPath: /etc/kubernetes/manifests
ls /etc/kubernetes/manifests
etcd.yaml kube-apiserver.yaml kube-controller-manager.yaml kube-scheduler.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后上下dns，查看下pod，得知 dns: pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -A &lt;span class="p">|&lt;/span> grep dns
kube-system coredns-66bff467f8-6k2br 1/1 Running &lt;span class="m">0&lt;/span> 32h
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后将上面的结果写入到 &lt;code>/opt/course/8/master-components.txt&lt;/code>，不能前功尽弃。&lt;/p>
&lt;h2 id="集群pod-调度">集群：Pod 调度&lt;/h2>
&lt;blockquote>
&lt;p>使用 &lt;code>ssh cluster2-master1&lt;/code> ssh 进入主节点。暂时停止 &lt;code>kube-scheduler&lt;/code>，这意味着可以在之后再次启动它。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>为镜像 &lt;code>httpd:2.4-alpine&lt;/code> 创建一个名为 &lt;code>manual-schedule&lt;/code> 的 Pod，确认它已启动但未在任何节点上调度。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>现在您是调度程序并拥有所有权力，在节点 &lt;code>cluster2-master1&lt;/code> 上手动调度该 Pod。 确保它正在运行。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>再次启动 &lt;code>kube-scheduler&lt;/code> 并通过在镜像 &lt;code>httpd:2.4-alpine&lt;/code> 创建第二个名为 &lt;code>manual-schedule2&lt;/code> 的 Pod 并检查它是否在 &lt;code>cluster2-worker1&lt;/code> 上运行来确认其运行正常。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-21">知识点&lt;/h3>
&lt;ul>
&lt;li>kubernetes 组件的运行方式&lt;/li>
&lt;li>创建 pod&lt;/li>
&lt;li>pod 调度&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-21">解题思路&lt;/h3>
&lt;p>kube-scheduler 是以 static pod 的方式运行，因此我们需要 ssh 到节点上，将 scheduler 的 yaml 移出（记住不要删掉，还要还原回去），重启 kubelet&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ps -ef &lt;span class="p">|&lt;/span> grep -w kubelet
root &lt;span class="m">140597&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> May15 ? 00:36:00 /var/lib/minikube/binaries/v1.18.8/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>cka --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64.3
$ cat /var/lib/kubelet/config.yaml &lt;span class="p">|&lt;/span> grep -i staticpod
staticPodPath: /etc/kubernetes/manifests
$ ls /etc/kubernetes/manifests
etcd.yaml kube-apiserver.yaml kube-controller-manager.yaml kube-scheduler.yaml
$ mv /etc/kubernetes/manifests/kube-scheduler.yaml /etc/kubernetes
$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查下 schedule pod 没有运行，然后尝试创建 pod，并查看 pod 处于 pending 状态，即没有 kube-scheduler 为其调度。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run manual-schedule --image httpd:2.4-alpine
$ kubectl get pod &lt;span class="p">|&lt;/span> grep manual-schedule
manual-schedule 0/1 Pending &lt;span class="m">0&lt;/span> 16s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>手动调度，即为 pod 指定一个 &lt;code>nodeName&lt;/code>，我的 minikube 只有一个 node 名为 cka，修改pod：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod manual-schedule -o yaml &amp;gt; manual-schedule.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加 nodeName 之后&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2021-05-16T07:27:16Z&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dev&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resourceVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;84805&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selfLink&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/api/v1/namespaces/dev/pods/manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uid&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">c4b592f6-1e07-4911-a7fe-867d813c7a55&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd:2.4-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationMessagePath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/dev/termination-log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationMessagePolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">File&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/run/secrets/kubernetes.io/serviceaccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-token-v7f28&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readOnly&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cka&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#node name here&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enableServiceLinks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">priority&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">schedulerName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-scheduler&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">securityContext&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccount&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccountName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationGracePeriodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NoExecute&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node.kubernetes.io/not-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Exists&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerationSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">300&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NoExecute&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node.kubernetes.io/unreachable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Exists&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerationSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">300&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-token-v7f28&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">defaultMode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">420&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-token-v7f28&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">phase&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pending&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">qosClass&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">BestEffort&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>强制更新 pod（运行时只能修改部分内容）：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl replace -f manual-schedule.yaml --force
pod &lt;span class="s2">&amp;#34;manual-schedule&amp;#34;&lt;/span> deleted
pod/manual-schedule replaced
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再次检查&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod &lt;span class="p">|&lt;/span> grep manual-schedule
manual-schedule 1/1 Running &lt;span class="m">0&lt;/span> 15s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>恢复 kube-scheduler 的运行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ mv /etc/kubernetes/kube-scheduler.yaml /etc/kubernetes/manifests
$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否运行&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -A &lt;span class="p">|&lt;/span> grep kube-scheduler
kube-system kube-scheduler-cka 1/1 Running &lt;span class="m">0&lt;/span> 66s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建第二个pod，并检查是否在运行（running）状态&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run manual-schedule2 --image httpd:2.4-alpine
pod/manual-schedule2 created
kubectl get pod manual-schedule2
NAME READY STATUS RESTARTS AGE
manual-schedule2 1/1 Running &lt;span class="m">0&lt;/span> 6s
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群备份及恢复-1">集群：备份及恢复&lt;/h2>
&lt;blockquote>
&lt;p>对在 &lt;code>cluster3-master1&lt;/code> 上运行的 etcd 进行备份，并将其保存在主节点上的 &lt;code>/tmp/etcd-backup.db&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>然后在集群中创建一个你喜欢的 Pod。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后恢复备份，确认集群仍在工作并且创建的 Pod 不再与我们在一起。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-22">知识点&lt;/h3>
&lt;ul>
&lt;li>etc 的作用：存储集群的状态信息，包括 pod 信息&lt;/li>
&lt;li>etc 的备份和恢复&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster">https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster&lt;/a>&lt;/p>
&lt;h3 id="解题思路-22">解题思路&lt;/h3>
&lt;p>etcd的命令执行，记得设置API的版本 &lt;code>ETCDCTL_API=3&lt;/code>&lt;/p>
&lt;p>操作 etcd 需要 &lt;code>endpoints&lt;/code>、&lt;code>cacert&lt;/code>、&lt;code>cert&lt;/code>、&lt;code>key&lt;/code>。Kubernetes 的所有组件与 etcd 的数据交互都是通过 api-server 完成的，我只需要找到 api-server 的运行命令就行，两种方式：到 master 主机查看 api-server 的进程；或者去 api-server 的 pod 查看 &lt;code>.spec.containers[].command&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#ssh to master&lt;/span>
$ ps -ef &lt;span class="p">|&lt;/span> grep kube-apiserver
$ kubectl get pod -n kube-system kube-apiserver-cka -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.spec.containers[].command}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>etcd 备份，命令直接从 Kubernetes 官方文档复制再修改&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#ssh to master&lt;/span>
&lt;span class="nv">$ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl --endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt --cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt --key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> snapshot save /tmp/etcd-backup.db
Snapshot saved at /tmp/etcd-backup.db
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run sleep1d --image busybox --command -- sleep 1d
&lt;span class="c1">#检查 pod 运行情况&lt;/span>
$ kubectl get pod
NAME READY STATUS RESTARTS AGE
sleep1d 1/1 Running &lt;span class="m">0&lt;/span> 10s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>恢复 etcd 的备份，复制前面的命令并修改，恢复备份到 &lt;code>/var/lib/etcd-backup&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ &lt;span class="nv">ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl --endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 --cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt --cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt --key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key snapshot restore /tmp/etcd-backup.db --data-dir /var/lib/etcd-backup
2021-05-16 08:09:17.797061 I &lt;span class="p">|&lt;/span> mvcc: restore compact to &lt;span class="m">85347&lt;/span>
2021-05-16 08:09:17.803208 I &lt;span class="p">|&lt;/span> etcdserver/membership: added member 8e9e05c52164694d &lt;span class="o">[&lt;/span>http://localhost:2380&lt;span class="o">]&lt;/span> to cluster cdf818194e3a8c32
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 etcd 的配置， &lt;code>/etc/kubernetes/manifests/etcd.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/lib/minikube/certs/etcd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DirectoryOrCreate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">etcd-certs&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/lib/etcd-backup &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#原来是/var/lib/minikube/etcd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DirectoryOrCreate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">etcd-data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存后重启kubelet&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查pod是否存在：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod sleep1d
Error from server &lt;span class="o">(&lt;/span>NotFound&lt;span class="o">)&lt;/span>: pods &lt;span class="s2">&amp;#34;sleep1d&amp;#34;&lt;/span> not found
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安全网络策略">安全：网络策略&lt;/h2>
&lt;blockquote>
&lt;p>发生了一起安全事件，入侵者能够从一个被黑的后端 Pod 访问整个集群。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>为了防止这种情况，在命名空间 &lt;code>project-snake&lt;/code> 中创建一个名为 &lt;code>np-backend&lt;/code> 的 &lt;code>NetworkPolicy&lt;/code>。它应该只允许 &lt;code>backend-*&lt;/code> Pods：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>连接到端口 &lt;code>1111&lt;/code> 上的 &lt;code>db1-*&lt;/code> Pod
连接到端口 &lt;code>2222&lt;/code> 上的 &lt;code>db2-*&lt;/code> Pod
在策略中使用 Pod 的应用程序标签。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>实施后，例如，端口 3333 上从 &lt;code>backend-*&lt;/code> Pod 到 &lt;code>vault-*&lt;/code> Pod 的连接应该不再有效。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-23">知识点&lt;/h3>
&lt;ul>
&lt;li>NetworkPolicy&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies">https://kubernetes.io/docs/concepts/services-networking/network-policies&lt;/a>&lt;/p>
&lt;h3 id="解题思路-23">解题思路&lt;/h3>
&lt;p>为 backend-* pod 设置 egress 的 NetworkPolicy，只允许其访问 db1-* 的 1111 端口和 db2-* 的 2222 端口，策略中使用 app label 来进行匹配。&lt;/p>
&lt;p>从 Kubernetes 官网文档中复制一段yaml配置进行修改。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NetworkPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">np-backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">project-snake&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policyTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Egress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">egress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1111&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db2 &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2222&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设 backend pod 的 app label 为 backend，db1 的 为 db1，db2 的为 db2。&lt;/p>
&lt;p>创建环境：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run backend --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>backend
$ kubectl run db1 --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>db1
$ kubectl run db2 --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>db2
$ kubectl run vault --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>vault
$ kubectl get pod -L app
NAME READY STATUS RESTARTS AGE APP
backend 1/1 Running &lt;span class="m">0&lt;/span> 13s backend
db1 1/1 Running &lt;span class="m">0&lt;/span> 66s db1
db2 1/1 Running &lt;span class="m">0&lt;/span> 71s db2
vault 1/1 Running &lt;span class="m">0&lt;/span> 79s vault
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于我们用的 nginx 镜像，将前面的 NetworkPolicy 端口修改一下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NetworkPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">np-backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policyTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Egress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">egress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db2 &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查一下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get networkpolicy
NAME POD-SELECTOR AGE
np-backend &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>backend 31s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试下网络：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#获取pod ip&lt;/span>
$ kubectl get pod -o wide
NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
backend 1/1 Running &lt;span class="m">0&lt;/span> 3m15s 172.17.0.7 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
db1 1/1 Running &lt;span class="m">0&lt;/span> 4m8s 172.17.0.6 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
db2 1/1 Running &lt;span class="m">0&lt;/span> 4m13s 172.17.0.3 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
vault 1/1 Running &lt;span class="m">0&lt;/span> 4m21s 172.17.0.4 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群kubelet-启动方式">集群：kubelet 启动方式&lt;/h2>
&lt;blockquote>
&lt;p>节点 &lt;code>cluster2-worker1&lt;/code> 已使用 kubeadm 和 TLS 引导添加到集群中。
找到 &lt;code>cluster2-worker1&lt;/code> 的 “Issuer” 和 “Extended Key Usage” 值：
kubelet 客户端证书，用于向外连接到 kube-apiserver 的证书。
kubelet 服务器证书，用于来自 kube-apiserver 的传入连接。
将信息写入文件 &lt;code>/opt/course/23/certificate-info.txt&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="知识点-24">知识点&lt;/h2>
&lt;ul>
&lt;li>kubelet 的功能：连接 api-server；接受来自 api-server 的响应。两种情况都需要 TLS&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-24">解题思路&lt;/h3>
&lt;p>kubelet 连接 apiserver 的方式在配置文件中，先找出配置文件的保存位置。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># ssh 到节点上，查看 kubelet 的启动命令&lt;/span>
$ ps -ef &lt;span class="p">|&lt;/span> grep kubelet
root &lt;span class="m">3935&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 12:54 ? 00:00:23 /var/lib/minikube/binaries/v1.20.0/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --cni-conf-dir&lt;span class="o">=&lt;/span>/etc/cni/net.mk --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>cka-m02 --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --network-plugin&lt;span class="o">=&lt;/span>cni --node-ip&lt;span class="o">=&lt;/span>192.168.64.9
docker &lt;span class="m">13653&lt;/span> &lt;span class="m">13616&lt;/span> &lt;span class="m">0&lt;/span> 13:22 pts/0 00:00:00 grep kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#kubelet 连接 api server 的信息， client cert 的配置所在 /var/lib/kubelet/pki/kubelet-client-current.pem&lt;/span>
cat /var/lib/kubelet/config.yaml
&lt;span class="c1">#kubelet 的启动信息， servert cert 的配置所在 /var/lib/minikube/certs/ca.crt&lt;/span>
cat /etc/kubernetes/kubelet.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ openssl x509 -noout -text -in /var/lib/kubelet/pki/kubelet-client-current.pem &lt;span class="p">|&lt;/span> grep -i issuer
Issuer: &lt;span class="nv">CN&lt;/span> &lt;span class="o">=&lt;/span> minikubeCA
$ openssl x509 -noout -text -in /var/lib/kubelet/pki/kubelet-client-current.pem &lt;span class="p">|&lt;/span> grep -i -A1 extended
X509v3 Extended Key Usage:
TLS Web Client Authentication
$ openssl x509 -noout -text -in /var/lib/minikube/certs/ca.crt &lt;span class="p">|&lt;/span> grep -i issuer
Issuer: &lt;span class="nv">CN&lt;/span> &lt;span class="o">=&lt;/span> minikubeCA
$ openssl x509 -noout -text -in /var/lib/minikube/certs/ca.crt &lt;span class="p">|&lt;/span> grep -i -A1 extended
X509v3 Extended Key Usage:
TLS Web Client Authentication, TLS Web Server Authentication
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后记得将信息写入到 &lt;code>/opt/course/23/certificate-info.txt&lt;/code>&lt;/p>
&lt;h2 id="集群证书">集群：证书&lt;/h2>
&lt;blockquote>
&lt;p>检查 kube-apiserver 服务器证书在 &lt;code>cluster2-master1&lt;/code> 上的有效期。使用 openssl 或 cfssl 执行此操作。将到期日期写入 &lt;code>/opt/course/22/expiration&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>同时运行正确的 kubeadm 命令以列出到期日期并确认两种方法显示相同的日期。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将更新 apiserver 服务器证书的正确 kubeadm 命令写入 &lt;code>/opt/course/22/kubeadm-renew-certs.sh&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-25">知识点&lt;/h3>
&lt;ul>
&lt;li>api-server&lt;/li>
&lt;li>openssl&lt;/li>
&lt;li>kubeadm&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/#check-certificate-expiration&lt;/p>
&lt;h3 id="解题思路-25">解题思路&lt;/h3>
&lt;p>通过 kube-apiserver pod 的启动命令，或者 ssh 到 master 来查看命令参数，&lt;code>tls-cert-file=/var/lib/minikube/certs/apiserver.crt&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ openssl x509 -noout -text -in /var/lib/minikube/certs/apiserver.crt &lt;span class="p">|&lt;/span> grep -i valid -A2
Validity
Not Before: May &lt;span class="m">13&lt;/span> 22:33:43 &lt;span class="m">2021&lt;/span> GMT
Not After : May &lt;span class="m">14&lt;/span> 22:33:43 &lt;span class="m">2022&lt;/span> GMT
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 &lt;code>May 14 22:33:43 2022 GMT&lt;/code> 写入 &lt;code>/opt/course/22/expiration&lt;/code>&lt;/p>
&lt;p>通过 kubeadm 来检查&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubeadm certs check-expiration | grep -i apiserver
#macos 无法安装 kubeadm
#minikube 无法使用 kubeadm 检查
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 &lt;code>kubeadm certs renew apiserver&lt;/code> 写入 /opt/course/22/kubeadm-renew-certs.sh&lt;/p>
&lt;h2 id="集群升级节点">集群：升级节点&lt;/h2>
&lt;blockquote>
&lt;p>你的同事说节点 &lt;code>cluster3-worker2&lt;/code> 运行的是较旧的 Kubernetes 版本，甚至不属于集群的一部分。将 kubectl 和 kubeadm 更新为在 &lt;code>cluster3-master1&lt;/code> 上运行的确切版本。然后将此节点添加到集群中，您可以为此使用kubeadm。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-26">知识点&lt;/h3>
&lt;ul>
&lt;li>kubeadm 升级集群&lt;/li>
&lt;/ul>
&lt;p>参考文档：&lt;/p>
&lt;h3 id="解题思路-26">解题思路&lt;/h3>
&lt;p>检查node&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get nodes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查当前组件版本&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ssh cluster3-worker2
$ kubeadm version
$ kubectl version --short
Client Version: vx.xx.x
Server Version: vx.xx.x
$ kubelet --version
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#使用命令并升级各个组件，并重启 kubelet
#如果启动失败，一般是需要token连接到api-server，需要ssh到master上运行 kubeadm create token --print-join-command
#再ssh到 node上，执行打印的命令，重启kubelet并检查装填
#最后检查node是否成功加入集群
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-命令">Docker 命令&lt;/h2>
&lt;blockquote>
&lt;p>在命名空间 &lt;code>project-tiger&lt;/code> 中创建一个名为 &lt;code>Tigers-reunite&lt;/code> 的 Pod 镜像 &lt;code>httpd:2.4.41-alpine&lt;/code>，标签为 &lt;code>pod=container&lt;/code> 和 &lt;code>container=pod&lt;/code>。找出 Pod 被安排在哪个节点上。ssh 进入该节点并找到属于该 Pod 的 docker 容器。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将容器的 docker ID 和这些正在运行的进程/命令写入 &lt;code>/opt/course/17/pod-container.txt&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后，使用 docker 命令将主 Docker 容器（来自 yaml 中指定的那个）的日志写入 &lt;code>/opt/course/17/pod-container.log&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-27">知识点&lt;/h3>
&lt;ul>
&lt;li>docker 命令：ps、logs、inspect&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-27">解题思路&lt;/h3>
&lt;p>创建 pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run tigers-reunite --image httpd:2.4.41-alpine --labels &lt;span class="nv">pod&lt;/span>&lt;span class="o">=&lt;/span>container,container&lt;span class="o">=&lt;/span>pod
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查 pod 的信息&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pods --show-labels
NAME READY STATUS RESTARTS AGE LABELS
tigers-reunite 1/1 Running &lt;span class="m">0&lt;/span> 34s &lt;span class="nv">container&lt;/span>&lt;span class="o">=&lt;/span>pod,pod&lt;span class="o">=&lt;/span>container
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取pod所在的节点&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod tigers-reunite -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.spec.nodeName}&amp;#39;&lt;/span>
cka
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ssh到节点上&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker ps &lt;span class="p">|&lt;/span> grep tigers-reunite
e6ff69b437bc 54b0995a6305 &lt;span class="s2">&amp;#34;httpd-foreground&amp;#34;&lt;/span> About a minute ago Up About a minute k8s_tigers-reunite_tigers-reunite_dev_53391212-911d-4275-a19d-e8f8b0f85a98_0
06d3ca65eb08 k8s.gcr.io/pause:3.2 &lt;span class="s2">&amp;#34;/pause&amp;#34;&lt;/span> About a minute ago Up About a minute k8s_POD_tigers-reunite_dev_53391212-911d-4275-a19d-e8f8b0f85a98_0
&lt;span class="c1">#使用docker inspect 或者 进入容器直接查看进程&lt;/span>
$ docker inspect e6ff69b437bc &lt;span class="p">|&lt;/span> grep -i &lt;span class="s1">&amp;#39;cmd\|entrypoint&amp;#39;&lt;/span> -A1
&lt;span class="s2">&amp;#34;Cmd&amp;#34;&lt;/span>: &lt;span class="o">[&lt;/span>
&lt;span class="s2">&amp;#34;httpd-foreground&amp;#34;&lt;/span>
--
&lt;span class="s2">&amp;#34;Entrypoint&amp;#34;&lt;/span>: null,
&lt;span class="s2">&amp;#34;OnBuild&amp;#34;&lt;/span>: null,
$ docker inspect 06d3ca65eb08 &lt;span class="p">|&lt;/span> grep -i &lt;span class="s1">&amp;#39;cmd\|entrypoint&amp;#39;&lt;/span> -A1
&lt;span class="s2">&amp;#34;Cmd&amp;#34;&lt;/span>: null,
&lt;span class="s2">&amp;#34;Image&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;k8s.gcr.io/pause:3.2&amp;#34;&lt;/span>,
--
&lt;span class="s2">&amp;#34;Entrypoint&amp;#34;&lt;/span>: &lt;span class="o">[&lt;/span>
&lt;span class="s2">&amp;#34;/pause&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果写入文件&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">e6ff69b437bc httpd-foreground
06d3ca65eb08 pause
&lt;/code>&lt;/pre>&lt;/div>&lt;p>写日志到文件&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="l">docker logs e6ff69b437bc &amp;gt; /opt/course/17/pod-container.log&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>云原生 CICD: Tekton Pipeline 实战</title><link>https://atbug.com/tekton-pipeline-practice/</link><pubDate>Tue, 22 Jun 2021 07:19:33 +0800</pubDate><guid>https://atbug.com/tekton-pipeline-practice/</guid><description>
&lt;p>更新历史：&lt;/p>
&lt;ul>
&lt;li>v1：2020.1.21 基于 Tekton Pipline &lt;a href="https://github.com/tektoncd/pipeline/tree/v0.9.0/docs#tekton-pipelines">v0.9.0&lt;/a>&lt;/li>
&lt;li>v2（当前）：2021.6.22 基于 Tekton Pipeline &lt;a href="https://github.com/tektoncd/pipeline/tree/v0.25.0/docs#tekton-pipelines">v0.25.0&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>Tekton 是 Google 开源的 Kubernetes 原生CI/CD 系统, 功能强大扩展性强. 前身是 Knavite 里的 build-pipeline 项目, 后期孵化成&lt;a href="https://github.com/tektoncd/pipeline">独立的项目&lt;/a>. 并成为 &lt;a href="https://cd.foundation/projects/">CDF&lt;/a> 下的四个项目之一, 其他三个分别是 Jenkins, Jenkins X, Spinnaker.&lt;/p>
&lt;p>为什么说 Tekton 是 Kubernetes 原生的, 以内其基于 Kubernetes 的 CRD 定义了 Pipeline 流水线.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/uPic/bquuTV.jpg" alt="">&lt;/p>
&lt;p>CRD 及说明:&lt;/p>
&lt;ul>
&lt;li>Task: 构建任务, 可以定义一些列的 steps. 每个 step 由一个 container 执行.&lt;/li>
&lt;li>TaskRun: task 实际的执行, 并提供执行所需的参数. 这个对象创建后, 就会有 pod 被创建.&lt;/li>
&lt;li>Pipeline: 定义一个或者多个 task 的执行, 以及 PipelineResource 和各种定义参数的集合&lt;/li>
&lt;li>PipelineRun: 类似 task 和 taskrun 的关系: 一个定义一个执行. PipelineRun 则是 pipeline 的实际执行. 创建后也会创建 pod 来执行各个 task.&lt;/li>
&lt;li>&lt;del>PipelineResource: 流水线的输入资源, 比如 github/gitlab 的源码, 某种存储服务的文件, 或者镜像等. 执行时, 也会作为 pod 的其中一个 container 来运行(比如拉取代码).&lt;/del> PipelineResource 目前处于 Alaha，至于原因可以看&lt;a href="https://github.com/tektoncd/pipeline/blob/v0.25.0/docs/resources.md#why-arent-pipelineresources-in-beta">Why Aren&amp;rsquo;t PipelineResources in Beta?&lt;/a>&lt;/li>
&lt;li>Condition: 在 pipeline 的 task 执行时通过添加 condition 来对条件进行评估, 进而判断是否执行 task. 目前是WIP的状态, 待&lt;a href="https://github.com/tektoncd/pipeline/issues/1137">#1137&lt;/a>的完成.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>组件:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>tekton-pipelines-controller&lt;/code>: 监控 CRD 对象(TaskRun, PipelineRun)的创建, 为该次执行创建 pod.&lt;/li>
&lt;li>&lt;code>tekton-pipelines-webhook&lt;/code>: 对 apiserver 提供 http 接口做 CRD 对象的校验.&lt;/li>
&lt;/ul>
&lt;h2 id="前置条件">前置条件&lt;/h2>
&lt;p>文中使用的一些工具，基本都可以通过 homebrew 安装：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stedolan.github.io/jq/">jq&lt;/a> ：操作 json 的命令行工具&lt;/li>
&lt;li>&lt;a href="https://httpie.io/">httpie&lt;/a>：HTTP 客户端命令行工具&lt;/li>
&lt;li>&lt;a href="https://minikube.sigs.k8s.io/docs/start/">minikube 环境&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>文中的 Java 项目以及 tekton 的相关 yaml 都已经提交到了 &lt;a href="https://github.com/addozhang/tekton-test">tekton-test&lt;/a>.&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>参考&lt;a href="https://atbug.com/tekton-installation-and-sample/">上一篇文章&lt;/a>, 文章中有个简单的&amp;quot;hello world&amp;quot;.&lt;/p>
&lt;h2 id="实践">实践&lt;/h2>
&lt;p>到了这里相信已经安装好了 Tekton. 我们使用&lt;a href="https://start.spring.io/">Spring Initializer&lt;/a>生成的项目为例, 演示如何使用 Tekton 实现 CICD.&lt;/p>
&lt;p>开始之前简单整理下这个项目的 CICD 流程:&lt;/p>
&lt;ol>
&lt;li>拉取代码&lt;/li>
&lt;li>maven 打包&lt;/li>
&lt;li>构建镜像并推送&lt;/li>
&lt;li>部署&lt;/li>
&lt;/ol>
&lt;p>&lt;em>注: 所有的操作都是在 &lt;code>tekton-pipelines&lt;/code> namespace 下操作&lt;/em>&lt;/p>
&lt;h3 id="0x00-添加-dockerfile-和部署用的-yaml">0x00 添加 Dockerfile 和部署用的 yaml&lt;/h3>
&lt;p>用于构建镜像的Dockerfile&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">FROM openjdk:8-jdk-alpine
RUN mkdir /app
WORKDIR /app
COPY target/*.jar /app/app.jar
ENTRYPOINT [&amp;#34;sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;java -Xmx128m -Xms64m -jar app.jar&amp;#34;]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>用于部署 K8s Deployment 的 deployment.yml，同时通过创建 &lt;code>NodePort&lt;/code> 类型的 Service 用于访问应用。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;apps/v1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Deployment&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addozhang/tekton-test:latest&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Always&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/info&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">60&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;TCP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/info&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NodePort &lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x01-rbac">0x01 RBAC&lt;/h3>
&lt;p>创建 ServiceAccount 用于 Pipeline 的运行。&lt;/p>
&lt;p>&lt;strong>注：这里为了方便，授予了 &lt;code>ClusterRole&lt;/code> &lt;code>admin&lt;/code>。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># serviceaccount.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ServiceAccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRoleBinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipeline-admin-binding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">roleRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRole&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">admin&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># user cluster role admin&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">subjects&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ServiceAccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x02-拉取代码">0x02 拉取代码&lt;/h3>
&lt;p>代码作为构建的输入, 需要提供一个 Pipeline CRD 对象来表示输入是从 git 仓库来获取代码。&lt;/p>
&lt;p>访问 Tekton Hub 可以找到现成的 &lt;a href="https://hub.tekton.dev/tekton/task/git-clone">git-clone task&lt;/a>。&lt;/p>
&lt;p>使用 kubectl 安装：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/main/task/git-clone/0.4/git-clone.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者使用 tekton-cli 安装：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">tkn hub install task git-clone
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x03-maven-打包">0x03 maven 打包&lt;/h3>
&lt;p>Task &lt;code>source-to-image.yaml&lt;/code>的 step &lt;code>maven&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven:3.5.0-jdk-8-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workingDir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(workspaces.source.path)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">mvn&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">clean&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">install&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">DskipTests&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/root/.m2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/home/docker/.m2 &lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>说明:&lt;/strong>&lt;/p>
&lt;p>有了代码下一步就是执行 maven 的编译打包, 在&lt;code>maven:3.5.0-jdk-8-alpine&lt;/code>镜像中执行&lt;code>mvn&lt;/code>的相关命令.&lt;/p>
&lt;p>这里挂在了一个本地的volume, 避免每次构建重复下载依赖包, 同时里面还有&lt;code> settings.xml&lt;/code>&lt;/p>
&lt;p>&lt;em>注意: 对于 minikube, hostPath 请使用/data/.m2, 否则minikube重启后无法持久化&lt;/em>&lt;/p>
&lt;h3 id="0x04-构建镜像并推送">0x04 构建镜像并推送&lt;/h3>
&lt;p>Task &lt;code>source-to-image.yaml&lt;/code> 的 step &lt;code>build-and-push&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">spec:
params:
- name: pathToDockerFile
description: The path to the dockerfile to build (relative to the context)
default: Dockerfile
- name: imageUrl
description: Url of image repository
- name: imageTag
description: Tag to apply to the built image
default: latest
workspaces:
- name: source
- name: dockerconfig
mountPath: /kaniko/.docker # config.json 的挂载目录
steps:
- name: build-and-push
image: gcr.io/kaniko-project/executor:v1.6.0-debug
command:
- /kaniko/executor
args:
- --dockerfile=$(params.pathToDockerFile)
- --destination=$(params.imageUrl):$(params.imageTag)
- --context=$(workspaces.source.path)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>说明:&lt;/strong>&lt;/p>
&lt;p>镜像的构建, 我们采用了 kaniko。&lt;/p>
&lt;p>镜像仓库我们选择了Docker Hub, 推送的时候需要使用 credentials。&lt;/p>
&lt;p>kaniko 需要将 docker config 的文件存在于 &lt;code>/kanika/.docker&lt;/code> 目录下。这里的思路是将 docker 的 &lt;code>config.json&lt;/code>，以 &lt;code>secret&lt;/code> 的方式持久化，在通过先添加&lt;code> docker-registry&lt;/code>类型的 &lt;code>secret&lt;/code>，然后通过 &lt;code>workspace&lt;/code> 的方式输入到 kaniko 运行环境中。&lt;/p>
&lt;p>&lt;code>config.json&lt;/code> 里面保存的 json 结构化的数据，为了方便通过 dry run 创建&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create secret docker-registry dockerhub --docker-server&lt;span class="o">=&lt;/span>https://index.docker.io/v1/ --docker-username&lt;span class="o">=[&lt;/span>USERNAME&lt;span class="o">]&lt;/span> --docker-password&lt;span class="o">=[&lt;/span>PASSWORD&lt;span class="o">]&lt;/span> --dry-run&lt;span class="o">=&lt;/span>client -o json &lt;span class="p">|&lt;/span> jq -r &lt;span class="s1">&amp;#39;.data.&amp;#34;.dockerconfigjson&amp;#34;&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> base64 -d &amp;gt; /tmp/config.json &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> kubectl create secret generic docker-config --from-file&lt;span class="o">=&lt;/span>/tmp/config.json &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm -f /tmp/config.json
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>执行:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f tasks/source-to-image.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x05-部署">0x05 部署&lt;/h3>
&lt;p>deploy-to-k8s.yaml:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-to-k8s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">inputs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pathToYamlFile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The path to the yaml file to deploy within the git source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deployment.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">run-kubectl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">lachlanevenson/k8s-kubectl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;kubectl&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;apply&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;-f&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/workspace/git-source/$(inputs.params.pathToYamlFile)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>说明:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>pathToYamlFile: 指定部署应用的 yaml。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>执行:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f tasks/deploy-to-k8s.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x06-组装流水线">0x06 组装流水线&lt;/h3>
&lt;p>&lt;code>build-pipeline.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build-pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pathToContext&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The path to the build context, used by Kaniko - within the workspace&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageUrl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Url of image repository&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageTag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Tag to apply to the built image&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tasks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">fetch-from-git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-clone&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(params.git-url)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(params.git-revision)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">output&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source-to-image&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source-to-image&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageUrl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(params.imageUrl)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageTag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(params.imageTag)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dockerconfig&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runAfter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">fetch-from-git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-to-k8s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-to-k8s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pathToYamlFile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deployment.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runAfter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">source-to-image&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>执行:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f tasks/deploy-to-k8s.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x07-执行流水线">0x07 执行流水线&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PipelineRun&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">generateName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">generic-pr-&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">generic-pipeline-run&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pipelineRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build-pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">main&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.com/addozhang/tekton-test.git &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageUrl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">addozhang/tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageTag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeClaimTemplate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccountName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>执行:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f run/run.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x08-结果">0x08 结果&lt;/h3>
&lt;p>执行流水线后, 可以看到分别创建了下面的几个 pod:&lt;/p>
&lt;ul>
&lt;li>generic-pipeline-run-deploy-to-k8s-xxx&lt;/li>
&lt;li>generic-pipeline-run-fetch-from-git-xxx&lt;/li>
&lt;li>generic-pipeline-run-source-to-image-xxx&lt;/li>
&lt;/ul>
&lt;p>以及我们的应用 &lt;code>tekton-test-xxx&lt;/code>，发起请求测试：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http &lt;span class="k">$(&lt;/span>minikube ip&lt;span class="k">)&lt;/span>:&lt;span class="k">$(&lt;/span>kubectl get svc tekton-test -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{.spec.ports[0].nodePort}&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>/hi --body
hello world
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>目前 Tekton 进入 beta 阶段, 最新的版本是 &lt;code>0.25.0&lt;/code>。基于 CRD 的实现让 Tekton 在实际使用中可以灵活的设计自己的 CICD 流程.&lt;/p>
&lt;p>生态也越来越完善，比如 &lt;a href="https://hub.tekton.dev/">Tekton Hub&lt;/a> 提供了大量的可重用最佳实现的 Task 和 Pipeline。&lt;/p>
&lt;p>下一篇，我们尝试下如何在 Jenkins 中与 Tekton Pipeline 进行交互。&lt;/p>
&lt;p>更多文章:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/_hK6bqODJv3LrwnQaou-hA">Tekton 的工作原理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://atbug.com/tekton-dashboard-installation/">Tekton Dashboard 安装&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://atbug.com/tekton-trigger-glance/">Tekton Trigger 介绍&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://atbug.com/tekton-trigger-practice/">Tekton Trigger 实战&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>服务网格平稳落地：Istio 中精准控制 Sidecar 的注入</title><link>https://atbug.com/how-to-control-istio-sidecar-injection/</link><pubDate>Wed, 21 Apr 2021 08:13:04 +0800</pubDate><guid>https://atbug.com/how-to-control-istio-sidecar-injection/</guid><description>
&lt;h2 id="为什么">为什么&lt;/h2>
&lt;p>说起服务网格，这幅图大家肯定不会陌生。这就是服务网格的网络，也是网格架构的终极形态。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/21/cleanshot-20210420-at-2314142x.png" alt="">&lt;/p>
&lt;p>那在迁移到网格架构之前，我们的系统是什么样的？&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/21/cleanshot-20210420-at-2316432x.png" alt="">&lt;/p>
&lt;p>我们的系统在演进的过程中，不可避免的会遇到各种 0 到 1 过程中的中间态。比如下面这种，可以比较直观的看出 Istio 或者网格是部分覆盖的。这个过程中，我们需要平滑、可控的推进，才能在保障系统可用性的前提下进行架构的演进。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/21/cleanshot-20210420-at-2318242x.png" alt="">&lt;/p>
&lt;h2 id="怎么做">怎么做&lt;/h2>
&lt;p>Sidecar 的注入分两种：手动和自动。&lt;/p>
&lt;h3 id="手动">手动&lt;/h3>
&lt;p>手动就是利用 Istio 的 cli 工具 &lt;code>istioctl kube-inject&lt;/code> 对资源 yaml 进行修改：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ istioctl kube-inject -f samples/sleep/sleep.yaml &lt;span class="p">|&lt;/span> kubectl apply -f -
serviceaccount/sleep created
service/sleep created
deployment.apps/sleep created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>手动的方式比较适合开发阶段使用。&lt;/p>
&lt;h3 id="自动">自动&lt;/h3>
&lt;p>sidecar 的自动注入则是通过 &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/">mutating webhook admission controller&lt;/a> 实现的。其原理简单说就是拦截 pod的创建请求来对 pod 的资源定义进行修改。&lt;/p>
&lt;p>我们对截取了 &lt;code>istio-sidecar-injector&lt;/code> &lt;code>MutatingWebhookConfiguration&lt;/code> 的部分内容。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">webhooks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Exact&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sidecar-injector.istio.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespaceSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">istio-injection&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">enabled&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">objectSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sidecar.istio.io/inject&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NotIn&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#4&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">apiGroups&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiVersions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">CREATE&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">pods&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scope&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>这里的 &lt;code>matchPolicy: Exact&lt;/code> 针对的是 #4 中的 &lt;code>apiGroups&lt;/code>与&lt;code>apiVersions&lt;/code> 的组合，即精确匹配 &lt;code>v1/pods&lt;/code> 的 &lt;code>CREATE&lt;/code> 请求&lt;/li>
&lt;li>顾名思义，匹配符合条件的 &lt;code>namespace&lt;/code>&lt;/li>
&lt;li>同2，匹配符合条件的 &lt;code>object&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>注： #2、#3 支持 Kubernetes 的&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/">标签选择语法&lt;/a>&lt;/p>
&lt;p>按照前面的说明，这个 hook 会拦截打了 &lt;code>istio-injection: enabled&lt;/code> label 的 namespace 下，没有打 &lt;code>sidecar.istio.io/inject: false&lt;/code> 标签的 &lt;code>v1/pod&lt;/code> 的创建。通过 &lt;code>https://istiod.istio-system:443/inject&lt;/code> 端点对 pod 的定义进行定制（添加 &lt;code>init-container&lt;/code>、sidecar 容器等）。&lt;/p>
&lt;p>有人可能会说这样还不够精准，因为可能某个 namespace 下只有部分对象才会注入 sidecar。&lt;/p>
&lt;p>这就需要借助 &lt;code>istiod&lt;/code> 的逻辑了。&lt;/p>
&lt;h3 id="只针对特定-pod-注入sidecar-或忽略注入">只针对特定 pod 注入sidecar 或忽略注入&lt;/h3>
&lt;p>在 &lt;code>configmap&lt;/code> &lt;code>istio-sidecar-injector&lt;/code> 中有两个字段 &lt;code>alwaysInjectSelector&lt;/code> 和 &lt;code>neverInjectSelector&lt;/code>。从名字来看这两个分别提供了白名单、黑名单的功能。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">alwaysInjectSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="l">neverInjectSelector:[]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们只需如下调整（需要重启 istiod），然后为需要注入 sidecar 的资源打上相应的标签即可。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">alwaysInjectSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sidecar.istio.io/inject&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">In&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;enabled&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;yes&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>带你了解 Ribbon 负载均衡器的实现</title><link>https://atbug.com/how-loadbalancer-works-in-ribbon/</link><pubDate>Tue, 09 Jun 2020 19:35:53 +0800</pubDate><guid>https://atbug.com/how-loadbalancer-works-in-ribbon/</guid><description>
&lt;p>Spring Cloud 中 &lt;code>Ribbon&lt;/code>有在 &lt;code>Zuul&lt;/code> 和 &lt;code>Feign&lt;/code> 中使用，当然也可以通过在&lt;code>RestTemplate&lt;/code>的 bean 定义上添加&lt;code>@LoadBalanced&lt;/code>注解方式获得一个带有负载均衡更能的&lt;code>RestTemplate&lt;/code>。&lt;/p>
&lt;p>不过实现的方法都大同小异：对&lt;code>HttpClient&lt;/code>进行封装，加上实例的”选择“（这个选择的逻辑就是我们所说的负载均衡）。&lt;/p>
&lt;p>要学习某个框架的时候，最简单的方案就是：&lt;strong>Running+Debugging&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>跑就是了。&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>debug 不一定是为了 bug&lt;/p>
&lt;p>debug 出真知&lt;/p>
&lt;p>Debugging = Learning&lt;/p>
&lt;/blockquote>
&lt;p>选用 &lt;a href="https://www.alispit.tel">Ali Spittel&lt;/a> 的一条推文：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/06/09/screenshot-20200609-at-165236.png" alt="screenshot 2020-06-09 at 16.52.36">&lt;/p>
&lt;h3 id="以-zuul-路由的线程栈为例">以 Zuul 路由的线程栈为例&lt;/h3>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/06/09/screenshot-20200609-at-151421.png" alt="screenshot 2020-06-09 at 15.14.21">&lt;/p>
&lt;p>调整下顺序：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">RetryableRibbonLoadBalancingHttpClient&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RibbonApacheHttpRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IClientConfig&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">RetryableRibbonLoadBalancingHttpClient&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">executeWithRetry&lt;/span>&lt;span class="o">(...)&lt;/span>
&lt;span class="n">RetryTemplate&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetryCallback&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">RecoveryCallback&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;)&lt;/span>
&lt;span class="n">RetryTemplate&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">doExecute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetryCallback&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">RecoveryCallback&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">RetryState&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">RetryTemplate&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">canRetry&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetryPolicy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RetryContext&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">InterceptorRetryPolicy&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">canRetry&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetryContext&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">AbstractLoadBalancingClient&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">choose&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">serviceId&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">ZoneAwareLoadBalancer&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">chooseServer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">//key as serviceId
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">BaseLoadBalancer&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">chooseServer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">PredicateBasedRule&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">choose&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">AbstractServerPredicate&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">chooseRoundRobinAfterFiltering&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Server&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">servers&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">loadBalancerKey&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">AbstractServerPredicate&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">apply&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Predicate&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="分析">分析&lt;/h3>
&lt;p>Zuul 收到请求经过一系列 Filter 的处理，来到 &lt;code>RibbonRoutingFilter&lt;/code>；将请求封装成 &lt;code>RibbonCommandContext&lt;/code>，然后使用 context 构建 &lt;code>RibbonCommand&lt;/code>。最终调用&lt;code>RibbonCommand#execute()&lt;/code>方法，将请求路由到下游。&lt;/p>
&lt;p>&lt;code>RibbonCommand&lt;/code>持有&lt;code>AbstractLoadBalancerAwareClient&lt;/code>的对象，通过该 client 在处理请求和响应。&lt;/p>
&lt;p>对于 &lt;strong>retryable&lt;/strong> 的 client（比如此处的&lt;code>RetryableRibbonLoadBalancingHttpClient&lt;/code>）， &lt;em>&lt;em>每次处理请求的时候都会创建一个&lt;/em>&lt;/em> &lt;code>RetryTemplate&lt;/code>对象来处理请求；同时根据&lt;code>RetryPolicy&lt;/code>来创建&lt;code>RetryContext&lt;/code>对象，用来保存重试的上下文，并 &lt;em>检查实例是否可以进行重试&lt;/em> 。&lt;/p>
&lt;p>注意重点就在这里：检查的时候&lt;strong>如果重试次数为 0 且要检查的实例为空&lt;/strong>（说明是第一次请求），这时便会通过&lt;strong>负载均衡器客户端&lt;/strong>（基本都是&lt;code>AbstractLoadBalancingClient&lt;/code>的子类）从后端列表择出一个实例，保存在&lt;code>RetryContext&lt;/code>中。&lt;/p>
&lt;p>负载均衡器客户端使用&lt;strong>负载均衡器&lt;/strong>（&lt;code>ILoadBalancer&lt;/code>的实现）来选择实例。每个负载均衡器都有自己的规则（&lt;code>IRule&lt;/code>的实现类），通过规则来选择实例。&lt;/p>
&lt;p>&lt;code>IRule&lt;/code>的实现不是很多，&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/06/09/screenshot-20200609-at-163309.png" alt="screenshot 2020-06-09 at 16.33.09">&lt;/p>
&lt;p>其中的&lt;code>ClientConfigEnabledRoundRobinRule&lt;/code>在&lt;code>RoundRobinRule&lt;/code>的基础上，增加了配置的接口（因为其实现了&lt;code>IClientConfigAware&lt;/code>接口）可以对规则进行配置。&lt;/p>
&lt;p>某些&lt;code>ClientConfigEnabledRoundRobinRule&lt;/code>的子类了，增加了&lt;code>Predicate&lt;/code>逻辑：使用&lt;code>Predicate&lt;/code>（&lt;code>AbstractServerPredicate&lt;/code>的子类）的逻辑进行选择；而&lt;code>ClientConfigEnabledRoundRobinRule&lt;/code>只是简单的使用&lt;code>RoundRobinRule&lt;/code>进行选择。&lt;/p>
&lt;p>因此选择的逻辑都是在&lt;code>AbstractServerPredicate&lt;/code>子类中，其有个特别的子类&lt;code>CompositePredicate&lt;/code>，顾名思义就是将多个逻辑整合在一起（使用&lt;code>Predicate#and()&lt;/code>将所有逻辑串联起来，达到&lt;code>&amp;amp;&amp;amp;&lt;/code>的效果），所有的逻辑检查都通过（返回&lt;code>true&lt;/code>）时，这个实例就会被选中。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/06/09/screenshot-20200609-at-165642.png" alt="screenshot 2020-06-09 at 16.56.42">&lt;/p>
&lt;hr>
&lt;p>那么现在要你写个自己负载均衡规则，应该知道从哪里入手了吧？:D&lt;/p></description></item><item><title>Eureka 实例注册状态保持 STARTING 的问题排查</title><link>https://atbug.com/troubleshooting-on-eureka-instance-keep-starting/</link><pubDate>Thu, 28 May 2020 22:04:02 +0800</pubDate><guid>https://atbug.com/troubleshooting-on-eureka-instance-keep-starting/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/28/maninblackshirtandgraydenimpantssittingongray11342.jpg" alt="">&lt;/p>
&lt;p>这是真实发生在生产环境的 case，实例启动后正常运行，而在注册中心的状态一直保持&lt;code>STARTING&lt;/code>，而本地的状态为&lt;code>UP&lt;/code>。导致服务的消费方无法发现可用实例。&lt;/p>
&lt;p>这种情况的出现概率非常低，运行一年多未发现两个实例同时出现问题的情况，因此多实例运行可以避免。文末有问题的解决方案，不想花时间看分析过程可直接跳到最后。&lt;/p>
&lt;p>环境说明：&lt;/p>
&lt;blockquote>
&lt;p>eureka-client: 1.7.2
spring-boot: 1.5.12.RELEASE
spring-cloud: Edgware.SR3&lt;/p>
&lt;/blockquote>
&lt;h2 id="问题重现">问题重现&lt;/h2>
&lt;p>借助&lt;code>Btrace&lt;/code>重现, &lt;code>java -noverify -cp .:btrace-boot.jar -javaagent:btrace-agent.jar=script=&amp;lt;pre-compiled-btrace-script&amp;gt; &amp;lt;MainClass&amp;gt; &amp;lt;AppArguments&amp;gt;&lt;/code>&lt;/p>
&lt;h3 id="思路">思路&lt;/h3>
&lt;p>主线程更新实例本地状态(STARTING-&amp;gt;UP)前, 等待心跳线程完成第一次心跳并尝试注册实例, 获取到当前的状态&lt;code>STARTING&lt;/code>. 主线程更新状态后触发&lt;/p>
&lt;p>&lt;a href="https://gist.github.com/addozhang/9b584470558beb862abeb93e74c1a9b4">Btrace 脚本&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.sun.btrace.annotations.BTrace&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.sun.btrace.annotations.Kind&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.sun.btrace.annotations.Location&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.sun.btrace.annotations.OnMethod&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.concurrent.atomic.AtomicBoolean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">com.sun.btrace.BTraceUtils.currentThread&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">com.sun.btrace.BTraceUtils.println&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author Addo.Zhang
&lt;/span>&lt;span class="cm"> * @date 2019-07-31
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@BTrace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">unsafe&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EurekaRequest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span> &lt;span class="n">heartbeatThreadRegistrationStarted&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span> &lt;span class="n">replicatorThreadRegistrationCompleted&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span> &lt;span class="n">statusUP&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="nd">@OnMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">location&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Location&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Kind&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LINE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">45&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">waitHeartbeatExecution&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">currentThread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; is waiting heartbeatThreadRegistrationStarted thread executing first&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">heartbeatThreadRegistrationStarted&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@OnMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">location&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Location&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Kind&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LINE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">46&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">markStatusUp&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">statusUP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Heartbeat thread executed and &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">currentThread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; continues procedure to change status to [UP]&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@OnMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;com.netflix.discovery.converters.EurekaJacksonCodec$InstanceInfoSerializer&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">location&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Location&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Kind&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LINE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">369&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">continueRegistrationExecution&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">doExecution&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@OnMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;com.logancloud.forge.discovery.converters.LoganEurekaJacksonCodec$LoganInstanceInfoSerializer&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">location&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Location&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Kind&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LINE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">117&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">continueRegistrationExecution2&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">doExecution&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doExecution&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">currentThread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; started to proceed registration&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;HeartbeatExecutor&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">heartbeatThreadRegistrationStarted&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">statusUP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">replicatorThreadRegistrationCompleted&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">500&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//interval for replicator registration request completed.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">interrupt&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;InstanceInfoReplicator&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">replicatorThreadRegistrationCompleted&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">currentThread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; thread registration completed&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/28/15652581664364.jpg" alt="">&lt;/p>
&lt;ol>
&lt;li>心跳线程&lt;code>HeartbeatThread&lt;/code>发送心跳请求(&lt;code>PUT&lt;/code>), 注册中心返回404.&lt;/li>
&lt;li>实例信息同步线程&lt;code>InstanceInfoReplicator&lt;/code>发送注册请求(&lt;code>POST&lt;/code>): 状态为&lt;code>UP&lt;/code>, &lt;code>lastDirtyTimestamp&lt;/code>为&lt;code>a&lt;/code>&lt;/li>
&lt;li>心跳线程发送实例注册请求(&lt;code>POST&lt;/code>): 状态为&lt;code>STARTING&lt;/code>, &lt;code>lastDirtyTimestamp&lt;/code>为&lt;code>a&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="服务注册">服务注册&lt;/h2>
&lt;p>先分析服务实例的注册逻辑.&lt;/p>
&lt;h3 id="instanceinfo初始化">InstanceInfo初始化&lt;/h3>
&lt;p>通过&lt;code>InstanceInfoFactory#create()&lt;/code>方法来初始化&lt;code>ApplicationInfoManager.instanceInfo&lt;/code>实例时, 实例状态被设置为&lt;code>STARTING&lt;/code>&lt;/p>
&lt;h3 id="服务实例注册">服务实例注册&lt;/h3>
&lt;p>服务实例注册的真正逻辑是在&lt;code>DiscoveryClient#register()&lt;/code>中完成的. 但是这个方法的调用却有两个入口, 在整个过程中可解释为主动注册和被动注册.&lt;/p>
&lt;h4 id="一-主动注册">一. 主动注册&lt;/h4>
&lt;p>&lt;code>EurekaAutoServiceRegistration&lt;/code>实现了&lt;code>SmartLifecycle&lt;/code>接口, 在&lt;code>EurekaClientAutoConfiguration#eurekaAutoServiceRegistration()&lt;/code>被实例化.&lt;/p>
&lt;p>&lt;code>EurekaAutoServiceRegistration#start()&lt;/code>方法将&lt;code>EurekaRegistration&lt;/code>注册给&lt;code>EurekaServiceRegistry&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">start&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">running&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getNonSecurePort&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//调用EurekaServiceRegistry进行注册
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serviceRegistry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registration&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//发布实例注册的事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">publishEvent&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">InstanceRegisteredEvent&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstanceConfig&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">running&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>&lt;code>EurekaServiceRegistry#register()&lt;/code>:
先将实例状态设置为初始状态&lt;strong>UP&lt;/strong>(可通过&lt;code>eureka.instance.initial-status&lt;/code>修改, 默认为&lt;code>UP&lt;/code>). 这里会触发&lt;code>StatusChangeListener#notify()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EurekaRegistration&lt;/span> &lt;span class="n">reg&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">maybeInitializeClient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">reg&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isInfoEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Registering application &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstanceConfig&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getAppname&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; with eureka with status &amp;#34;&lt;/span>
&lt;span class="o">+&lt;/span> &lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstanceConfig&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getInitialStatus&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getApplicationInfoManager&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">setInstanceStatus&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstanceConfig&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getInitialStatus&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHealthCheckHandler&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//2
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getEurekaClient&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">registerHealthCheck&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHealthCheckHandler&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>DiscoveryClient&lt;/code>内部匿名类提供了&lt;code>StatusChangeListener&lt;/code>的实现, 调用&lt;code>InstanceInfoReplicator#onDemandUpdate()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">statusChangeListener&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ApplicationInfoManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">StatusChangeListener&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getId&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;statusChangeListener&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">notify&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StatusChangeEvent&lt;/span> &lt;span class="n">statusChangeEvent&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InstanceStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DOWN&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">statusChangeEvent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getStatus&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">InstanceStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DOWN&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">statusChangeEvent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPreviousStatus&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// log at warn level if DOWN was involved
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">warn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Saw local status change event {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">statusChangeEvent&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Saw local status change event {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">statusChangeEvent&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">instanceInfoReplicator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">onDemandUpdate&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>InstanceInfoReplicator&lt;/code>是在&lt;code>DiscoveryClient#initScheduledTasks()&lt;/code>中实例化的&lt;code>Runnable&lt;/code>的实现, 实例化之后, 使用其内部的调度线程池调度一个线程. 而&lt;code>onDemandUpdate()&lt;/code>也同样会使用调度线程池调度一个线程.&lt;/p>
&lt;p>其&lt;code>#run()&lt;/code>方法会调用&lt;code>DiscoveryClient#refreshInstanceInfo()&lt;/code>来更新状态. 状态的更新是通过&lt;code>HealthCheckHandler&lt;/code>来实现的, 具体请看&lt;a href="#%E7%8A%B6%E6%80%81%E6%A3%80%E6%9F%A5">状态检查&lt;/a>. 然后调用&lt;code>DiscoveryClient#register()&lt;/code>方法进行注册.&lt;/p>
&lt;h4 id="二-被动注册">二. 被动注册&lt;/h4>
&lt;p>上面提到了&lt;code>DiscoveryClient#initScheduledTasks()&lt;/code>, 这里的task除了&lt;code>InstanceInfoReplicator&lt;/code>之外还有其他的线程. 其中一个是线条线程&lt;code>HeartbeatThread&lt;/code>. 这个线程会每隔一段时间向注册中心发送一个&lt;code>PUT&lt;/code>类型的HTTP请求: 上报实例的状态(状态(status), 以及状态修改的时间(lastDirtyTimestamp)).&lt;/p>
&lt;p>这个请求可能会有两种结果: &lt;code>404&lt;/code>和&lt;code>200&lt;/code>. 前者说明注册中心中还没有这个实例的注册信息; 后者说明状态上报成功.&lt;/p>
&lt;p>假如是&lt;code>404&lt;/code>, 便直接发起注册的动作, 即调用&lt;code>DiscoveryClient#register()&lt;/code>方法进行注册.&lt;/p>
&lt;h4 id="状态检查">状态检查&lt;/h4>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/28/15459820056548.jpg" alt="">&lt;/p>
&lt;p>&lt;code>CloudEurekaClient&lt;/code>通过&lt;code>HealthCheckHandler&lt;/code>来检查实例的健康状态, 看下&lt;code>HealthCheckCallbackToHandlerBridge&lt;/code>实现: callback为空, 或者当前状态为&lt;code>STARTING&lt;/code>或者&lt;code>OUT_OF_SERVICE&lt;/code>时, 返回当前的状态. 我们没有设置callback, 故而总是会返回当前的状态. 比如应用启动的初始状态为&lt;code>STARTING&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">InstanceInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">InstanceStatus&lt;/span> &lt;span class="nf">getStatus&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">InstanceInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">InstanceStatus&lt;/span> &lt;span class="n">currentStatus&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">callback&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">InstanceInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">InstanceStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">STARTING&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">currentStatus&lt;/span>
&lt;span class="o">||&lt;/span> &lt;span class="n">InstanceInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">InstanceStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OUT_OF_SERVICE&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">currentStatus&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// Do not go to healthcheck handler if the status is starting or OOS.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">currentStatus&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isHealthy&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">InstanceInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">InstanceStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UP&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">InstanceInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">InstanceStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DOWN&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="问题分析">问题分析&lt;/h2>
&lt;h3 id="现象">现象&lt;/h3>
&lt;h4 id="tcp抓包">TCP抓包&lt;/h4>
&lt;p>HeartBeat请求和Fetch请求正常. &lt;code>status=UP&amp;amp;lastDirtyTimestamp=1545039481813&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/28/15459763724617.jpg" alt="">&lt;/p>
&lt;h4 id="堆信息">堆信息&lt;/h4>
&lt;p>本地状态为UP, &lt;code>lastDirtyTimestamp&lt;/code>为1545039481813, &lt;code>lastUpdatedTimestamp&lt;/code>为1545039472888&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/28/15459778021925.jpg" alt="">&lt;/p>
&lt;h4 id="注册中心里的实例信息">注册中心里的实例信息&lt;/h4>
&lt;p>状态为STARTING, &lt;code>lastDirtyTimestamp&lt;/code>为1545039481813, &lt;code>registrationTimestamp&lt;/code>为1545039481898, &lt;code>lastUpdatedTimestamp&lt;/code>为1545039481899&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;instance&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;instanceId&amp;gt;&lt;/span>xp-xtower-webapp-boot-6-txcxb:xp-xtower-webapp-boot:10100&lt;span class="nt">&amp;lt;/instanceId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;hostName&amp;gt;&lt;/span>10.128.41.74&lt;span class="nt">&amp;lt;/hostName&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;app&amp;gt;&lt;/span>XP-XTOWER-WEBAPP-BOOT&lt;span class="nt">&amp;lt;/app&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;ipAddr&amp;gt;&lt;/span>10.128.41.74&lt;span class="nt">&amp;lt;/ipAddr&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;status&amp;gt;&lt;/span>STARTING&lt;span class="nt">&amp;lt;/status&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;overriddenstatus&amp;gt;&lt;/span>UNKNOWN&lt;span class="nt">&amp;lt;/overriddenstatus&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;port&lt;/span> &lt;span class="na">enabled=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>10100&lt;span class="nt">&amp;lt;/port&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;securePort&lt;/span> &lt;span class="na">enabled=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>443&lt;span class="nt">&amp;lt;/securePort&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;countryId&amp;gt;&lt;/span>1&lt;span class="nt">&amp;lt;/countryId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dataCenterInfo&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>MyOwn&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dataCenterInfo&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;leaseInfo&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;renewalIntervalInSecs&amp;gt;&lt;/span>5&lt;span class="nt">&amp;lt;/renewalIntervalInSecs&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;durationInSecs&amp;gt;&lt;/span>20&lt;span class="nt">&amp;lt;/durationInSecs&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;registrationTimestamp&amp;gt;&lt;/span>1545039481898&lt;span class="nt">&amp;lt;/registrationTimestamp&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;lastRenewalTimestamp&amp;gt;&lt;/span>1545950719063&lt;span class="nt">&amp;lt;/lastRenewalTimestamp&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;evictionTimestamp&amp;gt;&lt;/span>0&lt;span class="nt">&amp;lt;/evictionTimestamp&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;serviceUpTimestamp&amp;gt;&lt;/span>0&lt;span class="nt">&amp;lt;/serviceUpTimestamp&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/leaseInfo&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;metadata&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;forge&amp;gt;&lt;/span>1.0.0&lt;span class="nt">&amp;lt;/forge&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;management.port&amp;gt;&lt;/span>10100&lt;span class="nt">&amp;lt;/management.port&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jmx.port&amp;gt;&lt;/span>1099&lt;span class="nt">&amp;lt;/jmx.port&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;group&amp;gt;&lt;/span>innovation&lt;span class="nt">&amp;lt;/group&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/metadata&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;homePageUrl&amp;gt;&lt;/span>http://10.128.41.74:10100/&lt;span class="nt">&amp;lt;/homePageUrl&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;statusPageUrl&amp;gt;&amp;lt;/statusPageUrl&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;healthCheckUrl&amp;gt;&lt;/span>http://10.128.41.74:10100/health&lt;span class="nt">&amp;lt;/healthCheckUrl&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;vipAddress&amp;gt;&lt;/span>xp-xtower-webapp-boot&lt;span class="nt">&amp;lt;/vipAddress&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;secureVipAddress&amp;gt;&lt;/span>xp-xtower-webapp-boot&lt;span class="nt">&amp;lt;/secureVipAddress&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;isCoordinatingDiscoveryServer&amp;gt;&lt;/span>false&lt;span class="nt">&amp;lt;/isCoordinatingDiscoveryServer&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;lastUpdatedTimestamp&amp;gt;&lt;/span>1545039481899&lt;span class="nt">&amp;lt;/lastUpdatedTimestamp&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;lastDirtyTimestamp&amp;gt;&lt;/span>1545039481813&lt;span class="nt">&amp;lt;/lastDirtyTimestamp&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;actionType&amp;gt;&lt;/span>ADDED&lt;span class="nt">&amp;lt;/actionType&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/instance&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Scope&lt;/th>
&lt;th>Status&lt;/th>
&lt;th>lastDirtyTimestamp&lt;/th>
&lt;th>lastUpdatedTimestamp&lt;/th>
&lt;th>registrationTimestamp&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Request&lt;/td>
&lt;td>UP&lt;/td>
&lt;td>1545039481813&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Local&lt;/td>
&lt;td>UP&lt;/td>
&lt;td>1545039481813&lt;/td>
&lt;td>1545039472888&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Remote&lt;/td>
&lt;td>STARTING&lt;/td>
&lt;td>1545039481813&lt;/td>
&lt;td>1545039481899&lt;/td>
&lt;td>1545039481898&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>结合起来看, 问题出在&lt;code>lastDirtyTimestamp&lt;/code>未更新, 导致注册中心的状态未更新. 而&lt;code>lastUpdatedTimestamp&lt;/code>的时间为1545039481899, 与&lt;code>lastDirtyTimestamp&lt;/code>相差&lt;code>86毫秒&lt;/code>.&lt;/p>
&lt;p>服务端&lt;code>InstanceResource#validateDirtyTimestamp()&lt;/code>根据本地保存的实例的信息, 和心跳请求发送过来的请求做比较, 决定响应的状态码&lt;code>200&lt;/code>, &lt;code>404&lt;/code>或者&lt;code>409&lt;/code>&lt;/p>
&lt;h3 id="推理">推理&lt;/h3>
&lt;p>注册中心里实例的状态为&lt;code>STARTING&lt;/code>, 可以确定实例是[被动注册](#二. 被动注册)的.&lt;/p>
&lt;p>这里有几个时间点:&lt;/p>
&lt;ul>
&lt;li>&lt;code>1545039472888&lt;/code>: &lt;code>InstanceInfo&lt;/code>对象实例化的时间, 因为本地对象的&lt;code>#lastUpdatedTimestamp&lt;/code>字段只有在实例化才会赋值, 此后不会被修改. 见&lt;a href="#%E5%A0%86%E4%BF%A1%E6%81%AF">堆信息&lt;/a>&lt;/li>
&lt;li>&lt;code>1545039481813&lt;/code>: 状态从&lt;code>STARTING&lt;/code>变为&lt;code>UP&lt;/code>的时间, 也是实例状态的最后一次更新时间. 此后的心跳请求都会带上实例的最新状态(&lt;code>UP&lt;/code>)和状态的最后一次更新时间(&lt;code>1545039481813&lt;/code>), 见&lt;a href="#TCP%E6%8A%93%E5%8C%85">TCP抓包&lt;/a>.&lt;/li>
&lt;li>&lt;code>1545039481898&lt;/code>: 注册中心收到实例的注册请求的时间. 见&lt;a href="#%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E9%87%8C%E7%9A%84%E5%AE%9E%E4%BE%8B%E4%BF%A1%E6%81%AF">注册中心里的实例信息&lt;/a>&lt;/li>
&lt;li>&lt;code>1545039481899&lt;/code>: 注册中心中的实例信息被更新的时间. 这个时间只比注册的时间晚了&lt;em>1毫秒&lt;/em>. 见&lt;a href="#%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E9%87%8C%E7%9A%84%E5%AE%9E%E4%BE%8B%E4%BF%A1%E6%81%AF">注册中心里的实例信息&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>综上可见, 被动注册时发送请求, 拿到的实例的旧的状态&lt;code>STARTING&lt;/code>, 修改时间确实最新的&lt;code>1545039481813&lt;/code>. 后续的心跳上报实例状态为最新的&lt;code>UP&lt;/code>, 修改时间也是最新的&lt;code>1545039481813&lt;/code>. 但是由于最后修改时间与注册时的最后修改时间相同, 即使状态已经变为&lt;code>UP&lt;/code>, 注册中心在收到心跳请求之后也不会将状态更新为&lt;code>UP&lt;/code>.&lt;/p>
&lt;p>服务端&lt;code>InstanceResource#renewLease()&lt;/code> -&amp;gt; &lt;code>InstanceResource#validateDirtyTimestamp()&lt;/code>: 如果请求中的&lt;code>lastDirtyTimestamp&lt;/code>与当前保存的实例的相同, 则直接返回OK, 不会更新注册中心中保存的实例的状态.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="n">Response&lt;/span> &lt;span class="nf">validateDirtyTimestamp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">lastDirtyTimestamp&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">isReplication&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">InstanceInfo&lt;/span> &lt;span class="n">appInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstanceByAppAndId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">appInfo&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">lastDirtyTimestamp&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">lastDirtyTimestamp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">appInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastDirtyTimestamp&lt;/span>&lt;span class="o">())))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">appInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastDirtyTimestamp&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">lastDirtyTimestamp&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">isReplication&lt;/span>&lt;span class="o">};&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">lastDirtyTimestamp&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">appInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastDirtyTimestamp&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="s">&amp;#34;Time to sync, since the last dirty timestamp differs -&amp;#34;&lt;/span>
&lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; ReplicationInstance id : {},Registry : {} Incoming: {} Replication: {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">status&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Status&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NOT_FOUND&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">appInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastDirtyTimestamp&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lastDirtyTimestamp&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// In the case of replication, send the current instance info in the registry for the
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// replicating node to sync itself with this one.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isReplication&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="s">&amp;#34;Time to sync, since the last dirty timestamp differs -&amp;#34;&lt;/span>
&lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; ReplicationInstance id : {},Registry : {} Incoming: {} Replication: {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">status&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Status&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CONFLICT&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">entity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">appInfo&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ok&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ok&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="为什么会出现这种情况">为什么会出现这种情况?&lt;/h4>
&lt;p>应用启动过程中会有两个线程会触发&lt;strong>注册&lt;/strong>的动作&lt;/p>
&lt;ol>
&lt;li>&lt;code>InstanceInfoReplicator&lt;/code>线程: &lt;code>DiscoveryClient&lt;/code>中的&lt;code>ApplicationInfoManager.StatusChangeListener&lt;/code>监听到实例状态发生变化, 会新建一个线程将实例注册到注册中心&lt;/li>
&lt;li>&lt;code>DiscoveryClient$HeartbeatThread&lt;/code>线程: 这个线程在&lt;code>DiscoveryClient&lt;/code>实例初始化后延迟(与心跳间隔时间相同, 默认是&lt;code>30s&lt;/code>, 中台为提高实例发现效率将其改为了&lt;code>5s&lt;/code>)启动运行. 第一次发送心跳请求是如果注册中心返回&lt;strong>404&lt;/strong>(说明心跳线程提实例状态更新线程先启动), 则会先将实例注册到注册中心.&lt;/li>
&lt;/ol>
&lt;p>上面两个线程都通过调用&lt;code>AbstractJerseyEurekaHttpClient$register()&lt;/code>方法并使用&lt;code>EurekaJacksonCodec$InstanceInfoSerializer&lt;/code>将实例信息序列化. 序列化的过程中&lt;strong>先记录实例的状态后记录实例状态的最后修改时间(lastDirtyTimestamp)&lt;/strong>, 这两个操作不是一个原子操作.&lt;/p>
&lt;p>非常极端的情况下(&lt;strong>缩小心跳间隔增加了出现的概率, 但依然极地&lt;/strong>), 两个操作之间(心跳线程先拿到实例状态&lt;code>STARTING&lt;/code>)主线程修改了实例状态为&lt;code>UP&lt;/code>, 同时修改了&lt;code>lastDirtyTimestamp&lt;/code>, 并触发了&lt;code>InstanceInfoReplicator&lt;/code>线程的注册操作, 此时心跳线程获取到的实例的最后修改时间与&lt;code>STARTING&lt;/code>状态并不一致. 之后同样注册动作覆盖了实例在注册中心的状态: &lt;code>UP -&amp;gt; STARTING&lt;/code>.&lt;/p>
&lt;p>后续的心跳请求带去的最新状态&lt;code>UP&lt;/code>和&lt;code>lastDirtyTimestamp&lt;/code>, 并不会更新在注册中心的状态.&lt;/p>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;p>在&lt;code>EurekaJacksonCodec$InstanceInfoSerializer#serialize()&lt;/code>方法中, 将&lt;code>#autoMarshalEligible()&lt;/code> 的调用移到&lt;code>jgen.writeStartObject()&lt;/code>后面. 这样就使得&lt;code>lastDirtyTimestamp&lt;/code>的获取比&lt;code>status&lt;/code>早, 就能保证即使注册时的&lt;code>lastDirtyTimestamp&lt;/code>小于真正的, 但是状态是与实际相符. &lt;code>lastDirtyTimestamp&lt;/code>会在后续的心跳请求中更新.
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/28/15476421041186.jpg" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">addInstance-info.getStatus(): UP
addInstance-info.getLastDirtyTimestamp(): 1565164484429
addInstance-info.getStatus(): STARTING
addInstance-info.getLastDirtyTimestamp(): 1565164484415
renew-status-in-registry: UP
renew-lastDirtyTimestamp: 1565164484429
renew-appInfo.getLastDirtyTimestamp(): 1565164484429
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/Netflix/eureka/pull/1229">PR&lt;/a> 已经提交并合并完成，然而 1.7.x 的版本不知何时会发布修复版本&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/Netflix/eureka/issues/1174">GitHub issue&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Netflix/eureka/pull/1229">PR&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Tekton 的工作原理</title><link>https://atbug.com/how-tekton-works/</link><pubDate>Sat, 23 May 2020 22:47:14 +0800</pubDate><guid>https://atbug.com/how-tekton-works/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/24/tekton.jpeg" alt="tekton">&lt;/p>
&lt;p>&lt;em>这篇文章是基于 Tekton Pipeline 的最新版本&lt;code>v0.12.1&lt;/code>版本。&lt;/em>&lt;/p>
&lt;p>快速入门请参考：&lt;a href="https://atbug.com/tekton-trigger-practice/">云原生 CICD: Tekton Pipeline 实战&lt;/a> ，&lt;em>实战是基于版本 v0.10.x&lt;/em>。&lt;/p>
&lt;h2 id="pipeline-crd-与核心资源的关系">Pipeline CRD 与核心资源的关系&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ k api-resources --api-group&lt;span class="o">=&lt;/span>tekton.dev
NAME SHORTNAMES APIGROUP NAMESPACED KIND
clustertasks tekton.dev &lt;span class="nb">false&lt;/span> ClusterTask
conditions tekton.dev &lt;span class="nb">true&lt;/span> Condition
pipelineresources tekton.dev &lt;span class="nb">true&lt;/span> PipelineResource
pipelineruns pr,prs tekton.dev &lt;span class="nb">true&lt;/span> PipelineRun
pipelines tekton.dev &lt;span class="nb">true&lt;/span> Pipeline
taskruns tr,trs tekton.dev &lt;span class="nb">true&lt;/span> TaskRun
tasks tekton.dev &lt;span class="nb">true&lt;/span> Task
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Tekton Pipelines提供了上面的CRD，其中部分CRD与k8s core中资源相对应&lt;/p>
&lt;ul>
&lt;li>Task =&amp;gt; Pod&lt;/li>
&lt;li>Task.Step =&amp;gt; Container&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/23/15902164552270.jpg" alt="">&lt;/p>
&lt;h2 id="工作原理">工作原理&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/23/15902280074872.jpg" alt="">
(图片来自)&lt;/p>
&lt;p>Tekton Pipeline 是基于 Knative 的实现，pod &lt;code>tekton-pipelines-controller&lt;/code> 中有两个 &lt;a href="https://knative.dev/docs/eventing/samples/writing-receive-adapter-source/03-controller/">Knative Controller&lt;/a>的实现：PipelineRun 和 TaskRun。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/23/15902270934199.jpg" alt="">&lt;/p>
&lt;h3 id="task的执行顺序">Task的执行顺序&lt;/h3>
&lt;p>PipelineRun Controller 的 &lt;code>#reconcile()&lt;/code>方法，监控到有&lt;code>PipelineRun&lt;/code>被创建。然后从&lt;code>PipelineSpec&lt;/code>的 tasks 列表，构建出一个图（&lt;code>graph&lt;/code>），用于描述&lt;code>Pipeline&lt;/code>中 Task 间的依赖关系。依赖关系是通过&lt;code>runAfter&lt;/code>和&lt;code>from&lt;/code>，进而控制&lt;a href="#Task%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F">Task的执行顺序&lt;/a>。与此同时，准备&lt;code>PipelineRun&lt;/code>中定义的&lt;code>PipelineResources&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// Node represents a Task in a pipeline.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Node&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Task represent the PipelineTask in Pipeline
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Task&lt;/span> &lt;span class="nx">Task&lt;/span>
&lt;span class="c1">// Prev represent all the Previous task Nodes for the current Task
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Prev&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Node&lt;/span>
&lt;span class="c1">// Next represent all the Next task Nodes for the current Task
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Next&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Node&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Graph represents the Pipeline Graph
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Graph&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//Nodes represent map of PipelineTask name to Node in Pipeline Graph
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Nodes&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Node&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">Build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tasks&lt;/span> &lt;span class="nx">Tasks&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Graph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>PipelineRun&lt;/code>中定义的参数（parameters）也会注入到&lt;code>PipelineSpec&lt;/code>中：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">pipelineSpec&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">resources&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ApplyParameters&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pipelineSpec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来就是调用&lt;code>dag#GetSchedulable()&lt;/code>方法，获取未完成（通过Task状态判断）的 Task 列表；&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">GetSchedulable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">g&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Graph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">doneTasks&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">struct&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为 Task A 创建&lt;code>TaskRun&lt;/code>，假如&lt;code>Task&lt;/code>配置了&lt;code>Condition&lt;/code>。会先为 condition创建一个&lt;code>TaskRun&lt;/code>，只有在 condition 的&lt;code>TaskRun&lt;/code>运行成功，才会运行 A 的&lt;code>TaskRun&lt;/code>；否则就跳过。&lt;/p>
&lt;h3 id="step的执行顺序">Step的执行顺序&lt;/h3>
&lt;p>这一部分篇幅较长，之前的文章 &lt;a href="https://atbug.com/control-process-order-of-pod-containers/">控制 Pod 内容器的启动顺序&lt;/a> 中提到过。&lt;/p>
&lt;p>这里补充一下&lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/#the-downward-api">Kubernetes Downward API&lt;/a>的使用，Kubernetes Downward API的引入，控制着 &lt;code>Task&lt;/code> 的第一个 &lt;code>Step&lt;/code> 在何时执行。&lt;/p>
&lt;p>&lt;code>TaskRun&lt;/code> Controller 在 reconciling 的过程中，在相应的 &lt;code>Pod&lt;/code> 状态变为&lt;code>Running&lt;/code>时，会将&lt;code>tekton.dev/ready=READY&lt;/code>写入到 Pod 的 annotation 中，来通知第一个&lt;code>Step&lt;/code>的执行。&lt;/p>
&lt;p>Pod的部分内容：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">wait_file&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/downward/ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">wait_file_content&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">post_file&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/tools/0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">termination_path&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/termination&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/ko-app/git-init&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ssh://git@gitlab.nip.io:8022/addozhang/logan-pulse.git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">develop&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">path&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/workspace/git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/tools/entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tekton/downward&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-internal-downward&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">downwardAPI&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">defaultMode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">420&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">items&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">fieldRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">metadata.annotations[&amp;#39;tekton.dev/ready&amp;#39;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-internal-downward&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对原生的排序step container进一步处理：启动命令使用&lt;code>entrypoint&lt;/code>提供，并设置执行参数：&lt;/p>
&lt;p>&lt;code>entrypoint.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">orderContainers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">entrypointImage&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">steps&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">results&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">v1alpha1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TaskResult&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">initContainer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;place-tools&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Image&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">entrypointImage&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Command&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;cp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;/ko-app/entrypoint&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">entrypointBinary&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">VolumeMounts&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">VolumeMount&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">toolsMount&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">steps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;No steps specified&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">steps&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">argsForEntrypoint&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">argsForEntrypoint&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="c1">// First step waits for the Downward volume file.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s">&amp;#34;-wait_file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">downwardMountPoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">downwardMountReadyFile&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="s">&amp;#34;-wait_file_content&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Wait for file contents, not just an empty file.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Start next step.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s">&amp;#34;-post_file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mountPoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s">&amp;#34;-termination_path&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">terminationPath&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1">// All other steps wait for previous file, write next file.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">argsForEntrypoint&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="s">&amp;#34;-wait_file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mountPoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s">&amp;#34;-post_file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mountPoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s">&amp;#34;-termination_path&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">terminationPath&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="自动运行的容器">自动运行的容器&lt;/h3>
&lt;p>这些自动运行的容器作为 pod 的&lt;code>initContainer&lt;/code>会在 step 容器运行之前运行&lt;/p>
&lt;h4 id="credential-initializer">&lt;code>credential-initializer&lt;/code>&lt;/h4>
&lt;p>用于将 &lt;code>ServiceAccount&lt;/code> 的相关secrets持久化到容器的文件系统中。比如 ssh 相关秘钥、config文件以及know_hosts文件；docker registry 相关的凭证则会被写入到 docker 的配置文件中。&lt;/p>
&lt;h4 id="working-dir-initializer">&lt;code>working-dir-initializer&lt;/code>&lt;/h4>
&lt;p>收集&lt;code>Task&lt;/code>内的各个&lt;code>Step&lt;/code>的&lt;code>workingDir&lt;/code>配置，初始化目录结构&lt;/p>
&lt;h4 id="place-scripts">&lt;code>place-scripts&lt;/code>&lt;/h4>
&lt;p>假如&lt;code>Step&lt;/code>使用的是&lt;code>script&lt;/code>配置（与command+args相对），这个容器会将脚本代码（&lt;code>script&lt;/code>字段的内容）持久化到&lt;code>/tekton/scripts&lt;/code>目录中。&lt;/p>
&lt;p>注：所有的脚本会自动加上&lt;code>#!/bin/sh\nset -xe\n&lt;/code>，所以&lt;code>script&lt;/code>字段里就不必写了。&lt;/p>
&lt;h4 id="place-tools">&lt;code>place-tools&lt;/code>&lt;/h4>
&lt;p>将&lt;code>entrypoint&lt;/code>的二进制文件，复制到&lt;code>/tekton/tools/entrypoint&lt;/code>.&lt;/p>
&lt;h3 id="taskstep间的数据传递">Task/Step间的数据传递&lt;/h3>
&lt;p>针对不同的数据，有多种不同的选择。比如&lt;code>Workspace&lt;/code>、&lt;code>Result&lt;/code>、&lt;code>PipelineResource&lt;/code>。对于由于&lt;code>Task&lt;/code>的执行是通过&lt;code>Pod&lt;/code>来完成的，而&lt;code>Pod&lt;/code>会调度到不同的节点上。因此&lt;code>Task&lt;/code>间的数据传递，需要用到持久化的卷。&lt;/p>
&lt;p>而&lt;code>Step&lt;/code>作为&lt;code>Pod&lt;/code>中的容器来运行，&lt;/p>
&lt;h4 id="workspace">Workspace&lt;/h4>
&lt;p>工作区，可以理解为一个挂在到容器上的卷，用于文件的传递。&lt;/p>
&lt;h5 id="persistentvolumeclaim">&lt;code>persistentVolumeClaim&lt;/code>&lt;/h5>
&lt;p>引用已存在&lt;code>persistentVolumeClaim&lt;/code>卷（volume）。这种工作空间，可多次使用，需要先进行创建。比如 Java 项目的 &lt;code>maven&lt;/code>，编译需要本地依赖库，这样可以节省每次编译都要下载依赖包的成本。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2-pv-claim&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolume&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2-pv&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">local&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storageClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">capacity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">10Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteMany&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/data/.m2&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolumeClaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2-pv-claim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storageClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># volumeName: m2-pv&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteMany&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">10Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="volumeclaimtemplate">&lt;code>volumeClaimTemplate&lt;/code>&lt;/h5>
&lt;p>为每个&lt;code>PipelineRun&lt;/code>或者&lt;code>TaskRun&lt;/code>创建&lt;code>PersistentVolumeClaim&lt;/code>卷（volume）的模板。比如一次构建需要从 git 仓库克隆代码，而针对不同的流水线代码仓库是不同的。这里就会用到&lt;code>volumeClaimTemplate&lt;/code>，为每次构建创建一个&lt;code>PersistentVolumeClaim&lt;/code>卷。（从0.12.0开始）&lt;/p>
&lt;p>生命周期同&lt;code>PipelineRun&lt;/code>或者&lt;code>TaskRun&lt;/code>，运行之后释放。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeClaimTemplate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteMany&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>相较于&lt;code>persistantVolumeClain&lt;/code>类型的workspace，&lt;code>volumeClaimTemplate&lt;/code>不需要在每次在&lt;code>PipelineRun&lt;/code>完成后清理工作区；并发情况下可能会出现问题。&lt;/p>
&lt;h5 id="emptydir">&lt;code>emptyDir&lt;/code>&lt;/h5>
&lt;p>引用&lt;code>emptyDir&lt;/code>卷，跟随&lt;code>Task&lt;/code>生命周期的临时目录。适合在&lt;code>Task&lt;/code>的&lt;code>Step&lt;/code>间共享数据，无法在多个&lt;code>Task&lt;/code>间共享。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">temp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">emptyDir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="configmap">&lt;code>configMap&lt;/code>&lt;/h5>
&lt;p>引用一个&lt;code>configMap&lt;/code>卷，将&lt;code>configMap&lt;/code>卷作为工作区，有如下限制：&lt;/p>
&lt;ul>
&lt;li>挂载的卷是&lt;code>只读&lt;/code>的&lt;/li>
&lt;li>需要提前创建&lt;code>configMap&lt;/code>&lt;/li>
&lt;li>&lt;code>configMap&lt;/code>的&lt;a href="https://github.com/kubernetes/kubernetes/blob/f16bfb069a22241a5501f6fe530f5d4e2a82cf0e/pkg/apis/core/validation/validation.go#L5042">大小限制为1MB（K8s的限制）&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>使用场景，比如使用&lt;code>maven&lt;/code>编译Java项目，配置文件&lt;code>settings.xml&lt;/code>可以使用&lt;code>configMap&lt;/code>作为工作区&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven-settings&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">configmap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven-settings&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="secret">&lt;code>secret&lt;/code>&lt;/h5>
&lt;p>用于引用&lt;code>secret&lt;/code>卷，同&lt;code>configMap&lt;/code>工作区一样，也有限制：&lt;/p>
&lt;ul>
&lt;li>挂载的卷是&lt;code>只读&lt;/code>的&lt;/li>
&lt;li>需要提前创建&lt;code>secret&lt;/code>&lt;/li>
&lt;li>&lt;code>secret&lt;/code>的&lt;a href="https://github.com/kubernetes/kubernetes/blob/f16bfb069a22241a5501f6fe530f5d4e2a82cf0e/pkg/apis/core/validation/validation.go#L5042">大小限制为1MB（K8s的限制）&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="result">Result&lt;/h4>
&lt;p>&lt;code>results&lt;/code>字段可以用来配置多个文件用来存储&lt;code>Tasks&lt;/code>的执行结果，这些文件保存在&lt;code>/tekton/results&lt;/code>目录中。&lt;/p>
&lt;p>在&lt;code>Pipeline&lt;/code>中，可以通过&lt;code>tasks.[task-nanme].results.[result-name]&lt;/code>注入到其他&lt;code>Task&lt;/code>的参数中。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">A simple task that prints the date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">results&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-unix-timestamp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The current date in unix timestamp format&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-human-readable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The current date in human readable format&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date-unix-timestamp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bash:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> #!/usr/bin/env bash
&lt;/span>&lt;span class="sd"> date +%s | tee $(results.current-date-unix-timestamp.path)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date-humman-readable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bash:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> #!/usr/bin/env bash
&lt;/span>&lt;span class="sd"> date | tee $(results.current-date-human-readable.path)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PipelineRun&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pass-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pipelineSpec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tasks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">read-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runAfter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#配置执行顺序&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">print-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskSpec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-unix-timestamp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">string&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-human-readable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">string&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">read&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> echo $(params.current-date-unix-timestamp)
&lt;/span>&lt;span class="sd"> echo $(params.current-date-human-readable)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-unix-timestamp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(tasks.print-date.results.current-date-unix-timestamp)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 注入参数&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-human-readable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(tasks.print-date.results.current-date-human-readable)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 注入参数 &lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">┌──────Logs(tekton-pipelines/pass-date-read-date-rhlf2-pod-9b2sk)[all] ────────── │
│ place-scripts stream closed ││ step-read 1590242170 │
│ step-read Sat May 23 13:56:10 UTC 2020 ││ step-read + echo 1590242170 │
│ step-read + echo Sat May 23 13:56:10 UTC 2020 │
│ place-tools stream closed │
│ step-read stream closed │
│
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="pipelineresource">PipelineResource&lt;/h4>
&lt;p>&lt;code>PipelineResource&lt;/code>在最后提，因为目前只是&lt;code>alpha&lt;/code>版本，何时会进入&lt;code>beta&lt;/code>或者弃用目前还是未知数。有兴趣的可以看下这里：&lt;a href="https://tekton.dev/docs/pipelines/resources/#why-aren-t-pipelineresources-in-beta">Why Aren’t PipelineResources in Beta?&lt;/a>&lt;/p>
&lt;p>简单来说，&lt;code>PipelineResource&lt;/code>可以通过其他的方式实现，而其本身也存在弊端：比如实现不透明，debug有难度；功能不够强；降低了Task的重用性等。&lt;/p>
&lt;p>比如&lt;code>git&lt;/code>类型的&lt;code>PipelineResource&lt;/code>，可以通过&lt;code>workspace&lt;/code>和&lt;code>git-clone&lt;/code> Task来实现；存储类型的，也可以通过&lt;code>workspace&lt;/code>来实现。&lt;/p>
&lt;p>这也就是为什么&lt;a href="#Workspace">上面介绍workspace的篇幅&lt;/a>比较大。个人也偏向于使用&lt;code>workspace&lt;/code>，灵活度高；使用workspace的Task重用性强。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://atbug.com/tekton-trigger-practice">云原生 CICD: Tekton Pipeline 实战&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://atbug.com/control-process-order-of-pod-containers">控制 Pod 内容器的启动顺序&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://knative.dev/docs/eventing/samples/writing-receive-adapter-source/03-controller">Knative Controller&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tekton.dev/docs/pipelines/resources/#why-aren-t-pipelineresources-in-beta">Why Aren’t PipelineResources in Beta?&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Java 中的 Mysql 时区问题</title><link>https://atbug.com/mysql-timezone-in-java/</link><pubDate>Thu, 14 May 2020 11:34:24 +0800</pubDate><guid>https://atbug.com/mysql-timezone-in-java/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/14/anonymouspersonwithminiatureairplaneonchalkboard37.jpg" alt="anonymous-person-with-miniature-airplane-on-chalkboard-3769120">&lt;/p>
&lt;p>&lt;em>(Photo by Andrea Piacquadio from Pexels)&lt;/em>&lt;/p>
&lt;p>话说工作十多年，mysql 还真没用几年。起初是外企银行，无法直接接触到 DB；后来一直从事架构方面，也多是解决问题为主。&lt;/p>
&lt;p>这次搭建海外机房，围绕时区大家做了一番讨论。不说最终的结果是什么，期间有同事认为 DB 返回的是 UTC 时间。&lt;/p>
&lt;p>这里简单做个验证，顺便看下时区的问题到底是如何处理。&lt;/p>
&lt;h2 id="环境">环境&lt;/h2>
&lt;blockquote>
&lt;p>openjdk version &amp;ldquo;1.8.0_242&amp;rdquo;
mysql-connector-java &amp;ldquo;8.0.20&amp;rdquo;
mysql &amp;ldquo;5.7&amp;rdquo; 时区 TZ=Europe/London
本地时区 GMT+8&lt;/p>
&lt;/blockquote>
&lt;p>创建个简单的库&lt;code>test&lt;/code>及表&lt;code>user&lt;/code>， 表结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="o">`&lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="o">`&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="o">`&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">`&lt;/span> &lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">`&lt;/span>&lt;span class="n">birth_date&lt;/span>&lt;span class="o">`&lt;/span> &lt;span class="k">timestamp&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">DEFAULT&lt;/span> &lt;span class="k">CURRENT_TIMESTAMP&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="n">ENGINE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">InnoDB&lt;/span> &lt;span class="k">DEFAULT&lt;/span> &lt;span class="n">CHARSET&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">latin1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>插入一条测试数据：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">insert&lt;/span> &lt;span class="k">into&lt;/span> &lt;span class="o">`&lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="o">`&lt;/span>
&lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">values&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Tom&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2020-05-15 08:00:00&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">Query&lt;/span> &lt;span class="n">OK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="k">row&lt;/span> &lt;span class="n">affected&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">01&lt;/span> &lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">select&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="k">user&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">+&lt;/span>&lt;span class="c1">------+---------------------+
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">birth_date&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+&lt;/span>&lt;span class="c1">------+---------------------+
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span> &lt;span class="n">Tom&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">2020&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">05&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">14&lt;/span> &lt;span class="mi">08&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">00&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+&lt;/span>&lt;span class="c1">------+---------------------+
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="k">row&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="k">set&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span> &lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试代码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Connection&lt;/span> &lt;span class="n">conn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DriverManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc:mysql://localhost:3306/test?useSSL=false&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Statement&lt;/span> &lt;span class="n">stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createStatement&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;select * from user where name = &amp;#39;Tom&amp;#39;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ResultSet&lt;/span> &lt;span class="n">rs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getResultSet&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Timestamp&lt;/span> &lt;span class="n">timestamp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTimestamp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;birth_date&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">timestamp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toLocalDateTime&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">2020-05-14T15:00
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="分析">分析&lt;/h2>
&lt;p>程序的执行过程同时用 wireshark 抓了包。可以看到一次查询，做了这么多次的交互（包含了会话初始化）。这里可以看到 #177 的交互返回查询的结果：&lt;code>Tom 2020-05-14 08:00:00&lt;/code>，与 DB 中的数据相符。&lt;strong>可见，返回的并不是 UTC 时间&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/14/15894244815090.jpg" alt="">&lt;/p>
&lt;p>在 TCP 抓包结果中 #155 的查询语句：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="cm">/* mysql-connector-java-8.0.20 (Revision: afc0a13cd3c5a0bf57eaa809ee0ee6df1fd5ac9b) */&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="o">@@&lt;/span>&lt;span class="k">session&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">auto_increment_increment&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">auto_increment_increment&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">character_set_client&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">character_set_client&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">character_set_connection&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">character_set_connection&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">character_set_results&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">character_set_results&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">character_set_server&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">character_set_server&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">collation_server&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">collation_server&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">collation_connection&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">collation_connection&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">init_connect&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">init_connect&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">interactive_timeout&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">interactive_timeout&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">license&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">license&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">lower_case_table_names&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">lower_case_table_names&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">max_allowed_packet&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">max_allowed_packet&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">net_write_timeout&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">net_write_timeout&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">performance_schema&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">performance_schema&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">query_cache_size&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">query_cache_size&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">query_cache_type&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">query_cache_type&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">sql_mode&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">sql_mode&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">system_time_zone&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">system_time_zone&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">time_zone&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">time_zone&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">transaction_isolation&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">transaction_isolation&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">wait_timeout&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">wait_timeout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/14/15894253881690.jpg" alt="">&lt;/p>
&lt;p>服务端返回的 &lt;code>time_zone&lt;/code> 为 &lt;code>BST&lt;/code>。与本地时区的转换，由 mysql 的 connector 自动完成。&lt;/p>
&lt;h2 id="进阶">进阶&lt;/h2>
&lt;h3 id="时区自动转换">时区自动转换&lt;/h3>
&lt;p>实现源码：&lt;/p>
&lt;p>&lt;code>ResultSetImpl&lt;/code>源码&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">defaultTimestampValueFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SqlTimestampValueFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">pset&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServerSession&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getServerTimeZone&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Timestamp&lt;/span> &lt;span class="nf">getTimestamp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">columnIndex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">checkRowPos&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">checkColumnBounds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">columnIndex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">thisRow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">columnIndex&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">defaultTimestampValueFactory&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="如何确认服务端时区">如何确认服务端时区？&lt;/h3>
&lt;p>使用会话中的服务端时区进行服务端时区。会话初始化时会进行时区的确认，比如前面获取的到&lt;code>BST&lt;/code>。确认时区的逻辑在&lt;code>NativeProtocol#configureTimezone()&lt;/code>中：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configureTimezone&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">从mysql的响应获取&lt;/span> &lt;span class="n">time_zone&lt;/span> &lt;span class="n">和&lt;/span> &lt;span class="n">system_time_zone&lt;/span> &lt;span class="n">的设置&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">configuredTimeZoneOnServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverSession&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServerVariable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;time_zone&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SYSTEM&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configuredTimeZoneOnServer&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">configuredTimeZoneOnServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverSession&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServerVariable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;system_time_zone&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">从&lt;/span> &lt;span class="n">jdbc&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="n">参数&lt;/span> &lt;span class="n">serverTimezone&lt;/span> &lt;span class="n">获取时区&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPropertySet&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getStringProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PropertyKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverTimezone&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">configuredTimeZoneOnServer&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//如果 jdbc url 中未通过 serverTimezone 指定时区。则从TimeZoneMapping.properties中获取mysql 回传的时区缩写对应的标准时区，比如此处的 BST =&amp;gt; Europe/London
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//会出现无法映射的情况，不如 CEST 无法映射到 =&amp;gt; Europe/Berlin，可以指定自定义的 Properties 文件进行映射
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// user can override this with driver properties, so don&amp;#39;t detect if that&amp;#39;s the case
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">StringUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmptyOrWhitespaceOnly&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TimeUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCanonicalTimezone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configuredTimeZoneOnServer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">getExceptionInterceptor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IllegalArgumentException&lt;/span> &lt;span class="n">iae&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">ExceptionFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WrongArgumentException&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">iae&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMessage&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">getExceptionInterceptor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//如果 jdbc url 中通过 serverTimezone 指定了时区，则优先使用该时区
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">canonicalTimezone&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverSession&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setServerTimeZone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TimeZone&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTimeZone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// The Calendar class has the behavior of mapping unknown timezones to &amp;#39;GMT&amp;#39; instead of throwing an exception, so we must check for this...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;GMT&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverSession&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServerTimeZone&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getID&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;GMT&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">ExceptionFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WrongArgumentException&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Messages&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Connection.9&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">}),&lt;/span>
&lt;span class="n">getExceptionInterceptor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="关于-servertimezone-的官方说明">关于 serverTimezone 的官方说明&lt;/h3>
&lt;blockquote>
&lt;p>Override detection/mapping of time zone. Used when time zone from server doesn&amp;rsquo;t map to Java time zone&lt;/p>
&lt;/blockquote>
&lt;p>修改一下 jdbc url，通过&lt;code>serverTimezone&lt;/code>指定时区为 &lt;code>GMT+8&lt;/code>：&lt;code>jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;amp;useSSL=false&lt;/code>&lt;/p>
&lt;p>再次执行代码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">2020-05-14T08:00
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>控制 Pod 内容器的启动顺序</title><link>https://atbug.com/control-process-order-of-pod-containers/</link><pubDate>Thu, 12 Mar 2020 22:05:16 +0800</pubDate><guid>https://atbug.com/control-process-order-of-pod-containers/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/30/screenshot-20210430-at-092623.png" alt="">&lt;/p>
&lt;p>2021.4.30 更新：&lt;/p>
&lt;p>最新的方案，请跳转新篇 &lt;a href="https://mp.weixin.qq.com/s/8DqF_N_fjiM9AOouvddvgA">Kubernetes 上如何控制容器的启动顺序&lt;/a>。&lt;/p>
&lt;hr>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>众所周知, Kubernetes Pod 内有两种容器: 初始化容器(init container)和应用容器(app container). 其中初始化容器的执行先于应用容器, 并且初始化容器和应用容器的个数分别为 &lt;code>0~n&lt;/code> 和 &lt;code>1~n&lt;/code>.&lt;/p>
&lt;p>初始化容器会按照顺序执行, 顺序执行的前提是初始化容器始终会运行到完成(completed)状态. 而应用容器恰好相反: 启动顺序随机, 并始终保持运行(running)状态.&lt;/p>
&lt;h2 id="问题">问题&lt;/h2>
&lt;p>工作中有个架构的方案使用到了 sidecar 容器: 将基础组件功能从容器转移到 sidecar 容器中, 其中有个功能是从远程配置中心获取配置并保持实时更新. 保证实时更新没有问题, 但是配置文件需要在 app 启动之前完成初始化.&lt;/p>
&lt;p>对于同为&amp;quot;应用容器&amp;quot;类型的 sidecar 容器来说, 由于容器启动顺序随机而无法做到这一点.&lt;/p>
&lt;p>当时我们给定的方案是增加一个初始化容器进行配置的初始化, 不可避免的我们需要增加一个额外的容器, 即使是这个容器的生命周期非常短.&lt;/p>
&lt;p>追求极致的我们总是对这个额外增加的容器耿耿于怀: 假如能控制应用容器的启动顺序&amp;hellip;&lt;/p>
&lt;h3 id="新发现">新发现&lt;/h3>
&lt;p>近期在研究 CDF (Continuous Delivery Foundation)下的 &lt;a href="https://github.com/tektoncd">Tekton&lt;/a>, 其中有个概念是其将流水线(pipeline)中的各个步骤(step)作为应用容器在同一个 Pod 中运行.&lt;/p>
&lt;p>我们都知道流水线中的步骤是按照定义的顺序执行的, 那么 Tekton 是如何保证应用容器的执行顺序的?&lt;/p>
&lt;p>查看 pod 的 manifest 之后发现了下面的容器配置 (这个容器的作用从 git 仓库克隆代码)&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">wait_file&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/downward/ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">wait_file_content&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">post_file&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/tools/0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">termination_path&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/termination&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/ko-app/git-init&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">http://gitlab.nip.io:8088/addozhang/tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">develop&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">path&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/workspace/git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/tools/entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>克隆代码的命令是:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">git-init -url http://gitlab.nip.io:8088/addozhang/tekton-test -revision develop -path /workspace/git-source
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是容器的启动命令是&lt;code>/tekton/tools/entrypoint&lt;/code>并带上了一坨的参数(此处略过, 后面分析).&lt;/p>
&lt;p>翻看了下&lt;a href="https://github.com/tektoncd/pipeline/tree/master/cmd/entrypoint">文档&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>This binary is used to override the entrypoint of a container by wrapping it. In tektoncd/pipeline this is used to make sure Task&amp;rsquo;s steps are executed in order, or for sidecars.&lt;/p>
&lt;p>这个二进制文件被用于通过包装的方式来覆盖容器的入口点. 在 tektoncd/pipeline 中确保任务中的步骤或者 sidecar 被顺序地执行.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>-entrypoint&lt;/code>: 原始的容器启动命令, 作为 &lt;code>entrypoint&lt;/code> 的子进程运行. 即上面的 &lt;code>git-init XXXX&lt;/code>&lt;/li>
&lt;li>&lt;code>-post_file&lt;/code>: 子进程运行结束后写的文件路径(即上面的&lt;code>/tekton/tools/0&lt;/code>). 如果子进程执行失败, 则写一个&lt;code>{{post_file}}.err&lt;/code>文件, 而不是&lt;code>{{post_file}}&lt;/code>&lt;/li>
&lt;li>&lt;code>-wait_file&lt;/code>: 启动子进程&lt;strong>前&lt;/strong>监控的文件路径(即上面的&lt;code>/tekton/downward/ready&lt;/code>). 通过监控到的&lt;code>{{watch_file}}&lt;/code>或者&lt;code>{{watch_file}}.err&lt;/code>文件来决定执行子进程, 还是跳过执行然后写入&lt;code>{{post_file}}.err&lt;/code>文件并返回错误码(&lt;code>exitCode&lt;/code> &amp;gt;= 0)&lt;/li>
&lt;li>&lt;code>-wait_file_content&lt;/code>: 等待&lt;code>wait_file&lt;/code>有实际内容写入, 持续监控&lt;code>wait_file&lt;/code>直到有内容写入.&lt;/li>
&lt;/ul>
&lt;p>回头看上面容器配置:&lt;/p>
&lt;ol>
&lt;li>容器的&lt;code>entrypoint&lt;/code>启动进程&lt;/li>
&lt;li>监控到&lt;code>/tekton/downward/ready&lt;/code>文件的创建, 并等待文件内容的写入&lt;/li>
&lt;li>执行&lt;code>git-init&lt;/code>子进程, 从 git 仓库克隆源码&lt;/li>
&lt;li>创建&lt;code>/tekton/tools/0&lt;/code>文件&lt;/li>
&lt;/ol>
&lt;h3 id="实际应用">实际应用&lt;/h3>
&lt;p>这个方案是否能解决我们的问题, 还是有一定的局限性的.&lt;/p>
&lt;p>首先需要应用容器的启动命令进行重新的编排, 这个存在一定的挑战. 需要统一应用的启动命令才能做到规模化+自动化.&lt;/p>
&lt;p>其次引入可用于监控的文件, 需要额外增加&lt;code>Volume&lt;/code>用于跨容器的文件访问. 当然通过增加&lt;code>emptyDir&lt;/code>的&lt;code>Volume&lt;/code>即可.&lt;/p>
&lt;p>同时 sidecar 容器需要在完成启动后创建&lt;code>post_file&lt;/code>, 应用容器可以使用这个&lt;code>entrypoint&lt;/code>进行包装.&lt;/p>
&lt;p>如果要突破这个局限, CRD 无非是个优秀的方案. 下一篇, 我们通过一个简单的 CRD 来实现.&lt;/p></description></item><item><title>Go Docker 镜像进阶: 精简镜像</title><link>https://atbug.com/build-minimal-docker-image-for-go-app/</link><pubDate>Wed, 11 Mar 2020 23:00:27 +0800</pubDate><guid>https://atbug.com/build-minimal-docker-image-for-go-app/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/03/11/15839387687383.jpg" alt="">
​[图片来自 https://www.facebook.com/sequenceprocess/]&lt;/p>
&lt;h3 id="问题-入门到生产级的差距">问题: 入门到生产级的差距&lt;/h3>
&lt;p>昨天的文章《为 Go 应用创建 Docker 镜像》, 算是入门级的, 并不适用于生产级. 为什么?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
addozhang/golang-hello-world latest 4cce1292a87a &lt;span class="m">4&lt;/span> seconds ago 813MB
&lt;/code>&lt;/pre>&lt;/div>&lt;p>整个镜像的大小有 813MB, 这还只有一个简单的 Hello world. 因为其中包含了 Golang 的编译和运行环境. 但是实际生产环境中, 我们并不需要这么多.&lt;/p>
&lt;h3 id="先看结果">先看结果&lt;/h3>
&lt;p>精简之后只有 2.07MB, 而且并不影响运行.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
addozhang/golang-hello-world latest 4cce1292a87a &lt;span class="m">3&lt;/span> minutes ago 813MB
addozhang/golang-hello-world2 latest 1da5bb994074 &lt;span class="m">7&lt;/span> minutes ago 2.07MB
$ docker run --rm addozhang/golang-hello-world2
Hello world
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解决方案">解决方案&lt;/h3>
&lt;p>如果做到的? 首先从基础镜像开始, 换成&lt;code>scratch&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. 构建时将编译好的文件复制到镜像中&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">FROM scratch
ADD golang-hello-world /
CMD [&amp;#34;/golang-hello-world&amp;#34;]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>假如你是使用&lt;code>go build&lt;/code>来编译, 在 Macos 上会遇到如下问题:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ docker run --rm addozhang/golang-hello-world2
standard_init_linux.go:211: &lt;span class="nb">exec&lt;/span> user process caused &lt;span class="s2">&amp;#34;exec format error&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>解决方案是&lt;code>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build&lt;/code>&lt;/p>
&lt;p>从头来看, 构建出一个精简的镜像, 我们需要:&lt;/p>
&lt;ol>
&lt;li>运行&lt;code>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build&lt;/code>构建 linux 环境的可执行文件. 该文件并不能在 mac 上运行&lt;/li>
&lt;li>使用&lt;code>docker build&lt;/code>进行构建&lt;/li>
&lt;/ol>
&lt;p>这样的操作步骤太麻烦, 还能不能精简一下?&lt;/p>
&lt;h3 id="进阶-使用-docker-的多步构建">进阶: 使用 Docker 的多步构建&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#build stage
FROM golang as builder
ENV GO111MODULE=on
ENV GOPROXY=https://goproxy.io
WORKDIR /app
COPY go.mod .
RUN go mod download
COPY . .
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build
#image stage
FROM scratch
COPY --from=builder /app/golang-hello-world /
CMD [&amp;#34;/golang-hello-world&amp;#34;]
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="参考">参考&lt;/h3>
&lt;p>&lt;a href="https://dev.to/plutov/docker-and-go-modules-3kkn">https://dev.to/plutov/docker-and-go-modules-3kkn&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;code>scratch&lt;/code>是一个空的镜像文件 &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>为 Go 应用创建 Docker 镜像</title><link>https://atbug.com/build-docker-image-for-go-app/</link><pubDate>Wed, 11 Mar 2020 20:41:58 +0800</pubDate><guid>https://atbug.com/build-docker-image-for-go-app/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/03/11/15839304511808.jpg" alt="">&lt;/p>
&lt;p>嗯嗯, 最近开始用 Golang 了.&lt;/p>
&lt;p>今天需要为 Go 应用创建对象, 看了下官方博客. 拿 hello world 做个测试.&lt;/p>
&lt;p>使用下面的命令创建个新的项目&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ mkdir -p &lt;span class="nv">$GOPATH&lt;/span>/src/github.com/addozhang/golang-hello-world &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$_&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
$ go mod init github.com/addozhang/golang-hello-world
go: creating new go.mod: module github.com/addozhang/golang-hello-world
$ cat &lt;span class="s">&amp;lt;&amp;lt; EOF &amp;gt; main.go
&lt;/span>&lt;span class="s">package main
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s">import &amp;#34;fmt&amp;#34;
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s">func main() {
&lt;/span>&lt;span class="s"> fmt.Println(&amp;#34;Hello world&amp;#34;)
&lt;/span>&lt;span class="s">}
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;span class="c1"># go fmt&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行检查一次&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ go run main.go
Hello world
&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序没问题, 下面就是构建镜像了. 创建一个 Dockerfile 文件, 内容如下:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">FROM golang
LABEL Author=&amp;#34;addozhang&amp;#34;
ADD . /go/src/github.com/addozhang/golang-hello-world
RUN go install github.com/addozhang/golang-hello-world
ENTRYPOINT [ &amp;#34;/go/bin/golang-hello-world&amp;#34; ]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>构建镜像:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ docker build -t addozhang/golang-hello-world .
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行镜像:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ docker run --rm addozhang/golang-hello-world:latest
Hello world
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行没问题, 收工&lt;/p></description></item><item><title>云原生CICD: Tekton Trigger 实战</title><link>https://atbug.com/tekton-trigger-practice/</link><pubDate>Wed, 12 Feb 2020 21:30:03 +0800</pubDate><guid>https://atbug.com/tekton-trigger-practice/</guid><description>
&lt;p>Trigger的介绍看 &lt;a href="https://atbug.com/tekton-trigger-glance/">这里&lt;/a>.&lt;/p>
&lt;p>接上文 &lt;a href="https://atbug.com/tekton-pipeline-practice/">Tekton Pipeline 实战&lt;/a> , 我们为某个项目创建了一个Pipeline, 但是执行时通过 PipelineRun 来完成的. 在 PipelineRun 中我们制定了 Pipepline 以及要使用的 PipelineResource. 但是日常的开发中, 我们更多希望在提交了代码之后开始 Pipeline 的执行. 这时我们就要用到 Tekton Trigger 了.&lt;/p>
&lt;p>思路是这样: 代码提交后将&lt;code>Push Event&lt;/code>发送给&lt;code>Tekton Trigger EventController&lt;/code>(以下简称 Controller), 然后 Controller 基于的&lt;code>TriggerBinding&lt;/code>的配置从 payload 中提取信息, 装载在&amp;quot;Params&amp;quot;中作为&lt;code>TriggerTemplate&lt;/code>的入参. 最后 Controller 创建&lt;code>PipelineRun&lt;/code>.&lt;/p>
&lt;h2 id="trigger-相关的资源">Trigger 相关的资源&lt;/h2>
&lt;h3 id="triggertemplate">TriggerTemplate&lt;/h3>
&lt;p>回看&lt;a href="https://atbug.com/tekton-pipeline-practice/#0x06-%E6%89%A7%E8%A1%8C%E6%B5%81%E6%B0%B4%E7%BA%BF">上回用的PipelineRun Yaml&lt;/a>, 参数有&lt;code>revision&lt;/code>, &lt;code>url&lt;/code>, &lt;code>imageUrl&lt;/code>和&lt;code>imageTag&lt;/code>. (imageUrl 与项目名一直)&lt;/p>
&lt;p>因此定义&lt;code>TriggerTemplate&lt;/code>将这 4 个元素作为入参, 然后复用之前的&lt;code>Pipeline&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TriggerTemplate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">trigger-test-triggertemplate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gitrevision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The git revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">master&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gitrepositoryurl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The git repository url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">namespace&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The namespace to create the resources&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pielines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">projectname&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The project name&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imagetag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The image tag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resourcetemplates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PipelineRun&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test-pipeline-run-$(uid)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(params.namespace)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccountName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageUrl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">addozhang/$(params.projectname)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageTag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(params.imagetag)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pipelineRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build-pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resourceSpec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(params.gitrevision)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(params.gitrepositoryurl)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;code>kubectl apply -f trigger/trigger-template.yaml&lt;/code>&lt;/p>
&lt;h3 id="triggerbinding">TriggerBinding&lt;/h3>
&lt;p>&lt;code>TriggerTemplate&lt;/code>的入参都可以从&lt;code>PushEvent&lt;/code>的 payload中通过 JsonPath 表达式来提取. 更多表达式的使用参考&lt;a href="https://github.com/tektoncd/triggers/blob/master/docs/triggerbindings.md#event-variable-interpolation">官方的文档&lt;/a>.&lt;/p>
&lt;p>&lt;em>注意: 这里的 payload 格式使用的是 Gitlab 的 PushEvent 定义. 为什么要用 Gitlab 后什么会解释&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TriggerBinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">trigger-test-triggerbinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gitrevision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(body.after)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">namespace&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gitrepositoryurl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(body.project.git_http_url)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">projectname&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(body.project.name)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;code>kubectl apply -f trigger/trigger-binding.yaml&lt;/code>&lt;/p>
&lt;h3 id="eventlistener">EventListener&lt;/h3>
&lt;p>&lt;code>EventController&lt;/code>将&lt;code>TriggerTemplate&lt;/code>和&lt;code>TriggerBinding&lt;/code>关联在一起, 资源在创建后会自动创建对应的 pod 和 service.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">EventListener&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">trigger-test-eventlistener&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccountName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test //需要访问 API, 用上回创建 serviceaccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">triggers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">bindings&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">trigger-test-triggerbinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">trigger-test-triggertemplate&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;code>kubectl apply -f trigger/event-listener.yaml&lt;/code>&lt;/p>
&lt;p>提供 WebHook 的访问入口, 为&lt;code>EventListener&lt;/code>创建&lt;code>ingress&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">el-trigger-test-eventlistener&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">trigger-test.el.nip.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">el-trigger-test-eventlistener&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>做完之后记得添加解析&lt;code>sudo echo &amp;quot;$(minikube ip) trigger-test.el.nip.io&amp;quot; &amp;gt;&amp;gt; /etc/hosts&lt;/code>&lt;/p>
&lt;h2 id="gitlab">GitLab&lt;/h2>
&lt;p>这里我们没有继续用 github 作为 CVS, minikube 运行在本地, ingress 地址无法在 github 上解析(webhook 无法工作). 因此只能本地搭建个 gitlab.&lt;/p>
&lt;p>使用 Docker Compose 的方式部署, 并制定域名&lt;code>gitlab.nip.io&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3.6&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">web&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;gitlab/gitlab-ce:latest&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;gitlab.nip.io&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">GITLAB_OMNIBUS_CONFIG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> external_url &amp;#39;http://gitlab.nip.io:8088&amp;#39;
&lt;/span>&lt;span class="sd"> gitlab_rails[&amp;#39;gitlab_shell_ssh_port&amp;#39;] = 8022
&lt;/span>&lt;span class="sd"> # Add any other gitlab.rb configuration here, each on its own line&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;8088:8088&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;8022:22&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>记得添加解析&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">sudo echo &amp;#34;$(ifconfig | grep -Eo &amp;#39;inet (addr:)?([0-9]*\.){3}[0-9]*&amp;#39; | grep -Eo &amp;#39;([0-9]*\.){3}[0-9]*&amp;#39; | grep -v &amp;#39;127.0.0.1&amp;#39; | head -n 1) gitlab.nip.io&amp;#34; &amp;gt;&amp;gt; /etc/hosts
&lt;/code>&lt;/pre>&lt;/div>&lt;p>GitLab 的默认账号是&lt;code>root&lt;/code>, 首次访问&lt;code>http://gitlab.nip.io:8088&lt;/code>的时候会提示设置密码.&lt;/p>
&lt;p>创建项目, 提交代码的操作不多说了. 添加 webhook 前, 要先去&amp;quot;Admin Area &amp;raquo; Settings &amp;raquo; Network &amp;raquo; Outbound Requests&amp;quot;勾选&lt;code>Allow requests to the local network from web hooks and services&lt;/code>.&lt;/p>
&lt;h3 id="dns-解析问题">DNS 解析问题&lt;/h3>
&lt;p>Docker 和 minikube 是在两个独立的虚拟机中运行, 并且我们添加了两个地址解析. 互相访问的时候便会出现 domain 无法解析的问题, 这里是通过部署一个 dnsmasq 作为独立的 dns 解析服务器.&lt;/p>
&lt;p>安装和配置 dnsmasq, dnsmasq 会将 &lt;code>/etc/hosts&lt;/code> 中的记录加入到记录中.&lt;/p>
&lt;p>我本地的 minikube 位于&lt;code>192.168.64.0&lt;/code>网段, 因次 dnsmasq 添加监听地址&lt;code>192.168.64.1&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">brew install dnsmasq
cat &lt;span class="s">&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; /usr/local/etc/dnsmasq.conf
&lt;/span>&lt;span class="s">strict-order
&lt;/span>&lt;span class="s">listen-address=127.0.0.1,192.168.64.1
&lt;/span>&lt;span class="s">EOF&lt;/span>
sudo brew services start dnsmasq
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查一下, &lt;code>192.168.1.136&lt;/code>是我本机 ip.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ dig gitlab.nip.io @192.168.64.1
&lt;span class="p">;&lt;/span> &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.6 &amp;lt;&amp;lt;&amp;gt;&amp;gt; gitlab.nip.io @192.168.64.1
&lt;span class="p">;;&lt;/span> global options: +cmd
&lt;span class="p">;;&lt;/span> Got answer:
&lt;span class="p">;;&lt;/span> -&amp;gt;&amp;gt;HEADER&lt;span class="s">&amp;lt;&amp;lt;- opco&lt;/span>de: QUERY, status: NOERROR, id: &lt;span class="m">63393&lt;/span>
&lt;span class="p">;;&lt;/span> flags: qr aa rd ra&lt;span class="p">;&lt;/span> QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: &lt;span class="m">1&lt;/span>
&lt;span class="p">;;&lt;/span> OPT PSEUDOSECTION:
&lt;span class="p">;&lt;/span> EDNS: version: 0, flags:&lt;span class="p">;&lt;/span> udp: &lt;span class="m">4096&lt;/span>
&lt;span class="p">;;&lt;/span> QUESTION SECTION:
&lt;span class="p">;&lt;/span>gitlab.nip.io. IN A
&lt;span class="p">;;&lt;/span> ANSWER SECTION:
gitlab.nip.io. 0 IN A 192.168.1.136
&lt;span class="p">;;&lt;/span> Query time: &lt;span class="m">0&lt;/span> msec
&lt;span class="p">;;&lt;/span> SERVER: 192.168.64.1#53&lt;span class="o">(&lt;/span>192.168.64.1&lt;span class="o">)&lt;/span>
&lt;span class="p">;;&lt;/span> WHEN: Thu Feb &lt;span class="m">13&lt;/span> 18:20:19 CST &lt;span class="m">2020&lt;/span>
&lt;span class="p">;;&lt;/span> MSG SIZE rcvd: &lt;span class="m">58&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;p>推送一个空的提交到代码仓库: &lt;code>git commit -a -m &amp;quot;trigger commit&amp;quot; --allow-empty &amp;amp;&amp;amp; git push origin master&lt;/code>&lt;/p>
&lt;p>然后就可以看到新的&lt;code>PipelineRun&lt;/code>创建并运行.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ tkn pr list
NAME STARTED DURATION STATUS
tekton-test-pipeline-run-fk2xj &lt;span class="m">42&lt;/span> seconds ago --- Running
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其他文章">其他文章&lt;/h2>
&lt;p>Tekton Pipeline 实战: &lt;a href="https://atbug.com/tekton-pipeline-practice">https://atbug.com/tekton-pipeline-practice&lt;/a>&lt;/p></description></item><item><title>Tekton Trigger 介绍</title><link>https://atbug.com/tekton-trigger-glance/</link><pubDate>Wed, 05 Feb 2020 18:03:15 +0800</pubDate><guid>https://atbug.com/tekton-trigger-glance/</guid><description>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>Tekton 的介绍请参考&lt;a href="https://atbug.com/tekton-pipeline-practice/">Tekton Pipeline 实战&lt;/a>.&lt;/p>
&lt;p>通常, CI/CD 事件应该包含如下信息:&lt;/p>
&lt;ul>
&lt;li>确定事件的类型(比如 GitHub Push, GitLab Issue, Docker Hub Webhook 等)&lt;/li>
&lt;li>可从特定管道访问并映射到特定管道 (从事件负载中获取 SHA 信息, 然后在管道中使用)&lt;/li>
&lt;li>准确地触发管道 (基于有效负载值触发管道)&lt;/li>
&lt;/ul>
&lt;p>Tekton API 的设计分离了配置(比如 PipelineRun VS Pipeline), 保证了 step 可以被重用. 但是没有提供动态封装配置的机制来生成资源(尤其是 PipelineRun 和 PipelineResource). &lt;a href="https://github.com/tektoncd/triggers">Triggers&lt;/a> 通过下面的 CRDs 在架构上对 Tekton 进行了扩展:&lt;/p>
&lt;ul>
&lt;li>&lt;code>TriggerTemplate&lt;/code>: 创建资源的模板(比如用来创建 PipelineResource 和 PipelineRun)&lt;/li>
&lt;li>&lt;code>TriggerBinding&lt;/code>: 校验事件并提取负载字段&lt;/li>
&lt;li>&lt;code>EventListener&lt;/code>: 连接&lt;code>TriggerBinding&lt;/code>和&lt;code>TriggerTemplate&lt;/code>到可寻址的端点(事件接收器). 使用从各个&lt;code> TriggerBinding&lt;/code>中提取的参数来创建&lt;code>TriggerTemplate&lt;/code>中指定的 resources. 同样通过&lt;code> interceptor&lt;/code>字段来指定外部服务来对事件负载进行预处理.&lt;/li>
&lt;li>&lt;code>ClusterTriggerBinding&lt;/code>: cluster级别的&lt;code>TriggerBinding&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/uPic/rymZ0w.jpg" alt="">&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply --filename https://storage.googleapis.com/tekton-releases/triggers/latest/release.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查新增的 CRD: &lt;code>kubectl api-resources | grep tekton&lt;/code>. Triggers 引入了 3 个 CRD: &lt;code>TriggerTemplate&lt;/code>, &lt;code>TriggerBinding&lt;/code>,&lt;code>EventListener&lt;/code>.&lt;/p>
&lt;p>检查新增的 deployment: &lt;code>tekton-triggers-webhook&lt;/code>, &lt;code>tekton-triggers-controller&lt;/code>.&lt;/p></description></item><item><title>Tekton Dashboard 安装</title><link>https://atbug.com/tekton-dashboard-installation/</link><pubDate>Sat, 01 Feb 2020 12:39:28 +0800</pubDate><guid>https://atbug.com/tekton-dashboard-installation/</guid><description>
&lt;p>Tekton 提供了&lt;a href="https://github.com/tektoncd/dashboard">dashboard&lt;/a>方便用户管理和查看 Tekton PipelineRun 和 TaskRun 以及创建, 执行和完成过程中涉及的资源. 它还允许按标签过滤 PipelineRun 和 TaskRun.&lt;/p>
&lt;h3 id="安装方法">安装方法&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply --filename https://github.com/tektoncd/dashboard/releases/download/v0.4.1/dashboard_latest_release.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查dashboard的运行情况, &lt;code>STATUS&lt;/code>为&lt;code>Running&lt;/code>的话则说明运行成功.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl get pods --namespace tekton-pipelines
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="访问">访问&lt;/h3>
&lt;p>访问Tekton的Dashboard有两种方式, 一种是通过&lt;code>port-forward&lt;/code>, 另一种是通过&lt;code>ingress&lt;/code>来访问.&lt;/p>
&lt;h4 id="port-forward">port-forward&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl port-forward svc/tekton-dashboard &lt;span class="m">9097&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="ingress">ingress&lt;/h4>
&lt;p>先检查ingress是否开启.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube addon list
...
- ingress: enabled
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果是disabled的话, 通过命令&lt;code>minikube addons enable ingress&lt;/code>.&lt;/p>
&lt;p>&lt;em>注意: 这里拉取&lt;code>quay.io/kubernetes-ingress-controller/nginx-ingress-controller&lt;/code>镜像可能比较慢, 建议使用国内的镜像, 比如&lt;code>quay.mirrors.ustc.edu.cn/kubernetes-ingress-controller/nginx-ingress-controller&lt;/code>&lt;/em>&lt;/p>
&lt;p>修改&lt;code>basic-dashboard-ingress.yaml&lt;/code>中的&lt;code>host&lt;/code>地址:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-dashboard&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-dashboard.nip.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-dashboard&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9097&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;code>kubectl apply -f basic-dashboard-ingress.yaml&lt;/code>.&lt;/p>
&lt;p>还有最后一步, 在&lt;code>/etc/hosts&lt;/code>中添加一条解析&lt;code>x.x.x.x tekton-dashboard.nip.io&lt;/code>, ip地址通过&lt;code>minikube ip&lt;/code>来获取&lt;/p>
&lt;p>浏览器中打开&lt;code> tekton-dashboard.nip.io&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/uPic/6weoXL.jpg" alt="">&lt;/p></description></item><item><title>Tekton安装及Hello world</title><link>https://atbug.com/tekton-installation-and-sample/</link><pubDate>Fri, 17 Jan 2020 19:17:14 +0800</pubDate><guid>https://atbug.com/tekton-installation-and-sample/</guid><description>
&lt;h2 id="安装">安装&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查安装的tekton相关的CRD:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl api-resources &lt;span class="p">|&lt;/span> grep tekton
clustertasks tekton.dev &lt;span class="nb">false&lt;/span> ClusterTask
conditions tekton.dev &lt;span class="nb">true&lt;/span> Condition
pipelineresources tekton.dev &lt;span class="nb">true&lt;/span> PipelineResource
pipelineruns pr,prs tekton.dev &lt;span class="nb">true&lt;/span> PipelineRun
pipelines tekton.dev &lt;span class="nb">true&lt;/span> Pipeline
taskruns tr,trs tekton.dev &lt;span class="nb">true&lt;/span> TaskRun
tasks tekton.dev &lt;span class="nb">true&lt;/span> Task
&lt;/code>&lt;/pre>&lt;/div>&lt;p>tekton的两个pod:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl get pods --namespace tekton-pipelines
NAME READY STATUS RESTARTS AGE
tekton-pipelines-controller-556d8f4494-2qthv 1/1 Running &lt;span class="m">0&lt;/span> 11m
tekton-pipelines-webhook-849cff5cf-8m5qq 1/1 Running &lt;span class="m">0&lt;/span> 11m
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装cli">安装CLI&lt;/h3>
&lt;p>cli: &lt;a href="https://github.com/tektoncd/cli#installing-tkn">https://github.com/tektoncd/cli#installing-tkn&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">brew install tektoncd-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tekton-hello-world">Tekton: hello world&lt;/h2>
&lt;p>创建一个简单的&lt;code>Task&lt;/code>, 只有一个&lt;code>step&lt;/code>就是打印出&amp;quot;hello world&amp;quot;&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">echo-hello-world&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">echo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建一个&lt;code>TaskRun&lt;/code>执行上面的&lt;code>Task&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TaskRun&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">echo-hello-world-task-run&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">echo-hello-world&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行task:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f &amp;lt;name-of-file.yaml&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查&lt;code>TaskRun&lt;/code>的输出, 执行命令:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">tkn taskrun describe echo-hello-world-task-run
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Name: echo-hello-world-task-run
Namespace: tekton-pipelines
Task Ref: echo-hello-world
Status
STARTED DURATION STATUS
21 minutes ago 1 minute Succeeded
Input Resources
No resources
Output Resources
No resources
Params
No params
Steps
NAME STATUS
echo Completed
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Succeeded&lt;/code>状态表示task执行成功.&lt;/p>
&lt;p>查看实际的输出, 执行命令:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">tkn taskrun logs echo-hello-world-task-run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">[echo] hello world
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Minikube安装istio</title><link>https://atbug.com/install-istio-on-minikube/</link><pubDate>Fri, 17 Jan 2020 08:02:42 +0800</pubDate><guid>https://atbug.com/install-istio-on-minikube/</guid><description>
&lt;h2 id="准备">准备&lt;/h2>
&lt;p>&lt;strong>注意: istioctl的安装要使用安装里的, 不要是用homebrew里的. &lt;a href="https://github.com/istio/istio/issues/19029">github issue&lt;/a>&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -L https://istio.io/downloadIstio &lt;span class="p">|&lt;/span> sh -
&lt;span class="nb">cd&lt;/span> istio-1.4.2
cp bin/istioctl /usr/local/bin/istioctl
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装前检查">安装前检查&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">istioctl verify-install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果检查没问题, 会看到&lt;code>Install Pre-Check passed! The cluster is ready for Istio installation.&lt;/code>&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>istio有5种内建的安装配置&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>: remote, sds, default, demo, minimal&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">istioctl profile list
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>minimal: 使用istio的流量管理所需组件的最小化安装&lt;/li>
&lt;li>default: 根据IstioControlPlane API的默认设置(建议用于生产部署)启用组件. 您可以通过运行命令istioctl profile dump显示默认设置.&lt;/li>
&lt;li>demo: 几乎安装所有的特性, 包括logging和tracing的比例为100%. 不适合生产环境, 负载太重&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>default&lt;/th>
&lt;th>demo&lt;/th>
&lt;th>minimal&lt;/th>
&lt;th>sds&lt;/th>
&lt;th>remote&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Core components&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-citadel&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-egressgateway&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-galley&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-ingressgateway&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-nodeagent&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-pilot&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-policy&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-sidecar-injector&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-telemetry&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Addons&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>grafana&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-tracing&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>kiali&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>prometheus&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>demo&lt;/code> profile安装&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">istioctl manifest apply --set &lt;span class="nv">profile&lt;/span>&lt;span class="o">=&lt;/span>demo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>验证安装结果&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">istioctl manifest generate --set &lt;span class="nv">profile&lt;/span>&lt;span class="o">=&lt;/span>demo &amp;gt; /tmp/generated-manifest.yaml
istioctl verify-install -f /tmp/generated-manifest.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&amp;hellip;&amp;hellip;
Checked 23 crds
Checked 9 Istio Deployments
Istio is installed successfully&lt;/p>
&lt;/blockquote>
&lt;h2 id="卸载">卸载&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">helm template install/kubernetes/helm/istio --namespace istio-system &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --values install/kubernetes/helm/istio/values-istio-demo.yaml &lt;span class="p">|&lt;/span> kubectl delete -f -
kubectl delete namespace istio-system
&lt;span class="c1">#delete all CRDs&lt;/span>
kubectl delete -f install/kubernetes/helm/istio-init/files
&lt;/code>&lt;/pre>&lt;/div>&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://istio.io/docs/setup/additional-setup/config-profiles/">这里&lt;/a>可以查看各个配置的详细说明 &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>加速云原生的 Java 开发</title><link>https://atbug.com/speed-up-java-development-on-kubernetes/</link><pubDate>Sat, 21 Dec 2019 20:45:22 +0800</pubDate><guid>https://atbug.com/speed-up-java-development-on-kubernetes/</guid><description>
&lt;p>今天来说说日常在Kubernetes开发Java项目遇到的问题.&lt;/p>
&lt;p>当我们新建一个项目的时候, 总是面临需要新建manifest, 平时都是&lt;code>copy+paste+modify&lt;/code>. 能否以变成的方式来生成?&lt;/p>
&lt;p>开发时的步骤也比较繁琐: &lt;code>docker build&lt;/code>, &lt;code>docker push&lt;/code>, &lt;code>kubectl apple&lt;/code>, &lt;code>kubectl delete pod&lt;/code>. 对于一个Java应用来说还多了一步编译. 操作一次还ok, 但是一天十几次总会有想吐的感觉. 这些步骤能否简化成一个命令, 甚至修改了代码自动就完成上面一系列的操作?&lt;/p>
&lt;p>实现这些我们需要几个工具: &lt;a href="https://github.com/dekorateio/dekorate">dekorate&lt;/a>, &lt;a href="https://github.com/GoogleContainerTools/jib">Jib&lt;/a>, &lt;a href="https://github.com/GoogleContainerTools/skaffold">Skaffold&lt;/a>. 其中Jib也在上一篇文章&lt;a href="https://atbug.com/build-docker-or-oci-image-with-jib-for-java/">使用Jib为Java应用构建镜像&lt;/a>中介绍过.&lt;/p>
&lt;h2 id="dekorate">dekorate&lt;/h2>
&lt;blockquote>
&lt;p>Dekorate is a collection of Java compile-time generators and decorators for Kubernetes/OpenShift manifests.
Dekorate是Java编译时生成和装饰Kubernetes/OpenShift的manifests的工具&lt;/p>
&lt;/blockquote>
&lt;h3 id="快速开始">快速开始&lt;/h3>
&lt;h4 id="1-通过使用spring-initializerhttpsstartspringio生成一个项目spring-boot-222-并加入依赖">1. 通过使用&lt;a href="https://start.spring.io">Spring Initializer&lt;/a>生成一个项目(Spring Boot 2.2.2), 并加入依赖:&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>io.dekorate&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>kubernetes-spring-starter&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>0.10.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-加入一个简单的controller">2. 加入一个简单的&lt;code>Controller&lt;/code>:&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author Addo.Zhang
&lt;/span>&lt;span class="cm"> * @date 2019/12/22
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@RestController&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DekorateExampleController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">hi&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-执行命令mvn-clean-install-然后在targetclassesmeta-infdekorate目录下可以找到kubernetesjson和kubernetesyml两个文件">3. 执行命令&lt;code>mvn clean install&lt;/code>, 然后在&lt;code>target/classes/META-INF/dekorate&lt;/code>目录下可以找到&lt;code>kubernetes.json&lt;/code>和&lt;code>kubernetes.yml&lt;/code>两个文件.&lt;/h4>
&lt;p>&lt;code>kubernetes.yml&lt;/code>的内容:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;v1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Service&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;ClusterIP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;apps/v1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Deployment&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;KUBERNETES_NAMESPACE&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;metadata.namespace&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo/dekorate-example:0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;IfNotPresent&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/info&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;TCP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/health&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>yml中包含了&lt;code>Service&lt;/code>和&lt;code>Deployment&lt;/code>两部分, dekorate完美兼容的Spring:&lt;/p>
&lt;ul>
&lt;li>&lt;code>app: dekorate-example&lt;/code>: 项目名&lt;/li>
&lt;li>&lt;code>version: 0.0.1-SNAPSHOT&lt;/code>: 项目当前版本&lt;/li>
&lt;li>&lt;code>group: addo&lt;/code>: 是我系统当前用户名&lt;/li>
&lt;li>&lt;code>/actuator/health&lt;/code>: Spring Boot 2.2后actuator的health endpoint, 作为&lt;code>readinessProbe&lt;/code>&lt;/li>
&lt;li>&lt;code>/actuator/info&lt;/code>: Spring Boot 2.2后actuator的endpoint, 作为&lt;code>livenessProbe&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="进阶">进阶&lt;/h3>
&lt;p>&lt;strong>前面yml的内容都是自动生成的, 假如有些特殊的需求. 比如修改镜像的&lt;code>repository&lt;/code>即这里的&lt;code>group&lt;/code>, 如何操作?&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">dekorate.kubernetes.group = addozhang
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/5zgkfl.jpg" alt="Change Image Repository">&lt;/p>
&lt;p>&lt;strong>或者修改Service的类型为NodePort&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">dekorate.kubernetes.service-type = NodePort
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/vIen3M.jpg" alt="NodePort Service">&lt;/p>
&lt;h4 id="配置">配置&lt;/h4>
&lt;p>dekoration提供了&lt;a href="https://github.com/dekorateio/dekorate/blob/master/assets/config.md">丰富的配置&lt;/a>来个性化manifest.&lt;/p>
&lt;p>除了上面使用的配置文件(properties/yaml)的方式, 还提供了&lt;code>Annotation&lt;/code>注解配置方式.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">io.dekorate.kubernetes.annotation.Env&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">io.dekorate.kubernetes.annotation.KubernetesApplication&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@KubernetesApplication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">envVars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Env&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;key1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;var1&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//Your code goes here
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/exQoxy.jpg" alt="@KubernetesApplication Annotation">&lt;/p>
&lt;h2 id="jib">Jib&lt;/h2>
&lt;p>Jib的说明请看上一篇文章:&lt;a href="https://atbug.com/build-docker-or-oci-image-with-jib-for-java/">使用Jib为Java应用构建镜像&lt;/a>&lt;/p>
&lt;h3 id="插件配置">插件配置&lt;/h3>
&lt;p>下面是针对该项目添加的配置:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.google.cloud.tools&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jib-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.8.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;container&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Xmx128m&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Xms64m&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/jvmFlags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;labels&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;Author&amp;gt;&lt;/span>Addo.Zhang&lt;span class="nt">&amp;lt;/Author&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/labels&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;creationTime&amp;gt;&lt;/span>USE_CURRENT_TIMESTAMP&lt;span class="nt">&amp;lt;/creationTime&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/container&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;from&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>openjdk:8-jdk-alpine&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/from&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>addo/dekorate-example&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;tags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;tag&amp;gt;&lt;/span>latest&lt;span class="nt">&amp;lt;/tag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/tags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;allowInsecureRegistries&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/allowInsecureRegistries&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令&lt;code>mvn compile jib:dockerBuild&lt;/code>便可以编译代码, 构建镜像并推送到镜像仓库.&lt;/p>
&lt;h2 id="skaffold">Skaffold&lt;/h2>
&lt;p>&lt;a href="https://github.com/GoogleContainerTools/skaffold">Skaffold&lt;/a>也是GoogleContainerTools中的一个工具.&lt;/p>
&lt;blockquote>
&lt;p>Skaffold is a command line tool that facilitates continuous development for Kubernetes applications. You can iterate on your application source code locally then deploy to local or remote Kubernetes clusters. Skaffold handles the workflow for building, pushing and deploying your application. It also provides building blocks and describe customizations for a CI/CD pipeline.
Skaffold是一个命令行工具, 可促进Kubernetes应用程序的持续开发. 可以在本地迭代应用程序源代码, 然后部署到本地或远程Kubernetes集群. Skaffold处理构建, 推送和部署应用程序的工作流程. 它还提供了构建块并描述了CI/CD管道的自定义.&lt;/p>
&lt;/blockquote>
&lt;p>在我们这个例子中, 通过与Jib的联动, 完成编译代码, 构建镜像, 推送镜像, 部署一系列操作.&lt;/p>
&lt;p>![Run](&lt;a href="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/2019-12-23">https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/2019-12-23&lt;/a> 15.12.24.gif)&lt;/p>
&lt;p>截屏中的操作, 因为没有代码改动而不续构建镜像, Skaffold直接从cache中获取镜像并部署到Kubernetes中.&lt;/p>
&lt;h3 id="skaffold操作">Skaffold操作&lt;/h3>
&lt;h4 id="1-执行命令skaffold-init---xxenablejibinit并在提示出输入y">1. 执行命令&lt;code>skaffold init --XXenableJibInit&lt;/code>并在提示出输入&lt;code>y&lt;/code>&lt;/h4>
&lt;h4 id="2-该命令会生成一个名为skaffoldyaml的文件">2. 该命令会生成一个名为&lt;code>skaffold.yaml&lt;/code>的文件&lt;/h4>
&lt;p>由于&lt;code>dekorate&lt;/code>同时生成了&lt;code>json&lt;/code>和&lt;code>yaml&lt;/code>格式的manifest, 被&lt;code>skaffold&lt;/code>检测到. 实际操作中只需要其中一个即可.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">skaffold/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dekorate-example&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">artifacts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">addo/dekorate-example&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">jib&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kubectl&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">manifests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">target/classes/META-INF/dekorate/kubernetes.json&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">target/classes/META-INF/dekorate/kubernetes.yml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-执行skaffold-run">3. 执行&lt;code>skaffold run&lt;/code>&lt;/h4>
&lt;h4 id="4-pod启动完成后-通过kubectl-port-forward-podname-here-8081">4. pod启动完成后, 通过&lt;code>kubectl port-forward PODNAME-HERE 8081&lt;/code>&lt;/h4>
&lt;h4 id="5-请求http-httplocalhost8081">5. 请求&lt;code>http http://localhost:8081&lt;/code>&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/wt2BVU.jpg" alt="">&lt;/p>
&lt;h3 id="进阶-1">进阶&lt;/h3>
&lt;p>Skaffold的功能强大, 目前个人使用的有限, 有时间新开一篇来学习一下.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/FXu4Hy.jpg" alt="">&lt;/p>
&lt;h4 id="cli">CLI&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">➜ ~ skaffold &lt;span class="nb">help&lt;/span>
A tool that facilitates continuous development &lt;span class="k">for&lt;/span> Kubernetes applications.
Find more information at: https://skaffold.dev/docs/getting-started/
End-to-end pipelines:
run Run a pipeline
dev Run a pipeline in development mode
debug &lt;span class="o">[&lt;/span>beta&lt;span class="o">]&lt;/span> Run a pipeline in debug mode
Pipeline building blocks &lt;span class="k">for&lt;/span> CI/CD:
build Build the artifacts
deploy Deploy pre-built artifacts
delete Delete the deployed application
render &lt;span class="o">[&lt;/span>alpha&lt;span class="o">]&lt;/span> Perform all image builds, and output rendered Kubernetes manifests
Getting started with a new project:
init &lt;span class="o">[&lt;/span>alpha&lt;span class="o">]&lt;/span> Generate configuration &lt;span class="k">for&lt;/span> deploying an application
fix Update old configuration to newest schema version
Other Commands:
completion Output shell completion &lt;span class="k">for&lt;/span> the given shell &lt;span class="o">(&lt;/span>bash or zsh&lt;span class="o">)&lt;/span>
config Interact with the Skaffold configuration
credits Export third party notices to given path &lt;span class="o">(&lt;/span>./skaffold-credits by default&lt;span class="o">)&lt;/span>
diagnose Run a diagnostic on Skaffold
version Print the version information
Usage:
skaffold &lt;span class="o">[&lt;/span>flags&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span>
Use &lt;span class="s2">&amp;#34;skaffold &amp;lt;command&amp;gt; --help&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> more information about a given command.
Use &lt;span class="s2">&amp;#34;skaffold options&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> a list of global command-line options &lt;span class="o">(&lt;/span>applies to all commands&lt;span class="o">)&lt;/span>.
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="yaml配置">Yaml配置&lt;/h4>
&lt;p>参考&lt;a href="https://skaffold.dev/docs/references/yaml/">skaffold.yaml&lt;/a>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>文章的开头我们提到如何做到修改代码后自动完成一些列的操作, 通过&lt;code>skaffold dev&lt;/code>就可以实现.&lt;/p>
&lt;p>文章中使用的&lt;code>dekoration-example&lt;/code>可在&lt;a href="https://github.com/addozhang/dekorate-example">GitHub&lt;/a>上找到.&lt;/p></description></item><item><title>使用 Jib 为 Java 应用构建镜像</title><link>https://atbug.com/build-docker-or-oci-image-with-jib-for-java/</link><pubDate>Mon, 09 Dec 2019 10:05:30 +0800</pubDate><guid>https://atbug.com/build-docker-or-oci-image-with-jib-for-java/</guid><description>
&lt;p>&lt;img src="https://github.com/GoogleContainerTools/jib/raw/master/logo/jib-build-docker-java-container-image.png" alt="pic from jib github">&lt;/p>
&lt;p>&lt;a href="https://github.com/GoogleContainerTools/jib">Jib&lt;/a>是Google Container Tools中的一个工具。&lt;/p>
&lt;blockquote>
&lt;p>Jib builds optimized Docker and OCI images for your Java applications without a Docker daemon - and without deep mastery of Docker best-practices. It is available as plugins for Maven and Gradle and as a Java library.&lt;/p>
&lt;p>Jib无需Docker守护程序即可为Java应用程序构建优化的Docker和OCI映像-无需深入了解Docker最佳实践. 它可以作为Maven和Gradle的插件以及Java库使用.&lt;/p>
&lt;/blockquote>
&lt;h2 id="与docker构建流程比较">与Docker构建流程比较&lt;/h2>
&lt;p>Docker镜像构建流程:&lt;/p>
&lt;p>&lt;img src="https://4.bp.blogspot.com/-SXeItzMS_oo/WzVemqaj7CI/AAAAAAAAF_w/t5Lau7EOC84Kywct_OPiDGIomCiFTywgwCLcBGAs/s1600/docker_build_flow.png" alt="pic from Google Cloud Platform Blog">&lt;/p>
&lt;p>Jib构建流程:&lt;/p>
&lt;p>&lt;img src="https://3.bp.blogspot.com/-_qNyJdVno8E/WzVeqmuC5PI/AAAAAAAAF_0/AHaZ1_ZnJmg8eaUnTlUGyUVe06KRmvlYQCLcBGAs/s1600/jib_build_flow.png" alt="">&lt;/p>
&lt;p>&lt;em>(pic from Google Cloud Platform Blog)&lt;/em>&lt;/p>
&lt;h2 id="快速开始">快速开始&lt;/h2>
&lt;p>构建镜像, 并推送到对应的镜像仓库, 比如Docker Hub等, 或者自建仓库.&lt;/p>
&lt;p>&lt;code>mvn compile com.google.cloud.tools:jib-maven-plugin:1.8.0:build -Dimage=&amp;lt;MY IMAGE&amp;gt;&lt;/code>&lt;/p>
&lt;p>假如要构建到Docker守护进程的话:&lt;/p>
&lt;p>&lt;code>mvn compile com.google.cloud.tools:jib-maven-plugin:1.8.0:dockerBuild&lt;/code>&lt;/p>
&lt;h3 id="插件">插件&lt;/h3>
&lt;h4 id="设置">设置&lt;/h4>
&lt;p>&lt;code>pom.xml&lt;/code>中使用&lt;code>jib-maven-plugin&lt;/code>插件.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;project&amp;gt;&lt;/span>
...
&lt;span class="nt">&amp;lt;build&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;plugins&amp;gt;&lt;/span>
...
&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.google.cloud.tools&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jib-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.8.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>myimage&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
...
&lt;span class="nt">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/build&amp;gt;&lt;/span>
...
&lt;span class="nt">&amp;lt;/project&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="插件配置">插件配置&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.google.cloud.tools&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jib-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>${jib.maven-plugin-version}&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;container&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Xmx1024m&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Xms512m&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:NewRatio=1&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:+UseConcMarkSweepGC&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:CMSInitiatingOccupancyFraction=75&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:+UseCMSInitiatingOccupancyOnly&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:ReservedCodeCacheSize=128M&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:ParallelGCThreads=2&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:+ExplicitGCInvokesConcurrent&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Duser.timezone=Asia/Shanghai&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Djava.security.egd=file:/dev/./urandom&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/jvmFlags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;labels&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;Author&amp;gt;&lt;/span>Addo.Zhang&lt;span class="nt">&amp;lt;/Author&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/labels&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;user&amp;gt;&lt;/span>apps&lt;span class="nt">&amp;lt;/user&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;appRoot&amp;gt;&lt;/span>/home/apps/local&lt;span class="nt">&amp;lt;/appRoot&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;workingDirectory&amp;gt;&lt;/span>/home/apps/local&lt;span class="nt">&amp;lt;/workingDirectory&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;creationTime&amp;gt;&lt;/span>USE_CURRENT_TIMESTAMP&lt;span class="nt">&amp;lt;/creationTime&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/container&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;from&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>PRIVATE_REGISTRY/REPOSITORY/GLOBAL_BASE:1.0.0&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;auth&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;username&amp;gt;&lt;/span>USERNAME&lt;span class="nt">&amp;lt;/username&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;password&amp;gt;&lt;/span>PASSWORD&lt;span class="nt">&amp;lt;/password&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/auth&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/from&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>PRIVATE_REGISTRY/REPOSITORY/${project.artifactId}&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;auth&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;username&amp;gt;&lt;/span>USERNAME&lt;span class="nt">&amp;lt;/username&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;password&amp;gt;&lt;/span>PASSWORD&lt;span class="nt">&amp;lt;/password&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/auth&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;allowInsecureRegistries&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/allowInsecureRegistries&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意: 如果你的私库是insecure的, 需要指定&lt;code>allowInsecureRegistries&lt;/code>为true. 同时命令行构建的时候添加&lt;code>-DsendCredentialsOverHttp=true&lt;/code>&lt;/p>
&lt;p>更多的配置参见&lt;a href="https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin">官方文档&lt;/a>&lt;/p></description></item><item><title>Spring Cloud Hoxton发布</title><link>https://atbug.com/spring-cloud-hoxton-release/</link><pubDate>Wed, 04 Dec 2019 11:09:07 +0800</pubDate><guid>https://atbug.com/spring-cloud-hoxton-release/</guid><description>
&lt;p>&lt;a href="https://spring.io/blog/2019/11/28/spring-cloud-hoxton-released">原文&lt;/a>&lt;/p>
&lt;p>Spring Cloud Hoxton.RELEASE基于Spring Boot 2.2.1.RELEASE&lt;/p>
&lt;h3 id="文档变化">文档变化&lt;/h3>
&lt;p>Hoxton.RELEASE使用了新的&lt;a href="https://cloud.spring.io/spring-cloud-static/Hoxton.RELEASE/reference/html/spring-cloud.html">首页&lt;/a>, 新的样式以及单页面, 多页面和PDF版本.&lt;/p>
&lt;h3 id="新的负载均衡器实现">新的负载均衡器实现&lt;/h3>
&lt;p>Hoxton.RELEASE是第一个包含阻塞和非阻塞客户端负载均衡器实现的版本, 替代进入维护状态的Netflix Ribbon.&lt;/p>
&lt;p>搭配&lt;code>BlockingLoadBalancerClient&lt;/code>使用&lt;code>RestTemplate&lt;/code>, 需要在classpath中引入&lt;code>org.springframework.cloud:spring-cloud-loadbalancer&lt;/code>. 这个依赖同样用于使用了&lt;code>@LoadBalanced WebClient.Builder&lt;/code>的响应式应用中. 唯一的区别是Spring Cloud会自动配置&lt;code>ReactorLoadBalancerExchangeFilterFunction&lt;/code>实例. 更多内容查看&lt;a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-commons/2.2.0.M2/reference/html/#_spring_resttemplate_as_a_load_balancer_client">文档&lt;/a>. 新的&lt;code>ReactorLoadBalancerExchangeFilterFunction&lt;/code>可用于自动装配并自动传递给&lt;code>WebClient.Builder&lt;/code>(&lt;a href="https://cloud.spring.io/spring-cloud-commons/reference/html/#webflux-with-reactive-loadbalancer">文档&lt;/a>).&lt;/p>
&lt;h3 id="spring-cloud-netflix">Spring Cloud Netflix&lt;/h3>
&lt;ul>
&lt;li>增加了新的&lt;code>ReactiveDiscoveryClient&lt;/code>, 同时增加了新的Spring Cloud Circuit Breaker API的Hystrix实现.&lt;/li>
&lt;li>增加&lt;a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.0.RC2/reference/html/#disabling-spring-cloud-circuit-breaker-hystrix">配置项&lt;/a>&lt;code>spring.cloud.circuitbreaker.hystrix.enabled&lt;/code>来禁用Spring Cloud CircuitBreaker Hystrix的自动配置.&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-cloudfoundry">Spring Cloud Cloudfoundry&lt;/h3>
&lt;p>支持新的&lt;code>ReactiveDiscoveryClient&lt;/code>&lt;/p>
&lt;h3 id="spring-cloud-bus">Spring Cloud Bus&lt;/h3>
&lt;p>文档更新&lt;/p>
&lt;h3 id="spring-cloud-vault">Spring Cloud Vault&lt;/h3>
&lt;ul>
&lt;li>在Pivotal应用程序服务)以前的PCF)中运行的应用程序可以利用容器的身份来使用保险柜的PCF身份验证支持进行身份验证&lt;/li>
&lt;li>使用X-Vault-Namespace标头支持Vault名称空间(Vault Enterprise功能)&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-kubernetes">Spring Cloud Kubernetes&lt;/h3>
&lt;p>支持新的&lt;code>ReactiveDiscoveryClient&lt;/code>&lt;/p>
&lt;h3 id="spring-cloud-contract">Spring Cloud Contract&lt;/h3>
&lt;ul>
&lt;li>完整的文档重写&lt;/li>
&lt;li>主要测试类生成重构&lt;/li>
&lt;li>从Groovy到Java的大量重写&lt;/li>
&lt;li>添加了对使用Kotlin和Java编写合同的支持&lt;/li>
&lt;li>在合同DSL和运行时存根生成中添加了inProgress标志&lt;/li>
&lt;li>增加了对生成测试的TestNG支持&lt;/li>
&lt;li>许多库版本增量(包括Groovy, WireMock和Pact)&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-consul">Spring Cloud Consul&lt;/h3>
&lt;p>支持新的&lt;code>ReactiveDiscoveryClient&lt;/code>以及Consul的一致性模型&lt;/p>
&lt;h3 id="spring-cloud-config">Spring Cloud Config&lt;/h3>
&lt;ul>
&lt;li>新的环境仓库支持AWS S3&lt;/li>
&lt;li>添加了解密纯文本属性的功能&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-gcp">Spring Cloud Gcp&lt;/h3>
&lt;ul>
&lt;li>添加BigQuery模块&lt;/li>
&lt;li>为Cloud Foundry创建了一个单独的启动器：&lt;code>spring-cloud-gcp-starter-cloudfoundry&lt;/code>&lt;/li>
&lt;li>可以浏览&lt;a href="https://github.com/spring-cloud/spring-cloud-gcp/blob/master/CHANGELOG.adoc#120release-2019-11-26">变更日志&lt;/a>文档以获取更多信息&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-stream">Spring Cloud Stream&lt;/h3>
&lt;p>从annotation-driven过度到了更加简单的函数式.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://spring.io/blog/2019/10/14/spring-cloud-stream-demystified-and-simplified">Spring Cloud Stream - demystified and simplified&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://spring.io/blog/2019/10/17/spring-cloud-stream-functional-and-reactive">Spring Cloud Stream - functional and reactive&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://spring.io/blog/2019/10/25/spring-cloud-stream-and-spring-integration">Spring Cloud Stream - and Spring Integration&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://spring.io/blog/2019/10/31/spring-cloud-stream-event-routing">Spring Cloud Stream - Event Routing&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-commons">Spring Cloud Commons&lt;/h3>
&lt;p>引入阻塞和非阻塞客户端负载均衡器实现, 来替代进入维护状态的Netflix Ribbon.&lt;/p>
&lt;h3 id="spring-cloud-openfeign">Spring Cloud Openfeign&lt;/h3>
&lt;ul>
&lt;li>Openfeign升级到10.4.0&lt;/li>
&lt;li>支持Spring Cloud LoadBalancer&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-task">Spring Cloud Task&lt;/h3>
&lt;ul>
&lt;li>支持Micrometer&lt;/li>
&lt;li>更新文档&lt;/li>
&lt;li>使用Spring Batch分区时启动的任务应用现在加入了external-execution-id&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-sleuth">Spring Cloud Sleuth&lt;/h3>
&lt;ul>
&lt;li>加入对最新的Brave(包括消息采样)的支持&lt;/li>
&lt;li>添加了onLastOperator Reactor跟踪选项，以提高性能&lt;/li>
&lt;li>添加了Redis跟踪&lt;/li>
&lt;li>将默认采样器设置为限速采样器&lt;/li>
&lt;li>添加了对AWS SQS跟踪的支持&lt;/li>
&lt;li>增加了对Quartz跟踪的支持&lt;/li>
&lt;li>添加了进程内传播机制&lt;/li>
&lt;li>默认为Zipkin报告的Micrometer指标&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-aws">Spring Cloud AWS&lt;/h3>
&lt;p>Bug修复&lt;/p>
&lt;h3 id="spring-cloud-zookeeper">Spring Cloud Zookeeper&lt;/h3>
&lt;p>支持新的&lt;code>ReactiveDiscoveryClient&lt;/code>&lt;/p>
&lt;h3 id="spring-cloud-security">Spring Cloud Security&lt;/h3>
&lt;p>Bug修复&lt;/p>
&lt;h3 id="spring-cloud-curcuitbreaker">Spring Cloud CurcuitBreaker&lt;/h3>
&lt;p>引入新的项目Spring Cloud CircuitBreaker, 这个项目包含的抽象的API用于在项目中使用断路器. 支持该API的实现:&lt;/p>
&lt;ul>
&lt;li>Resilience4j&lt;/li>
&lt;li>Spring Retry&lt;/li>
&lt;li>Hystrix (in &lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-hystrix/src/main/java/org/springframework/cloud/netflix/hystrix/HystrixCircuitBreaker.java">spring-cloud-netflix&lt;/a>)&lt;/li>
&lt;li>Sentinel (in &lt;a href="https://github.com/alibaba/spring-cloud-alibaba/tree/master/spring-cloud-alibaba-sentinel">spring-cloud-alibaba&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://spring.io/blog/2019/04/16/introducing-spring-cloud-circuit-breaker">更多信息&lt;/a>&lt;/p>
&lt;ul>
&lt;li>时添加了自动配置, 在使用Resilience4J收集断路器的指标数据&lt;/li>
&lt;li>升级到Resilience4J 1.1.0&lt;/li>
&lt;li>添加配置项禁用REsilience4J的自动配置&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-function">Spring Cloud Function&lt;/h3>
&lt;p>添加了更多新特性:&lt;/p>
&lt;ul>
&lt;li>透明类型转换&lt;/li>
&lt;li>函数路由&lt;/li>
&lt;li>函数参数&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://spring.io/blog/2019/11/25/announcing-the-release-of-spring-cloud-function-3-0-0-release">更多详细信息&lt;/a>&lt;/p>
&lt;h3 id="spring-cloud-gateway">Spring Cloud Gateway&lt;/h3>
&lt;ul>
&lt;li>支持新的&lt;code>ReactiveDiscoveryClient&lt;/code>&lt;/li>
&lt;li>RSocket模块迁移到了自己维护的位于Spring Cloud Incubator organization项目中&lt;/li>
&lt;li>通过增加的使用了新Spring Cloud CircuitBreaker库过滤器为路由提供断路器功能&lt;/li>
&lt;/ul></description></item><item><title>Docker Engine API on Mac Osx</title><link>https://atbug.com/docker-engine-api-on-mac-osx/</link><pubDate>Wed, 06 Nov 2019 20:19:50 +0800</pubDate><guid>https://atbug.com/docker-engine-api-on-mac-osx/</guid><description>
&lt;p>根据官方的文档&lt;a href="https://docs.docker.com/docker-for-mac/docker-toolbox/">Docker Desktop on Mac vs. Docker Toolbox&lt;/a>, Docker Desktop on Mac只提供了UNIX socket&lt;code>/var/run/docker.sock&lt;/code>, 并未提供tcp的监听(默认2375端口).&lt;/p>
&lt;p>&lt;strong>如果使用linux的配置方式在&lt;code>Docker Desktop&lt;/code>中配置&lt;code>host&lt;/code>, &lt;code>Docker Desktop&lt;/code>将无法启动. 需要去&lt;code>~/.docker/daemon.json&lt;/code>中删除&lt;code>hosts&lt;/code>配置才能正常启动.&lt;/strong>&lt;/p>
&lt;p>通过下面的方式暴露出2375的tcp&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker run --rm -d -v /var/run/docker.sock:/var/run/docker.sock -p 127.0.0.1:2375:2375 bobrik/socat TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后通过&lt;code>docker version&lt;/code>查看当前的docker engine的版本, 比如1.40. 查看官方的Engine API文档: &lt;a href="https://docs.docker.com/engine/api/v1.40">https://docs.docker.com/engine/api/v1.40&lt;/a>&lt;/p>
&lt;p>搜索个镜像测试一下:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/15729240620185.jpg" alt="">&lt;/p></description></item><item><title>Spring Boot 2.2.0 发布</title><link>https://atbug.com/spring-boot-2-2-0-release/</link><pubDate>Tue, 22 Oct 2019 09:27:03 +0800</pubDate><guid>https://atbug.com/spring-boot-2-2-0-release/</guid><description>
&lt;p>译自: &lt;a href="https://spring.io/blog/2019/10/16/spring-boot-2-2-0">https://spring.io/blog/2019/10/16/spring-boot-2-2-0&lt;/a>&lt;/p>
&lt;h3 id="组件升级">组件升级&lt;/h3>
&lt;ul>
&lt;li>Spring AMQP 2.2&lt;/li>
&lt;li>Spring Batch 4.2&lt;/li>
&lt;li>Spring Data Moore&lt;/li>
&lt;li>Spring Framework 5.2&lt;/li>
&lt;li>Spring HATEOAS 1.0&lt;/li>
&lt;li>Spring Integration 5.2&lt;/li>
&lt;li>Spring Kafka 2.3&lt;/li>
&lt;li>Spring Security 5.2&lt;/li>
&lt;li>Spring Session Corn&lt;/li>
&lt;/ul>
&lt;h3 id="第三方库升级">第三方库升级&lt;/h3>
&lt;ul>
&lt;li>Elasticsearch 6.7&lt;/li>
&lt;li>Flyway 6.0&lt;/li>
&lt;li>Jackson 2.10&lt;/li>
&lt;li>JUnit 5.5&lt;/li>
&lt;li>Micrometer 1.3&lt;/li>
&lt;li>Reactor Dysprosium&lt;/li>
&lt;li>Solr 8.0&lt;/li>
&lt;/ul>
&lt;h3 id="性能提升">性能提升&lt;/h3>
&lt;h4 id="延迟初始化lazy-initialization">延迟初始化(Lazy initialization)&lt;/h4>
&lt;p>支持开启全局延迟加载&lt;code>spring.main.lazy-initialization&lt;/code>. 代价:&lt;/p>
&lt;ul>
&lt;li>初次处理HTTP请求耗时长&lt;/li>
&lt;li>本应在启动初始化时出现的问题, 延后出现&lt;/li>
&lt;/ul>
&lt;p>更多参考: &lt;a href="https://spring.io/blog/2019/03/14/lazy-initialization-in-spring-boot-2-2">https://spring.io/blog/2019/03/14/lazy-initialization-in-spring-boot-2-2&lt;/a>&lt;/p>
&lt;h3 id="java-13支持">Java 13支持&lt;/h3>
&lt;p>跟随Spring Framework5.2对Java 13的支持, Spring Boot 2.2现在也支持了Java13. 同时兼容Java 11和8.&lt;/p>
&lt;h3 id="不可变的configurationproperties绑定">不可变的&lt;code>@ConfigurationProperties&lt;/code>绑定&lt;/h3>
&lt;p>现在加入了基于构造器的绑定, 允许&lt;code>@ConfigurationProperties&lt;/code>标注的类不可变(属性不可变).&lt;/p>
&lt;p>可通过&lt;code>@ConfigurationProperties&lt;/code>标注类, 或者使用&lt;code>@ConstructorBinding&lt;/code>标注构造器来开启.&lt;/p>
&lt;p>额外的注解如&lt;code>@DefaultValue&lt;/code>, &lt;code>@DateTimeFormt&lt;/code>可对构造参数进行配置.&lt;/p>
&lt;p>更多参考: &lt;a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config-constructor-binding">https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config-constructor-binding&lt;/a>&lt;/p>
&lt;h3 id="rscoket支持">RScoket支持&lt;/h3>
&lt;p>使用新的starter&lt;code>spring-boot-starter-rsocket&lt;/code>自动配置.&lt;/p>
&lt;p>Spring Security的RScoket集成在classpath中存在&lt;code>spring-security-rsocket&lt;/code>时自动完成配置.&lt;/p>
&lt;p>更多参考: &lt;a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html//spring-boot-features.html#boot-features-rsocket">https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html//spring-boot-features.html#boot-features-rsocket&lt;/a>&lt;/p>
&lt;h3 id="健康指示器分组">健康指示器分组&lt;/h3>
&lt;p>支持对健康指示器(Health Indicator)进行分组. 比如将应用部署到Kubernetes时, 希望针对&amp;quot;liveness&amp;quot;和&amp;quot;readiness&amp;quot;对指示器进行分组&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">management.endpoint.health.group.custom.include=db
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查时使用&lt;code>localhost:8080/actuator/health/custom&lt;/code>&lt;/p>
&lt;p>更多参考: &lt;a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html//production-ready-features.html#health-groups">https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html//production-ready-features.html#health-groups&lt;/a>&lt;/p>
&lt;h3 id="其他变化">其他变化&lt;/h3>
&lt;p>参考: &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes&lt;/a>&lt;/p></description></item><item><title>Zipkin dependencies的坑之二: 心跳超时和Executor OOM</title><link>https://atbug.com/zipkin-dependencies-bug-two-timeout-and-oom/</link><pubDate>Sun, 22 Sep 2019 18:27:37 +0800</pubDate><guid>https://atbug.com/zipkin-dependencies-bug-two-timeout-and-oom/</guid><description>
&lt;p>上回说为了解决吞吐问题, 将&lt;a href="https://github.com/openzipkin/zipkin-dependencies">zipkin-dependencies&lt;/a>的版本升级到了2.3.0.&lt;/p>
&lt;p>好景不长, 从某一天开始作业运行报错:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Issue communicating with driver in heartbeater
org.apache.spark.rpc.RpcTimeoutException: Futures timed out after [10000 milliseconds]. This timeout is controlled by spark.executor.heartbeatInterval
...
19/09/18 08:33:20 ERROR Executor: Exception in task 1.0 in stage 1.0 (TID 4)
java.lang.OutOfMemoryError: Java heap space
...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解决方案">解决方案&lt;/h3>
&lt;p>最新版本(2.3.0)目前不支持额外的spark和elasticsearch-spark的配置, 已经提交了&lt;a href="https://github.com/openzipkin/zipkin-dependencies/pull/151">PR&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>超时的解决方案: 为spark指定配置&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">spark.executor.heartbeatInterval=600000
spark.network.timeout=600000
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>OOM解决方案: 根据实际情况通过&lt;code>es.input.max.docs.per.partition&lt;/code>配置executor的数量. 调整运行内存及&lt;code>spark.executor.memory&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Zipkin dependencies的坑之一: 耗时越来越长</title><link>https://atbug.com/zipkin-dependencies-bug-one/</link><pubDate>Sun, 22 Sep 2019 17:59:56 +0800</pubDate><guid>https://atbug.com/zipkin-dependencies-bug-one/</guid><description>
&lt;p>zipkin-dependencies是zipkin调用链的依赖分析工具.&lt;/p>
&lt;p>系统上线时使用了当时的最新版本&lt;code>2.0.1&lt;/code>, 运行一年之后随着服务的增多, 分析一天的数据耗时越来越多. 从最初的几分钟, 到最慢的几十小时(数据量18m).&lt;/p>
&lt;p>最终返现是版本的问题, 升级到&amp;gt;=&lt;code>2.3.0&lt;/code>的版本之后吞吐迅速上升.&lt;/p>
&lt;p>所以便有了issue: &lt;a href="https://github.com/openzipkin/zipkin-dependencies/issues/149">Reminder: do NOT use the version before 2.3.0&lt;/a>&lt;/p>
&lt;p>但这也引来了另一个坑: &lt;a href="https://atbug.com/zipkin-dependencies-bug-two-timeout-and-oom/">心跳超时和Executor OOM&lt;/a>&lt;/p>
&lt;h3 id="tldr">TL;DR&lt;/h3>
&lt;p>简单浏览了下zipkin-dependencies的源码, 2.0.1和2.3.2的比较大的差距是依赖的&lt;code>elasticsearch-spark&lt;/code>的版本. 前者用的是&lt;code>6.3.2&lt;/code>, 后者是&lt;code>7.3.0&lt;/code>.&lt;/p>
&lt;p>尝试在&lt;code>zipkin-dependencies-2.0.1&lt;/code>中使用&lt;code>elasticsearch-spark-7.3.0&lt;/code>, 和&lt;code>2.3.2&lt;/code>的性能一直.&lt;/p>
&lt;p>通过打开log4j debug日志, 发现到&lt;code>elasticsearch-spark&lt;/code>两个版本的运行差异:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#7.3.0
19/09/05 18:13:14 INFO DAGScheduler: Submitting 3 missing tasks from ShuffleMapStage 0 (MapPartitionsRDD[1] at groupBy at ElasticsearchDependenciesJob.java:185) (first 15 tasks are for partitions Vector(0, 1, 2))
#6.3.2
19/09/05 18:09:56 INFO DAGScheduler: Submitting 214 missing tasks from ShuffleMapStage 0 (MapPartitionsRDD[1] at groupBy at ElasticsearchDependenciesJob.java:185) (first 15 tasks are for partitions Vector(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="restservicefindpartitionsl268的源码">&lt;code>RestService#findPartitions()L268&lt;/code>的源码:&lt;/h4>
&lt;p>&lt;code>7.3.0&lt;/code>
&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/rXGrya.jpg" alt="">&lt;/p>
&lt;p>&lt;code>6.3.2&lt;/code>
&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/wswyzO.jpg" alt="">&lt;/p>
&lt;p>7.x &lt;code>es.input.max.docs.per.partition&lt;/code>为&lt;code>null&lt;/code> 计算出partitions=3 (实际分区数为3, 使用方法&lt;code>#findShardPartitions()&lt;/code>)
6.x &lt;code>es.input.use.sliced.partitions&lt;/code>为&lt;code>true&lt;/code>, 计算出partitions=214 (使用方法&lt;code>#findSlicePartitions()&lt;/code>)&lt;/p>
&lt;p>在7.x中, 可以通过设置&lt;code>es.input.max.docs.per.partition&lt;/code>的值来设置切片数量(对单个partition进行切分, 通过增加并行任务数量来提高吞吐)&lt;/p>
&lt;p>**该行代码的commit message: **&lt;/p>
&lt;blockquote>
&lt;p>Remove default setting for max documents per partition We added support for sliced scrolls back in 5.0, which allows subdividing scrolls into smaller input splits. there are some cases where the added subdivision of the scroll operations causes high amounts of overhead when reading very large shards. in most cases, shards should be small enough that a regular read operation over them should complete in reasonable time. In order to avoid performance degradation at higher levels, we are removing the default value of 100k from this setting, and instead, checking if it is set. Additionally, the &amp;lsquo;es.input.use.sliced.partitions&amp;rsquo; setting has been removed as it is now redundant.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/elastic/elasticsearch-hadoop/issues/1196">关联的issue#1196&lt;/a>&lt;/p></description></item><item><title>如何选择Kafka Topic的分区数</title><link>https://atbug.com/how-to-choose-topic-partition-count-number-kafka/</link><pubDate>Fri, 30 Aug 2019 11:10:46 +0800</pubDate><guid>https://atbug.com/how-to-choose-topic-partition-count-number-kafka/</guid><description>
&lt;p>在kafka中, topic的分区是并行计算的单元. 在producer端和broker端, 可以同时并发的写数据到不同的分区中.
在consumer端, Kafka总是将某个分区分配个一个consumer线程. 因此同一个消费组内的并行度与分区数息息相关.&lt;/p>
&lt;p>Partition分区数的大小, 更多直接影响到消费端的吞吐(一个分区只能同一消费组的一个消费者消费). 分区数小, 消费端的吞吐就低. 但是太大也会有其他的影响&lt;/p>
&lt;p>原则:&lt;/p>
&lt;ul>
&lt;li>更多的分区可提高吞吐量&lt;/li>
&lt;li>分区数越多打开的文件句柄越多&lt;/li>
&lt;li>分区数越多降低可用性&lt;/li>
&lt;li>更多的分区增加端到端的延迟&lt;/li>
&lt;li>客户端需要更多的内存&lt;/li>
&lt;/ul>
&lt;p>归根结底还是得有个度. 如何找出这个度?&lt;/p>
&lt;p>有个粗略的计算公式: &lt;code>max(t/p, t/c)&lt;/code>. &lt;code>t&lt;/code>就是所预期吞吐量, &lt;code>p&lt;/code>是当前生产端单个分区的吞吐, 那&lt;code>c&lt;/code>就是消费端单个分区的吞吐.&lt;/p>
&lt;p>比如单个partition的生产端吞吐是200, 消费端是100. 预期的吞吐是500, 那么partition的数量就是5.&lt;/p>
&lt;p>单个分区的吞吐通常通过修改配置来提升, 比如生产端的批处理大小, 压缩算法, acknowledgement类型, 副本数等. 而在消费端则更依赖于消息的处理速度.&lt;/p>
&lt;h3 id="参考">参考&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.confluent.io/blog/how-choose-number-topics-partitions-kafka-cluster">Confluent博客&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://engineering.linkedin.com/kafka/benchmarking-apache-kafka-2-million-writes-second-three-cheap-machines">Linkedin的benchmark&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>博客最近半年没什么产出</title><link>https://atbug.com/no-output-in-past-half-year/</link><pubDate>Tue, 27 Aug 2019 14:29:12 +0000</pubDate><guid>https://atbug.com/no-output-in-past-half-year/</guid><description>
&lt;p>上一篇日志更新还是在去年的12月, 至今有差不多10个月没有更新了.&lt;/p>
&lt;p>不是说没有东西可写, 而且想写的东西很多. 工作太忙, 不忙的时候又太懒, 归根结底还是太懒.&lt;/p>
&lt;p>过去一年多都是在做基础架构方面的工作, 围绕技术中台展开的. 有很多技术需要去学习, 也有很多问题要处理. 过程中一直有记笔记的习惯, 所以可以写的东西很多. 不过有些属于公司的部分还是不能写的, 必要的职业道德还是要有的.&lt;/p>
&lt;p>笔记记录一直在用&lt;a href="https://zh.mweb.im">MWeb&lt;/a>, 并使用iCloud同步, 最近几个月也在结合&lt;a href="https://mubu.com">幕布&lt;/a>整理思路和工作安排. 好用的软件我也比较喜欢分享, 记得最早在Workpress上的博客就分享了很多自己常用的软件. (有点扯远了~~~)&lt;/p>
&lt;p>MWeb没有统计功能, 还有使用的是sqlite. 简单sql查询了下, 从去年这份工作开始有244篇笔记. 今年到现在有109篇. 当然有些笔记的内容比较少, 不得不说这一年多收获甚多.&lt;/p>
&lt;p>为什么今天又写了这么一篇, 源于阮一峰的&lt;a href="http://www.ruanyifeng.com/blog/2019/08/weekly-issue-69.html">科技爱好者周刊：第 69 期&lt;/a>.&lt;/p>
&lt;p>刊首语是&amp;quot;一件事&amp;quot;做得好&amp;quot;比较好，还是&amp;quot;做得快&amp;quot;比较好？&amp;quot;, 直接copy他的结论.&lt;/p>
&lt;blockquote>
&lt;p>我很赞同&lt;a href="http://jsomers.net/blog/speed-matters">一篇文章&lt;/a>的结论：做得快更好。&lt;/p>
&lt;blockquote>
&lt;p>做得快不仅可以让你在单位时间内完成更多的工作，而且 &lt;strong>因为你工作得很快，所以你会觉得成本低，从而倾向于做更多。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>写一篇博客，你可能需要两天。这是很高的时间成本，你觉得太贵了，于是你很少写。但是，&lt;strong>做好一件事的唯一方法，就是多做这件事。&lt;/strong> 做得越快，这件事的时间成本就越低，你会愿意做得更多。&lt;/p>
&lt;p>人们总是倾向于，多消费时间成本低的东西。网站很快，就会多访问；搜索很快，就会多搜索；文章很容易读懂，就会多读几篇。做得快的核心，就是要让时间成本降下来，从而多做。&lt;/p>
&lt;/blockquote>
&lt;p>之前写博客的时候, 确实投入很多. 笔记记录的时候很随意, 但是发到博客中又要花不少的时间来整理语言. 总想写的大而美, 也正是因为这个原因导致大半年没有更新(其实也还是懒), 每次想写都因为要花时间而萌生退意.&lt;/p>
&lt;p>所以今后还是多写写, 小而美.&lt;/p>
&lt;p>虽然大半年没更新, 访问量居然还有提升.&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2019/08/27/XyNqw2HtTxFK6pP.jpg" alt="google analytics">&lt;/p></description></item><item><title>Spring Boot源码分析 - Configuration注解</title><link>https://atbug.com/spring-boot-configuration-annotation/</link><pubDate>Mon, 10 Dec 2018 16:24:33 +0000</pubDate><guid>https://atbug.com/spring-boot-configuration-annotation/</guid><description>
&lt;h1 id="configuration注解">@Configuration注解&lt;/h1>
&lt;p>&lt;code>@Configuration&lt;/code>注解指示一个类声明一个或多个@Bean方法, 并且可以由Spring容器处理, 以在运行时为这些bean生成bean定义和服务请求.&lt;/p>
&lt;p>使用&lt;code>ConfigurationClassParser&lt;/code>来对&lt;code>@Configuration&lt;/code>标注的类进行解析, 封装成&lt;code>ConfigurationClass&lt;/code>实例. 具体的实现通过&lt;code>ConfigurationClassPostProcessor&lt;/code>来实现的.&lt;/p>
&lt;h2 id="configurationclasspostprocessor">ConfigurationClassPostProcessor&lt;/h2>
&lt;p>实现了&lt;code>BeanDefinitionRegistryPostProcessor&lt;/code>接口, 间接实现了&lt;code>BeanFactorPostProcessor&lt;/code>接口.&lt;/p>
&lt;ul>
&lt;li>&lt;code>#postProcessBeanDefinitionRegistry()&lt;/code>: 注册所有&lt;code>ConfigurationClass&lt;/code>中的&lt;code>BeanDefinition&lt;/code>, 包括&lt;code>@Bean&lt;/code>注解的方法, &lt;code>@ImporResource&lt;/code>引入的资源中定义的bean, 和&lt;code>@Import&lt;/code>注解引入的&lt;code>ImportBeanDefinitionRegistrar&lt;/code>中注册的&lt;code>BeanDefinition&lt;/code>&lt;/li>
&lt;li>&lt;code>#postProcessBeanFactory()&lt;/code>: 在运行时以通过&lt;code>cglig&lt;/code>增强的类来替换&lt;code>ConfigurationClass&lt;/code>, 为服务bean请求做准备. 增强的实现是通过&lt;code>ConfigurationClassEnhancer&lt;/code>完成的.&lt;/li>
&lt;/ul>
&lt;p>插入一点, &lt;code>ConfigurationClassEnhancer&lt;/code>实现了直接使用bean注册方法来获取bean的操作, 提供了一个&lt;code>BeanMethodInterceptor&lt;/code>的内部类来实行.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Config&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="nf">a&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">B&lt;/span> &lt;span class="nf">b&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setA&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="full-configurationclass-vs-lite-configurationclass">Full ConfigurationClass VS Lite ConfigurationClass&lt;/h3>
&lt;p>先说区别: full的&lt;code>ConfigurationClass&lt;/code>会使用CGLIB进行增强.&lt;/p>
&lt;p>查看类&lt;code>ConfigurationClassUtils&lt;/code>, 其中有两个方法&lt;code>#isFullConfigurationClass()&lt;/code>和&lt;code>#isLiteConfigurationClass()&lt;/code>.&lt;/p>
&lt;p>方法的实现是去检查&lt;code>BeanDefinition&lt;/code>中的&lt;code>ConfigurationClassPostProcessor.configurationClass&lt;/code>属性, 是&lt;code>full&lt;/code>还是&lt;code>lite&lt;/code>.&lt;/p>
&lt;p>这个属性的值又来源于&lt;code>#checkConfigurationClassCandidate()&lt;/code>方法, 如果&lt;code>BeanDefinition&lt;/code>使用的是&lt;code>@Configuration&lt;/code>注解, 则为&lt;code>full&lt;/code>; 如果是&lt;code>@Component&lt;/code>, &lt;code>@ComponentScan&lt;/code>, &lt;code>@Import&lt;/code>或者&lt;code>@ImportResource&lt;/code>中的任何一种, 则为&lt;code>lite&lt;/code>. 如果是&lt;code>ConfigurationClass&lt;/code>, 则会继续为其添加顺序属性.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">checkConfigurationClassCandidate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BeanDefinition&lt;/span> &lt;span class="n">beanDef&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MetadataReaderFactory&lt;/span> &lt;span class="n">metadataReaderFactory&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isFullConfigurationCandidate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">beanDef&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CONFIGURATION_CLASS_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">CONFIGURATION_CLASS_FULL&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isLiteConfigurationCandidate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">beanDef&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CONFIGURATION_CLASS_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">CONFIGURATION_CLASS_LITE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// It&amp;#39;s a full or lite configuration candidate... Let&amp;#39;s determine the order value, if any.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">orderAttributes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">metadata&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAnnotationAttributes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">orderAttributes&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">beanDef&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ORDER_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">orderAttributes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AnnotationUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">VALUE&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Alpine容器安装Docker和OpenShift Client Tools</title><link>https://atbug.com/install-docker-and-openshift-client-tools-in-alpine-container/</link><pubDate>Tue, 28 Aug 2018 09:14:12 +0000</pubDate><guid>https://atbug.com/install-docker-and-openshift-client-tools-in-alpine-container/</guid><description>
&lt;h2 id="安装docker">安装Docker&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;http://dl-2.alpinelinux.org/alpine/edge/main&amp;#34;&lt;/span> &amp;gt; /etc/apk/repositories
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;http://dl-2.alpinelinux.org/alpine/edge/community&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/apk/repositories
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;http://dl-2.alpinelinux.org/alpine/edge/testing&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/apk/repositories
apk -U --no-cache &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --allow-untrusted add &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> shadow &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> py-pip &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> openrc &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> pip install docker-compose
rc-update add docker boot
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装openshift-client-tools">安装OpenShift Client Tools&lt;/h2>
&lt;p>需要先安装glibc&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">apk --no-cache add ca-certificates wget
wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk
apk add glibc-2.28-r0.apk
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>curl --retry 7 -Lo /tmp/client-tools.tar.gz &amp;quot;https://mirror.openshift.com/pub/openshift-v3/clients/3.9.1/linux/oc.tar.gz&amp;quot;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl --retry &lt;span class="m">7&lt;/span> -Lo /tmp/client-tools.tar.gz &lt;span class="s2">&amp;#34;https://mirror.openshift.com/pub/openshift-v3/clients/3.9.1/linux/oc.tar.gz&amp;#34;&lt;/span>
tar zxf /tmp/client-tools.tar.gz -C /usr/local/bin oc &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm /tmp/client-tools.tar.gz &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apk del .build-deps
&lt;span class="c1"># ADDED: Resolve issue x509 oc login issue&lt;/span>
apk add --update ca-certificates
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考: &lt;a href="https://github.com/openshift/origin/issues/11135">github issue&lt;/a>&lt;/p></description></item><item><title>Zuul网关Ribbon重试</title><link>https://atbug.com/ribbon-retry-in-zuul/</link><pubDate>Thu, 02 Aug 2018 08:55:43 +0000</pubDate><guid>https://atbug.com/ribbon-retry-in-zuul/</guid><description>
&lt;h2 id="相关配置">相关配置&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#如果路由转发请求发生超时(连接超时或处理超时), 只要超时时间的设置小于Hystrix的命令超时时间,那么它就会自动发起重试. 默认为false. 或者对指定响应状态码进行重试
zuul.retryable = true
zuul.routes.&amp;lt;route&amp;gt;.retryable = false
#同一实例上的最大重试次数, 默认值为0. 不包括首次调用
ribbon.MaxAutoRetries=0
#重试其他实例的最大重试次数, 不包括第一次选的实例. 默认为1
ribbon.MaxAutoRetriesNextServer=1
#是否所有操作执行重试, 默认值为false, 只重试`GET`请求
ribbon.OkToRetryOnAllOperations=false
#连接超时, 默认2000
ribbon.ConnectTimeout=15000
#响应超时, 默认5000
ribbon.ReadTimeout=15000
#每个host的最大连接数
ribbon.MaxHttpConnectionsPerHost=50
#最大连接数
ribbon.MaxTotalHttpConnections=200
#何种响应状态码才进行重试
ribbon.retryableStatusCodes=404,502
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现">实现&lt;/h2>
&lt;ol>
&lt;li>&lt;code>SimpleRouteLocator#getRoute&lt;/code>返回的&lt;code>route&lt;/code>对象中会带上&lt;code>retryable&lt;/code>的设置.&lt;/li>
&lt;li>&lt;code>PreDecorationFilter&lt;/code>在对&lt;code>RequestContext&lt;/code>进行装饰的时候会将&lt;code>retryable&lt;/code>的设置通过key&lt;code>FilterConstants.RETRYABLE_KEY&lt;/code>注入&lt;code>RequestContext&lt;/code>中.&lt;/li>
&lt;li>&lt;code>RibbonRoutingFilter#buildCommandContext&lt;/code>会使用&lt;code>RequestContext&lt;/code>的&lt;code>retryable&lt;/code>设置构造&lt;code>RibbonCommandContext&lt;/code>对象.&lt;/li>
&lt;li>&lt;code>RibbonCommandFactory&lt;/code>使用&lt;code>RibbonCommandContext&lt;/code>构建出&lt;code>RibbonCommand&lt;/code>对象.&lt;/li>
&lt;li>&lt;code>RibbonCommand#run&lt;/code>中, 当&lt;code>retryable&lt;/code>为&lt;code>true&lt;/code>时, 会调用&lt;code>IClient&lt;/code>的&lt;code>execute&lt;/code>方法处理请求. 为&lt;code>false&lt;/code>时, 会调用&lt;code>IClient&lt;/code>的&lt;code>executeWithLoadBalancer&lt;/code>方法执行请求.
&lt;ul>
&lt;li>&lt;code>execute&lt;/code>会在失败时进行重试(不超过超时限制)&lt;/li>
&lt;li>&lt;code>executeWithLoadBalancer&lt;/code>方法是先通过&lt;code>LoadBalancer&lt;/code>选择出一个&lt;code>Server&lt;/code>, 然后构建出请求地址.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>IClient#execute&lt;/code>执行时, 通过&lt;code>LoadBalancedRetryPolicyFactory&lt;/code>创建一个&lt;code>LoadBalancedRetryPolicy&lt;/code>对象. &lt;code>LoadBalancedRetryPolicy&lt;/code>持有上面&lt;code>ribbon.XXX&lt;/code>的设置. 当响应状态码不在&lt;code>ribbon.retryableStatusCodes&lt;/code>设置中, 则会直接返回响应. 如果属于可重试的响应状态码, 则会将响应封装为&lt;code>HttpClientStatusCodeException&lt;/code>抛出. 异常被&lt;code>RetryTemplate&lt;/code>捕获, 然后使用&lt;code>LoadBalancedRetryPolicy&lt;/code>对当前状态(MaxAutoRetries, MaxAutoRetriesNextServer)计算出能否进行一次重试. 直至成功, 或者当前状态不满足条件.&lt;/li>
&lt;/ol></description></item><item><title>Hystrix工作原理三</title><link>https://atbug.com/hystrix-exception-handling/</link><pubDate>Sun, 24 Jun 2018 16:20:16 +0000</pubDate><guid>https://atbug.com/hystrix-exception-handling/</guid><description>
&lt;h2 id="异常处理">异常处理&lt;/h2>
&lt;h3 id="hystrix异常类型">Hystrix异常类型&lt;/h3>
&lt;ul>
&lt;li>HystrixRuntimeException&lt;/li>
&lt;li>HystrixBadRequestException&lt;/li>
&lt;li>HystrixTimeoutException&lt;/li>
&lt;li>RejectedExecutionException&lt;/li>
&lt;/ul>
&lt;h4 id="hystrixruntimeexception">HystrixRuntimeException&lt;/h4>
&lt;p>&lt;code>HystrixCommand&lt;/code>失败时抛出, 不会触发fallback.&lt;/p>
&lt;h4 id="hystrixbadrequestexception">HystrixBadRequestException&lt;/h4>
&lt;p>用提供的参数或状态表示错误的异常, 而不是执行失败. 与其他&lt;code>HystrixCommand&lt;/code>抛出的异常不同, 这个异常不会触发&lt;code>fallback&lt;/code>, 也不会记录进&lt;code>failure&lt;/code>的指标, 因而也不会触发断路器,&lt;/p>
&lt;p>应该在用户输入引起的错误是抛出, 否则会它与容错和后退行为的目的相悖.&lt;/p>
&lt;p>&lt;strong>不会触发fallback, 也不会记录到错误的指标中, 也不会触发断路器&lt;/strong>.&lt;/p>
&lt;h4 id="rejectedexecutionexception">RejectedExecutionException&lt;/h4>
&lt;p>线程池发生&lt;code>reject&lt;/code>时抛出&lt;/p>
&lt;h4 id="hystrixtimeoutexception">HystrixTimeoutException&lt;/h4>
&lt;p>在&lt;code>HystrixCommand.run()&lt;/code>或者&lt;code>HystrixObservableCommand.construct()&lt;/code>时抛出, 会记录&lt;code>timeout&lt;/code>的次数. 如果希望某些类型的失败被记录为&lt;code>timeout&lt;/code>, 应该将这些类型的失败包装为&lt;code>HystrixTimeoutException&lt;/code>&lt;/p>
&lt;h3 id="异常处理-1">异常处理&lt;/h3>
&lt;p>&lt;code>ignoreExceptions&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">final&lt;/span> &lt;span class="n">Func1&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">handleFallback&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Func1&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">call&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">circuitBreaker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">markNonSuccess&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getExceptionFromThrowable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">executionResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">executionResult&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setExecutionException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">RejectedExecutionException&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">handleThreadPoolRejectionViaFallback&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">HystrixTimeoutException&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">handleTimeoutViaFallback&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">HystrixBadRequestException&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">handleBadRequestByEmittingError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * Treat HystrixBadRequestException from ExecutionHook like a plain HystrixBadRequestException.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">HystrixBadRequestException&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">eventNotifier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">markEvent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HystrixEventType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BAD_REQUEST&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">commandKey&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">handleFailureViaFallback&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="feign中响应状态码处理">Feign中响应状态码处理&lt;/h4>
&lt;p>Feign使用&lt;code>SynchronousMethodHandler&lt;/code>做请求的执行和响应的处理. 响应处理的部分, 对&lt;code>[200, 300)&lt;/code>区间的状态, 会将response返回; 如果是&lt;code>404&lt;/code>, 根据&lt;code>@FeignClient&lt;/code>中&lt;code>decode404&lt;/code>(默认为false)和方法返回值判断是否熔断, 如果响应返回&lt;code>404&lt;/code>, &lt;code>decode&lt;/code>为&lt;code>false&lt;/code>, 同时方法返回值不是&lt;code>void&lt;/code>, 会包装成&lt;code>FeignException&lt;/code>抛出; 其他的状态, 通过包装成&lt;code>FeignException&lt;/code>抛出.&lt;/p>
&lt;p>&lt;code>FeignException&lt;/code>是&lt;code>RuntimeException&lt;/code>的实现, 如果没有ignore的话, 会计入熔断器的计算中.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SynchronousMethodHandler&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MethodHandler&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="nf">executeAndDecode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RequestTemplate&lt;/span> &lt;span class="n">template&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">status&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">200&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">status&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">300&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">metadata&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">returnType&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">decode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">decode404&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">status&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">404&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="kt">void&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">metadata&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">returnType&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">decode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">errorDecoder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">decode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configKey&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="ribbon中响应状态码处理">Ribbon中响应状态码处理&lt;/h4>
&lt;p>在Zuul中, 路由使用&lt;code>Ribbon&lt;/code>做负载均衡, 同时使用&lt;code>Hystrix&lt;/code>做断路器, 使用&lt;code>RibbonCommand&lt;/code>接口的实现. &lt;code>RibbonCommand&lt;/code>的实现&lt;strong>并没有对响应编码封装异常, 因此也不会触发熔断器&lt;/strong>.&lt;/p>
&lt;p>&lt;code>AbstractRibbonCommand&lt;/code>是&lt;code>RibbonCommand&lt;/code>的抽象实现, 所有其他实现的父类. 核心&lt;code>run()&lt;/code>方法并没有针对响应编码重新封装异常.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AbstractRibbonCommand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">LBC&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AbstractLoadBalancerAwareClient&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RQ&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RS&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">RQ&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">ClientRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RS&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kd">extends&lt;/span> &lt;span class="n">HystrixCommand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ClientHttpResponse&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">RibbonCommand&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">ClientHttpResponse&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">RequestContext&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RequestContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">RQ&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createRequest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">RS&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">retryableClient&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">client&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">AbstractLoadBalancingClient&lt;/span>
&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">AbstractLoadBalancingClient&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">client&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">isClientRetryable&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">ContextAwareRequest&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">retryableClient&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executeWithLoadBalancer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ribbonResponse&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// Explicitly close the HttpResponse if the Hystrix command timed out to
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// release the underlying HTTP connection held by the response.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isResponseTimedOut&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RibbonHttpResponse&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Observable.error(ex)&lt;/code>会捕获&lt;code>run()&lt;/code>方法抛出的异常.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HystrixCommand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AbstractCommand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">HystrixExecutable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">HystrixInvokableInfo&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">HystrixObservable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="kd">protected&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getExecutionObservable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">defer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Func0&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">call&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">just&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}).&lt;/span>&lt;span class="na">doOnSubscribe&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Action0&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">call&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Save thread on which we get subscribed so that we can interrupt it later if needed
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">executionThread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="hystrix-超时处理">Hystrix 超时处理&lt;/h2>
&lt;p>在Hystrix版本1.4之前, Seamphore策略是不支持超时的. 目前&lt;code>spring-cloud-netflix&lt;/code>的1.4.4中使用的是1.5.12&lt;/p>
&lt;p>如果开启了timeout, HystrixCommand会&lt;code>lift&lt;/code>一个&lt;code>HystrixObservableTimeoutOperator&lt;/code>到&lt;code>Observable&lt;/code>中.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AbstractCommand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">HystrixInvokableInfo&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">HystrixObservable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">executeCommandAndObserve&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">AbstractCommand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">_cmd&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">execution&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">properties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executionTimeoutEnabled&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">execution&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">executeCommandWithSpecifiedIsolation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">_cmd&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">lift&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">HystrixObservableTimeoutOperator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;(&lt;/span>&lt;span class="n">_cmd&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">execution&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">executeCommandWithSpecifiedIsolation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">_cmd&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">execution&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doOnNext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">markEmits&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">doOnCompleted&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">markOnCompleted&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">onErrorResumeNext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">handleFallback&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">doOnEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">setRequestContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个&lt;code>HystrixObservableTimeoutOperator&lt;/code>会添加注册&lt;code>TimeListener&lt;/code>. &lt;code>TimeListener&lt;/code>是以&lt;code>tick&lt;/code>的方式运行, 即启动一个线程延迟&lt;code>executionTimeoutInMilliseconds&lt;/code>运行, 然后每次在&lt;code>executionTimeoutInMilliseconds + n * executionTimeoutInMilliseconds&lt;/code>时运行.&lt;/p>
&lt;p>如果判断操作超时? 看&lt;code>tick&lt;/code>方法的实现, 线程每次运行时, 尝试修改Command的状态从&lt;code>NOT_EXECUTED&lt;/code>到&lt;code>TIMED_OUT&lt;/code>. 如果成功, 说明运行超时. 最后抛出&lt;code>HystrixTimeoutException&lt;/code>异常, 被&lt;code>handleFallback&lt;/code>处理.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// if we can go from NOT_EXECUTED to TIMED_OUT then we do the timeout codepath
&lt;/span>&lt;span class="c1">// otherwise it means we lost a race and the run() execution completed or did not start
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">originalCommand&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isCommandTimedOut&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareAndSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TimedOutStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NOT_EXECUTED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimedOutStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TIMED_OUT&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// report timeout failure
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">originalCommand&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">eventNotifier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">markEvent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HystrixEventType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TIMEOUT&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">originalCommand&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">commandKey&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// shut down the original request
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">unsubscribe&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">HystrixContextRunnable&lt;/span> &lt;span class="n">timeoutRunnable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HystrixContextRunnable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">originalCommand&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">concurrencyStrategy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hystrixRequestContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">child&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">onError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">HystrixTimeoutException&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="n">timeoutRunnable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//if it did not start, then we need to mark a command start for concurrency metrics, and then issue the timeout
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Hystrix工作原理二</title><link>https://atbug.com/hystrix-isolation/</link><pubDate>Sun, 24 Jun 2018 16:18:52 +0000</pubDate><guid>https://atbug.com/hystrix-isolation/</guid><description>
&lt;h2 id="隔离策略">隔离策略&lt;/h2>
&lt;h3 id="线程和线程池">线程和线程池&lt;/h3>
&lt;p>客户端(库, 网络调用等)在各自的线程上运行. 这种做法将他们与调用线程隔开, 因此调用者可以从一个耗时的依赖调用&amp;quot;离开(walk away)&amp;quot;&lt;/p>
&lt;p>Hystrix使用单独的, 每个依赖的线程池作为约束任何给定依赖的一种方式, 因此潜在执行的延迟将仅在该池中使可用线程饱和.&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15280741661560.png" alt="">&lt;/p>
&lt;p>如果不试用线程池可以保护你免受故障的影响, 但是这需要客户端可信任地快速失败(网络连接/读取超时, 重试的配置)并始终表现良好.&lt;/p>
&lt;p>在Hystrix的设计中, Netflix选择试用线程和线程池来达到隔离的目的, 原因有:&lt;/p>
&lt;ul>
&lt;li>很多应用程序调用了由很多不同的团队开发的许多(有时超过1000)不同的后端服务&lt;/li>
&lt;li>每个服务都各自提供了其客户端库&lt;/li>
&lt;li>客户端库不断地在更新&lt;/li>
&lt;li>客户端库可能被添加使用新的网络调用&lt;/li>
&lt;li>客户端库的逻辑中可能包含重试, 数据解析, 缓存(内存或者跨网络)和其他类似的行为&lt;/li>
&lt;li>客户端库更类似于一个黑盒, 其实现细节, 网络访问模式, 默认配置等是对使用者不透明的&lt;/li>
&lt;li>在实际的生产问题中, 根源经常是 &amp;ldquo;有些东西改变了, 配置应该被修改&amp;rdquo; 或者 &amp;ldquo;客户端库修改了逻辑&amp;rdquo;&lt;/li>
&lt;li>即使客户端没有改变, 服务端自身发生了变会员. 这种变化会是客户端设置无效而影响性能特性&lt;/li>
&lt;li>传递依赖会引入其他客户端, 这些客户端不是可预期的, 也可能没有被正确地配置&lt;/li>
&lt;li>大多数网络访问是同步的&lt;/li>
&lt;li>失败和延迟也可能发生在客户端, 不只是网络调用&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15274259800386.png" alt="">&lt;/p>
&lt;h4 id="线程池的优势">线程池的优势&lt;/h4>
&lt;ul>
&lt;li>该应用程序完全免受失控客户端库的保护. 给定依赖库的线程池可以填满而不会影响应用程序的其余部分.&lt;/li>
&lt;li>应用程序可以接受风险低得多的新客户端库. 如果发生问题, 它会与其他依赖库隔离, 不会影响其他的依赖库&lt;/li>
&lt;li>当发生故障的客户端再次健康时, 线程池将进行清理, 应用程序会立即恢复健康的性能, 而不是整个Tomcat容器不堪重负的长时间恢复.&lt;/li>
&lt;li>如果客户端库配置错误, 线程池的运行状况将很快证明这一点(通过增加错误, 延迟, 超时, 拒绝等), 并且你可以在不影响应用程序功能的情况下处理它(通常通过动态属性进行实时修改).&lt;/li>
&lt;li>如果客户端服务改变了性能特征(经常发生会以成为一个问题), 从而导致需要调整属性(增加/减少超时, 更改重试等), 这通过线程池指标(错误, 延迟, 超时, 拒绝), 并且可以在不影响其他客户端, 请求或用户的情况下进行处理.&lt;/li>
&lt;li>除了隔离优势外, 拥有专用线程池还提供了内置并发性, 可用于在同步客户端库之上构建异步特性(类似于Netflix API在Hystrix命令之上构建反应式, 完全异步的Java API).&lt;/li>
&lt;/ul>
&lt;p>简而言之, 由线程池提供的隔离功能可以使客户端库和子系统性能特性的不断变化和动态组合得到适度处理, 而不会造成中断.&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>: 尽管单独的线程提供了隔离, 但你的底层客户端代码也应该有超时 和/或 响应线程中断, 以便它不会无限制地阻塞并使Hystrix线程池饱和.&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15274259098702.png" alt="">&lt;/p>
&lt;p>&lt;strong>线程池的缺点&lt;/strong>&lt;/p>
&lt;p>线程池的主要缺点是增加了计算开销, 每个Command的执行设计到队列, 调度和Command单独运行的线程的上下文的切换.&lt;/p>
&lt;p>在设计这个系统时, Netflix决定接受这种开销, 以换取其提供的好处, 并认为它足够小, 不会对成本或性能产生重大影响,.&lt;/p>
&lt;p>&lt;strong>线程成本&lt;/strong>&lt;/p>
&lt;p>Hystrix在子线程上执行construct()或run()方法时测量延迟, 以及父线程上的总端到端时间. 通过这种方式, 你可以看到Hystrix开销的成本(线程, 指标, 日志记录, 断路器等).&lt;/p>
&lt;p>Netflix API每天使用线程隔离处理10亿多Hystrix Command执行. 每个API实例都有40多个线程池, 每个线程池中有5-20个线程(大多数设置为10).&lt;/p>
&lt;h3 id="信号量">信号量&lt;/h3>
&lt;p>你可以使用信号量(或计数器)来限制对任何给定依赖项的并发调用数量, 而不是使用线程池/队列大小. 这允许Hystrix在不使用线程池的情况下卸载负载. 如果你信任下客户端, 而你只想要卸载, 你可以使用这种方法.&lt;/p>
&lt;p>&lt;code>HystrixCommand&lt;/code>和&lt;code>HystrixObservableCommand&lt;/code>支持2个地方的信号量:&lt;/p>
&lt;p>&lt;strong>回退:&lt;/strong> 当Hystrix执行回退时, 它总是在调用Tomcat线程上执行回退
&lt;strong>执行:&lt;/strong> 如果将属性&lt;code>execution.isolation.strategy&lt;/code>设置为&lt;code>SEMAPHORE&lt;/code>, 则Hystrix将使用信号而不是线程来限制调用该命令的并发父线程的数量.&lt;/p>
&lt;p>你可以通过动态属性来配置这两种信号量的使用, 这些动态属性定义了可以执行多少个并发线程. 在调整线程池大小时, 你应该使用类似的计算来调整它们的大小(内存调用返回的次毫秒时间可以在信号量仅为1或2的情况下执行超过5000rps, 但默认值为10).&lt;/p>
&lt;p>一旦达到限制, 信号量拒绝将开始, 但填充信号量的线程不能离开.&lt;/p>
&lt;p>翻译自&lt;a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">How it Works&lt;/a>&lt;/p></description></item><item><title>Hystrix工作原理一</title><link>https://atbug.com/how-hystrix-works/</link><pubDate>Mon, 04 Jun 2018 08:47:40 +0000</pubDate><guid>https://atbug.com/how-hystrix-works/</guid><description>
&lt;h2 id="运行时的流程图">运行时的流程图&lt;/h2>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15273755001891.png" alt="图片来自netflix hystrix">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>构建&lt;code>HystrixCommand&lt;/code>或者&lt;code>HystrixObservableCommand&lt;/code>对象&lt;/p>
&lt;p>第一步是构建一个HystrixCommand或HystrixObservableCommand对象来代表对依赖服务所做的请求。 将在请求发生时将需要的任何参数传递给构造函数。&lt;/p>
&lt;p>如果依赖的服务预期会返回单一的响应, 构造一个&lt;code>HystrixCommand&lt;/code>对象, 例如:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">HystrixCommand&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HystrixCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">arg1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">arg2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果依赖的服务预期会返回一个发出响应的Observable对象, 则构造一个&lt;code>HystrixObservableCommand&lt;/code>对象, 例如:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">HystrixObservableCommand&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HystrixObservableCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">arg1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">arg2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>执行Command&lt;/p>
&lt;/li>
&lt;li>
&lt;p>响应是否被缓存?&lt;/p>
&lt;p>如果Command的缓存请求被开启, 同时请求的响应在缓存中可用, 缓存的响应被立即以一个&lt;code>Observable&lt;/code>的方式返回.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>断路器是否开启?&lt;/p>
&lt;p>执行Command时, Hystrix会检查断路器(circuti-breaker)是否开始回路(circuit).&lt;/p>
&lt;p>如果回路开启, Hystrix将不会执行Command, 而直接去到流程&lt;strong>8&lt;/strong>: Get the Fallback
如果关闭, 则执行流程&lt;strong>5&lt;/strong>检查是否有足够的容量来运行该命令&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程池/队列/限号量是否满?&lt;/p>
&lt;p>假如与Command相关的线程池和队列(或者信号量, 不适用隔离线程的话)满了, Hystrix将不会执行Command, 而是直接去到流程&lt;strong>8&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HystrixObservableCommand.construct()&lt;/code>或&lt;code>HystrixCommand.run()&lt;/code>&lt;/p>
&lt;p>Hystrix使用下面任一的方式向依赖的服务发出请求:&lt;/p>
&lt;ul>
&lt;li>&lt;code>HystrixCommand.run()&lt;/code> 返回单个响应或抛出异常&lt;/li>
&lt;li>&lt;code>HystrixObservableCommand.construct()&lt;/code> 返回一个发出响应的Observable对象, 或者发送&lt;code>onError&lt;/code>通知&lt;/li>
&lt;/ul>
&lt;p>如果&lt;code>run()&lt;/code>或者&lt;code>construct()&lt;/code>方法执行超过Command的超时设置, 线程会抛出一个&lt;code>TimeoutException&lt;/code>(或者独立的timer线程抛出, 如果Command不是运行在它自己的线程上). 这是Hystrix直接去到流程&lt;strong>8&lt;/strong>. 获取&lt;code>Fallback&lt;/code>, 如果没有cancel/interrup, 则抛弃&lt;code>run()&lt;/code>或&lt;code>construct()&lt;/code>的最终返回值.&lt;/p>
&lt;p>请注意, 没有任何方法可以强制任务线程停止工作, 最佳的方式是Hystrix抛出一个&lt;code>InterruptException&lt;/code>. 如果Hystrix封装的任务忽略&lt;code>InterruptException&lt;/code>, 该任务线程会继续工作, 即使客户端已经收到了一个&lt;code>TimeoutException&lt;/code>. 这种行为会是Hystrix的线程池饱和, 尽管负载&lt;code>正确地流出(correctly shed)&lt;/code>. 大多数Java HTTP客户端库不解释InterruptedExceptions. 因此, 请确保在HTTP客户端上正确配置连接和读/写超时.&lt;/p>
&lt;p>如果Command执行没有超时而返回一个响应, Hystrix在执行某些日志记录和指标报告之后返回这个响应.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>计算电路健康&lt;/p>
&lt;p>Hystrix将成功, 失败, 拒绝服务和超时上报给断路器, 断路器维护着一个计算统计数据的计数器.&lt;/p>
&lt;p>它通过这些统计数据决定断路器何时应该打开, 在哪个点开始短路后续的请求知道恢复期过去, 或者决定在第一次健康检查请求结束后是否要关闭断路器.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>获取&lt;code>Fallback&lt;/code>&lt;/p>
&lt;p>在command执行失败后: 当&lt;code>run()&lt;/code>或&lt;code>construct()&lt;/code>抛出异常(6), command因为断路器开启而短路(4), command的线程池和队列或者计数器处于满负荷(6), 或者执行超时, Hystrix尝试转向你的&lt;code>Fallback&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回成功的响应&lt;/p>
&lt;p>如果Command处理成功, 它将以&lt;code>Obervable&lt;/code>的实行返回response或者responses给调用者. 取决于上面流程2中的Command的执行方式, 该&lt;code>Observable&lt;/code>可能在返回给你之前被转换:&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15279954901603.png" alt="">&lt;/p>
&lt;ul>
&lt;li>execute() - 返回一个&lt;code>Fature&lt;/code>对象, 可以通过调用&lt;code>get()&lt;/code>获取&lt;code>Obervable&lt;/code>返回的单个值&lt;/li>
&lt;li>queue() - 把&lt;code>Observable&lt;/code>转换为&lt;code>BlockingObservable&lt;/code>, 因此&lt;code>BlockingObservable&lt;/code>可以被转换成&lt;code>Future&lt;/code>, 并返回&lt;/li>
&lt;li>observe() - 理解订阅&lt;code>Observable&lt;/code>, 并开始Command的执行流程. 返回一个&lt;code>Observable&lt;/code>, 当订阅它时, 重播返回和通知(replay emissions and notifiactions).&lt;/li>
&lt;li>toObservable() - 不变地返回Observable; 必须订阅它才能真正开始导致执行命令的流程.&lt;/li>
&lt;/ul>
&lt;p>更详细的流程图&lt;a href="https://design.codelytics.io/hystrix/how-it-works">&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="断路器">断路器&lt;/h2>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15279966397767.png" alt="">&lt;/p>
&lt;ol>
&lt;li>假设通过断路器的负载达到了阈值 (HystrixCommandProperties.circuitBreakerRequestVolumeThreshold())&lt;/li>
&lt;li>假设错误百分比超过错误的阈值 (HystrixCommandProperties.circuitBreakerErrorThresholdPercentage())&lt;/li>
&lt;li>断路器状态从关闭变为打开&lt;/li>
&lt;li>打开后, 断路器会短路所有针对该断路器的请求&lt;/li>
&lt;li>过了一段时间后(HystrixCommandProperties.circuitBreakerSleepWindowInMilliseconds()), 下一条请求会被放行(半开状态). 如果请求失败, 断路器重回打开状态(OPEN)并持续一个睡眠窗口(sleep window). 如果成功, 状态变为关闭(CLOSED). 下个请求从逻辑1开始.&lt;/li>
&lt;/ol>
&lt;p>翻译自&lt;a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">Hystrix Wiki - How it works&lt;/a>&lt;/p></description></item><item><title>解决rsyslogd资源占用率高问题</title><link>https://atbug.com/rsyslogd-high-cpu-trouble-shooting/</link><pubDate>Fri, 01 Jun 2018 09:32:28 +0000</pubDate><guid>https://atbug.com/rsyslogd-high-cpu-trouble-shooting/</guid><description>
&lt;h1 id="rsyslogd资源占用高问题记录">rsyslogd资源占用高问题记录&lt;/h1>
&lt;p>问题:
&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15277280296373.jpg" alt="">&lt;/p>
&lt;p>openshift集群安装在&lt;code>esxi&lt;/code>的虚拟机上. 各个节点出现问题, 集群响应很慢.&lt;/p>
&lt;ul>
&lt;li>&lt;code>kswapd0&lt;/code>进程cpu 90%多.&lt;/li>
&lt;li>&lt;code>rsyslogd&lt;/code>进程内存 90%多.&lt;/li>
&lt;/ul>
&lt;p>**先上总结: **&lt;/p>
&lt;p>&lt;code>system-journal&lt;/code>服务监听&lt;code>/dev/log&lt;/code>socket获取日志, 保存在内存中, 并间歇性的写入&lt;code>/var/log/journal&lt;/code>目录中.&lt;/p>
&lt;p>&lt;code>rsyslog&lt;/code>服务启动后监听&lt;code>/run/systemd/journal/syslog&lt;/code>socket获取&lt;code>syslog&lt;/code>类型日志, 并写入&lt;code>/var/log/messages&lt;/code>文件中. 获取日志时需要记录日志条目的&lt;code>position&lt;/code>到&lt;code>/var/lib/rsyslog/imjournal.state&lt;/code>文件中.&lt;/p>
&lt;p>可能是虚拟机系统安装问题, 导致没有创建&lt;code>/var/lib/rsyslog&lt;/code>. &lt;code>rsyslog&lt;/code>将异常日志写入&lt;code>/dev/log&lt;/code>socket中.&lt;/p>
&lt;p>这样就导致了死循环, &lt;code>rsyslog&lt;/code>因为要打开&lt;code>/var/log/messages&lt;/code>并写入日志, 消耗cpu, 内存还有磁盘I/O.&lt;/p>
&lt;h2 id="诊断步骤">诊断步骤:&lt;/h2>
&lt;h3 id="rsyslog">rsyslog&lt;/h3>
&lt;p>重启&lt;code>rsyslog&lt;/code>服务&lt;/p>
&lt;p>重启之后内存得到释放, 但是rsyslogd进程cpu跑到90%多, 且内存在持续升高.&lt;/p>
&lt;p>检查服务状态发现进程一直在报错:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">fopen() failed: &amp;#39;Permission denied&amp;#39;, path: &amp;#39;/imjournal.state.tmp&amp;#39;
[try http://www.rsyslog.com/e/2013 ]
fopen() failed: &amp;#39;Permission denied&amp;#39;, path: &amp;#39;/imjournal.state.tmp&amp;#39;
[try http://www.rsyslog.com/e/2013 ]
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查&lt;code>/etc/rsyslog.conf&lt;/code>中的&lt;code>WorkDirectory&lt;/code>行是没有被注释的. 检查默认工作目录&lt;code>/var/lib/rsyslog&lt;/code>, 发现目录不存在.&lt;/p>
&lt;p>因此创建&lt;code>/var/lib/rsyslog&lt;/code>目录, 并赋予&lt;code>600&lt;/code>权限.&lt;/p>
&lt;p>再次重启&lt;code>rsyslog&lt;/code>服务, 观察一段时间没有错误抛出, &lt;code>/var/lib/rsyslog&lt;/code>目录下创建了&lt;code>imjournal.state&lt;/code>文件. 检查文件, 内容不断被刷新. 但是占用内存还在升高, &lt;code>/var/log/messages&lt;/code>文件中还有错误信息写入. 但是错误日志的时间是比较早的.&lt;/p>
&lt;p>再次检查&lt;code>/etc/rsyslog.conf&lt;/code>配置, 有一行配置:&lt;/p>
&lt;blockquote>
&lt;p># Include all config files in /etc/rsyslog.d/
$IncludeConfig /etc/rsyslog.d/*.conf&lt;/p>
&lt;/blockquote>
&lt;p>目录中有文件&lt;code>/etc/rsyslog.d/listen.conf&lt;/code>, 内容为&lt;code>$SystemLogSocketName /run/systemd/journal/syslog&lt;/code>.&lt;/p>
&lt;p>分析:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/run&lt;/code>是linux内存中的数据&lt;/li>
&lt;li>&lt;code>journal&lt;/code>相关服务:&lt;code>systemd-journald.service&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="systemd-journaldservice">systemd-journald.service&lt;/h3>
&lt;p>&lt;code>systemd-journald&lt;/code>是用来协助&lt;code>rsyslog&lt;/code>记录系统启动服务和服务启动失败的情况等等. &lt;code>systemd-journald&lt;/code>使用内存保存记录, 系统重启记录会丢失. 所有还要用&lt;code>rsyslog&lt;/code>来记录分类信息, 如上面&lt;code>/etc/rsyslog.d/listen.conf&lt;/code>中的&lt;code>syslog&lt;/code>分类.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">~ systemctl list-sockets
LISTEN UNIT ACTIVATES
....
/dev/log systemd-journald.socket systemd-journald.service
/run/systemd/journal/socket systemd-journald.socket systemd-journald.service
/run/systemd/journal/stdout systemd-journald.socket systemd-journald.service
....
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看journal的配置&lt;code>/etc/systemd/jounal.conf&lt;/code>, 最终还是会持久化到硬盘上的&lt;code>/var/log/journal&lt;/code>目录中. 每个文件的大小是&lt;code>10M&lt;/code>, 最多使用&lt;code>8G&lt;/code>的空间, 同步间隔&lt;code>1s&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">[Journal]
Storage=persistent
Compress=True
#Seal=yes
#SplitMode=uid
SyncIntervalSec=1s
RateLimitInterval=1s
RateLimitBurst=10000
SystemMaxUse=8G
SystemMaxFileSize=10M
#RuntimeKeepFree=
#RuntimeMaxFileSize=
MaxRetentionSec=1month
ForwardToSyslog=False
#ForwardToKMsg=no
#ForwardToConsole=no
ForwardToWall=False
#TTYPath=/dev/console
#MaxLevelStore=debug
#MaxLevelSyslog=debug
#MaxLevelKMsg=notice
#MaxLevelConsole=info
#MaxLevelWall=emerg
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查&lt;code>/var/log/journal&lt;/code>目录, 发现里面文件很多, 每个大小为&lt;code>10m&lt;/code>. 清空该目录并重启&lt;code>rsyslog&lt;/code>, 观察一段时间后一切正常.&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/solutions/2795451">Redhat&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wizardforcel.gitbooks.io/vbird-linux-basic-4e/content/160.html">systemd-journald.service 简介&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://unix.stackexchange.com/questions/362681/systemd-journal-what-is-the-relation-of-dev-log-and-syslog">StackExchange&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Kubernetes中的Nginx动态解析</title><link>https://atbug.com/nginx-dynamic-domain-parse-in-kubernetes/</link><pubDate>Wed, 30 May 2018 12:10:32 +0000</pubDate><guid>https://atbug.com/nginx-dynamic-domain-parse-in-kubernetes/</guid><description>
&lt;h3 id="背景">背景&lt;/h3>
&lt;p>Nginx运行在kubernets中, 反向代理service提供服务.&lt;/p>
&lt;p>kubernetes版本v1.9.1+a0ce1bc657.&lt;/p>
&lt;h3 id="问题">问题:&lt;/h3>
&lt;p>配置如下:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">location ^~/info {
proxy_pass: http://serviceName:port;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>删除并重建Service的时候, nginx会出现下面的问题:&lt;/p>
&lt;blockquote>
&lt;p>connect() failed (113: No route to host) &amp;hellip; upstream: &amp;ldquo;xxxxx&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h3 id="分析">分析&lt;/h3>
&lt;p>通过google发现, 是nginx的dns解析方案的问题.&lt;/p>
&lt;p>nginx官方的说明:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>If the domain name can’t be resolved, NGINX fails to start or reload its configuration.&lt;/li>
&lt;li>NGINX caches the DNS records until the next restart or configuration reload, ignoring the records’ TTL values.&lt;/li>
&lt;li>We can’t specify another load‑balancing algorithm, nor can we configure passive health checks or other features defined by parameters to the server directive, which we’ll describe in the next section.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>意思是说, nginx在启动的时候就会解析&lt;code>proxy_pass&lt;/code>后的域名, 并把&lt;code>ip&lt;/code>缓存下来, 而且没有TTL. 只有在restart或者reload的时候才会再次解析.&lt;/p>
&lt;h3 id="解决方案">解决方案&lt;/h3>
&lt;p>使用nginx pod的解析服务器作为resolver:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#nginx conf
resolver NAME_SERVER valid=30s ipv6=off;
set $service &amp;#34;http://serviceName:port&amp;#34;;
location ^~/info {
proxy_pass: $service;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用shell获取pod中使用的解析服务器&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">NAME_SERVER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>cat /etc/resolv.conf &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;nameserver&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $2}&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> tr &lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:
&lt;a href="https://stackoverflow.com/questions/17685674/nginx-proxy-pass-with-remote-addr">Nginx proxy_pass with $remote_addr&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://tenzer.dk/nginx-with-dynamic-upstreams/">Nginx with dynamic upstreams&lt;/a>&lt;/p>
&lt;h3 id="另一个问题">另一个问题&lt;/h3>
&lt;blockquote>
&lt;p>serviceName could not be resolved (3: Host not found)&lt;/p>
&lt;/blockquote>
&lt;p>service的短名称是解析不了的, 需要使用serviceName.namespace.svc.clusterName.&lt;/p></description></item><item><title>Spring Cloud Ribbon 详解</title><link>https://atbug.com/spring-cloud-ribbon-breakdown-1/</link><pubDate>Sat, 05 May 2018 11:18:05 +0000</pubDate><guid>https://atbug.com/spring-cloud-ribbon-breakdown-1/</guid><description>
&lt;p>客户端负载均衡, Ribbon的核心概念是命名的客户端.&lt;/p>
&lt;h2 id="使用">使用&lt;/h2>
&lt;h3 id="引入ribbon依赖和配置">引入Ribbon依赖和配置&lt;/h3>
&lt;p>加入&lt;code>spring-cloud-starter-netflix-ribbon&lt;/code>依赖&lt;/p>
&lt;h3 id="代码中使用ribbonclient注解">代码中使用RibbonClient注解&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@RibbonClient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">configuration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FooConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TestConfiguration&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span> &lt;span class="kd">protected&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FooConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZonePreferenceServerListFilter&lt;/span> &lt;span class="nf">serverListFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ZonePreferenceServerListFilter&lt;/span> &lt;span class="n">filter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZonePreferenceServerListFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">filter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setZone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;myTestZone&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">filter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">IPing&lt;/span> &lt;span class="nf">ribbonPing&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">PingUrl&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ribbon客户端的配置, 如果不指定会使用默认的实现:&lt;/p>
&lt;ul>
&lt;li>IClientConfig 客户端相关配置&lt;/li>
&lt;li>IRule 定义负载均衡策略&lt;/li>
&lt;li>IPing 定义如何ping目标服务实例来判断是否存活, ribbon使用单独的线程每隔一段时间(默认10s)对本地缓存的ServerList做一次检查&lt;/li>
&lt;li>ServerList&lt;!-- raw HTML omitted --> 定义如何获取服务实例列表. 两种实现基于配置的&lt;code>ConfigurationBasedServerList&lt;/code>和基于Eureka服务发现的&lt;code>DiscoveryEnabledNIWSServerList&lt;/code>&lt;/li>
&lt;li>ServerListFilter&lt;!-- raw HTML omitted --> 用来使用期望的特征过滤静态配置动态获得的候选服务实例列表. 若未提供, 默认使用&lt;code>ZoneAffinityServerListFilter&lt;/code>&lt;/li>
&lt;li>ILoadBalancer 定义了软负载均衡器的操作的接口. 一个典型的负载均衡器至少需要一组用来做负载均衡的服务实例, 一个标记某个服务实例不在旋转中的方法, 和对应的方法调用从实例列表中选出某一个服务实例.&lt;/li>
&lt;li>ServerListUpdater DynamicServerListLoadBalancer用来更新实例列表的策略(推&lt;code>EurekaNotificationServerListUpdater&lt;/code>/拉&lt;code>PollingServerListUpdater&lt;/code>, 默认是拉)&lt;/li>
&lt;/ul>
&lt;h2 id="分析">分析&lt;/h2>
&lt;p>类结构&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/Ribbon.png" alt="Ribbon">&lt;/p>
&lt;h3 id="实现">实现&lt;/h3>
&lt;p>实际使用中, 服务调用使用RestTemplate, 请求地址为&lt;code>http://&amp;lt;serviceName&amp;gt;/&amp;lt;path&amp;gt;&lt;/code>, 如&lt;code>http://foo/&lt;/code>
通过&lt;code>@RibbonClient&lt;/code>注解为服务创建ribbon客户端, 名字为方法名. RestTemplate发送请求的时候, 请求会被&lt;code>LoadBalancerInterceptor&lt;/code>拦截到, 使用服务对应的ribbon客户端. Ribbon客户端的&lt;code>LoadBalancer&lt;/code>会从&lt;code>ServerList&lt;/code>中根据&lt;code>IRule&lt;/code>的规则选择某个服务实例作为请求对象. &lt;code>ServerList&lt;/code>有动态的实现, 更新列表时会使用&lt;code>ServerListFilter&lt;/code>进行过滤.&lt;/p>
&lt;h4 id="ribbonclient注解">RibbonClient注解&lt;/h4>
&lt;p>从注释上&lt;code>@RibbonClient&lt;/code>为一个ribbon客户端声明配置信息. 把这个注解加在任何&lt;code>@Configuration&lt;/code>标注的类上, 然后注入&lt;code>SpringClientFactory&lt;/code>来访问创建的客户端.&lt;/p>
&lt;p>从代码上看&lt;code>@RibbonClient&lt;/code>引入了&lt;code>RibbonClientConfigurationRegistrar&lt;/code>. &lt;code>RibbonClientConfigurationRegistrar&lt;/code>实现了&lt;code>ImportBeanDefinitionRegistrar&lt;/code>接口, 在&lt;code>@Configuration&lt;/code>的解析极端调用接口的&lt;code>registerBeanDefinitions&lt;/code>方法, 为ribbon客户端创建BeanDefinition
使用&lt;code>name/value&lt;/code>和&lt;code>configuration&lt;/code>创建一个&lt;code>BeanDefinition&lt;/code>. Definition的名为&lt;code>&amp;lt;name&amp;gt;.RibbonClientSpecification&lt;/code>, class为&lt;code>RibbonClientSpecification&lt;/code>.&lt;/p>
&lt;p>&lt;code>FooConfiguration.class&lt;/code>也要使用&lt;code>@Configuration&lt;/code>注解, 然后通过&lt;code>RibbonClientConfigurationRegistrar&lt;/code>关联到Ribbon客户端的BeanDefinition. 所以&lt;strong>不能把FooConfiguration放到@ComponentScan的上下文中, 同样@SpringBootApplication也不行. 必要时使用exclude排除&lt;/strong>, 否则会变成所有Ribbon客户端共享.&lt;/p>
&lt;p>&lt;code>RibbonAutoConfiguration&lt;/code>中在创建&lt;code>SpringClientFactory&lt;/code>bean时, 会注入这些&lt;code>RibbonClientSpecification&lt;/code>. &lt;code>SpringClientFactory&lt;/code>继承了类&lt;code>NamedContextFactory&lt;/code>. 从注释看&lt;code>NamedContextFactory&lt;/code>可以创建一组子上下文, 每个子上下文中可以使用一组的Specification来定义bean. 对于Ribbon来说, 每个ribbon客户端各自为一个子上下文, &lt;code>@RibbonClient&lt;/code>的&lt;code>configuration&lt;/code>指定的配置, 就是用来构建该子上下文的配置, 最终被用来构建ribbon客户端. 这些上下文有共同的父上下文, 即&lt;code>ApplicationContext&lt;/code>. 这就是为什么上面提到的&lt;code>FooConfiguration&lt;/code>不能置于&lt;code>ApplicationContext&lt;/code>中, 否则会被所有的Ribbon客户端共享配置.&lt;/p>
&lt;h4 id="loadbalancerautoconfiguration配置类">LoadBalancerAutoConfiguration配置类&lt;/h4>
&lt;p>通过&lt;code>RibbonAutoConfiguration&lt;/code>引入, 定义了几个重要的bean:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>LoadBalancerRequestFactory&lt;/code>: 1) 将Http请求封装成&lt;code>ServiceRequestWrapper&lt;/code>. &lt;code>ServiceRequestWrapper&lt;/code>继承并重写了&lt;code>HttpRquestWrapper&lt;/code>的&lt;code>getURI&lt;/code>方法: 调用&lt;code>LoadBalancerClient&lt;/code>的&lt;code>reconstructURI&lt;/code>方法,创建实际请求的地址. 2) 如果有提供&lt;code>LoadBalancerRequestTransformer&lt;/code>的实例, 则使用这些实例对相求进行响应的转换.
&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15254831654150.jpg" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>LoadBalancerInterceptor&lt;/code>: Http请求拦截器, 将请求的&lt;code>host&lt;/code>作为&lt;code>serviceName&lt;/code>并使用&lt;code>LoadBalancerRequestFactory&lt;/code>封装请求, 调用&lt;code>LoadBalancerClient&lt;/code>的&lt;code>execute&lt;/code>方法, 发送请求到真实的服务实例地址, 返回响应&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>RestTemplateCustomizer&lt;/code>: 提供一个&lt;code>RestTemplateCustomizer&lt;/code>的匿名类实现, 为所有的RestTemplate实例添加一个&lt;code>LoadBalancerInterceptor&lt;/code>拦截器&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="ribbonautoconfiguration配置类">RibbonAutoConfiguration配置类&lt;/h4>
&lt;p>通过spring.factories引入, &lt;code>RibbonAutoConfiguration&lt;/code>定义了几个重要的bean:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>SpringClientFactory&lt;/code>: 使用&lt;code>@RibbonClient&lt;/code>注解引入的ribbon客户端的配置, 构建ribbon客户端的子上下文, 初始化ribbon客户端bean. 四个get方法, 分别返回对应&lt;strong>service&lt;/strong>的&lt;code>IClient&lt;/code>, &lt;code>ILoadBalancer&lt;/code>, &lt;code>IClientConfig&lt;/code>, &lt;code>RibbonLoadBalancerContext&lt;/code>实例.
&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15254844516099.jpg" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>LoadBalancerClient&lt;/code>: 使用Spring Cloud提供的实现&lt;code>RibbonLoadBalancerClient&lt;/code>. 通过&lt;code>SpringClientFactory&lt;/code>创建一个&lt;code>ILoadBalancer&lt;/code>实例, 通过&lt;code>ILoadBalancer&lt;/code>返回一个&lt;code>Server&lt;/code>实例. 使用&lt;code>Server&lt;/code>实例.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>reconstructURI(): 通过&lt;code>SpringClientFactory&lt;/code>获取该服务ribbon客户端子上下文&lt;code>RibbonLoadBalancerContext&lt;/code>对象, 调用&lt;code>RibbonLoadBalancerContext&lt;/code>的&lt;code>reconstructURIWithServer&lt;/code>方法构建最终的请求地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>choose(): 通过&lt;code>SpringClientFactory&lt;/code>获取该服务的服务均衡器, 使用负载均衡器的&lt;code>IRule&lt;/code>返回服务实例.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>execute(): 执行最终的请求, 并记录状态: &lt;code>ServerStats&lt;/code>和&lt;code>Stopwatch&lt;/code>&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15254847309993.jpg" alt="">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>KVM安装手册</title><link>https://atbug.com/kvm-installation-note/</link><pubDate>Thu, 12 Apr 2018 12:45:15 +0000</pubDate><guid>https://atbug.com/kvm-installation-note/</guid><description>
&lt;h2 id="添加虚拟机流程">添加虚拟机流程：&lt;/h2>
&lt;pre>&lt;code>1. 配置网络
2. 配置存储池
3. 上传镜像
4. 安装虚拟机，指定配置
&lt;/code>&lt;/pre>
&lt;h3 id="安装kvm虚拟机">安装KVM虚拟机&lt;/h3>
&lt;h4 id="1-关闭防火墙selinux">1. 关闭防火墙，selinux&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># service iptables stop&lt;/span>
&lt;span class="c1"># setenforce 0 临时关闭&lt;/span>
&lt;span class="c1"># chkconfig NetworkManager off&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-安装kvm虚拟机">2. 安装kvm虚拟机&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># yum install kvm libvirt libvirt-devel python-virtinst python-virtinst qemu-kvm virt-viewer bridge-utils virt-top libguestfs-tools ca-certificates audit-libs-python device-mapper-libs virt-install&lt;/span>
&lt;span class="c1"># 启动服务&lt;/span>
&lt;span class="c1"># service libvirtd restart&lt;/span>
下载virtio-win-1.5.2-1.el6.noarch.rpm 如果不安装window虚拟机或者使用带virtio驱动的镜像可以不用安装
&lt;span class="c1"># rpm -ivh virtio-win-1.5.2-1.el6.noarch.rpm&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-libvirt在管理本地或远程hypervisor时的表现形式如下">3. Libvirt在管理本地或远程Hypervisor时的表现形式如下。&lt;/h4>
&lt;p>在libvirt内部管理了五部分：&lt;/p>
&lt;ul>
&lt;li>节点：所谓的节点就是我们的物理服务器，一个服务器代表一个节点，上边存放着Hyper和Domain&lt;/li>
&lt;li>Hypervisor：即VMM，指虚拟机的监控程序，在KVM中是一个加载了kvm.ko的标准Linux系统。&lt;/li>
&lt;li>域（Domain）：指虚拟机，一个域代表一个虚拟机（估计思路来源于Xen的Domain0）&lt;/li>
&lt;li>存储池（Storage Pool）：存储空间，支持多种协议和网络存储。作为虚拟机磁盘的存储源。&lt;/li>
&lt;li>卷组（Volume）：虚拟机磁盘在Host上的表现形式。
上边的五部分，我们必须使用的是前三个，因为很多时候根据业务规则或应用的灵活性并没有使用卷组（其实就是有了编制的虚拟磁盘文件），也就没有必要使用存储池。&lt;/li>
&lt;/ul>
&lt;h3 id="配置">配置&lt;/h3>
&lt;h4 id="1-修改网络配置">1. 修改网络配置&lt;/h4>
&lt;p>方案一 (推荐)&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">brctl addbr br0 &amp;amp;&amp;amp; brctl addif br0 em1 &amp;amp;&amp;amp; brctl stp br0 on &amp;amp;&amp;amp; ifconfig em1 0.0.0.0 &amp;amp;&amp;amp; ifconfig br0 192.168.1.31 netmask 255.255.255.0 &amp;amp;&amp;amp; route add default gw 192.168.1.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>方案二&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/wh211212/article/details/54141412">参考&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># vim /etc/sysconfig/network-scripts/ifcfg-br0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>DEVICE=br0
TYPE=Bridge
BOOTPROTO=static
BROADCAST=192.168.1.255
IPADDR=192.168.1.10
NETMASK=255.255.255.0
NETWORK=192.168.1.0
GATEWAY=192.168.1.1
DNS1=119.29.29.29
ONBOOT=yes&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># vim /etc/sysconfig/network-scripts/ifcfg-em1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>DEVICE=em1
BOOTPROTO=none
ONBOOT=yes
BRIDGE=br0&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># vim /etc/sysconfig/network-scripts/ifcfg-bond0 &lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>DEVICE=bond0
TYPE=Ethernet
NAME=bond0
BONDING_MASTER=yes
BOOTPROTO=none
BRIDGE=br0
ONBOOT=yes
BONDING_OPTS=&amp;ldquo;mode=5 miimon=100&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://www.jianshu.com/p/110b60c14a8b">方案三&lt;/a>&lt;/p>
&lt;h4 id="3-关闭宿主机的gso与tso功能">3. 关闭宿主机的GSO与TSO功能&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># ethtool -K em1 gso off&lt;/span>
&lt;span class="c1"># ethtool -K em1 tso off&lt;/span>
&lt;span class="c1"># systemctl restart network&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-创建基于文件夹的存储池目录">4. 创建基于文件夹的存储池（目录）&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># mkdir -p /home/vmdisk&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>定义存储池与其目录&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-define-as vmDiskPool --type dir --target /home/vmdisk&lt;/span>
Pool vmDiskPool defined
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建已定义的存储池&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-build vmDiskPool&lt;/span>
Pool vmDiskPool built
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看已定义的存储池，存储池不激活无法使用&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-list --all&lt;/span>
Name State Autostart
-----------------------------------------
vmDiskPool inactive no
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看存储卷信息&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-info vmDiskPool&lt;/span>
Name: vmDiskPool
UUID: 3fc996c4-9bfa-7fdc-2960-445e4c551855
State: inactive
Persistent: yes
Autostart: no
&lt;/code>&lt;/pre>&lt;/div>&lt;p>激活并自动启动已定义的存储池&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-autostart vmDiskPool&lt;/span>
Pool vmDiskPool marked as autostarted
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动存储卷&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-start vmDiskPool&lt;/span>
Pool vmDiskPool started
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再次查看存储卷信息&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-info vmDiskPool&lt;/span>
Name: vmDiskPool
UUID: 3fc996c4-9bfa-7fdc-2960-445e4c551855
State: running
Persistent: yes
Autostart: yes
Capacity: 39.25 GiB
Allocation: 47.89 MiB
Available: 39.20 GiB
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-在存储池中创建虚拟机存储卷创建卷">3. 在存储池中创建虚拟机存储卷（创建卷）&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh vol-create-as vmDiskPool linux_vm0.qcow2 300G --format qcow2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看存储卷&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ll /home/vmdisk/
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="存储池相关管理命令">存储池相关管理命令&lt;/h5>
&lt;p>删除存储池中的存储卷&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh vol-delete --pool vmDiskPool linux_vm1.qcow2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>取消激活存储池&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-destroy vmDiskPool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>取消定义存储池&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-undefine vmDiskPool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>删除存储池&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-delete vmDiskPool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-安装虚拟机">4. 安装虚拟机&lt;/h4>
&lt;p>bridge网络模式&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virt-install \&lt;/span>
--virt-type kvm &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--os-type&lt;span class="o">=&lt;/span>linux &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--os-variant&lt;span class="o">=&lt;/span>RHEL7 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--name&lt;span class="o">=&lt;/span>vm0 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--memory &lt;span class="m">16384&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--vcpus &lt;span class="m">6&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--disk &lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>/home/vmdisk/linux_vm0.qcow2,format&lt;span class="o">=&lt;/span>qcow2,bus&lt;span class="o">=&lt;/span>virtio &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--location /root/CentOS-7-x86_64-Minimal-1708.iso &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--graphics none &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--network &lt;span class="nv">bridge&lt;/span>&lt;span class="o">=&lt;/span>br0,model&lt;span class="o">=&lt;/span>virtio &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--autostart &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--boot cdrom,hd,menu&lt;span class="o">=&lt;/span>on &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--console pty,target_type&lt;span class="o">=&lt;/span>serial &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--extra-args &lt;span class="s1">&amp;#39;console=ttyS0,115200n8 serial&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--debug
&lt;/code>&lt;/pre>&lt;/div>&lt;p>NAT网络模式&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virt-install --name=test --ram 512 --vcpus=1 -f /data/kvm/vm/test.qcow2 --cdrom /data/iso/CentOS-6.5-x86_64-bin-DVD1.iso --graphics vnc,listen=0.0.0.0,port=5988, --network network=default,model=virtio --force --accelerate --autostart --boot cdrom,hd,menu=on&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装window主机&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virt-install --name=window_24 --ram 12288 --vcpus 4 -c /data/iso/windows2008.iso --disk path=/usr/share/virtio-win/virtio-win-1.5.2.iso,device=cdrom --disk path=/data/kvm/vm/window_24.img,format=qcow2,bus=virtio --network bridge=br0,model=virtio --vnc --vncport=5924 --vnclisten=0.0.0.0 --force --autostart --os-type=windows --accelerate --boot cdrom,hd,menu=on&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置虚拟机网络&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># vi /etc/sysconfig/network-scripts/ifcfg-eth0
TYPE=Ethernet
BOOTPROTO=static
DEFROUTE=yes
PEERDNS=yes
PEERROUTES=yes
IPV4_FAILURE_FATAL=no
NAME=eth0
DEVICE=eth0
ONBOOT=yes
IPADDR=192.168.1.16
PREFIX=24
GATEWAY=192.168.1.1
DNS1=119.29.29.29
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="5-启动">5. 启动&lt;/h4>
&lt;p>使用virsh list &amp;ndash;all查看已安装的kvm&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># virsh list --all&lt;/span>
Id Name State
----------------------------------------------------
&lt;span class="m">5&lt;/span> &lt;span class="nb">test&lt;/span> running
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="6-动态调整cpu个数">6. 动态调整cpu个数&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh setvcpus test --maximum 4 --config #设置test的最大cpu颗数&lt;/span>
&lt;span class="c1"># virsh setvcpus test 3 #增加到3个CPU&lt;/span>
注：使用上面命令修改，虚拟机重启修改的配置会丢失
&lt;span class="c1"># virsh edit test #修改CPU个数再保存配置，这样重启之后也会生效&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="7-动态调整mem容量">7. 动态调整mem容量&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh setmaxmem test 2G --config #设置最大内存&lt;/span>
&lt;span class="c1"># virsh setmem test 800M --config #重启后生效&lt;/span>
&lt;span class="c1"># virsh setmem test 800M --config --live #马上生效&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="8-查看虚拟化客户机的资源使用情况">8. 查看虚拟化客户机的资源使用情况&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virt-top&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="9-一些扩展命令">9. 一些扩展命令&lt;/h4>
&lt;p>virsh命令行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh list #显示本地活动虚拟机&lt;/span>
&lt;span class="c1"># virsh list --all #显示本地所有的虚拟机（活动的+不活动的）&lt;/span>
&lt;span class="c1"># virsh define test.xml #通过配置文件定义一个虚拟机（这个虚拟机还不是活动的）&lt;/span>
&lt;span class="c1"># virsh start test #启动名字为test的非活动虚拟机&lt;/span>
&lt;span class="c1"># virsh create test.xml #创建虚拟机（创建后，虚拟机立即执行，成为活动主机）&lt;/span>
&lt;span class="c1"># virsh suspend test #暂停虚拟机&lt;/span>
&lt;span class="c1"># virsh resume test #启动暂停的虚拟机&lt;/span>
&lt;span class="c1"># virsh shutdown test #正常关闭虚拟机&lt;/span>
&lt;span class="c1"># virsh destroy test #强制关闭虚拟机&lt;/span>
&lt;span class="c1"># virsh undefine test #清除虚拟机&lt;/span>
&lt;span class="c1"># virsh dominfo test #显示虚拟机的基本信息&lt;/span>
&lt;span class="c1"># virsh domname 2 #显示id号为2的虚拟机名&lt;/span>
&lt;span class="c1"># virsh domid test #显示虚拟机id号&lt;/span>
&lt;span class="c1"># virsh domuuid test #显示虚拟机的uuid&lt;/span>
&lt;span class="c1"># virsh domstate test #显示虚拟机的当前状态&lt;/span>
&lt;span class="c1"># virsh dumpxml test #显示虚拟机的当前配置文件（可能和定义虚拟机时的配置不同，因为当虚拟机启动时，需要给虚拟机分配id号、uuid、vnc端口号等等）&lt;/span>
&lt;span class="c1"># virsh setmem test 512000 #给不活动虚拟机设置内存大小&lt;/span>
&lt;span class="c1"># virsh setmaxmem test 1024000 #设定内存上限&lt;/span>
&lt;span class="c1"># virsh setvcpus test 4 #给不活动虚拟机设置cpu个数&lt;/span>
&lt;span class="c1"># virsh edit test #编辑配置文件（一般是在刚定义完虚拟机之后）&lt;/span>
&lt;span class="c1"># virsh vcpuinfo test #显示客户端的虚拟 CPU 信息。&lt;/span>
&lt;span class="c1"># virsh vcpupin test #控制客户端的虚拟 CPU 亲和性。&lt;/span>
&lt;span class="c1"># virsh domblkstat test #显示正在运行的客户端的块设备统计。&lt;/span>
&lt;span class="c1"># virsh domifstat test #显示正在运行的客户端的网络接口统计。&lt;/span>
&lt;span class="c1"># virsh attach-device test #使用 XML 文件中的设备定义在客户端中添加设备。&lt;/span>
&lt;span class="c1"># virsh attach-disk test #在客户端中附加新磁盘设备。&lt;/span>
&lt;span class="c1"># virsh attach-interface test #在客户端中附加新网络接口。&lt;/span>
&lt;span class="c1"># virsh detach-device test #从客户端中分离设备，使用同样的 XML 描述作为命令attach-device&lt;/span>
&lt;span class="c1"># virsh detach-disk test #从客户端中分离磁盘设备。&lt;/span>
&lt;span class="c1"># virsh detach-interface #从客户端中分离网络接口。&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="问题">问题&lt;/h2>
&lt;blockquote>
&lt;p>Could not open &amp;lsquo;/root/CentOS-7-x86_64-Minimal-1708.iso&amp;rsquo;: Permission denied&lt;/p>
&lt;/blockquote>
&lt;p>修改&lt;code>/etc/libvirt/qemu.conf&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#取消注释&lt;/span>
&lt;span class="nv">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;root&amp;#34;&lt;/span>
&lt;span class="nv">group&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;root&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>重启libvirtd&lt;/p>
&lt;p>&lt;code>service libvirtd restart&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>error: 操作失败: 这个域有活跃控制台会话&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ps -ef&lt;span class="p">|&lt;/span>grep &lt;span class="s1">&amp;#39;console VMNAME|grep -v &amp;#39;&lt;/span>grep&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="c1">#然后kill掉相应的进行&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>启用Jenkins CLI</title><link>https://atbug.com/jenkins-cli-enable/</link><pubDate>Mon, 09 Apr 2018 11:16:38 +0000</pubDate><guid>https://atbug.com/jenkins-cli-enable/</guid><description>
&lt;p>Jenkins CLI提供了SSH和Client模式.&lt;/p>
&lt;p>Docker运行Jenkins&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">jenkins&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jenkins/jenkins:alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">8080&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">50000&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">50000&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">46059&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">46059&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/Users/addo/DevApps/Docker/data/jenkins:/var/jenkins_home&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>note: 以为是docker运行, ssh端口设置选用了固定端口.&lt;/p>
&lt;h3 id="client">Client&lt;/h3>
&lt;p>从&lt;code>http://JENKINS_URL/cli&lt;/code>页面下载client jar&lt;/p>
&lt;p>使用方法:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">java -jar jenkins-cli.jar -s http://localhost:8080/ &lt;span class="nb">help&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>构建:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">java -jar jenkins-cli.jar -s http://localhost:8080/ build JOB &lt;span class="o">[&lt;/span>-c&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-f&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-p&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-r N&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-s&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-v&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-w&lt;span class="o">]&lt;/span>
Starts a build, and optionally waits &lt;span class="k">for&lt;/span> a completion.
Aside from general scripting use, this &lt;span class="nb">command&lt;/span> can be
used to invoke another job from within a build of one job.
With the -s option, this &lt;span class="nb">command&lt;/span> changes the &lt;span class="nb">exit&lt;/span> code based on
the outcome of the build &lt;span class="o">(&lt;/span>&lt;span class="nb">exit&lt;/span> code &lt;span class="m">0&lt;/span> indicates a success&lt;span class="o">)&lt;/span>
and interrupting the &lt;span class="nb">command&lt;/span> will interrupt the job.
With the -f option, this &lt;span class="nb">command&lt;/span> changes the &lt;span class="nb">exit&lt;/span> code based on
the outcome of the build &lt;span class="o">(&lt;/span>&lt;span class="nb">exit&lt;/span> code &lt;span class="m">0&lt;/span> indicates a success&lt;span class="o">)&lt;/span>
however, unlike -s, interrupting the &lt;span class="nb">command&lt;/span> will not interrupt
the job &lt;span class="o">(&lt;/span>&lt;span class="nb">exit&lt;/span> code &lt;span class="m">125&lt;/span> indicates the &lt;span class="nb">command&lt;/span> was interrupted&lt;span class="o">)&lt;/span>.
With the -c option, a build will only run &lt;span class="k">if&lt;/span> there has been
an SCM change.
JOB : Name of the job to build
-c : Check &lt;span class="k">for&lt;/span> SCM changes before starting the build, and &lt;span class="k">if&lt;/span> there&lt;span class="err">&amp;#39;&lt;/span>s no
change, &lt;span class="nb">exit&lt;/span> without doing a build
-f : Follow the build progress. Like -s only interrupts are not passed
through to the build.
-p : Specify the build parameters in the &lt;span class="nv">key&lt;/span>&lt;span class="o">=&lt;/span>value format.
-s : Wait &lt;span class="k">until&lt;/span> the completion/abortion of the command. Interrupts are passed
through to the build.
-v : Prints out the console output of the build. Use with -s
-w : Wait &lt;span class="k">until&lt;/span> the start of the &lt;span class="nb">command&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ssh">SSH&lt;/h3>
&lt;p>启用SSH, 使用随机端口. 也可以使用固定端口:&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15232377732862.jpg" alt="">&lt;/p>
&lt;p>获取SSH端口号:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -Lv http://localhost:8080/login 2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;X-SSH-Endpoint&amp;#39;&lt;/span>
&lt;span class="c1">#&amp;lt; X-SSH-Endpoint: localhost:46059&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成ssh key:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ssh-keygen -t rsa -b &lt;span class="m">4096&lt;/span> -C &lt;span class="s2">&amp;#34;admin&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加ssh公钥:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">http://localhost:8080/user/admin/configure
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改ssh config, 添加如下配置:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">Host localhost
IdentityFile ~/.ssh/id_rsa_jenkins_cli
Port &lt;span class="m">46059&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>验证:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ssh admin@localhost &lt;span class="nb">help&lt;/span>
add-job-to-view
Adds &lt;span class="nb">jobs&lt;/span> to view.
build
Builds a job, and optionally waits &lt;span class="k">until&lt;/span> its completion.
cancel-quiet-down
Cancel the effect of the &lt;span class="s2">&amp;#34;quiet-down&amp;#34;&lt;/span> command.
clear-queue
Clears the build queue.
connect-node
Reconnect to a node&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span>
console
Retrieves console output of a build.
copy-job
Copies a job.
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15232435960672.jpg" alt="">&lt;/p></description></item><item><title>Jenkins - 解决execute shell中启动的进程被在Job退出时被杀死问题</title><link>https://atbug.com/resolve-process-be-killed-after-jenkins-job-done/</link><pubDate>Thu, 15 Mar 2018 17:00:25 +0000</pubDate><guid>https://atbug.com/resolve-process-be-killed-after-jenkins-job-done/</guid><description>
&lt;p>因为&lt;a href="https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller">ProcessTreeKiller&lt;/a>的存在, 构建过程中使用shell启动的进程在Job完成时都会被kill掉.&lt;/p>
&lt;p>各种搜索以及&lt;a href="https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller">ProcessTreeKiller&lt;/a>提供的解决方式是修改&lt;code>BUILD_ID&lt;/code>和添加&lt;code> -Dhudson.util.ProcessTree.disable=true&lt;/code>都无法解决.&lt;/p>
&lt;p>最后参考&lt;a href="https://issues.jenkins-ci.org/browse/JENKINS-28182">StackOverflow&lt;/a>和&lt;a href="https://issues.jenkins-ci.org/browse/JENKINS-28182">Jenkins JIRA&lt;/a>, 修改&lt;code>JENKINS_NODE_COOKIE&lt;/code>为任何值, 如&lt;code>dontKillMe&lt;/code>. 这种方法可以解决, 记录一下. (搜索排名靠前的结果都不对).&lt;/p></description></item><item><title>MacOS安装minishift</title><link>https://atbug.com/install-minishift-on-mac/</link><pubDate>Fri, 23 Feb 2018 15:32:26 +0000</pubDate><guid>https://atbug.com/install-minishift-on-mac/</guid><description>
&lt;p>MacOS环境安装minishift&lt;/p>
&lt;h4 id="安装minishift-cli">安装minishift cli&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">brew cask install minishift
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用virtualbox安装">使用virtualbox安装&lt;/h4>
&lt;p>安装的时候可以指定HTTP代理, 拉取墙外镜像时需要; 还可以指定insecure的镜像库.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minishift start --docker-env &lt;span class="nv">HTTP_PROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.99.1:1087&amp;#34;&lt;/span> --docker-env &lt;span class="nv">HTTPS_PROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.99.1:1087&amp;#34;&lt;/span> --docker-env &lt;span class="nv">NO_PROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.0.0/16,172.30.0.0/16&amp;#34;&lt;/span> --insecure-registry&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.1.34&amp;#34;&lt;/span> --vm-driver&lt;span class="o">=&lt;/span>virtualbox
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="启动">启动&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minishift start --vm-driver&lt;span class="o">=&lt;/span>virtualbox
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="删除">删除&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minishift delete
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="打开openshift控制面板">打开Openshift控制面板&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minishift dashboard
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="获取集群ip地址">获取集群ip地址&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minishift ip
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="安装openshift-cli">安装Openshift Cli&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">brew install openshift-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以使用openshift cli进行操作. minishift安装完成后会将配置信息写入到主机的用户目录下, &lt;code>$HOME/.kube&lt;/code>目录下除了&lt;code>config&lt;/code>信息, 还有openshift的集群信息及支持的api.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">oc login -u system:admin
oc get pods --all-namespaces
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Spring Cloud Zuul详解</title><link>https://atbug.com/spring-cloud-zuul-breakdown/</link><pubDate>Thu, 22 Feb 2018 17:02:26 +0000</pubDate><guid>https://atbug.com/spring-cloud-zuul-breakdown/</guid><description>
&lt;p>Spring Cloud对Netflix Zuul做了封装集成, 使得在Spring Cloud环境中使用Zuul更方便. Netflix Zuul相关分析请看&lt;a href="http://atbug.com/learn-netflix-zuul/">上一篇&lt;/a>.&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>@EnableZuulProxy 与 @EnableZuulServer
二者的区别在于前者使用了服务发现作为路由寻址, 并使用Ribbon做客户端的负载均衡; 后者没有使用.
Zuul server的路由都通过&lt;code>ZuulProperties&lt;/code>进行配置.&lt;/p>
&lt;h3 id="具体实现">具体实现:&lt;/h3>
&lt;ol>
&lt;li>使用&lt;code>ZuulController&lt;/code>(&lt;code>ServletWrappingController&lt;/code>的子类)封装&lt;code>ZuulServlet&lt;/code>实例, 处理从&lt;code>DispatcherServlet&lt;/code>进来的请求.&lt;/li>
&lt;li>&lt;code>ZuulHandlerMapping&lt;/code>负责注册handler mapping, 将&lt;code>Route&lt;/code>的&lt;code>fullPath&lt;/code>的请求交由&lt;code>ZuulController&lt;/code>处理.&lt;/li>
&lt;li>同时使用&lt;code>ServletRegistrationBean&lt;/code>注册&lt;code>ZuulServlet&lt;/code>, 默认使用&lt;code>/zuul&lt;/code>作为urlMapping. 所有来自以&lt;code>/zuul&lt;/code>开头的path的请求都会直接进入&lt;code>ZuulServlet&lt;/code>, 不会进入&lt;code>DispatcherServlet&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h4 id="使用注解">使用注解&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;code>@EnableZuulProxy&lt;/code>引入了&lt;code>ZuulProxyMarkerConfiguration&lt;/code>, &lt;code>ZuulProxyMarkerConfiguration&lt;/code>只做了一件事, 实例化了内部类&lt;code>Marker&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulProxyMarkerConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Marker&lt;/span> &lt;span class="nf">zuulProxyMarkerBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Marker&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">Marker&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>@EnableZuulServer&lt;/code>引入了&lt;code>ZuulServerMarkerConfiguration&lt;/code>, &lt;code>ZuulServerMarkerConfiguration&lt;/code>也只做了一件事: 实例化了内部类&lt;code>Marker&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulServerMarkerConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Marker&lt;/span> &lt;span class="nf">zuulServerMarkerBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Marker&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">Marker&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="enableautoconfiguration">EnableAutoConfiguration&lt;/h4>
&lt;p>项目中使用&lt;code>@EnableAutoConfiguration&lt;/code>注解, 开启Spring上下文对象的自动配置功能, 尝试去猜测和实例化你&lt;strong>可能需要的&lt;/strong>bean.&lt;/p>
&lt;p>这个功能是基于classPath来完成的. 比如: 项目中引用了&lt;code>tomcat-embedded.jar&lt;/code>, 你可能需要一个&lt;code>TomcatEmbeddedServletContainerFactory&lt;/code>实例, 除非定义了自己的&lt;code>EmbeddedServletContainerFactory&lt;/code>实例.&lt;/p>
&lt;p>我们来接着看, 在&lt;code>spring-cloud-netflix-core&lt;/code>的&lt;code>spring.factories&lt;/code>中的&lt;code>org.springframework.boot.autoconfigure.EnableAutoConfiguration&lt;/code>实现中我们可以找到&lt;code>org.springframework.cloud.netflix.zuul.ZuulProxyAutoConfiguration&lt;/code>和&lt;code>org.springframework.cloud.netflix.zuul.ZuulServerAutoConfiguration&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ZuulServerAutoConfiguration
它的初始化条件有两个:&lt;/p>
&lt;ul>
&lt;li>&lt;code>@ConditionalOnClass(ZuulServlet.class)&lt;/code>指定classpath中需要有&lt;code>ZuulServlet.class&lt;/code>. 这个servlet负责对所有进入Zuul server的请求以及配置应用指定的&lt;code>preRoute&lt;/code>, &lt;code>route&lt;/code>, &lt;code>postRoute&lt;/code>和&lt;code>error&lt;/code>.&lt;/li>
&lt;li>&lt;code>@ConditionalOnBean(ZuulServerMarkerConfiguration.Marker.class)&lt;/code> 与&lt;code>@EnableZuulServer&lt;/code>注解呼应.&lt;/li>
&lt;/ul>
&lt;p>​&lt;code>java @Configuration @EnableConfigurationProperties({ ZuulProperties.class }) @ConditionalOnClass(ZuulServlet.class) @ConditionalOnBean(ZuulServerMarkerConfiguration.Marker.class) // Make sure to get the ServerProperties from the same place as a normal web app would @Import(ServerPropertiesAutoConfiguration.class) public class ZuulServerAutoConfiguration { ... } ​&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ZuulProxyAutoConfiguration
它有一个初始化的条件&lt;code>@ConditionalOnBean(ZuulProxyMarkerConfiguration.Marker.class)&lt;/code>, 就是上下文中需要有&lt;code>ZuulProxyMarkerConfiguration.Marker&lt;/code>这个内部类的bean. 与&lt;code>@EnableZuulProxy&lt;/code>注解呼应.&lt;/p>
&lt;p>初始化包括内置的filter, 以及Discovery, Ribbon等的初始化.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@Import&lt;/span>&lt;span class="o">({&lt;/span> &lt;span class="n">RibbonCommandFactoryConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RestClientRibbonConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">RibbonCommandFactoryConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OkHttpRibbonConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">RibbonCommandFactoryConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">HttpClientRibbonConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">})&lt;/span>
&lt;span class="nd">@ConditionalOnBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ZuulProxyMarkerConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Marker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulProxyAutoConfiguration&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">ZuulServerAutoConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h5 id="zuulserverautoconfiguration-详解">ZuulServerAutoConfiguration 详解&lt;/h5>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//声明配置
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="c1">//配置ZuulProperties实例
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@EnableConfigurationProperties&lt;/span>&lt;span class="o">({&lt;/span> &lt;span class="n">ZuulProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">})&lt;/span>
&lt;span class="c1">//条件1 存在ZuulServlet.class
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@ConditionalOnClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ZuulServlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//条件2 存在ZuulServerMarkerConfiguration.Marker.class bean, 即应用使用@EnableZuulServer注解
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@ConditionalOnBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ZuulServerMarkerConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Marker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//配置ServerProperties实例
&lt;/span>&lt;span class="c1">// Make sure to get the ServerProperties from the same place as a normal web app would
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@Import&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServerPropertiesAutoConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulServerAutoConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">ZuulProperties&lt;/span> &lt;span class="n">zuulProperties&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">ServerProperties&lt;/span> &lt;span class="n">server&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">required&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ErrorController&lt;/span> &lt;span class="n">errorController&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">HasFeatures&lt;/span> &lt;span class="nf">zuulFeature&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">HasFeatures&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">namedFeature&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Zuul (Simple)&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ZuulServerAutoConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//复合结构的RouteLocator
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@Primary&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">CompositeRouteLocator&lt;/span> &lt;span class="nf">primaryRouteLocator&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RouteLocator&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">routeLocators&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CompositeRouteLocator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routeLocators&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//没有SimpleRouteLocator.class的bean时, 使用zuulProperties实例化一个SimpleRouteLocator实例.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnMissingBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SimpleRouteLocator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">SimpleRouteLocator&lt;/span> &lt;span class="nf">simpleRouteLocator&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SimpleRouteLocator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">server&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServletPrefix&lt;/span>&lt;span class="o">(),&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zuulProperties&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//zuulController, 包装了一个ZuulServlet类型的servlet, 实现对ZuulServlet类型的servlet的初始化.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulController&lt;/span> &lt;span class="nf">zuulController&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulController&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulHandlerMapping&lt;/span> &lt;span class="nf">zuulHandlerMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RouteLocator&lt;/span> &lt;span class="n">routes&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ZuulHandlerMapping&lt;/span> &lt;span class="n">mapping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulHandlerMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routes&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">zuulController&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">mapping&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setErrorController&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">errorController&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">mapping&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ApplicationListener&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ApplicationEvent&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">zuulRefreshRoutesListener&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulRefreshListener&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnMissingBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;zuulServlet&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ServletRegistrationBean&lt;/span> &lt;span class="nf">zuulServlet&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ServletRegistrationBean&lt;/span> &lt;span class="n">servlet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ServletRegistrationBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ZuulServlet&lt;/span>&lt;span class="o">(),&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zuulProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServletPattern&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">// The whole point of exposing this servlet is to provide a route that doesn&amp;#39;t
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// buffer requests.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">servlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addInitParameter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;buffer-requests&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">servlet&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// pre filters
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ServletDetectionFilter&lt;/span> &lt;span class="nf">servletDetectionFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ServletDetectionFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FormBodyWrapperFilter&lt;/span> &lt;span class="nf">formBodyWrapperFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FormBodyWrapperFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">DebugFilter&lt;/span> &lt;span class="nf">debugFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DebugFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Servlet30WrapperFilter&lt;/span> &lt;span class="nf">servlet30WrapperFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Servlet30WrapperFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// post filters
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">SendResponseFilter&lt;/span> &lt;span class="nf">sendResponseFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SendResponseFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">SendErrorFilter&lt;/span> &lt;span class="nf">sendErrorFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SendErrorFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">SendForwardFilter&lt;/span> &lt;span class="nf">sendForwardFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SendForwardFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;zuul.ribbon.eager-load.enabled&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">matchIfMissing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulRouteApplicationContextInitializer&lt;/span> &lt;span class="nf">zuulRoutesApplicationContextInitiazer&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">SpringClientFactory&lt;/span> &lt;span class="n">springClientFactory&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulRouteApplicationContextInitializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">springClientFactory&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">zuulProperties&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulFilterConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ZuulFilter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">filters&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulFilterInitializer&lt;/span> &lt;span class="nf">zuulFilterInitializer&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">CounterFactory&lt;/span> &lt;span class="n">counterFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TracerFactory&lt;/span> &lt;span class="n">tracerFactory&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterLoader&lt;/span> &lt;span class="n">filterLoader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FilterLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">FilterRegistry&lt;/span> &lt;span class="n">filterRegistry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FilterRegistry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterInitializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">filters&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">counterFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">tracerFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">filterLoader&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">filterRegistry&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@ConditionalOnClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CounterService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulCounterFactoryConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CounterService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">CounterFactory&lt;/span> &lt;span class="nf">counterFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CounterService&lt;/span> &lt;span class="n">counterService&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultCounterFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">counterService&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulMetricsConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnMissingBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CounterFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">CounterFactory&lt;/span> &lt;span class="nf">counterFactory&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EmptyCounterFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@ConditionalOnMissingBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TracerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">TracerFactory&lt;/span> &lt;span class="nf">tracerFactory&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EmptyTracerFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulRefreshListener&lt;/span>
&lt;span class="kd">implements&lt;/span> &lt;span class="n">ApplicationListener&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ApplicationEvent&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ZuulHandlerMapping&lt;/span> &lt;span class="n">zuulHandlerMapping&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">HeartbeatMonitor&lt;/span> &lt;span class="n">heartbeatMonitor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HeartbeatMonitor&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">onApplicationEvent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ApplicationEvent&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">event&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">ContextRefreshedEvent&lt;/span>
&lt;span class="o">||&lt;/span> &lt;span class="n">event&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">RefreshScopeRefreshedEvent&lt;/span>
&lt;span class="o">||&lt;/span> &lt;span class="n">event&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">RoutesRefreshedEvent&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zuulHandlerMapping&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDirty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">event&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">HeartbeatEvent&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">heartbeatMonitor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">update&lt;/span>&lt;span class="o">(((&lt;/span>&lt;span class="n">HeartbeatEvent&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">()))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zuulHandlerMapping&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDirty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="zuulproxyautoconfiguration-详解">ZuulProxyAutoConfiguration 详解&lt;/h5>
&lt;pre>&lt;code>​```java
//声明配置
@Configuration
//引入RibbonCommandFactory配置
@Import({ RibbonCommandFactoryConfiguration.RestClientRibbonConfiguration.class,
RibbonCommandFactoryConfiguration.OkHttpRibbonConfiguration.class,
RibbonCommandFactoryConfiguration.HttpClientRibbonConfiguration.class,
HttpClientConfiguration.class })
//配置生效条件
@ConditionalOnBean(ZuulProxyMarkerConfiguration.Marker.class)
public class ZuulProxyAutoConfiguration extends ZuulServerAutoConfiguration {
@SuppressWarnings(&amp;quot;rawtypes&amp;quot;)
@Autowired(required = false)
private List&amp;lt;RibbonRequestCustomizer&amp;gt; requestCustomizers = Collections.emptyList();
//网关服务注册实例信息
@Autowired(required = false)
private Registration registration;
//服务发现客户端
@Autowired
private DiscoveryClient discovery;
//serviceId和路由的映射逻辑, 默认为相同
@Autowired
private ServiceRouteMapper serviceRouteMapper;
@Override
public HasFeatures zuulFeature() {
return HasFeatures.namedFeature(&amp;quot;Zuul (Discovery)&amp;quot;,
ZuulProxyAutoConfiguration.class);
}
//静态和动态路由寻址: 静态从配置文件获取, 动态通过服务发现客户端完成. 后者优先级更高
@Bean
@ConditionalOnMissingBean(DiscoveryClientRouteLocator.class)
public DiscoveryClientRouteLocator discoveryRouteLocator() {
return new DiscoveryClientRouteLocator(this.server.getServletPrefix(),
this.discovery, this.zuulProperties, this.serviceRouteMapper, this.registration);
}
//装饰过滤器
// pre filters
@Bean
public PreDecorationFilter preDecorationFilter(RouteLocator routeLocator,
ProxyRequestHelper proxyRequestHelper) {
return new PreDecorationFilter(routeLocator, this.server.getServletPrefix(),
this.zuulProperties, proxyRequestHelper);
}
//基于Ribbon路由过滤器
// route filters
@Bean
public RibbonRoutingFilter ribbonRoutingFilter(ProxyRequestHelper helper,
RibbonCommandFactory&amp;lt;?&amp;gt; ribbonCommandFactory) {
RibbonRoutingFilter filter = new RibbonRoutingFilter(helper, ribbonCommandFactory,
this.requestCustomizers);
return filter;
}
//基于host的路由过滤器
@Bean
@ConditionalOnMissingBean({SimpleHostRoutingFilter.class, CloseableHttpClient.class})
public SimpleHostRoutingFilter simpleHostRoutingFilter(ProxyRequestHelper helper,
ZuulProperties zuulProperties,
ApacheHttpClientConnectionManagerFactory connectionManagerFactory,
ApacheHttpClientFactory httpClientFactory) {
return new SimpleHostRoutingFilter(helper, zuulProperties,
connectionManagerFactory, httpClientFactory);
}
@Bean
@ConditionalOnMissingBean({SimpleHostRoutingFilter.class})
public SimpleHostRoutingFilter simpleHostRoutingFilter2(ProxyRequestHelper helper,
ZuulProperties zuulProperties,
CloseableHttpClient httpClient) {
return new SimpleHostRoutingFilter(helper, zuulProperties,
httpClient);
}
//服务发现寻址刷新监听器
@Bean
public ApplicationListener&amp;lt;ApplicationEvent&amp;gt; zuulDiscoveryRefreshRoutesListener() {
return new ZuulDiscoveryRefreshListener();
}
@Bean
@ConditionalOnMissingBean(ServiceRouteMapper.class)
public ServiceRouteMapper serviceRouteMapper() {
return new SimpleServiceRouteMapper();
}
@Configuration
@ConditionalOnMissingClass(&amp;quot;org.springframework.boot.actuate.endpoint.Endpoint&amp;quot;)
protected static class NoActuatorConfiguration {
@Bean
public ProxyRequestHelper proxyRequestHelper(ZuulProperties zuulProperties) {
ProxyRequestHelper helper = new ProxyRequestHelper();
helper.setIgnoredHeaders(zuulProperties.getIgnoredHeaders());
helper.setTraceRequestBody(zuulProperties.isTraceRequestBody());
return helper;
}
}
@Configuration
@ConditionalOnClass(Endpoint.class)
protected static class EndpointConfiguration {
@Autowired(required = false)
private TraceRepository traces;
@ConditionalOnEnabledEndpoint(&amp;quot;routes&amp;quot;)
@Bean
public RoutesEndpoint routesEndpoint(RouteLocator routeLocator) {
return new RoutesEndpoint(routeLocator);
}
@ConditionalOnEnabledEndpoint(&amp;quot;routes&amp;quot;)
@Bean
public RoutesMvcEndpoint routesMvcEndpoint(RouteLocator routeLocator,
RoutesEndpoint endpoint) {
return new RoutesMvcEndpoint(endpoint, routeLocator);
}
@ConditionalOnEnabledEndpoint(&amp;quot;filters&amp;quot;)
@Bean
public FiltersEndpoint filtersEndpoint() {
FilterRegistry filterRegistry = FilterRegistry.instance();
return new FiltersEndpoint(filterRegistry);
}
@Bean
public ProxyRequestHelper proxyRequestHelper(ZuulProperties zuulProperties) {
TraceProxyRequestHelper helper = new TraceProxyRequestHelper();
if (this.traces != null) {
helper.setTraces(this.traces);
}
helper.setIgnoredHeaders(zuulProperties.getIgnoredHeaders());
helper.setTraceRequestBody(zuulProperties.isTraceRequestBody());
return helper;
}
}
private static class ZuulDiscoveryRefreshListener
implements ApplicationListener&amp;lt;ApplicationEvent&amp;gt; {
private HeartbeatMonitor monitor = new HeartbeatMonitor();
@Autowired
private ZuulHandlerMapping zuulHandlerMapping;
@Override
public void onApplicationEvent(ApplicationEvent event) {
if (event instanceof InstanceRegisteredEvent) {
reset();
}
else if (event instanceof ParentHeartbeatEvent) {
ParentHeartbeatEvent e = (ParentHeartbeatEvent) event;
resetIfNeeded(e.getValue());
}
else if (event instanceof HeartbeatEvent) {
HeartbeatEvent e = (HeartbeatEvent) event;
resetIfNeeded(e.getValue());
}
}
private void resetIfNeeded(Object value) {
if (this.monitor.update(value)) {
reset();
}
}
private void reset() {
this.zuulHandlerMapping.setDirty(true);
}
}
}
​```
&lt;/code>&lt;/pre>
&lt;h2 id="配置项">配置项&lt;/h2>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15192869619623.jpg" alt="">&lt;/p>
&lt;h4 id="zuulservletpath">zuul.servletPath&lt;/h4>
&lt;p>默认为*/zuul*, 注册ZuulServlet的时候作为urlMapping使用. 即所有来自以*/zuul*开头的path都会由ZuulServlet处理.&lt;/p>
&lt;h4 id="zuulignoredpatterns">zuul.ignoredPatterns&lt;/h4>
&lt;p>Zuul使用&lt;code>ZuulController&lt;/code>封装了&lt;code>ZuulServlet&lt;/code>. 所有进入Zuul的请求的入口都是&lt;code>ZuulController&lt;/code>.
&lt;code>ZuulController&lt;/code>的&lt;code>ZuulHandlerMapping&lt;/code>默认把&lt;code>zuul.routes.[ITEM].path&lt;/code>的请求交给&lt;code>ZuulServlet&lt;/code>处理. 如果找不到对应的path的route, 则会走其他的&lt;code>DispatcherServlet&lt;/code>&lt;/p>
&lt;p>&lt;code>zuul.ignoredPatterns&lt;/code>作用就是进入Zuul的请求, 只要match都会直接交由其他的&lt;code>DispatcherServlet&lt;/code>处理, 而不需要先检查是否有对应path的route.&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;h2 id="过滤器">过滤器&lt;/h2>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15192707341614.jpg" alt="">&lt;/p>
&lt;h3 id="zuulserverautoconfiguration">ZuulServerAutoConfiguration&lt;/h3>
&lt;h4 id="servletdetectionfilter">ServletDetectionFilter&lt;/h4>
&lt;p>检查请求的入口是&lt;code>DispatcherServlet&lt;/code>还是&lt;code>ZuulServlet&lt;/code>
如果是&lt;code>DispatcherServlet&lt;/code>进来的请求, 将&lt;code>RequestContext&lt;/code>中的属性&lt;code>isDispatcherServletRequest&lt;/code>设置为ture.&lt;/p>
&lt;p>检查的方法是判断&lt;code>RequestContext&lt;/code>中的请求类型是否为&lt;code>HttpServletRequestWrapper&lt;/code>类型, 因为&lt;code>ZuulServlet&lt;/code>进来的请求会使用&lt;code>HttpServletRequestWrapper&lt;/code>进行再次封装; 同时检查请求中中是否有&lt;code>DispatcherServlet.CONTEXT&lt;/code>属性, 因为&lt;code>DispatcherServlet&lt;/code>进来的请求会带有该属性.&lt;/p>
&lt;h4 id="formbodywrapperfilter">FormBodyWrapperFilter&lt;/h4>
&lt;p>为下游的服务解析表单数据, 并重新编码. 只针对multipart/form-data和application/x-www-form-urlencoded类型的请求.&lt;/p>
&lt;h4 id="debugfilter">DebugFilter&lt;/h4>
&lt;p>通过设置&lt;code>zuul.debug.parameter&lt;/code>属性控制, 默认启用.
执行时将上下文中的&lt;code>debugRouting&lt;/code>和&lt;code>debugRequest&lt;/code>设置为&lt;code>true&lt;/code>&lt;/p>
&lt;h4 id="servlet30wrapperfilter">Servlet30WrapperFilter&lt;/h4>
&lt;p>使用&lt;code>Servlet30RequestWrapper&lt;/code>封装请求, 强制启用.&lt;/p>
&lt;h4 id="sendresponsefilter">SendResponseFilter&lt;/h4>
&lt;p>后执行的过滤器, 负责将代理请求的响应写入当前的请求的响应中.&lt;/p>
&lt;h3 id="zuulproxyautoconfiguration">ZuulProxyAutoConfiguration&lt;/h3>
&lt;h4 id="predecorationfilter">PreDecorationFilter&lt;/h4>
&lt;p>Pre类型的过滤器, 通过提供的RouteLocator决定将如何请求路由到哪里和如何路由. 同时为下游请求添加多个与代理相关的头信息. 当&lt;code>RequestContext&lt;/code>中不存在&lt;code>FORWARD_TO_KEY&lt;/code>和&lt;code>SERVICE_ID_KEY&lt;/code>信息时生效.&lt;/p>
&lt;p>将路由判断结果写入&lt;code>routeHost&lt;/code>, &lt;code>FORWARD_TO_KEY&lt;/code>或者&lt;code>SERVICE_ID_KEY&lt;/code>.&lt;/p>
&lt;h4 id="ribbonroutingfilter">RibbonRoutingFilter&lt;/h4>
&lt;p>Route类型的过滤器, 当&lt;code>RequestContext&lt;/code>中&lt;code>routeHost&lt;/code>为空, 且有&lt;code>serviceId&lt;/code>值时生效.&lt;/p>
&lt;p>使用&lt;code>RequestContext&lt;/code>构建&lt;code>RibbonCommandContext&lt;/code>, 通过&lt;code>RibbonCommandFactory&lt;/code>进而创建&lt;code>RibbonCommand&lt;/code>并执行. 最后通过&lt;code>ProxyRequestHelper&lt;/code>将响应结果记录到&lt;code>RequestContext&lt;/code>中.&lt;/p>
&lt;h4 id="simplehostroutingfilter">SimpleHostRoutingFilter&lt;/h4>
&lt;p>Route类型的过滤器, 当&lt;code>RequestContext&lt;/code>中的&lt;code>routeHost&lt;/code>不为空时生效. 使用Apache的HttpClient发送请求&lt;/p>
&lt;h2 id="监听器">监听器&lt;/h2>
&lt;h4 id="zuulrefreshlistener">ZuulRefreshListener&lt;/h4>
&lt;p>通过监听应用程序事件(&lt;code>ContextRefreshedEvent&lt;/code>, &lt;code>RefreshScopeRefreshedEvent&lt;/code>, &lt;code>RoutesRefreshedEvent&lt;/code>和&lt;code>RoutesRefreshedEvent&lt;/code>)更新handler mapping的注册信息. 前两个事件在&lt;code>ContextRefresh&lt;/code>时发出; 第三个是通过JMX重置路由时发出(参考&lt;code>RoutesMvcEndpoint&lt;/code>); 最后一个是&lt;code>DiscoveryClient&lt;/code>每次拉取服务注册信息后发出.&lt;/p>
&lt;p>收到事件后, 将&lt;code>ZuulHandlerMapping&lt;/code>的&lt;code>dirty&lt;/code>变量置为&lt;code>true&lt;/code>, 当下次请求进来时, 检查到&lt;code>dirty&lt;/code>为&lt;code>true&lt;/code>, 就会重新注册url mapping.&lt;/p>
&lt;h4 id="zuuldiscoveryrefreshlistener">ZuulDiscoveryRefreshListener&lt;/h4>
&lt;p>监听应用程序事件(&lt;code>InstanceRegisteredEvent&lt;/code>, &lt;code>ParentHeartbeatEvent&lt;/code>和&lt;code>HeartbeatEvent&lt;/code>)更新handler mapping的注册信息.&lt;/p>
&lt;p>&lt;code>InstanceRegisteredEvent&lt;/code>当前路由服务实例完成服务注册后发出的事件.
&lt;code>ParentHeartbeatEvent&lt;/code>当&lt;code>DiscoveryClient&lt;/code>定位到&lt;em>Config Server&lt;/em>服务的时候有&lt;code>bootstrapContext&lt;/code>发给应用程序上下文的事件.
&lt;code>HeartbeatEvent&lt;/code>由&lt;code>DiscoveryClient&lt;/code>每次拉取服务注册信息后发出.&lt;/p></description></item><item><title>Spring Cloud - Eureka服务注册</title><link>https://atbug.com/spring-cloud-service-registry-via-eureka/</link><pubDate>Wed, 14 Feb 2018 07:32:43 +0000</pubDate><guid>https://atbug.com/spring-cloud-service-registry-via-eureka/</guid><description>
&lt;p>之前分析过&lt;a href="http://atbug.com/spring-cloud-eureka-client-source-code-analysis/">Spring Cloud的Eureka服务发现&lt;/a>, 今天分析一下服务注册.&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;h3 id="bootstrapconfiguration">BootstrapConfiguration&lt;/h3>
&lt;h4 id="eurekadiscoveryclientconfigservicebootstrapconfiguration">EurekaDiscoveryClientConfigServiceBootstrapConfiguration&lt;/h4>
&lt;p>spring-cloud-config环境中使用的配置&lt;/p>
&lt;p>引入&lt;code>EurekaDiscoveryClientConfiguration&lt;/code>和&lt;code>EurekaClientAutoConfiguration&lt;/code>&lt;/p>
&lt;h5 id="eurekadiscoveryclientconfiguration">EurekaDiscoveryClientConfiguration&lt;/h5>
&lt;ol>
&lt;li>在spring-cloud中(通过是否存在RefreshScopeRefreshedEvent.class判断), 添加&lt;code>RefreshScopeRefreshedEvent&lt;/code>的listener. 收到事件后重新注册实例.&lt;/li>
&lt;li>在&lt;code>eureka.client.healthcheck.enabled&lt;/code>设置为true时, 注册&lt;code>EurekaHealthCheckHandler&lt;/code>bean. &lt;code>EurekaHealthCheckHandler&lt;/code>负责将应用状态映射为实例状态&lt;code>InstanceStatus&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h5 id="eurekaclientautoconfiguration">EurekaClientAutoConfiguration&lt;/h5>
&lt;p>支持spring-cloud和非spring-cloud环境, 在spring-cloud环境中, 下面两个bean要使用&lt;code>@RefreshScope&lt;/code>标注&lt;/p>
&lt;ol>
&lt;li>实例化&lt;code>EurekaClient&lt;/code>bean, 在spring-cloud中使用实现类&lt;code>CloudEurekaClient&lt;/code>.&lt;/li>
&lt;li>使用&lt;code>EurekaInstanceConfig&lt;/code>实例, 实例化&lt;code>ApplicationInfoManager&lt;/code>bean&lt;/li>
&lt;/ol>
&lt;h3 id="enableautoconfiguration">EnableAutoConfiguration&lt;/h3>
&lt;h4 id="eurekaclientconfigserverautoconfiguration">EurekaClientConfigServerAutoConfiguration&lt;/h4>
&lt;p>在spring-cloud-config的环境中, 将&lt;code>configPath&lt;/code>加入到实例的metadata map中.&lt;/p>
&lt;h4 id="eurekadiscoveryclientconfigserviceautoconfiguration">EurekaDiscoveryClientConfigServiceAutoConfiguration&lt;/h4>
&lt;p>当config客户端希望通过服务发现寻找config服务的时候使用的引导配置&lt;/p>
&lt;p>在&lt;code>spring.cloud.config.discovery.enabled&lt;/code>为&lt;code>true&lt;/code>时, 关闭父application context里实例化的&lt;code>EurekaClient&lt;/code>实例. 只使用当前上下文里的实例.&lt;/p>
&lt;h4 id="eurekaclientautoconfiguration-1">EurekaClientAutoConfiguration&lt;/h4>
&lt;p>&lt;strong>核心配置&lt;/strong>
支持spring-cloud(支持动态配置)和非spring-cloud环境, &lt;code>EurekaClient&lt;/code>和&lt;code>EurekaInstanceConfig&lt;/code>两个bean要使用&lt;code>@RefreshScope&lt;/code>标注&lt;/p>
&lt;ol>
&lt;li>实例化当前服务实例信息&lt;code>EurekaInstanceConfigBean&lt;/code>的实例&lt;/li>
&lt;li>实例化&lt;code>DiscoveryClient&lt;/code>的实现, 在这里是&lt;code>EurekaDiscoveryClient&lt;/code>&lt;/li>
&lt;li>实例化&lt;code>EurekaServiceRegistry&lt;/code>&lt;/li>
&lt;li>实例化&lt;code>EurekaRegistration&lt;/code>&lt;/li>
&lt;li>实例化&lt;code>EurekaAutoServiceRegistration&lt;/code>, 这个类实现了StartLifecycle接口. 在ApplicationContext refresh或者shutdown之后注册或者注销当前实例&lt;/li>
&lt;li>实例化&lt;code>EurekaClient&lt;/code>bean, 在spring-cloud中使用实现类&lt;code>CloudEurekaClient&lt;/code>&lt;/li>
&lt;li>使用&lt;code>EurekaInstanceConfig&lt;/code>实例, 实例化&lt;code>ApplicationInfoManager&lt;/code>bean&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15185619590053.jpg" alt="EurekaClientAutoConfiguration">&lt;/p>
&lt;h4 id="ribboneurekaautoconfiguration">RibbonEurekaAutoConfiguration&lt;/h4>
&lt;p>当启用Eureka client(eureka.client.enable为true和ribbon.eureka.enabled为true时, 默认为true)时配置默认基于eureka的ribbon.
使用&lt;code>EurekaRibbonClientConfiguration&lt;/code>提供的配置: RibbonPing, ServerList, ServerIntrospector.&lt;/p>
&lt;h4 id="eurekadiscoveryclientconfiguration-1">EurekaDiscoveryClientConfiguration&lt;/h4>
&lt;p>提供监听&lt;code>RefreshScopeRefreshedEvent&lt;/code>的监听器, 当事件发生时注销并重新注册(防止metadata发生改变)
提供一个默认的EurekaHealthCheckHandler实例, 当bean不存在的且&lt;code>eureka.client.healthcheck.enabled&lt;/code>为true时.&lt;/p>
&lt;h2 id="主要类">主要类&lt;/h2>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15185644052296.jpg" alt="">&lt;/p>
&lt;h3 id="serviceregistry">ServiceRegistry&lt;/h3>
&lt;p>spring提供的服务实例注册和注销的接口.&lt;/p>
&lt;h3 id="eurekaserviceregistry">EurekaServiceRegistry&lt;/h3>
&lt;p>ServiceRegistry的Eureka实现. 注册和注销的实现是通过&lt;code>EurekaRegistration&lt;/code>的&lt;code>ApplicationInfoManager&lt;/code>修改实例状态实现的.&lt;/p>
&lt;h3 id="eurekaregistration">EurekaRegistration&lt;/h3>
&lt;p>通过实现&lt;code>ServiceInstance&lt;/code>提供访问实例信息的接口,&lt;/p>
&lt;h3 id="applicationinfomanager">ApplicationInfoManager&lt;/h3>
&lt;p>提供修改实例状态的接口, 并通知状态变化的监听器.
提供内部类&lt;code>StatusChangeListener&lt;/code>.
提供注册和注销状态变化监听器的接口, Eureka的&lt;code>DiscoveryClient&lt;/code>中通过匿名类的方式实现了该接口, 当实例状态发生变化时, 刷新实例状态.&lt;/p></description></item><item><title>初识Netflix Zuul</title><link>https://atbug.com/learn-netflix-zuul/</link><pubDate>Sun, 11 Feb 2018 10:07:18 +0000</pubDate><guid>https://atbug.com/learn-netflix-zuul/</guid><description>
&lt;p>嵌入式的zuul代理&lt;/p>
&lt;p>使用了Netfilx OSS的其他组件:&lt;/p>
&lt;ul>
&lt;li>Hystrix 熔断&lt;/li>
&lt;li>Ribbon 负责发送外出请求的客户端, 提供软件负载均衡功能&lt;/li>
&lt;li>Trubine 实时地聚合细粒度的metrics数据&lt;/li>
&lt;li>Archaius 动态配置&lt;/li>
&lt;/ul>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>由于2.0停止开发且会有bug, 故下面的分析基于1.x版本.&lt;/p>
&lt;h3 id="特性">特性&lt;/h3>
&lt;ul>
&lt;li>Authentication 认证&lt;/li>
&lt;li>Insights 洞察&lt;/li>
&lt;li>Stress Testing 压力测试&lt;/li>
&lt;li>Canary Testing 金丝雀测试&lt;/li>
&lt;li>Dynamic Routing 动态路由&lt;/li>
&lt;li>Multi-Region Resiliency 多区域弹性&lt;/li>
&lt;li>Load Shedding 负载脱落&lt;/li>
&lt;li>Security 安全&lt;/li>
&lt;li>Static Response handling 静态响应处理&lt;/li>
&lt;li>Multi-Region Resiliency 主动/主动流量管理&lt;/li>
&lt;/ul>
&lt;h3 id="zuul核心架构">Zuul核心架构&lt;/h3>
&lt;h4 id="过滤器加载器">过滤器加载器&lt;/h4>
&lt;p>从文件目录定时的监控文件, 编译成Class并加载到过滤器链中.&lt;/p>
&lt;h4 id="贯穿整个请求的requestcontext">贯穿整个请求的RequestContext&lt;/h4>
&lt;p>将Servlet的请求和响应初始化成&lt;code>RequestContext&lt;/code>, 保存在ThreadLocal中贯穿整个请求.&lt;/p>
&lt;p>以及添加Netfix库的指定概念和数据的扩展对象&lt;code>NFRequestContext&lt;/code>, 如&lt;code>Eureka&lt;/code>&lt;/p>
&lt;h4 id="四种过滤器">四种过滤器:&lt;/h4>
&lt;ul>
&lt;li>preRoute&lt;/li>
&lt;li>route&lt;/li>
&lt;li>postRoute&lt;/li>
&lt;li>error&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/1000/1*j9iGkeQ7bPK2nC1a7BgFOw.png" alt="Zuul Core Architecture">&lt;/p>
&lt;h3 id="zuul请求生命周期">Zuul请求生命周期&lt;/h3>
&lt;p>&lt;img src="https://camo.githubusercontent.com/4eb7754152028cdebd5c09d1c6f5acc7683f0094/687474703a2f2f6e6574666c69782e6769746875622e696f2f7a75756c2f696d616765732f7a75756c2d726571756573742d6c6966656379636c652e706e67" alt="Request Lifecycle">&lt;/p>
&lt;h3 id="zuul-netflix">Zuul Netflix&lt;/h3>
&lt;p>使用Netflix的其他组件&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/1*pz6sv69la9ek6yWNTPqymQ.png" alt="Netflix OSS libraries in Zuul">&lt;/p>
&lt;h3 id="zull在netfilx的应用">zull在Netfilx的应用&lt;/h3>
&lt;h4 id="精确路由">精确路由&lt;/h4>
&lt;p>创建一个过滤器是特定的用户或者设备的请求重定向到独立的API集群达到调试的目的.&lt;/p>
&lt;h4 id="多区域弹">多区域弹&lt;/h4>
&lt;p>Zuul是我们称为地峡(Isthmus)的多地区ELB弹性项目的核心. 作为Isthmus的一部分, Zuul被用来将请求从西海岸数据中心传送到东海岸, 以帮助我们在我们的关键领域的ELB中实现多区域冗余.&lt;/p>
&lt;h4 id="压力测试">压力测试&lt;/h4>
&lt;p>在&lt;code>Zuul&lt;/code>过滤器中使用动态&lt;code>Archaius&lt;/code>配置逐步提升进入一部分服务器的流量, 自动实现压力测试.&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;h3 id="如何工作">如何工作&lt;/h3>
&lt;h4 id="startserver初始化">StartServer初始化&lt;/h4>
&lt;p>实现了ServletContextListener接口, 如果需要与netflix oss其他组件集成(如Eureka, Archaius)实例化的时候启动一个Karyon服务器.&lt;/p>
&lt;p>在ServletContext初始化完成后调用&lt;code>initGroovyFilterManager&lt;/code>和&lt;code>initJavaFilters&lt;/code>.&lt;/p>
&lt;h5 id="initgroovyfiltermanager">initGroovyFilterManager&lt;/h5>
&lt;p>向过滤器注册表中添加Groovy过滤器.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">initGroovyFilterManager&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//设置GroovyCompiler
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//GroovyCompiler是DynamicCompiler的实现类
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">FilterLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">setCompiler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">GroovyCompiler&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//从配置中是获取过滤器源文件的根目录
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;zuul.filter.root&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">scriptRoot&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">separator&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//设置文件名过滤器, 这里只过滤`.groovy`类型文件.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">FilterFileManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilenameFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">GroovyFileFilter&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//初始化过滤器文件管理器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//第一个参数是扫描目录的间隔时间, 单位为秒
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//后面跟要扫描的子目录
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//1. 初始化的时候会扫描各个子目录, 使用文件名过滤器获取到所有的过滤器源文件.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//2. 遍历这些文件, 使用`FilterLoader.getInstance().putFilter(file)`, compiler编译之后使用FilterFactory进行实例化, 并添加到过滤器注册表中. 是否实例化的逻辑判断是否在上次修改且文件最后修改时间是否相同. 如果是上次修改之后又有改动, 要重建改类型过滤器的列表. 如果没有修改, 对改文件不做任何处理.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//3. 启动线程, 每个5秒执行一个1和2的操作.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">FilterFileManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">init&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;pre&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;route&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;post&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="initjavafilters">initJavaFilters&lt;/h5>
&lt;p>向过滤器注册表中添加Java过滤器.&lt;/p>
&lt;p>*官方没有提供从java源代码到classs的编译器.&lt;/p>
&lt;h4 id="zuulservlet">ZuulServlet&lt;/h4>
&lt;p>核心zuul servlet, 初始化和卸掉zullFilter的运行.
使用ZuulRunner将Servlet的请求和响应初始化成&lt;code>RequestContext&lt;/code>, 并将&lt;code>FilterProcessor&lt;/code>的调用包装成&lt;code>preRoute()&lt;/code>, &lt;code>route()&lt;/code>, &lt;code>postRoute()&lt;/code>和&lt;code>error()&lt;/code>方法. 初始化时可以选择将请求包装成&lt;code>HttpServletRequestWrapper&lt;/code>并缓冲请求消息体.&lt;/p>
&lt;p>初始化后的&lt;code>RequestContext&lt;/code>会放在&lt;code>ThreadLocal&lt;/code>中, 供后续的filter访问.&lt;/p>
&lt;p>&lt;strong>Service方法&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">service&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">javax&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">servlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ServletRequest&lt;/span> &lt;span class="n">servletRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">javax&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">servlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ServletResponse&lt;/span> &lt;span class="n">servletResponse&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">init&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">servletRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletResponse&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">servletResponse&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// Marks this request as having passed through the &amp;#34;Zuul engine&amp;#34;, as opposed to servlets
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// explicitly bound in web.xml, for which requests will not have the same data attached
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">RequestContext&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RequestContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setZuulEngineRan&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">preRoute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ZuulException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">postRoute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">route&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ZuulException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">postRoute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">postRoute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ZuulException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ZuulException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">500&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;UNHANDLED_EXCEPTION_&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">RequestContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">unset&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过&lt;code>FilterProcessor.getInstnace()&lt;/code>调用&lt;code>FilterProcessor&lt;/code>的&lt;code>preRoute()&lt;/code>, &lt;code>route()&lt;/code>, &lt;code>postRoute()&lt;/code>和&lt;code>error()&lt;/code>方法.&lt;/p>
&lt;p>四个方法都是通过&lt;code>FilterLoader.getInstance()&lt;/code>获取对应类型的filter列表.&lt;/p>
&lt;p>遍历filter列表, 调用filter的&lt;code>runFilter()&lt;/code>方法.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * runFilter checks !isFilterDisabled() and shouldFilter(). The run() method is invoked if both are true.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @return the return from ZuulFilterResult
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span> &lt;span class="nf">runFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ZuulFilterResult&lt;/span> &lt;span class="n">zr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//动态获取`zuul.filerClassName.filterType.disable`的值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//动态获取使用Archaius的DynamicPropertyFactory获取*, 通过这个可实现动态配置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">isFilterDisabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//调用filter类的校验逻辑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">shouldFilter&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Tracer&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TracerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">startMicroTracer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ZUUL::&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getSimpleName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//执行filter的逻辑处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//执行成功
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">zr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ExecutionStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SUCCESS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ZUUL::&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getSimpleName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; failed&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//执行失败
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">zr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ExecutionStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">FAILED&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">zr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stopAndLog&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//filter不适用, 直接跳过
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">zr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ExecutionStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SKIPPED&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">zr&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="contextlifecyclefilter">ContextLifecycleFilter&lt;/h4>
&lt;p>清空&lt;code>ThreadLocal&lt;/code>中的&lt;code>RequestContext&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServletRequest&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletResponse&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">chain&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">chain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">RequestContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">unset&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="调试">调试&lt;/h3>
&lt;p>调试信息中的名词&lt;/p>
&lt;ul>
&lt;li>ZUUL_DEBUG 输出zuul的诊断信息&lt;/li>
&lt;li>REQUEST_DUBG 输出Http请求的信息. REQUEST -&amp;gt; ZUUL -&amp;gt; ORIGIN_RESPONSE -&amp;gt; OUTBOUND
&lt;ul>
&lt;li>REQUEST 进入zuul的请求&lt;/li>
&lt;li>ZUUL zuul转发给原目标的请求&lt;/li>
&lt;li>ORIGIN_RESPONSE 原目标返回的原始响应&lt;/li>
&lt;li>OUTBOND zuul返回给客户端的响应&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="接口和类">接口和类&lt;/h2>
&lt;h3 id="接口">接口&lt;/h3>
&lt;h4 id="dynamiccodecompiler">DynamicCodeCompiler&lt;/h4>
&lt;p>从源代码编译成Classes的接口, 目前只有一个&lt;code>GroovyCompiler&lt;/code>实现类&lt;/p>
&lt;h4 id="filterfactory">FilterFactory&lt;/h4>
&lt;p>生成给定的过滤器类实例的接口, 实现类&lt;code>DefaultFilterFactory&lt;/code>&lt;/p>
&lt;h4 id="filterusagenotifier">FilterUsageNotifier&lt;/h4>
&lt;p>注册过滤器使用时的回调的接口&lt;/p>
&lt;h3 id="类">类&lt;/h3>
&lt;h4 id="defaultfilterfactory">DefaultFilterFactory&lt;/h4>
&lt;p>使用反射实现&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulFilter&lt;/span> &lt;span class="nf">newInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InstantiationException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IllegalAccessException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ZuulFilter&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="filterfilemanager">FilterFileManager&lt;/h4>
&lt;p>从过滤器目录中获取修改和新增的Groovy过滤器文件.&lt;/p>
&lt;h4 id="filterloader">FilterLoader&lt;/h4>
&lt;p>持有过滤器注册表, 加载过滤器.&lt;/p></description></item><item><title>ConfigurationProperties到底需不需要getter</title><link>https://atbug.com/configurationproperties-requires-getter-or-not/</link><pubDate>Wed, 07 Feb 2018 15:53:21 +0000</pubDate><guid>https://atbug.com/configurationproperties-requires-getter-or-not/</guid><description>
&lt;p>为什么要讨论这个问题, 工作中一个同事写的类使用了&lt;code>ConfigurationProperties&lt;/code>, 只提供了标准的setter方法. 属性的访问, 提供了定制的方法. 可以参考&lt;code>EurekaClientConfigBean&lt;/code>.&lt;/p>
&lt;p>他使用的是spring boot 2.0.0.M5版本, 可以正常获取配置文件中的属性值, 但是在1.5.8.RELEASE获取不到.&lt;/p>
&lt;p>看下文档和源码:&lt;/p>
&lt;blockquote>
&lt;p>Annotation for externalized configuration. Add this to a class definition or a @Bean method in a @Configuration class if you want to bind and validate some external Properties (e.g. from a .properties file).&lt;/p>
&lt;/blockquote>
&lt;p>外置配置的注解. 当需要绑定外置配置(如properties或者yaml配置)的时候, 将其加到使用了&lt;code>@Configuration&lt;/code>注解的类声明处或者&lt;code>@Bean&lt;/code>标注的方法上.&lt;/p>
&lt;p>值的绑定是通过&lt;code>ConfigurationPropertiesBindingPostProcessor&lt;/code>在bean实例创建后, 初始化回调(如&lt;code>InitializingBean&lt;/code>的&lt;code>afterPropertiesSet&lt;/code>方法)或者&lt;code>init-method&lt;/code>之前之前完成的.&lt;/p>
&lt;h3 id="15x">1.5.x&lt;/h3>
&lt;p>执行绑定的时候如果找不到getter方法, 会抛出&lt;code>RelaxedBindingNotWritablePropertyException&lt;/code>异常. debug模式下, 会打印&lt;strong>Ignoring benign property binding failure&lt;/strong>.&lt;/p>
&lt;h3 id="2x">2.x&lt;/h3>
&lt;p>2.x版本中, 如果找不到getter方法, 会将原值默认为null, 并继续执行绑定.&lt;/p></description></item><item><title>自定义GOPATH下安装godep失败</title><link>https://atbug.com/install-godep-issue-in-custom-gopath/</link><pubDate>Fri, 22 Dec 2017 13:02:38 +0000</pubDate><guid>https://atbug.com/install-godep-issue-in-custom-gopath/</guid><description>
&lt;p>我的环境变量是这样的:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">export&lt;/span> &lt;span class="nv">GOROOT&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/go
&lt;span class="nb">export&lt;/span> &lt;span class="nv">GOPATH&lt;/span>&lt;span class="o">=&lt;/span>/Users/addo/Workspaces/go_w
&lt;span class="nb">export&lt;/span> &lt;span class="nv">GOBIN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$GOROOT&lt;/span>/bin
&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$PATH&lt;/span>:&lt;span class="nv">$GOBIN&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用下面的命令安装报错:&lt;/p>
&lt;p>&lt;code>go get -v github.com/tools/godep&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>github.com/tools/godep (download)
github.com/tools/godep/vendor/github.com/pmezard/go-difflib/difflib
github.com/tools/godep/vendor/github.com/kr/fs
github.com/tools/godep/vendor/github.com/kr/text
github.com/tools/godep/vendor/golang.org/x/tools/go/vcs
github.com/tools/godep/vendor/github.com/kr/pretty
github.com/tools/godep
go install github.com/tools/godep: open /usr/local/go/bin/godep: permission denied&lt;/p>
&lt;/blockquote>
&lt;p>默认是安装到&lt;code>$GOBIN&lt;/code>目录下, 权限不够.&lt;/p>
&lt;p>使用:&lt;/p>
&lt;p>&lt;code>sudo go get -v github.com/tools/godep&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>sudo go get -v github.com/tools/godep
github.com/tools/godep (download)
created GOPATH=/Users/addo/go; see &amp;lsquo;go help gopath&amp;rsquo;
github.com/tools/godep/vendor/github.com/kr/fs
github.com/tools/godep/vendor/github.com/kr/text
github.com/tools/godep/vendor/github.com/pmezard/go-difflib/difflib
github.com/tools/godep/vendor/golang.org/x/tools/go/vcs
github.com/tools/godep/vendor/github.com/kr/pretty
github.com/tools/godep&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>$GOBIN&lt;/code>并没有找到&lt;code>godef&lt;/code>. 输出提示&lt;code>created GOPATH=/Users/addo/go; &lt;/code>. 因为sudo的时候找不到&lt;code>GOPATH&lt;/code>变量, 便重新创建了目录.&lt;/p>
&lt;p>解决方案一:&lt;/p>
&lt;ol>
&lt;li>临时修改&lt;code>GOBIN&lt;/code>: &lt;code>export GOBIN=$GOPATH/bin&lt;/code>&lt;/li>
&lt;li>运行&lt;code>go get github.com/tools/godep&lt;/code>&lt;/li>
&lt;li>将生成的godef复制到&lt;code>GOROOT/bin&lt;/code>下&lt;/li>
&lt;li>回滚修改&lt;code>export GOBIN=$GOROOT/bin; export PATH=$PATH:$GOBIN&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>解决方案二:&lt;/p>
&lt;p>修改&lt;code>GOROOT/bin&lt;/code>的属组属主, 安全性问题, 不推荐.&lt;/p></description></item><item><title>Kafka的消息可靠传递</title><link>https://atbug.com/kafka-reliable-data-delivery/</link><pubDate>Sat, 18 Nov 2017 14:01:46 +0000</pubDate><guid>https://atbug.com/kafka-reliable-data-delivery/</guid><description>
&lt;p>Kafka提供的基础保障可以用来构建可靠的系统, 却无法保证完全可靠. 需要在可靠性和吞吐之间做取舍.&lt;/p>
&lt;ul>
&lt;li>Kafka在分区上提供了消息的顺序保证.&lt;/li>
&lt;li>生产的消息在写入到所有的同步分区上后被认为是&lt;strong>已提交&lt;/strong> (不需要刷到硬盘). 生产者可以选择在消息提交完成后接收broker的确认, 是写入leader之后, 或者所有的副本&lt;/li>
&lt;li>只要有一个副本存在, 提交的消息就不会丢失&lt;/li>
&lt;li>消费者只能读取到已提交的消息&lt;/li>
&lt;/ul>
&lt;h2 id="复制">复制&lt;/h2>
&lt;p>Kafka的复制机制保证每个分区有多个副本, 每个副本可以作为leader或者follower的角色存在. 为了保证副本的同步, 需要做到:&lt;/p>
&lt;ul>
&lt;li>保持到zk的连接会话: 每隔6s向zk发送心跳, 时间可配置&lt;/li>
&lt;li>每隔10s向leader拉取消息, 时间可配置&lt;/li>
&lt;li>从leader拉取最近10s的写入的消息. 保持不间断的从leader获取消息是不够的, 必须保证几乎没有延迟&lt;/li>
&lt;/ul>
&lt;h2 id="broker配置">Broker配置&lt;/h2>
&lt;h3 id="复制因子">复制因子&lt;/h3>
&lt;p>&lt;code>default.replication.factor&lt;/code> broker级别的副本数设置, 通过这个配置来控制&lt;strong>自动创建&lt;/strong>的topic的副本数. 为N的时候, 可以容忍失去N-1个副本, 保证topic的可读写.&lt;/p>
&lt;h3 id="脏副本的leader选举">脏副本的leader选举&lt;/h3>
&lt;p>&lt;code>unclean.leader.election.enable&lt;/code> 0.11.0.0之前的版本, 默认为true; 之后的版本默认为false. 这个设置控制不同步的副本能否参与leader的选举. 如果设置为true, 当没有同步副本可用的时候, 不同步的副本会成为leader, 意味着有数据丢失. 如果设置为false, 则意味着系统会处于不可用的状态, 该部分没有leader提供服务. 需要在&lt;strong>可用性&lt;/strong>和&lt;strong>一致性&lt;/strong>之间做取舍.&lt;/p>
&lt;h3 id="最小同步副本数">最小同步副本数&lt;/h3>
&lt;p>&lt;code>min.insync.replicas&lt;/code> 这个设置可以作用于broker和topic级别. 假如broker数为3, 最小同步副本数为2. 当2个同步副本中的一个出现问题, 集群便不会再接受生产者的发送消息请求. 同事客户端会收到&lt;code>NotEnoughReplicasException&lt;/code>. 此时, 消费者还可以继续读取存在的数据. 唯一的同步副本变成只读.&lt;/p>
&lt;h2 id="可靠系统中使用生产者">可靠系统中使用生产者&lt;/h2>
&lt;h3 id="发送确认">发送确认&lt;/h3>
&lt;p>&lt;code>acks&lt;/code> 可选0, 1或者all. 设置影响吞吐和一致性.&lt;/p>
&lt;ul>
&lt;li>&lt;code>acks=0&lt;/code> 意味着消息发送出去后就认为是成功写入topic.&lt;/li>
&lt;li>&lt;code>acks=1&lt;/code> 发送后等待leader写入后确认&lt;/li>
&lt;li>&lt;code>acks=all&lt;/code> 发送后等待所有副本写入后确认&lt;/li>
&lt;/ul>
&lt;h3 id="重试">重试&lt;/h3>
&lt;p>&lt;code>retries&lt;/code> 消息发送后会收到成功或者错误码. 错误有两种, 可重试的和不可重试的. 对于可重试的错误, 生产者会重复发送, 而&lt;code>reties&lt;/code>控制重试的次数. 比如borker返回&lt;code>LEADER_NOT_AVAILABLE&lt;/code>错误, 生产者会自动进行重试(retries不等于0), 因为broker之后会选择新的leader. 如果返回&lt;code>INVALID_CONFIG&lt;/code>, 重试也不会解决问题.
同时&lt;code>retries&lt;/code>有可能导致消息重复, 这就是Kafka消息的&lt;code>at least once&lt;/code>保证. 在0.11.0.0之后, 提供了幂等的特性, 保证消息的&lt;code>exactly one&lt;/code>. 对于跨数据中心的复制(比如MirrorMaker), 默认设置为&lt;code>Integer.MAX_VALUE&lt;/code>&lt;/p>
&lt;h3 id="额外的错误处理">额外的错误处理&lt;/h3>
&lt;p>使用生产者内置的重试是一个正确处理多种错误而不丢失消息的简单途径. 但是开发者还需要处理其他的错误, 比如:&lt;/p>
&lt;ul>
&lt;li>不可重试错误&lt;/li>
&lt;li>发送之前的错误&lt;/li>
&lt;li>场试完所有的重试次数后还是未成功发送.&lt;/li>
&lt;/ul>
&lt;h2 id="可靠系统中使用消费者">可靠系统中使用消费者&lt;/h2>
&lt;p>&lt;strong>已提交消息&lt;/strong>和&lt;strong>已提交偏移量&lt;/strong>
完全不同的两个概念, 前者是对生产者有效, 后者是对消费者有效.&lt;/p>
&lt;h3 id="重要设置">重要设置&lt;/h3>
&lt;ul>
&lt;li>&lt;code>group.id&lt;/code> 两个有相同&lt;code>group.id&lt;/code>并且订阅同一个topic的消费者, 会分配到topic下分区的一个子集, 并且是独立的子集.&lt;/li>
&lt;li>&lt;code>auto.offset.reset&lt;/code> 这个参数控制当broker端没有发现任何提交的偏移量的时候, 消费者应该从什么位置开始读取消息. 接受&lt;code>earliest&lt;/code>和&lt;code>latest&lt;/code>两种设置. &lt;code>earliest&lt;/code>意思是会从0开始读取, 而&lt;code>latest&lt;/code>意思是从最末尾开始.&lt;/li>
&lt;li>&lt;code>enable.auto.commit&lt;/code> 按照时间计划提交偏移量或者代码中手动提交. 对consumer来说这是一个&lt;strong>重大&lt;/strong>的决定. 自动提交会保证只提交循环中已经处理的数据, 但是有可能会在下次提交始前系统崩溃. 这就导致已经被处理的消息的偏移量没有提交到broker. 下次拉取的时候(consumer重新上线或者rebalance时候由其他消费者处理该分区)会重新拉取已经处理过的消息, &lt;strong>重复消费&lt;/strong>. 假如你是将拉取的消息交由其他的线程处理, 那自动提交可能会到时消息被拉取, 却没有被处理. 自动提交的好处是吞吐量大.&lt;/li>
&lt;li>&lt;code>auto.commit.interval.ms&lt;/code> 当&lt;code>enable.auto.commit&lt;/code>设置为&lt;strong>true&lt;/strong>的时候, 通过这个配置控制自动提交的时间间隔. 越大吞吐就越大, 一致性就越低. 越小, 则会增加提交的次数, 影响吞吐, 但是会提高一致性.&lt;/li>
&lt;/ul>
&lt;h3 id="准确提交偏移量">准确提交偏移量&lt;/h3>
&lt;h4 id="总是提交已经处理过得消息">总是提交已经处理过得消息&lt;/h4>
&lt;p>假如你是在循环中处理所有的消息, 并且不需要维护跨多次轮询的状态, 会比较容易实现. 可以使用自动提交, 或者在轮询循环的末尾进行偏移量提交.&lt;/p>
&lt;h4 id="提交频率是性能和系统崩溃时重复的消息数量间的取舍">提交频率是性能和系统崩溃时重复的消息数量间的取舍&lt;/h4>
&lt;p>一次轮询循环中可以进行多次偏移量提交, 甚至每处理一条提交一次. 或者几个轮询提交一次. 提交会有性能上的开销, 类似生产者的&lt;code>acks=all&lt;/code>&lt;/p>
&lt;h4 id="保证你清楚的了解将要提交什么偏移量">保证你清楚的了解将要提交什么偏移量&lt;/h4>
&lt;p>常见的一个陷阱就是一次轮询循环中的偏移量提交了读到的最大偏移量, 而不是已经处理过得最大偏移量. 会导致消息丢失.&lt;/p>
&lt;h3 id="再平衡">再平衡&lt;/h3>
&lt;p>准确处理consumer的再平衡(consumer上线或者下线). 再平衡会引起先从消费者上摘取某些分区, 然后在分配某些分区. 通过实现RebalanceListener接口来实现控制.&lt;/p>
&lt;h3 id="消费者可能需要重试">消费者可能需要重试&lt;/h3>
&lt;p>某些场景下, 暂时不提交偏移量, 下次轮询的时候会重复拉取消息. 比如数据库连接暂时不可用的情况下.&lt;/p>
&lt;h3 id="消费者可能需要维护状态">消费者可能需要维护状态&lt;/h3>
&lt;p>某些场景下, 需要在多个轮询间存在聚合运算.&lt;/p>
&lt;h3 id="处理长时间的处理">处理长时间的处理&lt;/h3>
&lt;p>有些时候, 消息的处理耗时较长, 比如与其他系统交互或者进行比较复杂的运算.
某些Kafka版本的消费者, 两次轮询的间隔不能太长 (0.10.0.0之前版本的消费者没有单独的心跳进程, 是通过轮询同时达到心跳目的). 太长, 消费者则会被认为是下线, 会发生再平衡.&lt;/p>
&lt;h3 id="有且只有一次的消息投递">有且只有一次的消息投递&lt;/h3>
&lt;p>有些场景需要至少一次的语义(没有消息丢失); 而某些场景则需要有些只有一次的语义. 但是当前Kafka没有提供完美的有且只有一次的支持. 需要与其他系统结合一起实现, 比如使用唯一的key写入数据库或者redis等存储中.&lt;/p></description></item><item><title>Spring Cloud - Eureka Client源码分析</title><link>https://atbug.com/spring-cloud-eureka-client-source-code-analysis/</link><pubDate>Sat, 14 Oct 2017 22:04:59 +0000</pubDate><guid>https://atbug.com/spring-cloud-eureka-client-source-code-analysis/</guid><description>
&lt;p>准备做个Spring Cloud源码分析系列, 作为Spring Cloud的源码分析笔记.&lt;/p>
&lt;p>这一篇是Eureka的客户端.&lt;/p>
&lt;h2 id="客户端">客户端&lt;/h2>
&lt;p>两种方式, 最终的实现基本一样.&lt;/p>
&lt;h3 id="显示指定服务发现的实现类型">显示指定服务发现的实现类型&lt;/h3>
&lt;p>使用&lt;code>@EnableEurekaClient&lt;/code>注解显示的指定使用Eureka作为服务发现的实现, 并实例化&lt;code>EurekaClient&lt;/code>实例. 实际上使用的是&lt;code>@EnableDiscoveryClient&lt;/code>注解.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Target&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ElementType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TYPE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Retention&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetentionPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RUNTIME&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Documented&lt;/span>
&lt;span class="nd">@Inherited&lt;/span>
&lt;span class="nd">@EnableDiscoveryClient&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nd">@interface&lt;/span> &lt;span class="n">EnableEurekaClient&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="动态配置实现">动态配置实现&lt;/h3>
&lt;p>使用&lt;code>@EnableDiscoveryClient&lt;/code>注解来配置服务发现的实现.&lt;/p>
&lt;h4 id="源码分析">源码分析&lt;/h4>
&lt;p>&lt;strong>EnableDiscoveryClient&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Target&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ElementType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TYPE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Retention&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetentionPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RUNTIME&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Documented&lt;/span>
&lt;span class="nd">@Inherited&lt;/span>
&lt;span class="nd">@Import&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EnableDiscoveryClientImportSelector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nd">@interface&lt;/span> &lt;span class="n">EnableDiscoveryClient&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>EnableDiscoveryClient&lt;/code>注解的作用主要是用来引入&lt;code>EnableDiscoveryClientImportSelector&lt;/code>&lt;/p>
&lt;p>&lt;strong>EnableDiscoveryClientImportSelector&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Order&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Ordered&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LOWEST_PRECEDENCE&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">100&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EnableDiscoveryClientImportSelector&lt;/span>
&lt;span class="kd">extends&lt;/span> &lt;span class="n">SpringFactoryImportSelector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">EnableDiscoveryClient&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEnabled&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RelaxedPropertyResolver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getEnvironment&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="s">&amp;#34;spring.cloud.discovery.enabled&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Boolean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Boolean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TRUE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">hasDefaultFactory&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>EnableDiscoveryClientImportSelector&lt;/code>继承了&lt;code>SpringFactoryImportSelector&lt;/code>并指定了泛型&lt;code>EnableDiscoveryClient&lt;/code>. &lt;strong>这里的泛型是重点&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>SpringFactoryImportSelector&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SpringFactoryImportSelector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kd">implements&lt;/span> &lt;span class="n">DeferredImportSelector&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BeanClassLoaderAware&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EnvironmentAware&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ClassLoader&lt;/span> &lt;span class="n">beanClassLoader&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">annotationClass&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="nf">SpringFactoryImportSelector&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">annotationClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;)&lt;/span> &lt;span class="n">GenericTypeResolver&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">resolveTypeArgument&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">SpringFactoryImportSelector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">selectImports&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AnnotationMetadata&lt;/span> &lt;span class="n">metadata&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里只截取了部分变量和方法
&lt;code>SpringFactoryImportSelector&lt;/code>是spring cloud common包中的一个抽象类, 主要作用是检查泛型T是否有指定的factory实现, 即spring.factories中有对应类的配置.&lt;/p>
&lt;p>&lt;strong>spring.factories&lt;/strong>&lt;/p>
&lt;p>在&lt;code>spring-cloud-netflix-eureka-client.jar!/META-INF/spring.factories&lt;/code>中&lt;code>EnableDiscoveryClient&lt;/code>的指定factory实现是&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.springframework.cloud.netflix.eureka.config.EurekaClientConfigServerAutoConfiguration,\
org.springframework.cloud.netflix.eureka.config.EurekaDiscoveryClientConfigServiceAutoConfiguration,\
org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration,\
org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration
org.springframework.cloud.bootstrap.BootstrapConfiguration=\
org.springframework.cloud.netflix.eureka.config.EurekaDiscoveryClientConfigServiceBootstrapConfiguration
org.springframework.cloud.client.discovery.EnableDiscoveryClient=\
org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时&lt;code>EnableAutoConfiguration&lt;/code>中包含了&lt;code>org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration&lt;/code>, &lt;code>EurekaClientAutoConfiguration&lt;/code>会为&lt;code>EurekaDiscoveryClientConfiguration&lt;/code>的实例依赖进行初始化, 如EurekaClient. EurekaClient在构造时会启动一个HeartBeat线程, 线程在运行的时候会做renew的操作, 将Application的信息注册更新到Eureka的服务端.&lt;/p>
&lt;p>&lt;strong>EurekaDiscoveryClientConfiguration&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@EnableConfigurationProperties&lt;/span>
&lt;span class="nd">@ConditionalOnClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EurekaClientConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@ConditionalOnProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;eureka.client.enabled&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">matchIfMissing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@CommonsLog&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EurekaDiscoveryClientConfiguration&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">SmartLifecycle&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Ordered&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>MetaspaceSize的坑</title><link>https://atbug.com/java8-metaspace-size-issue/</link><pubDate>Thu, 13 Apr 2017 11:55:14 +0000</pubDate><guid>https://atbug.com/java8-metaspace-size-issue/</guid><description>
&lt;p>这几天生产上有台机器的Metaspace一直在告警，Metaspace使用达到了97%。使用&lt;code>-XX:MetaspaceSize=512m&lt;/code>，告警也还在在持续，查看MC只有81536.0，显然这个参数没起作用。&lt;/p>
&lt;p>也有人遇到类似的问题，并在openjdk上提过类似的bug，其实是一个注释的bug，最终在&lt;a href="https://bugs.openjdk.java.net/browse/JDK-8151845">JDK-8151845&lt;/a>中修复了。&lt;/p>
&lt;blockquote>
&lt;p>Class metadata is deallocated when the corresponding Java class is unloaded. Java classes are unloaded as a result of garbage collection, and garbage collections may be induced in order to unload classes and deallocate class metadata. When the space committed for class metadata reaches a certain level (a high-water mark), a garbage collection is induced. After the garbage collection, the high-water mark may be raised or lowered depending on the amount of space freed from class metadata. The high-water mark would be raised so as not to induce another garbage collection too soon. The high-water mark is initially set to the value of the command-line option MetaspaceSize. It is raised or lowered based on the options MaxMetaspaceFreeRatio and MinMetaspaceFreeRatio. If the committed space available for class metadata as a percentage of the total committed space for class metadata is greater than MaxMetaspaceFreeRatio, then the high-water mark will be lowered. If it is less than MinMetaspaceFreeRatio, then the high-water mark will be raised.&lt;/p>
&lt;/blockquote>
&lt;p>查看了Oracle的手册，Metaspace的GC会在committed size达到high-water mark之后发生。并且GC之后high-water mark会变化：变大或者变小，变大的话会防止下次GC发生得太早。high-water mark的默认初始大小20.8M，通过&lt;strong>MetaspaceSize&lt;/strong>来设置，可见MetaspaceSize是控制Metaspace发生GC的阈值。GC后high-water mark的变化，通过MaxMetaspaceFreeRatio和MinMetaspaceFreeRatio控制。&lt;/p>
&lt;p>MaxMetaspaceSize默认为-1，无限大。不过如果没有限制的话，一直增大会被系统干掉进程。最好还是设置一下，比如1G。&lt;/p>
&lt;p>下面是我测试了分别设置MetaspaceSize、MaxMetaspaceSize、InitialBootClassLoaderMetaspaceSize为1G，Metaspace的变化。&lt;/p>
&lt;p>&lt;code>-XX:MetaspaceSize=1024m&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>committed: 29360128
init: 0
max: -1
used: 28440648&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>-XX:MaxMetaspaceSize=1024m&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>committed: 29360128
init: 0
max: 1073741824
used: 28503552&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>-XX:InitialBootClassLoaderMetaspaceSize=1024m&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>committed: 1087635456
init: 0
max: -1
used: 28500344&lt;/p>
&lt;/blockquote>
&lt;p>三个参数都是没有改变init的大小，但是InitialBootClassLoaderMetaspaceSize改变了committed的大小，其实也是最终我们要的设置。&lt;/p>
&lt;p>关于这个参数，可以看你假笨的关于&lt;a href="http://lovestblog.cn/blog/2016/10/29/metaspace/">Metaspace的源码解读&lt;/a>，发现的有点晚了。&lt;/p>
&lt;p>最后的解决方案是使用这个配置：&lt;code>-XX:MaxMetaspaceSize=1024m -XX:InitialBootClassLoaderMetaspaceSize=256m&lt;/code>。&lt;/p></description></item><item><title>Redis清理缓存</title><link>https://atbug.com/clean-speicified-keys-in-redis/</link><pubDate>Tue, 13 Dec 2016 16:54:41 +0000</pubDate><guid>https://atbug.com/clean-speicified-keys-in-redis/</guid><description>
&lt;p>最近有个需求需要主动的去清理部分缓存，考虑的原子性的问题，用Lua脚本进行实现。&lt;/p>
&lt;p>Lua脚本&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="kd">local&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="kr">in&lt;/span> &lt;span class="n">ipairs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;KEYS&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;span class="kr">do&lt;/span>
&lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;DEL&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">count&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>shell运行&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">redis-cli --eval file.lua ,&lt;span class="o">[&lt;/span>KEY PATTERN&lt;span class="o">]&lt;/span>
&lt;span class="c1">#sample: 清理所有key以Test开头的记录&lt;/span>
redis-cli --eval clear.lua , Test*
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Java&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Jedis&lt;/span> &lt;span class="n">jedis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Jedis&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">6379&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">URL&lt;/span> &lt;span class="n">resource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Resources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;META-INF/scripts/clear.lua&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">lua&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Resources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">resource&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Charsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">eval&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jedis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">eval&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">lua&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Name*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>