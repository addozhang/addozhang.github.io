<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工具 on 乱世浮生</title><link>https://atbug.com/categories/%E5%B7%A5%E5%85%B7/</link><description>Recent content in 工具 on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 31 Jul 2024 08:47:26 +0800</lastBuildDate><atom:link href="https://atbug.com/categories/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Obsidian 图片上传插件：Image Upload Toolkit 0.6.0</title><link>https://atbug.com/obsidina-plugin-image-upload-toolkit-new-version/</link><pubDate>Wed, 31 Jul 2024 08:47:26 +0800</pubDate><guid>https://atbug.com/obsidina-plugin-image-upload-toolkit-new-version/</guid><description>Obsidian 插件 Image Upload Toolkit 刚刚发布了 0.6.0 版本。在最新版本中，新增了 AWS S3 支持，升级到最新版本后，您可以将文档中的图片上传到 AWS S3 存储。
Image Upload Toolkit 的第一个版本于去年六月发布。关于我为什么开发这个插件的更多信息，可以阅读我 去年的文章。
这个插件的主要功能是将本地图片上传到指定存储，将 Markdown 语法中的本地图片地址更新为图片的公共链接，并将结果复制到剪贴板。当然，您也可以选择更新原始内容。截至 0.6.0 版本，Image Upload Toolkit 支持 imgur、阿里云 OSS、Imagekit 和 AWS S3。
欢迎安装并试用这个插件，并提出 意见和建议。
在开发这个插件期间，我参考了 obsidian-imgur-plugin、obsidian-image-auto-upload-plugin、create-obsidian-plugin，并受到了 Mweb 的启发。</description></item><item><title>使用 Docker 运行 FRR BGP</title><link>https://atbug.com/run-frr-bgp-with-docker/</link><pubDate>Wed, 30 Aug 2023 13:13:48 +0800</pubDate><guid>https://atbug.com/run-frr-bgp-with-docker/</guid><description>之前写 在 Kubernetes 集群中使用 MetalLB 作为 LoadBalancer（下）- BGP 时，我曾在 OpenWRT 安装 FRR 来进行了测试。需要 OpenWRT 的环境不免会有些繁琐，假如只是做些更简单的测试，比如从 FRR 所在服务器上进行 VIP 的访问，则是不需要 OpenWRT 的，仅仅部署 FRR 就足够了。
今天我就尝试了直接使用 Docker 运行 FRR 来启动 BGP Router 进程，简单的几步即可实现，对环境要求非常低，只需要个 Docker 就行。如果你又更简单的方法，也请留言分享。
配置 创建一个本地目录在管理 FRR 配置，这个目录将会挂载到容器中。
mkdir frr 准备 FRR Daemon 的日志，开启 BGP daemon 进程。</description></item><item><title>使用 Fortio 做代理功能测试</title><link>https://atbug.com/use-fortio-for-proxy-test/</link><pubDate>Sat, 12 Aug 2023 01:11:46 +0800</pubDate><guid>https://atbug.com/use-fortio-for-proxy-test/</guid><description>介绍 Fortio 是一个用于微服务性能负载、性能、延迟测试和 Web UI 的工具。它通常与 Istio 和其他服务网格解决方案一起使用，但可以独立使用来测试网络延迟和 HTTP/gRPC 的负载特性。以下是关于 Fortio 的一些主要特点和信息：
用途：Fortio 可以创建一个定制的负载（查询/秒或 qps）并记录请求延迟的直方图，以及每秒查询的百分位数。 多协议支持：虽然最初是为 HTTP/1.1 设计的，但 Fortio 还支持 HTTP/2, gRPC, TCP 和 UDP。 Web UI：Fortio 提供了一个 Web 界面，使用户能够从浏览器中轻松配置测试并查看结果的直方图和百分位数。 结果存储：可以将结果存储为 JSON 文件，便于进一步的分析和比较。 灵活性：支持多种请求负载模式，包括固定 qps、固定并发连接数和最大自动调整 qps。 轻量级：Fortio 是用 Go 编写的，可以作为一个单一的二进制文件轻松部署。 集成：Fortio 可以与 Istio、Prometheus 等工具集成，以提供更深入的性能分析和观察。 Fortio 作为服务器 fortio server &amp;amp; 08:24:40.</description></item><item><title>Obsidian 图片上传插件：Image Upload Toolkit</title><link>https://atbug.com/obsidian-plugin-image-upload-toolkit/</link><pubDate>Thu, 08 Jun 2023 20:03:19 +0800</pubDate><guid>https://atbug.com/obsidian-plugin-image-upload-toolkit/</guid><description>这篇文章主要来介绍下我开发的 Obsidian 图片上传插件 Image Upload Toolkit。
背景 为什么开发这个插件？这还要从去年说起。
去年我感觉到使用了 6 年的 Mweb Pro 已经无法满足我的需求了，这并不是说 Mweb 不是个好产品，反而过去几年中我经常向身边的朋友推荐这个产品。Mweb 是个非常好的产品，功能多、快捷键方便、界面也满足我个人的审美，而且买断制的付费也很有吸引力。
随着这两年写的内容越来越多，Mweb 即使再多的功能也无法满足一些个性化的需求。就比如说内容自动排版，个人习惯中英文、数字间加上空格、段落间的空行，等等。这些都是 Mweb 这种封闭的产品无法实现的，尤其是对个人开发者（Mweb 是独立开发者开发的）来说，满足个性化需求的成本是非常大的。何况，众口难调。
后面我陆续使用了 NotePlan、Notion 一段时间，Notion 我个人还算喜欢，但其仍是封闭的产品，很难对其进行扩展。
正当我在朋友圈感慨时，有人推荐了 Obsidian。试用之后眼前一亮，这插件系统太强大了。比如上面的自动排版问题，使用 Linter 插件完美得到解决。
于是乎，我通过安装多种插件、将快捷键改成与 Mweb 一致，几乎是平移到了 Obsidian，并收获了更多的功能。唯独令人遗憾的是无法复刻 Mweb 的图片上传功能（我一直用阿里云的 OSS 作为图床，使用 Mweb 可以自动上传并替换 markdown 语法中的图片地址），每次编辑完需要发布到博客前我都要复制到 Mweb 中上传。</description></item><item><title>取代 Docker Desktop？Podman Desktop 发布 GA 版本 1.0</title><link>https://atbug.com/podman-desktop-announce-general-availability/</link><pubDate>Wed, 24 May 2023 23:46:39 +0800</pubDate><guid>https://atbug.com/podman-desktop-announce-general-availability/</guid><description>Podman（POD MANager）是一个跨平台的容器管理工具，可用于管理容器、镜像、卷以及以容器组形式存在的 Pod。Podman 可以在 Linux 上直接运行容器，但在像 macOS 和 Windows 这样的平台，是通过虚拟机间接运行容器。
Podman Desktop 提供的图形用户界面使开发人员可以方便快捷地在本地环境中创建和管理容器，简化了容器的使用，无需记忆和输入复杂的命令，降低容器的使用门槛。
主要特点 优秀的兼容性 多平台：支持 Linux、macOS、Windows 兼容 Docker API、Lima、Kind、Openshift Local、Podman Machine 容器和 Pod 管理 构建、运行容器的 Pod 无需 Kubernetes 直接运行 Pod 内置终端 ssh 到容器 与 Docker Compose 兼容 镜像和仓库管理 配置管理多个镜像仓库 构建、拉取、tag 和推送镜像 推送镜像到 Kind 集群 Kubernetes 兼容 Kubernetes YAML 创建 Pod 从容器或者 Pod 生成 Kubernetes YAML 兼容 Docker Extension 支持 Docker Desktop UI extensions，可以使用 OCI 镜像运行 Extension，如 flomesh/pipy-docker-ext 。</description></item><item><title>撸一个 Alfred Workflow</title><link>https://atbug.com/create-an-alfred-workflow/</link><pubDate>Tue, 03 May 2022 21:38:22 +0800</pubDate><guid>https://atbug.com/create-an-alfred-workflow/</guid><description>本人算是个 Alfred 的重度依赖者了（上图是去年换了新电脑后的使用数据），Alfred 也算 Mac 上的第一款付费软件，买的 mega 版。安装的 workflow 估计有几十个，不过常用的估计有十几个吧。
用了几年，一直都秉承着能不造轮子就不造的原则，基本也都能找到想要的 workflow。为什么突然要写个 workflow，这要从 macOS 12.3 移除了 Python2 说起。自从升级了 12.3，好多 workflow 都无法正常工作了，其中就有常用的 Safari 历史搜索。苦等了一段时间，也不见作者更新，不得已自己下场来写。正好五一假期有时间，顺便远离工作放空一下。
搜索后看到了如何使用 Go 编写 workflow 这篇文章，就准备用 Go 来写。然后就有了我的第一个 workflow：Safari Toolkit。
现在是实现了原 workflow 的所有功能，对 Safari 的访问历史进行搜索：基于 URL 和 Title，然后选择搜索结果在 Safari 中打开。</description></item></channel></rss>