<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 乱世浮生</title>
    <link>https://atbug.com/post/</link>
    <description>Recent content in Posts on 乱世浮生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 14 May 2020 11:34:24 +0800</lastBuildDate>
    
	<atom:link href="https://atbug.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 中的 Mysql 时区问题</title>
      <link>https://atbug.com/mysql-timezone-in-java/</link>
      <pubDate>Thu, 14 May 2020 11:34:24 +0800</pubDate>
      
      <guid>https://atbug.com/mysql-timezone-in-java/</guid>
      <description>(Photo by Andrea Piacquadio from Pexels) 话说工作十多年，mysql 还真没用几年。期初是外企银行，无法直接接触到 DB；后来一直从事架构方面，也多是解决问题为主。 这次搭建海</description>
    </item>
    
    <item>
      <title>翻译：多运行时微服务架构</title>
      <link>https://atbug.com/translation-multi-runtime-microservices-architecture/</link>
      <pubDate>Wed, 01 Apr 2020 23:18:00 +0800</pubDate>
      
      <guid>https://atbug.com/translation-multi-runtime-microservices-architecture/</guid>
      <description>这样文章通过Google翻译和人工逐字修改的方式完成的，某些位置也加上自己的理解。如有错误，请指出。 翻译这篇文章的目的其实是为了自己加深对微</description>
    </item>
    
    <item>
      <title>控制 Pod 内容器的启动顺序</title>
      <link>https://atbug.com/control-process-order-of-pod-containers/</link>
      <pubDate>Thu, 12 Mar 2020 22:05:16 +0800</pubDate>
      
      <guid>https://atbug.com/control-process-order-of-pod-containers/</guid>
      <description>背景 众所周知, Kubernetes Pod 内有两种容器: 初始化容器(init container)和应用容器(app container). 其中初始化容器的执行先于应用容器, 并且初始化容器</description>
    </item>
    
    <item>
      <title>Go Docker 镜像进阶: 精简镜像</title>
      <link>https://atbug.com/build-minimal-docker-image-for-go-app/</link>
      <pubDate>Wed, 11 Mar 2020 23:00:27 +0800</pubDate>
      
      <guid>https://atbug.com/build-minimal-docker-image-for-go-app/</guid>
      <description>​[图片来自 https://www.facebook.com/sequenceprocess/] 问题: 入门到生产级的差距 昨天的文章《为 Go 应用创建 Docker 镜像》, 算是入门级的, 并不适用于生产级. 为什么? $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE addozhang/golang-hello-world latest 4cce1292a87a 4 seconds</description>
    </item>
    
    <item>
      <title>为 Go 应用创建 Docker 镜像</title>
      <link>https://atbug.com/build-docker-image-for-go-app/</link>
      <pubDate>Wed, 11 Mar 2020 20:41:58 +0800</pubDate>
      
      <guid>https://atbug.com/build-docker-image-for-go-app/</guid>
      <description>嗯嗯, 最近开始用 Golang 了. 今天需要为 Go 应用创建对象, 看了下官方博客. 拿 hello world 做个测试. 使用下面的命令创建个新的项目 $ mkdir -p $GOPATH/src/github.com/addozhang/golang-hello-world &amp;amp;&amp;amp; cd &amp;#34;$_&amp;#34; $ go mod init github.com/addozhang/golang-hello-world go: creating new go.mod:</description>
    </item>
    
    <item>
      <title>云原生CICD: Tekton Trigger 实战</title>
      <link>https://atbug.com/tekton-trigger-practice/</link>
      <pubDate>Wed, 12 Feb 2020 21:30:03 +0800</pubDate>
      
      <guid>https://atbug.com/tekton-trigger-practice/</guid>
      <description>Trigger的介绍看这里. 接上文Tekton Pipeline 实战, 我们为某个项目创建了一个Pipeline, 但是执行时通过 PipelineRun 来完成的. 在 PipelineRun 中我们制定了 Pipepline</description>
    </item>
    
    <item>
      <title>Tekton Trigger 介绍</title>
      <link>https://atbug.com/tekton-trigger-glance/</link>
      <pubDate>Wed, 05 Feb 2020 18:03:15 +0800</pubDate>
      
      <guid>https://atbug.com/tekton-trigger-glance/</guid>
      <description>背景 Tekton 的介绍请参考Tekton Pipeline 实战. 通常, CI/CD 事件应该包含如下信息: 确定事件的类型(比如 GitHub Push, GitLab Issue, Docker Hub Webhook 等) 可从特定管道访问并映射到特定管道 (</description>
    </item>
    
    <item>
      <title>Tekton Dashboard 安装</title>
      <link>https://atbug.com/tekton-dashboard-installation/</link>
      <pubDate>Sat, 01 Feb 2020 12:39:28 +0800</pubDate>
      
      <guid>https://atbug.com/tekton-dashboard-installation/</guid>
      <description>Tekton 提供了dashboard方便用户管理和查看 Tekton PipelineRun 和 TaskRun 以及创建, 执行和完成过程中涉及的资源. 它还允许按标签过滤 PipelineRun 和 TaskRun. 安装方法 kubectl apply --filename https://github.com/tektoncd/dashboard/releases/download/v0.4.1/dashboard_latest_release.yaml 检查das</description>
    </item>
    
    <item>
      <title>CICD: Tekton Pipeline 实战</title>
      <link>https://atbug.com/tekton-pipeline-practice/</link>
      <pubDate>Tue, 21 Jan 2020 20:19:33 +0800</pubDate>
      
      <guid>https://atbug.com/tekton-pipeline-practice/</guid>
      <description>Tekton 是 Google 开源的 Kubernetes 原生CI/CD 系统, 功能强大扩展性强. 前身是 Knavite 里的 build-pipeline 项目, 后期孵化成独立的项目. 并成为 CDF 下的四个项目之一, 其他三个分别是 Jenkins, Jenkins X,</description>
    </item>
    
    <item>
      <title>Tekton 0.9.0 更新</title>
      <link>https://atbug.com/tekton-0.9.0-release/</link>
      <pubDate>Sun, 19 Jan 2020 14:33:17 +0800</pubDate>
      
      <guid>https://atbug.com/tekton-0.9.0-release/</guid>
      <description>翻译整理自 What’s New in Tekton 0.9 功能及Bug修复 脚本模式 以前如果要在容器里运行个简单的 bash 脚本, 需要这么写: - name:helloimage:ubuntucommand:[&amp;#39;bash&amp;#39;]args:- -c- | set -execho&amp;#34;h</description>
    </item>
    
    <item>
      <title>Tekton安装及Hello world</title>
      <link>https://atbug.com/tekton-installation-and-sample/</link>
      <pubDate>Fri, 17 Jan 2020 19:17:14 +0800</pubDate>
      
      <guid>https://atbug.com/tekton-installation-and-sample/</guid>
      <description>安装 kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml 检查安装的tekton相关的CRD: kubectl api-resources | grep tekton clustertasks tekton.dev false ClusterTask conditions tekton.dev true Condition pipelineresources tekton.dev true PipelineResource pipelineruns pr,prs tekton.dev true PipelineRun pipelines tekton.dev true Pipeline taskruns tr,trs tekton.dev true TaskRun tasks tekton.dev true Task tekton的两个po</description>
    </item>
    
    <item>
      <title>Minikube安装istio</title>
      <link>https://atbug.com/install-istio-on-minikube/</link>
      <pubDate>Fri, 17 Jan 2020 08:02:42 +0800</pubDate>
      
      <guid>https://atbug.com/install-istio-on-minikube/</guid>
      <description>准备 注意: istioctl的安装要使用安装里的, 不要是用homebrew里的. github issue curl -L https://istio.io/downloadIstio | sh - cd istio-1.4.2 cp bin/istioctl /usr/local/bin/istioctl 安装前检查 istioctl verify-install 如果检查没问题, 会看到</description>
    </item>
    
    <item>
      <title>神秘的Eureka自我保护</title>
      <link>https://atbug.com/translation-the-mystery-of-eurekas-self-preservation/</link>
      <pubDate>Sun, 05 Jan 2020 14:14:03 +0800</pubDate>
      
      <guid>https://atbug.com/translation-the-mystery-of-eurekas-self-preservation/</guid>
      <description>本文翻译自The Mystery of Eureka Self-Preservation 根据CAP定理, Eureka是一个AP系统, 这就导致了在网络分区期间多个注册表中的信息不一致. 自我保护功能则是为了尽</description>
    </item>
    
    <item>
      <title>加速云原生的 Java 开发</title>
      <link>https://atbug.com/speed-up-java-development-on-kubernetes/</link>
      <pubDate>Sat, 21 Dec 2019 20:45:22 +0800</pubDate>
      
      <guid>https://atbug.com/speed-up-java-development-on-kubernetes/</guid>
      <description>今天来说说日常在Kubernetes开发Java项目遇到的问题. 当我们新建一个项目的时候, 总是面临需要新建manifest, 平时都是copy</description>
    </item>
    
    <item>
      <title>使用 Jib 为 Java 应用构建镜像</title>
      <link>https://atbug.com/build-docker-or-oci-image-with-jib-for-java/</link>
      <pubDate>Mon, 09 Dec 2019 10:05:30 +0800</pubDate>
      
      <guid>https://atbug.com/build-docker-or-oci-image-with-jib-for-java/</guid>
      <description>Jib是Google Container Tools中的一个工具。 Jib builds optimized Docker and OCI images for your Java applications without a Docker daemon - and without deep mastery of Docker best-practices. It is available as plugins for Maven and Gradle and as a Java library. Jib无需Docke</description>
    </item>
    
    <item>
      <title>Docker Engine API on Mac Osx</title>
      <link>https://atbug.com/docker-engine-api-on-mac-osx/</link>
      <pubDate>Wed, 06 Nov 2019 20:19:50 +0800</pubDate>
      
      <guid>https://atbug.com/docker-engine-api-on-mac-osx/</guid>
      <description>根据官方的文档Docker Desktop on Mac vs. Docker Toolbox, Docker Desktop on Mac只提供了UNIX socket/var/run/docker.sock, 并未提供tcp的监听(默认2375端口). 如果使用linux的配置方式在</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://atbug.com/about/</link>
      <pubDate>Tue, 22 Jan 2013 10:02:37 +0800</pubDate>
      
      <guid>https://atbug.com/about/</guid>
      <description>基本信息 Addo Zhang 广州 程序员</description>
    </item>
    
  </channel>
</rss>