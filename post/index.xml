<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 乱世浮生</title><link>https://atbug.com/post/</link><description>Recent content in Posts on 乱世浮生</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 15 Oct 2021 07:58:25 +0800</lastBuildDate><atom:link href="https://atbug.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>低复杂度 - 服务网格的下一站</title><link>https://atbug.com/service-mesh-unnecessary-complexity/</link><pubDate>Fri, 15 Oct 2021 07:58:25 +0800</pubDate><guid>https://atbug.com/service-mesh-unnecessary-complexity/</guid><description>
&lt;p>&lt;strong>译者：&lt;/strong>&lt;/p>
&lt;p>作为一个曾经在制造业企业的基础架构团队任职，为支持公司的“互联网基因”和“数字化转型”落地了云原生基础设施平台，并在尝试采用服务网格未成的我来说，看到这篇文章深有感触。尤其是文中所说的“人少，问题多，需要快速输出价值”，直戳到了痛处。有限的人手有限的时间，我们需要将大部分精力集中在解决成熟度曲线较低的基本问题上，要想很好的运行复杂的系统是非常困难的。&lt;/p>
&lt;p>服务网格是一个新的基础设施层，可以承载很多的功能，未来还会有更大的想象空间和光明的未来。&lt;/p>
&lt;p>以上的种种原因，也促使我后来选择进入一家提供服务网格的产品企业，也希望服务网格可以被更简单的使用。&lt;/p>
&lt;p>“道阻且长，行则将至！”&lt;/p>
&lt;p>本文翻译自 Chris Campbell 的 &lt;a href="https://www.infoq.com/articles/service-mesh-unnecessary-complexity">How Unnecessary Complexity Gave the Service Mesh a Bad Name&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="关键要点">关键要点&lt;/h3>
&lt;ul>
&lt;li>采用服务网格有巨大的价值，但必须以轻量级的方式进行，以避免不必要的复杂性。&lt;/li>
&lt;li>在实施服务网时，要采取务实的方法，与技术的核心功能保持一致，并小心干扰（译者：注意力的分散）。&lt;/li>
&lt;li>服务网格的一些核心特性包括标准化监控、自动加密和身份识别、智能路由、可靠的重试和网络可扩展性。&lt;/li>
&lt;li>服务网格可以提供强大的功能，但这些功能会分散本应对核心优势的关注，并且这些功能也不是实施服务网格的主要原因。&lt;/li>
&lt;li>在初始实施服务网格时没有必要去关注那些明显会分散注意力的功能，比如复杂的控制平面、多集群支持、Envoy、WASM 和 A/B 测试。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>服务网格是 Kubernetes 世界中的一个热门话题，但许多潜在的采用者已经有些失望了。服务网格的落地受到压倒性的复杂性和看似无穷无尽的供应商解决方案的限制。在我亲自浏览了这个领域之后，我发现采用服务网格具有巨大的价值，但它必须以轻量级的方式完成，以避免不必要的复杂性。尽管普遍存在幻灭感，但服务网格的未来依然光明。&lt;/p>
&lt;h2 id="在工作中学习">在工作中学习&lt;/h2>
&lt;p>我进入服务网格的世界始于我在一家老牌的财富 500 强技术公司担任云计算架构师的角色。在开始我们的服务网格之旅时，我身边有许多强大的工程师，但大多数人几乎没有云计算开发经验。我们的组织诞生于云计算之前，完全实现云计算的价值需要时间。我们的传统业务线主要集中在技术栈的硬件元素上，云计算的决策最初是由为运送硬件或为该硬件提供固件和驱动程序而开发的流程驱动的。&lt;/p>
&lt;p>随着该组织经历其“数字化转型”，它越来越依赖于提供高质量的软件服务，并逐渐开发出更好的方法。但作为云计算架构师，我仍在为优先考虑硬件的业务流程，以及具有不同技能、流程和信念的工程团队导航。随着时间的推移，我和我的团队在将 .NET 应用程序迁移到 Linux、采用 Docker、迁移到 AWS 以及与之相关的最佳实践（如持续集成、自动化部署、不可变基础设施、基础设施即代码、监控等）方面变得熟练并成功。但挑战依然存在。&lt;/p>
&lt;p>在此期间，我们开始将我们的应用程序拆分为一组微服务。起初，这是一个缓慢的转变，但最终这种方法流行起来，开发人员开始更喜欢构建新的服务而不是添加到现有服务。我们这些基础设施团队的人把这看作是一种成功。唯一的问题是与网络相关的问题数量激增，开发人员正在向我们寻求答案，而我们还没有准备好有效地应对这种冲击。&lt;/p>
&lt;h2 id="服务网格的援救">服务网格的援救&lt;/h2>
&lt;p>我第一次听说服务网格是在 2015 年，当时我正在研究服务发现工具并寻找与 Consul 集成的简单方法。我喜欢将应用程序职责卸载到“sidecar”容器的想法，并找到了一些可以帮助做到这一点的工具。大约在这个时候，Docker 有一个叫做“链接”的功能，让你可以将两个应用程序放在一个共享的网络空间中，这样它们就可以通过 localhost 进行通信。此功能提供了类似于我们现在在 Kubernetes pod 中所拥有的体验：两个独立构建的服务可以在部署时进行组合以实现一些附加功能。&lt;/p>
&lt;p>我总是抓住机会用简单的方案来解决大问题，因此这些新功能的力量立即打动了我。虽然这个工具是为了与 Consul 集成而构建的，但实际上，它可以做任何你想做的事情。这是我们拥有的基础设施层，可以用来一次为所有人解决问题。&lt;/p>
&lt;p>这方面的一个具体例子出现在我们采用过程的早期。当时，我们正致力于跨不同服务的日志标准化输出。通过采用服务网格和这种新的设计模式，我们能够将我们的人的问题——让开发人员标准化他们的日志——换成技术问题——将所有流量传递给可以为他们记录日志的代理。这是我们团队向前迈出的重要一步。&lt;/p>
&lt;p>我们对服务网格的实现非常务实，并且与该技术的核心功能非常吻合。然而，大部分营销炒作都集中在不太需要的边缘案例上，在评估服务网格是否适合你时，能够识别这些干扰是很重要的。&lt;/p>
&lt;h1 id="核心功能">核心功能&lt;/h1>
&lt;p>服务网格可以提供的核心功能分为四个关键责任领域：可观察性、安全性、连接性和可靠性。这些功能包括：&lt;/p>
&lt;h2 id="标准化监控">标准化监控&lt;/h2>
&lt;p>我们取得的最大胜利之一，也是最容易采用的，是标准化监控。它的运营成本非常低，可以适应你使用的任何监控系统。它使组织能够捕获所有 HTTP 或 gRPC 指标，并以标准方式在整个系统中存储它们。这控制了复杂性并减轻了应用程序团队的负担，他们不再需要实现 Prometheus 指标端点或标准化日志格式。它还使用户能够公正地了解其应用程序的&lt;a href="https://sre.google/sre-book/monitoring-distributed-systems/#xref_monitoring_golden-signals">黄金信号&lt;/a>。&lt;/p>
&lt;h2 id="自动加密和身份识别">自动加密和身份识别&lt;/h2>
&lt;p>证书管理很难做好。如果一个组织还没有在这方面进行投入，他们应该找到一个网格来为他们做这件事。证书管理需要维护具有巨大安全隐患的复杂基础设施代码。相比之下，网格将能够与编排系统集成，以了解工作负载的身份，在需要时可以用来执行策略。这允许提供与 Calico 或 Cilium 等功能强大的 CNI 提供的安全态势相当或更好的安全态势。&lt;/p>
&lt;h2 id="智能路由">智能路由&lt;/h2>
&lt;p>智能路由是另一个特性，它使网格能够在发送请求时“做正确的事”。场景包括：&lt;/p>
&lt;ol>
&lt;li>使用延迟加权算法优化流量&lt;/li>
&lt;li>拓扑感知路由以提高性能并降低成本&lt;/li>
&lt;li>根据请求成功的可能性使请求超时&lt;/li>
&lt;li>与编排系统集成以进行 IP 解析，而不是依赖 DNS&lt;/li>
&lt;li>传输升级，例如 HTTP 到 HTTP/2&lt;/li>
&lt;/ol>
&lt;p>这些功能可能不会让普通人感到兴奋，但随着时间的推移，它们从根本上增加了价值&lt;/p>
&lt;h2 id="可靠的重试">可靠的重试&lt;/h2>
&lt;p>在分布式系统中重试请求可能很麻烦，但是它几乎总是需要实现的。分布式系统通常会将一个客户端请求转换为更多下游请求，这意味着“尾巴”场景的可能性会大大增加，例如发生异常失败的请求。对此最简单的缓解措施是重试失败的请求。&lt;/p>
&lt;p>困难来自于避免“重试风暴”或“重试 DDoS”，即当处于降级状态的系统触发重试、随着重试增加而增加负载并进一步降低性能时。天真的实现不会考虑这种情况，因为它可能需要与缓存或其他通信系统集成以了解是否值得执行重试。服务网格可以通过对整个系统允许的重试总数进行限制来实现这一点。网格还可以在这些重试发生时报告这些重试，可能会在你的用户注意到系统降级之前提醒你。&lt;/p>
&lt;h2 id="网络可扩展性">网络可扩展性&lt;/h2>
&lt;p>也许服务网格的最佳属性是它的可扩展性。它提供了额外的适应性层，以应对 IT 下一步投入的任何事情。Sidecar 代理的设计模式是另一个令人兴奋和强大的功能，即使它有时会被过度宣传和过度设计来做用户和技术人员还没有准备好的事情。虽然社区在等着看哪个服务网格“生出”，这反映了之前过度炒作的编排战争，但未来我们将不可避免地看到更多专门构建的网格，并且可能会有更多的最终用户构建自己的控制平面和代理以满足他们的场景。&lt;/p>
&lt;h1 id="服务网格干扰">服务网格干扰&lt;/h1>
&lt;p>平台或基础设施控制层的价值怎么强调都不为过。然而，在服务网格世界中，我了解到入门的一个主要的挑战是，服务网格解决的核心问题通常甚至不是大多数服务网格项目交流的焦点！&lt;/p>
&lt;p>相反，来自服务网格项目的大部分交流都围绕着听起来很强大或令人兴奋但最终会让人分心的功能。这包括：&lt;/p>
&lt;h2 id="强复大杂的控制平面">强（复）大（杂）的控制平面&lt;/h2>
&lt;p>要很好地运行复杂的软件是非常困难的。这就是为什么如此多的组织使用云计算来使用完全托管的服务来减轻这一点的原因。那么为什么服务网格项目会让我们负责操作如此复杂的系统呢？系统的复杂性不是资产，而是负债，但大多数项目都在吹捧它们的功能集和可配置性。&lt;/p>
&lt;h2 id="多集群支持">多集群支持&lt;/h2>
&lt;p>多集群现在是一个热门话题。最终，大多数团队将运行多个 Kubernetes 集群。但是多集群的主要痛点是你的 Kubernetes 管理的网络被切分。服务网格有助于解决这个 Kubernetes 横向扩展问题，但它最终并没有带来任何新的东西。是的，多集群支持是必要的，但它对服务网格的承诺被过度宣传了。&lt;/p>
&lt;h2 id="envoy">Envoy&lt;/h2>
&lt;p>Envoy 是一个很棒的工具，但它被作为某种标准介绍，这是有问题的。Envoy 是众多开箱即用的代理之一，你可以将其作为服务网格平台的基础。但是 Envoy 并没有什么内在的特别之处，使其成为正确的选择。采用 Envoy 会给你的组织带来一系列重要问题，包括：&lt;/p>
&lt;ul>
&lt;li>运行时成本和性能（所有这些过滤器加起来！）&lt;/li>
&lt;li>计算资源需求以及如何随负载扩展&lt;/li>
&lt;li>如何调试错误或意外行为&lt;/li>
&lt;li>你的网格如何与 Envoy 交互以及配置生命周期是什么&lt;/li>
&lt;li>运作成熟的时间（这可能比你预期的要长）&lt;/li>
&lt;/ul>
&lt;p>服务网格中代理的选择应该是一个实现细节，而不是产品要求。&lt;/p>
&lt;h2 id="wasm">WASM&lt;/h2>
&lt;p>我是 Web Assembly (WASM) 的忠实拥趸，已经成功地使用它在 &lt;a href="https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor">Blazor&lt;/a> 中构建前端应用程序。然而，WASM 作为定制服务网格代理行为的工具，让你处于获得一个全新的软件生命周期开销的境地，这与你现有的软件生命周期完全正交！如果你的组织还没有准备好构建、测试、部署、维护、监控、回滚和版本代码（影响通过其系统运行的每个请求），那么你还没有准备好使用 WASM。&lt;/p>
&lt;h2 id="ab-测试">A/B 测试&lt;/h2>
&lt;p>直到为时已晚，我才意识到 A/B 测试实际上是一个应用程序级别的问题。在基础设施层提供原语来实现它是很好的，但是没有简单的方法来完全自动化大多数组织需要的 A/B 测试水平。通常，应用程序需要定义独特的指标来定义测试的积极信号。如果组织想要在服务网格级别投入 A/B 测试，那么解决方案需要支持以下内容：&lt;/p>
&lt;ol>
&lt;li>对部署和回滚的精细控制，因为它可能同时进行多个不同的“测试”&lt;/li>
&lt;li>能够捕获系统知道的自定义指标并可以根据这些指标做出决策&lt;/li>
&lt;li>根据请求的特征暴露对流量方向的控制，其中可能包括解析整个请求正文&lt;/li>
&lt;/ol>
&lt;p>这需要实现很多，没有哪个服务网格是开箱即用的。最终，我们的组织选择了网格之外的特征标记解决方案，其以最小的努力取得了巨大的成功。&lt;/p>
&lt;h2 id="我们在哪里结束">我们在哪里结束&lt;/h2>
&lt;p>最终，我们面临的挑战并不是服务网格独有的。我们工作的组织有一系列限制条件，要求我们对解决的问题以及如何解决问题采取务实的态度。我们面临的问题包括：&lt;/p>
&lt;ul>
&lt;li>一个拥有大量不同技能的开发人员的大型组织&lt;/li>
&lt;li>云计算和 SaaS 能力普遍不成熟&lt;/li>
&lt;li>为非云计算软件优化的流程&lt;/li>
&lt;li>碎片化的软件工程方法和信念&lt;/li>
&lt;li>有限的资源&lt;/li>
&lt;li>激进的截止日期&lt;/li>
&lt;/ul>
&lt;p>简而言之，我们人少，问题多，需要快速输出价值。我们必须支持主要不是 Web 或云计算的开发者，我们需要扩大规模以支持有不同方法和流程的大型工程组织来做云计算。我们需要将大部分精力集中在解决成熟度曲线较低的基本问题上。&lt;/p>
&lt;p>最后，当面对我们自己的服务网格决策时，我们决定建立在 &lt;a href="https://linkerd.io/">Linkerd 服务网格&lt;/a>上，因为它最符合我们的优先事项：低运营成本（计算和人力）、低认知开销、支持性社区以及透明的管理——同时满足我们的功能要求和预算。在 Linkerd 指导委员会工作了一段时间后（他们喜欢诚实的反馈和社区参与），我了解到它与我自己的工程原则有多么的契合。Linkerd 最近&lt;a href="https://www.cncf.io/announcements/2021/07/28/cloud-native-computing-foundation-announces-linkerd-graduation/">在 CNCF 达到毕业状态&lt;/a>，这是一个漫长的过程，强调了该项目的成熟及其广泛采用。&lt;/p>
&lt;h2 id="关于作者">关于作者&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/10/15/16342274995874.jpg" alt="">&lt;/p>
&lt;p>&lt;strong>Chris Campbell&lt;/strong> 担任软件工程师和架构师已有十多年，与多个团队和组织合作落地云原生技术和最佳实践。他在与业务领导者合作采用加速业务的软件交付策略和与工程团队合作交付可扩展的云基础架构之间分配时间。他对提高开发人员生产力和体验的技术最感兴趣。&lt;/p></description></item><item><title>自动替换 Kubernetes 镜像</title><link>https://atbug.com/kubernetes-images-swapper/</link><pubDate>Wed, 06 Oct 2021 08:01:41 +0800</pubDate><guid>https://atbug.com/kubernetes-images-swapper/</guid><description>
&lt;p>前几天有朋友在问如何在某云上拉取 Tekton 的镜像，这种情况其实比较普遍不只是某云。工作中经常要用到过某些靠运气才能拉取到的镜像，这对工作来说真是极度的不友好。&lt;/p>
&lt;p>因此也萌生了个想法，维护一个后网络友好的仓库镜像，在 Pod 创建时将镜像仓库切换到自维护的仓库，从自维护的仓库拉取镜像。&lt;/p>
&lt;p>前几天&lt;a href="https://mp.weixin.qq.com/s/SL_yBvyhb5p6Lm1HieJBbA">体验了极狐Gitlab 的容器镜像库&lt;/a>，便是为这个想法做的准备。当然其他的云厂商也有提供针对个人版的免费镜像仓库和企业版仓库。&lt;/p>
&lt;p>正好 &lt;a href="https://mp.weixin.qq.com/s/uZ_Q5Fn3XpfUEHBOFxWdvg">Pipy 作为策略引擎&lt;/a>，非常适合实现这种策略的执行。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/10/05/20211005212733.png" alt="">&lt;/p>
&lt;h2 id="实现思路">实现思路&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/10/05/20211005210725.png" alt="">&lt;/p>
&lt;h3 id="admission-webhook">Admission Webhook&lt;/h3>
&lt;p>&lt;a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers/">Kubernetes 动态准备控制&lt;/a> 的 &lt;code>MutatingWebhookConfiguration&lt;/code> 可以 hook Pod 的创建或者更新，然后调用目标服务对 Pod 资源对象进行 patch 操作。&lt;/p>
&lt;h3 id="策略引擎">策略引擎&lt;/h3>
&lt;p>Pipy 作为应用的核心，也就是 &lt;code>MutatingWebhookConfiguration&lt;/code> 的目标服务，以策略引擎的角色完成策略的执行。&lt;/p>
&lt;p>Pipy 支持从文件或者 HTTP 地址加载脚本，这里为了便于策略的更新，使用了后者。&lt;/p>
&lt;p>对于从 HTTP 地址加载脚本，HTTP 地址返回内容的第一行会作为 Pipy 的主脚本，Pipy 启动时会加载主脚本，其他的文件也会被缓存到内存中。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#地址 http://localhost:6080/repo/registry-mirror/&lt;/span>
$ curl http://localhost:6080/repo/registry-mirror/
/main.js
/config.json
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pipy 会每隔 5s 检查脚本和配置文件的 &lt;code>etag&lt;/code>（就是文件的最后更新时间），假如与当前文件的 etag 不一致，则会缓存并重新加载。&lt;/p>
&lt;p>利用 Pipy 的这个特性，便可以策略和配置的准实时更新。&lt;/p>
&lt;h3 id="策略">策略&lt;/h3>
&lt;p>对于策略的部分，我们将其逻辑和配置进行了分离。配置部分，配置了需要进行替换的镜像的前缀，以及替换成的内容；而逻辑，这是对 &lt;code>MutatingWebhookConfiguration&lt;/code> 的 &lt;code>AdmissionReview&lt;/code> 的对象进行检查。&lt;/p>
&lt;p>配置：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;registries&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;registry.gitlab.cn/flomesh/registry-mirror/tekton-pipeline&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>比如说，对于镜像 &lt;code>gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/controller:v0.28.1&lt;/code>，将 &lt;code>gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd&lt;/code> 替换成 &lt;code>registry.gitlab.cn/addozhang/registry-mirror/tekton-pipeline&lt;/code>。&lt;/p>
&lt;h2 id="demo">Demo&lt;/h2>
&lt;p>本文使用所有的&lt;a href="https://github.com/addozhang/registry-mirror">源码&lt;/a>都已上传到了 github。&lt;/p>
&lt;h3 id="脚本服务器">脚本服务器&lt;/h3>
&lt;p>既然选用了 HTTP 方式加载 Pipy 的脚本，那就需要实现一个脚本服务器。实现的方式有两种：使用脚本实现脚本服务器和使用 Pipy 内置的 Codebase。&lt;/p>
&lt;h4 id="使用脚本实现脚本服务器">使用脚本实现脚本服务器&lt;/h4>
&lt;p>根据需求定义两种路由：&lt;/p>
&lt;ul>
&lt;li>&lt;code>/repo/registry-mirror/&lt;/code>：返回脚本和配置的文件列表&lt;/li>
&lt;li>&lt;code>/repo/registry-mirror/[File Name]&lt;/code>：返回对应的文件的内容，同时需要在响应头添加 &lt;code>etag&lt;/code>，值是文件的更新时间&lt;/li>
&lt;/ul>
&lt;p>具体脚本如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="err">#&lt;/span>&lt;span class="nx">repo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="nx">pipy&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">_serveFile&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filename&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">filename&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">22&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">Message&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nx">bodiless&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">method&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;HEAD&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">headers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s1">&amp;#39;etag&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mtime&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;content-type&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">method&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;HEAD&amp;#39;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">Message&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">404&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="sb">`file &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> not found`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nx">_router&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">algo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">URLRouter&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="s1">&amp;#39;/repo/registry-mirror/&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/main.js\n/config.json&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="s1">&amp;#39;/repo/registry-mirror/*&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">_serveFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;text/plain&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}),&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6080&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">serveHTTP&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">_router&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>&lt;span class="o">%&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ pipy repo.js
2021-10-05 21:40:25 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span>
2021-10-05 21:40:25 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> Module /repo.js
2021-10-05 21:40:25 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="o">===============&lt;/span>
2021-10-05 21:40:25 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span>
2021-10-05 21:40:25 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>Listen on :::6080&lt;span class="o">]&lt;/span>
2021-10-05 21:40:25 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> -----&amp;gt;&lt;span class="p">|&lt;/span>
2021-10-05 21:40:25 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
2021-10-05 21:40:25 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> serveHTTP
2021-10-05 21:40:25 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
2021-10-05 21:40:25 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &amp;lt;-----&lt;span class="p">|&lt;/span>
2021-10-05 21:40:25 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span>
2021-10-05 21:40:25 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>listener&lt;span class="o">]&lt;/span> Listening on port &lt;span class="m">6080&lt;/span> at ::
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查路由：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ curl http://localhost:6080/repo/registry-mirror/
/main.js
/config.json
$ curl http://localhost:6080/repo/registry-mirror/main.js
&lt;span class="c1">#省略 main.js 的内容&lt;/span>
$ curl http://localhost:6080/repo/registry-mirror/config.json
&lt;span class="c1">#省略 config.json 的内容&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用-pipy-内置的-codebase">使用 Pipy 内置的 Codebase&lt;/h4>
&lt;p>在最新发布的 Pipy 内置了一个 Codebase，大家可以理解成脚本仓库，但是比单纯的仓库功能更加强大（后面会有文档介绍该特性）。&lt;/p>
&lt;p>目前版本的 Codebase 还未支持持久化的存储，数据都是保存在内存中。后续会提供 KV store 或者 git 类型的持久化支持。&lt;/p>
&lt;p>启动 Pipy 的 Codebase很简单：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ pipy
2021-10-05 21:49:08 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>codebase&lt;span class="o">]&lt;/span> Starting codebase service...
2021-10-05 21:49:08 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>listener&lt;span class="o">]&lt;/span> Listening on port &lt;span class="m">6060&lt;/span> at ::
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/10/05/20211005215007.png" alt="">&lt;/p>
&lt;p>对于新的 Codebase 控制台的使用，这里不做过多的介绍，直接使用 REST API 完成脚本的写入：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#创建 registry-mirror codebase，会自动创建一个空的 main.js&lt;/span>
$ curl -X POST http://localhost:6060/api/v1/repo/registry-mirror
&lt;span class="c1">#更新 main.js&lt;/span>
$ curl -X POST &lt;span class="s1">&amp;#39;http://localhost:6060/api/v1/repo/registry-mirror/main.js&amp;#39;&lt;/span> --data-binary &lt;span class="s1">&amp;#39;@scripts/main.js&amp;#39;&lt;/span>
&lt;span class="c1">#创建 config.json&lt;/span>
$ curl -X POST &lt;span class="s1">&amp;#39;http://localhost:6060/api/v1/repo/registry-mirror/config.json&amp;#39;&lt;/span> --data-binary &lt;span class="s1">&amp;#39;@scripts/config.json&amp;#39;&lt;/span>
&lt;span class="c1">#检查 codebase 的版本&lt;/span>
$ curl -s http://localhost:6060/api/v1/repo/registry-mirror &lt;span class="p">|&lt;/span> jq -r .version
&lt;span class="c1">#更新版本&lt;/span>
$ curl -X POST &lt;span class="s1">&amp;#39;http://localhost:6060/api/v1/repo/registry-mirror&amp;#39;&lt;/span> --data-raw &lt;span class="s1">&amp;#39;{&amp;#34;version&amp;#34;:2}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装">安装&lt;/h3>
&lt;p>进入到项目的根目录中，执行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ helm install registry-mirror ./registry-mirror -n default
NAME: registry-mirror
LAST DEPLOYED: Tue Oct &lt;span class="m">5&lt;/span> 22:19:26 &lt;span class="m">2021&lt;/span>
NAMESPACE: default
STATUS: deployed
REVISION: &lt;span class="m">1&lt;/span>
TEST SUITE: None
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 webhook：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get mutatingwebhookconfigurations
NAME WEBHOOKS AGE
registry-mirror-webhook &lt;span class="m">1&lt;/span> 2m6s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查 pod 的启动日志：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl logs -n pipy -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>pipy
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>codebase&lt;span class="o">]&lt;/span> GET http://192.168.1.101:6060/repo/registry-mirror/ -&amp;gt; &lt;span class="m">21&lt;/span> bytes
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>codebase&lt;span class="o">]&lt;/span> GET /repo/registry-mirror/main.js -&amp;gt; &lt;span class="m">2213&lt;/span> bytes
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>codebase&lt;span class="o">]&lt;/span> GET /repo/registry-mirror/config.json -&amp;gt; &lt;span class="m">149&lt;/span> bytes
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span>
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> Module /main.js
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="o">===============&lt;/span>
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span>
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>Listen on :::6443&lt;span class="o">]&lt;/span>
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> -----&amp;gt;&lt;span class="p">|&lt;/span>
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> acceptTLS
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>--&amp;gt; &lt;span class="o">[&lt;/span>tls-offloaded&lt;span class="o">]&lt;/span>
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> decodeHTTPRequest
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> replaceMessage
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> encodeHTTPResponse --&amp;gt;&lt;span class="p">|&lt;/span>
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span> &amp;lt;---------------------------------&lt;span class="p">|&lt;/span>
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>config&lt;span class="o">]&lt;/span>
2021-10-05 14:19:28 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>listener&lt;span class="o">]&lt;/span> Listening on port &lt;span class="m">6443&lt;/span> at ::
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="测试">测试&lt;/h3>
&lt;p>在&lt;a href="https://mp.weixin.qq.com/s/SL_yBvyhb5p6Lm1HieJBbA">上一篇&lt;/a>中我已经推送了 Tekton 的两个镜像到容器镜像库中，因此这里直接安装 tekton 进行测试。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/previous/v0.28.1/release.yaml
$ kubectl get pod -n tekton-pipelines
NAME READY STATUS RESTARTS AGE
tekton-pipelines-controller-75974fbfb8-f62dv 1/1 Running &lt;span class="m">0&lt;/span> 7m36s
tekton-pipelines-webhook-6cc478f7ff-mm5l9 1/1 Running &lt;span class="m">0&lt;/span> 7m36s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -o json -n tekton-pipelines -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>tekton-pipelines-controller &lt;span class="p">|&lt;/span> jq -r &lt;span class="s1">&amp;#39;.items[].spec.containers[].image&amp;#39;&lt;/span>
registry.gitlab.cn/flomesh/registry-mirror/tekton-pipeline/controller:v0.28.1
$ kubectl get pod -o json -n tekton-pipelines -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>tekton-pipelines-webhook &lt;span class="p">|&lt;/span> jq -r &lt;span class="s1">&amp;#39;.items[].spec.containers[].image&amp;#39;&lt;/span>
registry.gitlab.cn/flomesh/registry-mirror/tekton-pipeline/webhook:v0.28.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的结果可以看到结果是符合预期的。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>整个实现的策略部分加上配置，只有 70 多行的代码。并且实现了逻辑与配置的分离之后，后续的配置也都可以做到实时的更新而无需修改任何逻辑代码，更无需重新部署。&lt;/p>
&lt;p>但是目前的实现，是需要手动把镜像推送的自维护的镜像仓库中。实际上理想的情况是检查自维护的仓库中是否存在镜像（比如通过 REST API），如果未发现镜像，先把镜像拉取到本地，&lt;code>tag&lt;/code> 后再推送到自维护的仓库。不过这种操作，还是需要网络的畅通。当然也尝试过通过 REST API 触发 CICD Pipeline 的执行拉取镜像并 tag，但是极狐Gitlab 是部署在某云的环境上，同样也受困于网络问题。&lt;/p></description></item><item><title>极狐GitLab SaaS 内测轻度体验</title><link>https://atbug.com/jihu-gitlab-experience/</link><pubDate>Fri, 01 Oct 2021 08:18:09 +0800</pubDate><guid>https://atbug.com/jihu-gitlab-experience/</guid><description>
&lt;p>感谢极狐团队为 &lt;a href="https://gitlab.cn/">GitLab（SaaS）&lt;/a>本地化的努力，同时也感谢小马哥提供的内测资格。&lt;/p>
&lt;p>最近突然想到了个点子，需要使用一个私有的镜像仓库。极狐GitLab 有提供容器镜像库，正好和 CICD 一起做个轻度体验。&lt;/p>
&lt;h2 id="容器镜像库-container-registry">容器镜像库 Container Registry&lt;/h2>
&lt;p>文档介绍在&lt;a href="https://gitlab.cn/help/user/packages/container_registry/index">这里&lt;/a>，目前还是英文。（应该本地化的工作量很大，文档还没翻译。）&lt;/p>
&lt;p>容器镜像库可以作为独立镜像仓库使用（为什么要这么用，卖个关子下篇文章见），就是使用 docker 命令将构建好的镜像推送到 容器镜像库。&lt;/p>
&lt;p>当然也可以同 CICD 流水线结合使用，后文也会介绍。&lt;/p>
&lt;h3 id="独立使用">独立使用&lt;/h3>
&lt;p>本地登录 Container Registry 有两种验证方式：&lt;/p>
&lt;ul>
&lt;li>使用用户名和密码&lt;/li>
&lt;li>开启了&lt;a href="https://gitlab.cn/help/user/profile/account/two_factor_authentication">双重身份验证&lt;/a>，可以使用访问&lt;a href="https://gitlab.cn/help/user/profile/personal_access_tokens">个人访问令牌&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>其实，不管是否开始双重验证，都建议使用访问令牌。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker login registry.gitlab.cn
&lt;span class="c1">#根据提示输入用户名和密码或者令牌&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>image 的名字&lt;a href="https://docs.gitlab.com/ee/user/packages/container_registry/#image-naming-convention">最多有三层&lt;/a>，即 &lt;code>registry.example.com/[namespace]&lt;/code> 之后的内容最多有 3 层。比如下面的 image 名字 &lt;code>myproject/my/image&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">registry.example.com/mynamespace/myproject/my/image:rc1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其次 image 名字的第一层必须是镜像名，如上面的 &lt;code>myproject&lt;/code>。&lt;/p>
&lt;p>尝试将 tekton 的镜像推送上去：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker tag gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/controller:v0.28.1 registry.gitlab.cn/addozhang/registry-mirror/tekton-pipeline/controller:v0.28.1
docker push registry.gitlab.cn/addozhang/registry-mirror/tekton-pipeline/controller:v0.28.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/10/01/20211001070532.png" alt="">&lt;/p>
&lt;p>&lt;strong>请忽略发布时间，原镜像的 &lt;code>Created&lt;/code> 字段就有问题。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/10/01/20211001070622.png" alt="">&lt;/p>
&lt;p>同样可以使用 REST API 进行访问：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl --location --request GET &lt;span class="s1">&amp;#39;https://gitlab.cn/api/v4/projects/addozhang%2Fregistry-mirror/registry/repositories/155/tags&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--header &lt;span class="s1">&amp;#39;PRIVATE-TOKEN: TOKEN_HERE&amp;#39;&lt;/span>
&lt;span class="o">[{&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;v0.28.1&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;path&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;addozhang/registry-mirror/tekton-pipeline/controller:v0.28.1&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;location&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;registry.gitlab.cn/addozhang/registry-mirror/tekton-pipeline/controller:v0.28.1&amp;#34;&lt;/span>&lt;span class="o">}]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-cicd-构建和推送">使用 CICD 构建和推送&lt;/h2>
&lt;p>见下文。&lt;/p>
&lt;h2 id="cicd">CICD&lt;/h2>
&lt;p>我将之前 github 的使用的测试 tekton 的项目镜像到了&lt;a href="https://gitlab.cn/addozhang/tekton-test">这里&lt;/a>，并添加了一个 &lt;code>.gitlab-ci.yml&lt;/code> 的&lt;a href="https://gitlab.cn/addozhang/tekton-test/-/blob/main/.gitlab-ci.yml">流水线定义文件&lt;/a>。&lt;/p>
&lt;p>有了&lt;a href="https://gitlab.cn/help/ci/yaml/index.md">官方的文档&lt;/a>，以及参考&lt;a href="https://gitlab.com/gitlab-org/gitlab-foss/-/tree/master/lib/gitlab/ci/templates">官方提供各种的模板&lt;/a>，流水线的定义上手很快。&lt;/p>
&lt;p>整个流水线包含了两个 stage：Java 代码的编译打包和镜像的构建。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/10/01/20211001063858.png" alt="2021-10-01-06-38-58">&lt;/p>
&lt;p>如上图，最新的一次使用了 &lt;a href="https://gitlab.cn/help/ci/yaml/index.md%23cache">&lt;code>cache&lt;/code> 功能&lt;/a>将 &lt;code>.m2/repository&lt;/code> 缓存；而前两次使用了缓存（这里的构建耗时差异很大，不知道是不是因为晚上资源比较少？）。Java 项目会将依赖包保存在本地库中，使用 &lt;code>cache&lt;/code> 功能可以提升构建的效率。&lt;/p>
&lt;h3 id="流水线-dag">流水线 DAG&lt;/h3>
&lt;p>使用 &lt;code>needs&lt;/code> 可以控制同 stage 下作业的构建顺序，否则同 stage 下作业的执行是并行的。同时有了 &lt;code>needs&lt;/code> 还可以构建出 DAG，前提是最少需要 3 个作业，因此我又加了一个作业。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">cache&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">.m2/repository&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">variables&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">MAVEN_OPTS&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">stages&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">image&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">post-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">maven-build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven:3-jdk-8&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">artifacts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">target/*.jar&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">mvn install -DskipTests&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">docker-build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker:19.03.12&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">image&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">needs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">maven-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dependencies&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">maven-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">docker:19.03.12-dind&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">variables&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">IMAGE_TAG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$CI_REGISTRY_IMAGE:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">docker build -t $IMAGE_TAG .&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">docker push $IMAGE_TAG&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">done&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">post-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">needs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">docker-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;All Done!&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>感觉图有点简陋，后期应该会优化。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/10/01/20211001072045.png" alt="">&lt;/p>
&lt;h3 id="作业依赖">作业依赖&lt;/h3>
&lt;p>前面的流水线定义中，为了传递 maven 构建的 jar，使用了 &lt;code>artifacts&lt;/code> 和 &lt;code>dependencies&lt;/code> 进行了传递。&lt;/p>
&lt;p>难道是我理解错了？鼠标悬停并没有显示做依赖的作业。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/10/01/20211001072018.png" alt="">&lt;/p>
&lt;h3 id="流水线触发">流水线触发&lt;/h3>
&lt;p>除了 push 代码触发，还可以创建触发器通过 Web API 进行触发。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -X POST &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -F &lt;span class="nv">token&lt;/span>&lt;span class="o">=&lt;/span>TOKEN_HERE &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -F &lt;span class="nv">ref&lt;/span>&lt;span class="o">=&lt;/span>main &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> https://gitlab.cn/api/v4/projects/9766/trigger/pipeline
&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>:19252,&lt;span class="s2">&amp;#34;project_id&amp;#34;&lt;/span>:9766,&lt;span class="s2">&amp;#34;sha&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;5dde144d584b76fe6d3b63a4a9beb789762d1a2d&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;ref&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;main&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;status&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;created&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;2021-10-01T07:37:42.806+08:00&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;updated_at&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;2021-10-01T07:37:42.806+08:00&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;web_url&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;https://gitlab.cn/addozhang/tekton-test/-/pipelines/19252&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;before_sha&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;0000000000000000000000000000000000000000&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;tag&amp;#34;&lt;/span>:false,&lt;span class="s2">&amp;#34;yaml_errors&amp;#34;&lt;/span>:null,&lt;span class="s2">&amp;#34;user&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>:432,&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;addozhang&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;username&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;addozhang&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;state&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;active&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;avatar_url&amp;#34;&lt;/span>:null,&lt;span class="s2">&amp;#34;web_url&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;https://gitlab.cn/addozhang&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>,&lt;span class="s2">&amp;#34;started_at&amp;#34;&lt;/span>:null,&lt;span class="s2">&amp;#34;finished_at&amp;#34;&lt;/span>:null,&lt;span class="s2">&amp;#34;committed_at&amp;#34;&lt;/span>:null,&lt;span class="s2">&amp;#34;duration&amp;#34;&lt;/span>:null,&lt;span class="s2">&amp;#34;queued_duration&amp;#34;&lt;/span>:null,&lt;span class="s2">&amp;#34;coverage&amp;#34;&lt;/span>:null,&lt;span class="s2">&amp;#34;detailed_status&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;icon&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;status_created&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;created&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;label&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;created&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;group&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;created&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;tooltip&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;created&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;has_details&amp;#34;&lt;/span>:true,&lt;span class="s2">&amp;#34;details_path&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;/addozhang/tekton-test/-/pipelines/19252&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;illustration&amp;#34;&lt;/span>:null,&lt;span class="s2">&amp;#34;favicon&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;/assets/ci_favicons/favicon_status_created-4b975aa976d24e5a3ea7cd9a5713e6ce2cd9afd08b910415e96675de35f64955.png&amp;#34;&lt;/span>&lt;span class="o">}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>由于之前任职的公司内部也有用 Gitlab，也有过 Github Action 和 Tektoncd 的使用经验，所以体验下来并还没有任何阻碍。这也得益于文档的完善，以及极狐团队的努力，希望极狐可以做得更好。&lt;/p>
&lt;p>文中使用 &lt;code>registry-mirror&lt;/code> 做了仓库名，大家也能猜到点什么，敬请关注一下篇。&lt;/p></description></item><item><title>容器神话 Docker 是如何一分为二的</title><link>https://atbug.com/how-docker-broke-in-half/</link><pubDate>Mon, 20 Sep 2021 08:01:30 +0800</pubDate><guid>https://atbug.com/how-docker-broke-in-half/</guid><description>
&lt;p>译者点评：&lt;/p>
&lt;p>最近听了很多资深的人士关于开源，以及商业化的分析。开源与商业化，听起来就是一对矛盾的所在，似乎大家都在尝试做其二者的平衡。是先有开源，还是先有商业化？俗话说“谈钱不伤感情”，近几年背靠开源的创业公司如雨后春笋般涌现，即使是开发人员也是需要生活的。&lt;/p>
&lt;p>容器神话 Docker 曾经无比风光，盛极一时。即使这样一个备受瞩目，大获风投的热捧的独角兽也未能免俗，并付出了不小的代价。&lt;/p>
&lt;p>今天这篇文章讲述了 Docker 这家公司从诞生到巅峰到没落，这一路上所做的抉择，并最终做了开源与商业的分离，再一次从开源踏上找寻商业化之路。这些都是值得我们参考和思考的，不管是已经开源或者准备从事开源的。&lt;/p>
&lt;h2 id="这篇文章翻译自how-docker-broke-in-halfhttpswwwinfoworldcomarticle3632142how-docker-broke-in-halfhtml">这篇文章翻译自&lt;a href="https://www.infoworld.com/article/3632142/how-docker-broke-in-half.html">How Docker broke in half&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>这家改变游戏规则的容器公司是其昔日的外衣。作为云时代最热门的企业技术业务之一的它到底发生了什么？&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://www.infoworld.com/article/3204171/what-is-docker-the-spark-for-the-container-revolution.html">Docker 并没有发明容器&lt;/a>——将计算机代码打包成紧凑单元的方法，可以轻松地从笔记本电脑移植到服务器——但它确实通过创建一套通用的开源工具和可重用的镜像使其成为主流，这使所有开发人员只需构建一次软件即可在任何地方运行。&lt;/p>
&lt;p>Docker 使开发人员能够轻松地将他们的代码“容器化”并将其从一个系统移动到另一个系统，迅速将其确立为行业标准，颠覆了在虚拟机 (VM) 上部署应用程序的主要方式，并使 Docker 成为新一代最快被采用的企业技术之一。&lt;/p>
&lt;p>今天，Docker 仍然活着，但它只是它可能成为的公司的一小部分，从未成功地将这种技术创新转化为可持续的商业模式，最终导致其企业业务于 &lt;a href="https://twitter.com/QuinnyPig/status/1194687851587198977?s=20">2019 年 11 月出售给 Mirantis&lt;/a>。InfoWorld 采访了十几位前任和现任 Docker 员工、开源贡献者、客户和行业分析师，了解 Docker 如何分崩离析的故事。&lt;/p>
&lt;h2 id="docker-诞生了">Docker 诞生了&lt;/h2>
&lt;p>2008 年由 Solomon Hykes 在巴黎创立的 DotCloud，这个后来成为 Docker 的公司最初被设计为供开发人员轻松构建和发布他们的应用程序的&lt;a href="https://www.infoworld.com/article/3223434/what-is-paas-a-simpler-way-to-build-software-applications.html">平台即服务 (PaaS)&lt;/a>。&lt;/p>
&lt;p>在 2010 年夏天一起搬到硅谷&lt;a href="https://blog.ycombinator.com/solomon-hykes-docker-dotcloud-interview/">参加著名的 Y Combinator 计划&lt;/a>之前，Hykes 很快就加入了他的朋友兼程序员同事 Sebastien Pahl。已经被拒绝一次的 Hykes 和 Pahl 重新申请，Pahl 的父亲在他们面试前几周把去旧金山的机票钱放在他们面前。唉，这对夫妇再次被拒绝，直到 YC 校友 James Lindenbaum，一家名为 &lt;a href="https://www.infoworld.com/article/3614210/the-decline-of-heroku.html">Heroku 的竞争公司的创始人&lt;/a>，出面为他们担保。&lt;/p>
&lt;p>我们所知道的 Docker 于 &lt;a href="https://www.youtube.com/watch?v=362sHaO5eGU">2013 年 3 月在 PyCon 上由 Hykes 首次演示&lt;/a>，他解释说开发人员一直要求访问支持 DotCloud 平台的底层技术。他在那次谈话中说：“我们一直认为能够说“是”会很酷，这是我们的底层部分，现在你可以和我们一起做 Linux 容器，做任何你想做的事，去构建你的平台，这就是我们正在做的，”。&lt;/p>
&lt;p>Docker 首席执行官 Ben Golub 2013 年至 2017 年之间，告诉 InfoWorld，“这听起来很老套，但 Solomon 和我谈论的是预发布，我们可以看到所有集装箱船进入奥克兰港，我们正在谈论集装箱在航运界的价值。事实上，从世界的一侧运送汽车比将应用程序从一个服务器带到另一个服务器更容易，这似乎是一个需要解决的问题。”&lt;/p>
&lt;p>Docker 开源项目迅速崛起，吸引了成千上万的用户，与&lt;a href="https://www.docker.com/blog/docker-microsoft-partnership/">微软&lt;/a>、&lt;a href="https://aws.amazon.com/blogs/apn/docker-trusted-registry-aws-marketplace/">AWS&lt;/a> 和 &lt;a href="https://www.eweek.com/cloud/ibm-partners-with-docker-launches-containers-service/">IBM&lt;/a> 等公司建立了备受瞩目的合作伙伴关系，并获得了&lt;a href="https://www.infoworld.com/article/3622960/another-day-another-multi-billion-ipo-for-open-source.html?nsdr=true">满满一车的风险投资&lt;/a>，包括 Benchmark 的 Peter Fenton 和 Trinity Ventures 的 Dan Scholnick 的早期投资。调整后的公司更名为 Docker，并从 Benchmark、Coatue Management、Goldman Sachs 和 Greylock Partners 等公司筹集了近 3 亿美元。然而，与许多基于开源软件的公司一样，它很难找到一种可盈利的商业模式，而这些投资者从未得到他们的大笔回报。。&lt;/p>
&lt;p>RedMonk 分析师 James Governor 说，“Solomon 建立了过去 20 年来最引人注目的技术之一，并且在将观点打包并使其对大量开发人员非常有价值的业务中。Docker 是否做出了错误的决定？显然是的，但风投都疯了，他们向他们投入的钱意味着他们一定觉得他们可以做任何事情，这是有问题的。”&lt;/p>
&lt;p>快进到 2021 年，这个故事的简版是，备受欢迎的开源容器编排工具 &lt;a href="https://www.infoworld.com/article/3268073/what-is-kubernetes-your-next-application-platform.html">Kubernetes&lt;/a> 通过取代其主要利润来源：一个名为 Docker Swarm 的企业版容器编排工具，吃掉了 Docker（业务）的午餐. 然而，真实的故事要复杂得多。&lt;/p>
&lt;h2 id="开源商业化很难">开源商业化很难&lt;/h2>
&lt;p>巨额的风险投资、快速增长的竞争格局以及云行业巨头都想分一杯羹的阴影，将这家年轻的公司带入了一个犹如压力锅的运营环境。&lt;/p>
&lt;p>“有一种说法是&amp;rsquo;大象打架，草被践踏'，我们很清楚这不仅是针对 Docker，还有云供应商的相互竞争。他们都想把我们拉向不同的方向。既要保持我们的价值观和根基，又要建立一个企业，这个根本就是个困局”Golub 说。&lt;/p>
&lt;p>这位前 CEO 指出，随着 Docker 的发展，所有这些因素都造成了“自然的紧张关系”。Golub 说：“我们希望建立伟大的社区并通过开发者产品获利，同时还希望建立一个伟大的运营商产品，让客户能够大规模构建和部署容器。这就是我们的愿景，很快我们意识到我们必须迅速扩大规模，而且没有太多时间来平衡社区和成为一家商业企业&amp;hellip;&amp;hellip;在一家初创公司，你每天要做出 100 个决定，你希望 80 个是对的。”&lt;/p>
&lt;p>2014 年左右，Docker 开始认真考虑将其在容器领域的领先地位货币化的商业战略，当时该公司将部分风险投资资金用于 &lt;a href="https://techcrunch.com/2014/10/07/docker-acquires-koality-in-engineering-talent-grab/%23:~:text=Docker%2520decided%2520to%2520use%2520some,today%2520for%2520an%2520undisclosed%2520price.">2014 年 Koality 的收购&lt;/a>和 &lt;a href="https://www.docker.com/blog/docker-acquires-tutum/">2015 年的 Tutum 的收购&lt;/a>，同时还推出了自己的企业支持计划的第一次迭代。&lt;/p>
&lt;p>这些投资催生了像 Docker Hub 这样的产品——你可以认为它有点像 Docker 镜像的 GitHub（&lt;a href="https://www.infoworld.com/article/3623291/github-container-registry-available-for-production-use.html">现在也存在&lt;/a>）—— 以及最终的 Docker 企业版。但这些产品都没有真正受到企业客户的欢迎，他们通常乐于与更成熟的合作伙伴合作，或者构建而不是购买解决方案，尽管 Docker 努力生产客户真正想要的一系列产品。&lt;/p>
&lt;p>今年夏天在法国度假时，Hykes 告诉 InfoWorld：“我们从未发布过出色的商业产品，原因是我们没有集中注意力。我们试图做每件事的一点点。维持开发者社区的增长并构建一个伟大的商业产品已经够难的了，更不用说三四个了，而且基本不可能同时做到，但这就是我们试图做的，我们花了大量的钱来做这些事。 ”&lt;/p>
&lt;p>DockerDocker 业务发展和技术联盟的前副总裁、最早的员工之一 Nick Stinemates 说：“在开源之外出现了零技术交付，根本无法交付商业软件。”&lt;/p>
&lt;p>事后看来，Hykes 认为 Docker 应该花更少的时间来运送产品，而应该花更多的时间倾听客户的意见。Hykes 说：“我本来不会急于扩大商业产品的规模，而是投入更多资金从我们的社区收集见解，并建立一个致力于了解他们的商业需求的团队。我们在 2014 年有一个转折点，当时我们觉得我们等不及了，但我认为我们等待的时间比我们意识到的要多。”&lt;/p>
&lt;p>其他人认为 Docker 过早地免费提供了太多东西。今年早些时候，&lt;a href="https://increment.com/containers/docker-ce-and-ee/">谷歌的 Kelsey Hightower 告诉 Increment 杂志&lt;/a>： “他们免费推出了一些东西，这就是本垒打。他们解决了整个问题并达到了这个问题的天花板：创建一个映像、构建它、将它存储在某个地方、然后运行它。还需要做什么？”&lt;/p>
&lt;p>Hykes 不同意这种说法。他说：“我认为这是错误的，一般来说，核心开源产品创造了巨大的增长，这首先创造了商业化的机会。许多公司成功地将 Docker 商业化，但 Docker 没有。有很多东西可以商业化，只是 Docker 未能将其商业化。”&lt;/p>
&lt;p>例如，&lt;a href="https://www.openshift.com/blog/red-hat-puts-docker-kubernetes-at-the-center-of-its-openshift-3-paas">红帽&lt;/a>和 &lt;a href="https://tanzu.vmware.com/content/blog/pivotal-cloud-foundry-has-supported-docker-for-a-long-time-now-pivotal-web-services-does-too">Pivotal&lt;/a>（现在是 VMware 的一部分）都是 Docker 的早期合作伙伴，将 Docker 容器集成到他们的商业 &lt;a href="https://www.infoworld.com/article/3223434/what-is-paas-a-simpler-way-to-build-software-applications.html">PaaS&lt;/a> 产品（分别是 OpenShift 和 Cloud Foundry）中，并为开源项目做出了贡献。&lt;/p>
&lt;p>Stinemates 说：“如果我是慷慨的，红帽公司早期的贡献让 Solomon 有点失控了。&lt;a href="https://news.ycombinator.com/threads?id=shykes">Solomon 烧掉了很多桥梁，Hacker News 上有关于他与反对者争吵的帖子&lt;/a>。企业合作伙伴不可能与 Solomon 一起拥有这些。”&lt;/p>
&lt;p>今天，Hykes 说他犯了混淆“社区与生态系统”的错误。红帽特别“不是社区的一部分，他们从来没有为 Docker 的成功而生根，”他说。“我们的错误是非常希望他们成为社区的一部分。回想起来，我们永远不会从这种伙伴关系中受益。”&lt;/p>
&lt;p>因此，旅游科技公司 Amadeus 等早期客户在 2015 年转向红帽，以填补他们认为 Docker 留下的企业级空白。Amadeus 的云平台负责人 Edouard Hubin 通过电子邮件告诉 InfoWorld：“我们直接从使用 [Docker 的] 开源版本的先驱模式转变为与红帽建立强大的合作伙伴关系，他们为我们提供容器技术的支持。容器化是远离虚拟化的技术变革的第一步。真正的游戏规则变革者是容器编排解决方案。显然，Docker 输给了 Kubernetes，这对他们来说是一个非常困难的局面。”&lt;/p>
&lt;h2 id="kubernetes-的决定">Kubernetes 的决定&lt;/h2>
&lt;p>Docker 会后悔之前做的一系列决定，因为它拒绝真正接受 Kubernetes 作为首选的新兴容器编排工具 —— Kubernetes 允许客户大规模、一致地运行容器队列——而不是短视地推进自己专有的 Docker Swarm 编排器（&lt;a href="https://boxboat.com/2019/12/10/migrate-docker-swarm-to-kubernetes/">RIP&lt;/a>）。&lt;/p>
&lt;p>Docker 最早也是服务时间最长的员工之一 Jérôme Petazzoni 说：“最大的错误是错过了 Kubernetes。我们处于集体思想泡沫中，我们在内部认为 Kubernetes 太复杂了，而 Swarm 会成功得多。没有意识到这一点是我们的集体失败。”&lt;/p>
&lt;p>事实是，Docker 在 2014 年有机会与谷歌的 Kubernetes 团队密切合作，并在此过程中可能拥有整个容器生态系统。Stinemates 说：“我们本可以让 Kubernetes 成为 GitHub 上 Docker 旗帜下的一流 Docker 项目。事后看来，Swarm 上市太晚是一个重大错误。”&lt;/p>
&lt;p>据在场的多名人士称，谷歌旧金山办公室的早期讨论是技术性的和紧张的，因为双方对如何进行容器编排持不同的意见。&lt;/p>
&lt;p>Kubernetes 联合创始人、现任 VMware 副总裁 Craig McLuckie 表示，他提出将 Kubernetes 捐赠给 Docker，但双方未能达成协议。他告诉 InfoWorld：“那里有一个相互傲慢的因素，从他们那里我们不了解开发人员的经验，但相互的感觉是这些年轻的新贵真的不了解分布式系统管理。”其他人则表示讨论更为非正式，并且侧重于容器技术的联合开发。无论哪种方式，团队从来没有意见一致并最终分道扬镳，&lt;a href="https://kubernetes.io/blog/2018/07/20/the-history-of-kubernetes-the-community-behind-it/">谷歌在 2014 年夏天推出了 Kubernetes&lt;/a>。&lt;/p>
&lt;p>Hykes 对 Google 向 Docker 提供 Kubernetes 项目的所有权提出异议，称他们“有机会像其他人一样成为生态系统的一部分”。&lt;/p>
&lt;p>Hykes 承认当时 Docker 和 Google 团队之间处于紧张关系。Hykes 说：“有那么一刻，自负占了上风。谷歌的很多聪明和有经验的人都被 Docker 的完全局外人蒙蔽了双眼。我们没有在谷歌工作，我们没有去斯坦福，我们没有计算机科学博士学位。有些人觉得这是他们的事，所以有一场自我之战。结果并不是 Docker 和 Kubernetes 团队之间的良好合作，而此时合作确实有意义。”&lt;/p>
&lt;p>Stinemates 说：“一方面是基本的自我，另一方面是与 [Kubernetes 联合创始人] Joe Beda、Brendan Burns 和 Craig McLuckie 的紧张关系——他们对服务级别 API 的需求有强烈的看法，而从简单的角度来看 Docker 在技术上对单个 API 有自己的看法，这意味着我们无法达成一致。”&lt;/p>
&lt;p>Hykes 承认，当时 Docker 面临着为想要扩展容器使用规模的客户寻找编排解决方案的压力，但当时Kubernetes 将成为该解决方案并不明确。Hykes 说：“Kubernetes 太早了，而且是几十个中的一个，我们并没有神奇地猜测它会占据主导地位，甚至不清楚谷歌对它的承诺。我问我们的工程师和架构师该怎么做，他们建议我们继续使用 Swarm。”&lt;/p>
&lt;p>甚至 McLuckie 也承认他“不知道 Kubernetes 会变成 Kubernetes。回顾历史很容易认为这是一个糟糕的选择。”&lt;/p>
&lt;p>不管它失败了，Kubernetes 最终赢得了容器编排之战，其余的成为软件行业的匆匆过客。&lt;/p>
&lt;p>451 Research 的分析师 Jay Lyman 说：“Kubernetes 来了，并抢走了所有的风头。它代表了谷歌在开发和开源方面对容器的使用，这在很多方面都超过了对 Docker 的关注。[Docker] 将 Docker Swarm 视为他们通过软件获利的方式。如果他们可以回去，他们可能会从一开始就与 Kubernetes 更紧密地集成。他们过于专注于独自行动。”&lt;/p>
&lt;p>McLuckie 说：“我最深切的遗憾之一是我们没有找到谈判的方法。Docker 提供了一些非凡的体验，而 Kubernetes 提供的东西，从体验的角度来看，并不那么引人注目。” 或者，正如 Docker 联合创始人 Sebastien Pahl 指出的那样：“简单并没有获胜。我喜欢 Kubernetes，但它&lt;a href="https://www.infoworld.com/article/3614850/no-one-wants-to-manage-kubernetes-anymore.html">不适合普通人&lt;/a>。”&lt;/p>
&lt;h2 id="高层的紧张气氛">高层的紧张气氛&lt;/h2>
&lt;p>在 2015 年以 10 亿美元的“独角兽”估值完成 9500 万美元的大型 D 轮融资之后，Docker 最终达到了炒作周期的巅峰。&lt;/p>
&lt;p>Steinmates 说：“这设定了非常高的期望，并暴露了我们作为一家公司将面临的一些基本问题。我认为 Ben [Golub，首席执行官] 对公司的想法与 Solomon 不同，两人没有意见一致应该不是什么秘密。董事会大量掺和努力让创始人开心，并给 CEO 足够的回旋余地，使公司取得成功。如果由 Solomon 决定，我们会坚持以社区为导向的路线来创造病毒式传播。如果由 Ben 决定，我们会更早地转向业务方面。这种紧张局势导致我们对两者都采取了半途而废的方式。”&lt;/p>
&lt;p>&lt;a href="https://increment.com/containers/docker-ce-and-ee/">这种方法有效地催生了两个Docker&lt;/a>：Docker 社区版（面向开发人员的广受欢迎的命令行工具和开源项目）和 Docker 企业版（面向希望大规模采用容器的企业客户的商业工具套件）。不幸的是，公司的动作太慢了，无法正式进行拆分并相应地分配资源。&lt;/p>
&lt;p>Golub 承认他们“应该比实际更早地拆分业务”，而 Hykes 同意 Docker “从未找到连接公司这两部分的方法”。&lt;/p>
&lt;p>到了 2018 年，裂缝开始显现，因为该公司努力在&lt;a href="https://www.techrepublic.com/article/why-doesnt-anyone-weep-for-docker/">日益不满的开源社区&lt;/a>、强大的合作伙伴和要求在生产中运行容器的企业客户之间找到可行的道路。&lt;/p>
&lt;p>不久之后，Hykes 于 2018 年 3 月离开了他在公司的日常角色，他在一篇博客文章中指出，“作为创始人，我当然有复杂的情绪。当你创建一家公司时，你的工作是确保它有一天可以在没有你的情况下取得成功。然后最终有一天会到来，庆祝活动可能是苦乐参半。对于创始人来说，放弃一生的工作绝非易事。”&lt;/p>
&lt;p>今天回想起来，Hykes 更简单。“我意识到我不属于这家公司。留下对我来说没有任何意义，所以我离开了&amp;hellip;&amp;hellip;我多半是个应该继续担任首席执行官或离开的不快乐创始人。”&lt;/p>
&lt;h2 id="docker-一分为二">Docker 一分为二&lt;/h2>
&lt;p>面对&lt;a href="https://www.cnbc.com/2019/09/27/docker-is-trying-to-raise-money-following-arrival-of-ceo-rob-bearden.html">日益严重的资金问题&lt;/a>，Docker 轮换了新任 CEO，Golub 于 2017 年 5 月让位给前 SAP 执行官 Steve Singh，然后 Singh 于 2019 年 6 月让位给前 Hortonworks 首席执行官 Rob Bearden。&lt;/p>
&lt;p>最终要接受批评的是 Bearden。上任后不久，&lt;a href="https://twitter.com/QuinnyPig/status/1194687851587198977?s=20">Docker 于 2019 年 11 月将其企业部分业务出售给 Mirantis&lt;/a>，Docker Enterprise 并入 Mirantis Kubernetes Engine。&lt;/p>
&lt;p>Bearden 当时在一份新闻稿中说：“在与管理团队和董事会进行彻底分析后，我们确定 Docker 有两个截然不同的业务：一个是活跃的开发者业务，另一个是成长中的企业业务。我们还发现产品和财务模型大不相同。”&lt;/p>
&lt;h2 id="docker-如今在哪里">Docker 如今在哪里？&lt;/h2>
&lt;p>有了原始投资者 Insight Venture Partners 和 Benchmark Capital 的 3500 万美元现金注入，剩下的 Docker 由原始 Docker Engine 容器运行时、Docker Hub 镜像存储库和 Docker 桌面应用程序支撑，在 7 年公司资深人士 Scott Johnston 的领导下活了下来。&lt;/p>
&lt;p>Johnston 告诉 InfoWorld，他正试图通过“像激光一样重新关注开发人员的需求”，让公司回归本源。“我们认为该公司比以往任何时候都更强大，因为三点：以客户为中心、统一的市场定位和生态系统友好的商业模式。”&lt;/p>
&lt;p>上周 Docker 宣布更改 Docker 软件的许可条款。很快，为大公司工作的 Docker Desktop 专业用户将不得不注册付费订阅才能继续使用该应用程序。&lt;/p>
&lt;p>Johnston 决心不重蹈覆辙，专注于为公司的核心软件开发人员受众提供价值。他说：“我们的野心更大，因为开发人员生态系统要面向的是世界上的每个开发人员，而不仅仅是那些与我们的运行时一致的开发人员。”&lt;/p>
&lt;p>Johnston 认为“Docker 2.0”的增长机会在于为安全、已验证的镜像构建新的开发人员工具和&lt;a href="https://www.docker.com/press-release/docker-expands-trusted-content-offerings">可信内容&lt;/a>，以及新兴计算模型（如&lt;a href="https://www.infoworld.com/article/3406501/what-is-serverless-serverless-computing-explained.html">无服务器&lt;/a>、&lt;a href="https://www.infoworld.com/article/3214424/what-is-machine-learning-intelligence-derived-from-data.html">机器学习&lt;/a>和&lt;a href="https://www.networkworld.com/article/3207535/what-is-iot-the-internet-of-things-explained.html">物联网&lt;/a> 以容器技术为基础的工作负载）背后的持续动力。&lt;/p>
&lt;p>同时，Docker 仍然是行业标准的容器运行时，&lt;a href="https://www.docker.com/blog/docker-index-shows-continued-massive-developer-adoption-and-activity-to-build-and-share-apps-with-docker/">如今 Docker Desktop 安装在 330 万台机器上&lt;/a>。此外，在 &lt;a href="https://insights.stackoverflow.com/survey/2021">Stack Overflow 的 2021 年开发者调查&lt;/a>中，49% 的受访者表示他们经常使用该工具。&lt;/p>
&lt;p>尽管如此，人们仍然对可能发生的事情深感失望。Stinemates 说：“如果我想要轻率，我会问今天 Docker 是否存在。从职业角度来看，这很可悲。我仍在寻找一家像 Docker 一样令人兴奋和充满活力的公司，并能创造出火花。”&lt;/p>
&lt;p>Hykes 说：“可以公平地说，Docker 未能实现其商业化的潜力……到目前为止。我很高兴 Docker 在这么多年之后有再次有实现商业化的机会。这是对基础项目和品牌的证明。”&lt;/p></description></item><item><title>ARM64 平台基于 openEuler + iSula 环境部署 Kubernetes</title><link>https://atbug.com/setup-kubernetes-running-with-isulad-on-openeuler/</link><pubDate>Thu, 02 Sep 2021 20:41:06 +0800</pubDate><guid>https://atbug.com/setup-kubernetes-running-with-isulad-on-openeuler/</guid><description>
&lt;p>为什么要在 arm64 平台上部署 Kubernetes，而且还是鲲鹏 920 的架构。说来话长 。。。 此处省略5000 字。&lt;/p>
&lt;p>介绍下系统信息；&lt;/p>
&lt;ul>
&lt;li>架构：鲲鹏 920(Kunpeng920)&lt;/li>
&lt;li>OS：openEuler 20.03 (LTS-SP1)&lt;/li>
&lt;li>CPU：4c&lt;/li>
&lt;li>内存：16G&lt;/li>
&lt;li>硬盘：若干&lt;/li>
&lt;/ul>
&lt;p>整个过程虽然参考了&lt;a href="https://bbs.huaweicloud.com/forum/thread-94271-1-1.html">鲲鹏论坛的帖子&lt;/a>，不过还是颇费周折。&lt;/p>
&lt;h3 id="tldr">TL;DR&lt;/h3>
&lt;p>整个过程中要注意 arm64 平台上安装 Kubernetes 及网络组件，需要使用 arm64 版本的镜像。&lt;/p>
&lt;h3 id="环境配置">环境配置&lt;/h3>
&lt;h4 id="1关闭-selinux">1.关闭 selinux&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#临时关闭&lt;/span>
setenforce &lt;span class="m">0&lt;/span>
&lt;span class="c1">#永久关闭 SELINUX=disabled&lt;/span>
vim /etc/sysconfig/selinux
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-关闭swap分区">2. 关闭swap分区&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#临时关闭&lt;/span>
swapoff -a
&lt;span class="c1">#永久关闭 注释 swap 行&lt;/span>
vim /etc/fstab
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-关闭防火墙">3. 关闭防火墙&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">systemctl stop firewalld
ssystemctl disable firewalld
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-网络配置">4. 网络配置&lt;/h4>
&lt;p>对iptables内部的nf-call需要打开的内生的桥接功能&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">vim /etc/sysctl.d/k8s.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">net.bridge.bridge-nf-call-iptables=1
net.bridge.bridge-nf-call-ip6tables=1
net.ipv4.ip_forward=1
vm_swappiness=0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改完成后执行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">modprobe br_netfilter
sysctl -p /etc/sysctl.d/k8s.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="5-添加-kubernetes-源">5. 添加 Kubernetes 源&lt;/h4>
&lt;p>在文件 &lt;code>/etc/yum.repos.d/openEuler.repo&lt;/code> 中追加如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-aarch64/
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装配置-isula">安装配置 iSula&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">yum install -y iSulad
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 iSula 配置，打开文件 &lt;code>/etc/isulad/daemon.json&lt;/code>，按照下面的部分：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;registry-mirrors&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;docker.io&amp;#34;&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;insecure-registries&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;rnd-dockerhub.huawei.com&amp;#34;&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;pod-sandbox-image&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;k8s.gcr.io/pause:3.2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">//&lt;/span> &lt;span class="err">按照对应&lt;/span> &lt;span class="err">Kubernetes&lt;/span> &lt;span class="err">版本进行修改，后面会有说明&lt;/span>
&lt;span class="nt">&amp;#34;network-plugin&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;cni&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;cni-bin-dir&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;cni-conf-dir&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;hosts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;unix:///var/run/isulad.sock&amp;#34;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改之后重启 isulad&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">systemctl restart isulad
systemctl &lt;span class="nb">enable&lt;/span> isulad
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="kubernetes-部署">Kubernetes 部署&lt;/h3>
&lt;h4 id="1-安装-kubeletkubeadmkubectl">1. 安装 kubelet、kubeadm、kubectl&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">yum install -y kubelet-1.20.0 kubeadm-1.20.0 kubectl-1.20.0
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-准备镜像">2. 准备镜像&lt;/h4>
&lt;p>由于某种未知的网络问提，会导致拉取 &lt;code>k8s.gcr.io&lt;/code> 的镜像失败。需要提前下载好。&lt;/p>
&lt;p>通过 &lt;code>kubeadm config images list --kubernetes-version 1.20.0&lt;/code> 命令，获取初始化所需的镜像。这里需要注意通过 &lt;code>--kubernetes-version&lt;/code> 参数指定版本号，否则 &lt;code>kubeadm&lt;/code> 是打印出最高的 &lt;code>1.20.x&lt;/code> 版本的初始化镜像（比如，1.20.x 的最高版本是 1.20.4）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">k8s.gcr.io/kube-apiserver:v1.20.0
k8s.gcr.io/kube-controller-manager:v1.20.0
k8s.gcr.io/kube-scheduler:v1.20.0
k8s.gcr.io/kube-proxy:v1.20.0
k8s.gcr.io/pause:3.2
k8s.gcr.io/etcd:3.4.13-0
k8s.gcr.io/coredns:1.7.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对应的 arm64 版本镜像为：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">k8s.gcr.io/kube-apiserver-arm64:v1.20.0
k8s.gcr.io/kube-controller-manager-arm64:v1.20.0
k8s.gcr.io/kube-scheduler-arm64:v1.20.0
k8s.gcr.io/kube-proxy-arm64:v1.20.0
k8s.gcr.io/pause-arm64:3.2
k8s.gcr.io/etcd-arm64:3.4.2-0 #支持 arm64 的 3.4.x 的最高版本
k8s.gcr.io/coredns:1.7.0 #无需特别的 arm64 版本
&lt;/code>&lt;/pre>&lt;/div>&lt;p>凭“运气”下载好镜像后，再通过 &lt;code>isula tag&lt;/code> 命令修改成我们需要的：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">isula tag k8s.gcr.io/kube-apiserver-arm64:v1.20.0 k8s.gcr.io/kube-apiserver:v1.20.0
isula tag k8s.gcr.io/kube-controller-manager-arm64:v1.20.0 k8s.gcr.io/kube-controller-manager:v1.20.0
isula tag k8s.gcr.io/kube-scheduler-arm64:v1.20.0 k8s.gcr.io/kube-scheduler:v1.20.0
isula tag k8s.gcr.io/kube-proxy-arm64:v1.20.0 k8s.gcr.io/kube-proxy:v1.20.0
isula tag k8s.gcr.io/pause-arm64:3.2 k8s.gcr.io/pause:3.2
isula tag k8s.gcr.io/etcd-arm64:3.4.2-0 k8s.gcr.io/etcd:3.4.13-0
isula tag k8s.gcr.io/coredns:1.7.0 k8s.gcr.io/coredns:1.7.0
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-初始化-master-节点">3. 初始化 master 节点&lt;/h4>
&lt;p>注意需要指定 &lt;code>--cri-socket&lt;/code> 参数使用 &lt;code>isulad&lt;/code> 的 API。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubeadm init --kubernetes-version v1.20.0 --cri-socket&lt;span class="o">=&lt;/span>/var/run/isulad.sock --pod-network-cidr&lt;span class="o">=&lt;/span>10.244.0.0/16
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装成功的话，会看到如下的内容&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">Your Kubernetes control-plane has initialized successfully!
To start using your cluster, you need to run the following as a regular user:
mkdir -p &lt;span class="nv">$HOME&lt;/span>/.kube
sudo cp -i /etc/kubernetes/admin.conf &lt;span class="nv">$HOME&lt;/span>/.kube/config
sudo chown &lt;span class="k">$(&lt;/span>id -u&lt;span class="k">)&lt;/span>:&lt;span class="k">$(&lt;/span>id -g&lt;span class="k">)&lt;/span> &lt;span class="nv">$HOME&lt;/span>/.kube/config
Alternatively, &lt;span class="k">if&lt;/span> you are the root user, you can run:
&lt;span class="nb">export&lt;/span> &lt;span class="nv">KUBECONFIG&lt;/span>&lt;span class="o">=&lt;/span>/etc/kubernetes/admin.conf
You should now deploy a pod network to the cluster.
Run &lt;span class="s2">&amp;#34;kubectl apply -f [podnetwork].yaml&amp;#34;&lt;/span> with one of the options listed at:
https://kubernetes.io/docs/concepts/cluster-administration/addons/
Then you can join any number of worker nodes by running the following on each as root:
kubeadm join 12.0.0.9:6443 --token 0110xl.lqzlegbduz2qkdhr &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --discovery-token-ca-cert-hash sha256:42b13f5924a01128aac0d6e7b2487af990bc82701f233c8a6a4790187ea064af
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-配置集群环境">4. 配置集群环境&lt;/h4>
&lt;p>然后根据上面的输出进行配置&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">mkdir -p &lt;span class="nv">$HOME&lt;/span>/.kube
sudo cp -i /etc/kubernetes/admin.conf &lt;span class="nv">$HOME&lt;/span>/.kube/config
sudo chown &lt;span class="k">$(&lt;/span>id -u&lt;span class="k">)&lt;/span>:&lt;span class="k">$(&lt;/span>id -g&lt;span class="k">)&lt;/span> &lt;span class="nv">$HOME&lt;/span>/.kube/config
&lt;span class="nb">export&lt;/span> &lt;span class="nv">KUBECONFIG&lt;/span>&lt;span class="o">=&lt;/span>/etc/kubernetes/admin.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="5-向集群添加-node-节点">5. 向集群添加 Node 节点&lt;/h4>
&lt;p>重复前面的步骤：&lt;code>环境配置&lt;/code>、&lt;code>安装配置 iSula&lt;/code> 以及 &lt;code>Kubernetes 部署&lt;/code> 的 1 和 2。&lt;/p>
&lt;p>同样使用上面输出的命令，再加上 &lt;code>--cri-socket&lt;/code> 参数：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubeadm join 12.0.0.9:6443 --token 0110xl.lqzlegbduz2qkdhr &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --discovery-token-ca-cert-hash &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --cri-socket&lt;span class="o">=&lt;/span>/var/run/isulad.sock
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置网络插件">配置网络插件&lt;/h3>
&lt;p>完成 master 节点初始化并配置完集群环境后就可以执行 &lt;code>kubectl&lt;/code> 的命令了。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl get nodes
NAME STATUS ROLES AGE VERSION
host-12-0-0-9 NotReady control-plane,master 178m v1.20.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看下节点，发现节点是 &lt;code>NotReady&lt;/code> 的状态，这是因为网络插件还没安装。如果此时通过命令 &lt;code>journalctl -uf kubelet&lt;/code> 查看 &lt;code>kubelet&lt;/code> 的日志，会看到日志提示网络插件没有 ready。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubelet.go:2160] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:iSulad: network plugin is not ready: cni config uninitialized
&lt;/code>&lt;/pre>&lt;/div>&lt;p>还记得 isulad 的配置么？&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;#34;network-plugin&amp;#34;: &amp;#34;cni&amp;#34;,
&amp;#34;cni-bin-dir&amp;#34;: &amp;#34;&amp;#34;, //使用默认 /opt/cni/bin
&amp;#34;cni-conf-dir&amp;#34;: &amp;#34;&amp;#34;, //使用默认 /etc/cni/net.d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上两个目录都是空的内容，如果目录不存在，先创建：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">mkdir -p /opt/cni/bin
mkdir -p /etc/cni/net.d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里使用 &lt;code>calico&lt;/code> 做为网络插件，先下载 manifest。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">wget https://docs.projectcalico.org/v3.14/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为是 arm64 的硬件，同样需要使用对应 arm64 版本的镜像，先查看要用哪些镜像：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">grep &lt;span class="s1">&amp;#39;image:&amp;#39;&lt;/span> calico.yaml &lt;span class="p">|&lt;/span> uniq
image: calico/cni:v3.14.2
image: calico/pod2daemon-flexvol:v3.14.2
image: calico/node:v3.14.2
image: calico/kube-controllers:v3.14.2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对应的 arm64 版本，操作步骤参考上面，不再赘述。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">calico/cni:v3.14.2-arm64
calico/pod2daemon-flexvol:v3.14.2-arm64
calico/node:v3.14.2-arm64
calico/kube-controllers:v3.14.2-arm64
&lt;/code>&lt;/pre>&lt;/div>&lt;p>搞定镜像之后执行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f calico.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后就可以看到节点变成了 &lt;code>Ready&lt;/code> 状态。&lt;/p>
&lt;h3 id="测试">测试&lt;/h3>
&lt;p>通常都是用 nginx 的镜像创建 pod 进行测试，但是 nginx 并没有 arm64 的版本，这里就用 docker 官方提供的 &lt;code>hello-world&lt;/code> 镜像。没错，支持 arm64。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl run hello-world --image hello-world:latest --restart&lt;span class="o">=&lt;/span>Never
kubectl logs hello-world --previous
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Hello from Docker!
This message shows that your installation appears to be working correctly.
To generate this message, Docker took the following steps:
1. The Docker client contacted the Docker daemon.
2. The Docker daemon pulled the &amp;#34;hello-world&amp;#34; image from the Docker Hub.
(arm64v8)
3. The Docker daemon created a new container from that image which runs the
executable that produces the output you are currently reading.
4. The Docker daemon streamed that output to the Docker client, which sent it
to your terminal.
To try something more ambitious, you can run an Ubuntu container with:
$ docker run -it ubuntu bash
Share images, automate workflows, and more with a free Docker ID:
https://hub.docker.com/
For more examples and ideas, visit:
https://docs.docker.com/get-started/
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="总结">总结&lt;/h3>
&lt;p>至此，我们就完成了在鲲鹏平台上基于 openEuler + iSula 部署 Kubernetes 的工作。&lt;/p></description></item><item><title>使用 Flomesh 进行 Dubbo 服务治理</title><link>https://atbug.com/enhance-dubbo-service-governance-with-flomesh/</link><pubDate>Wed, 18 Aug 2021 09:50:28 +0800</pubDate><guid>https://atbug.com/enhance-dubbo-service-governance-with-flomesh/</guid><description>
&lt;h2 id="写在最前">写在最前&lt;/h2>
&lt;p>和上一篇&lt;a href="https://mp.weixin.qq.com/s/QnKWpXwe8Ex_CrUuAEjZ1Q">《使用 Flomesh 强化 Spring Cloud 服务治理》&lt;/a>一样，这次同样是在无代码侵入的情况下对 Dubbo 服务治理的提升。&lt;/p>
&lt;p>更多治理场景陆续添加中，有兴趣的可关注 &lt;a href="https://github.com/flomesh-io/service-mesh-dubbo-demo">https://github.com/flomesh-io/service-mesh-dubbo-demo&lt;/a>。&lt;/p>
&lt;p>开源的 Pipy 作为 Flomesh 的核心，得益于其轻量及灵活性可以通过编程的方式轻松快速的支持多中平台的服务发现机制，比如 Eureka、Consul、Nacos 等。&lt;/p>
&lt;h2 id="概览">概览&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/08/18/16292498443406.jpg" alt="">&lt;/p>
&lt;h2 id="细节">细节&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/08/18/16292498964245.jpg" alt="">&lt;/p>
&lt;h2 id="环境搭建">环境搭建&lt;/h2>
&lt;p>搭建 Kubernetes 环境，可以选择 kubeadm 进行集群搭建。也可以选择 minikube、k3s、Kind 等，本文使用 k3s。&lt;/p>
&lt;p>使用 &lt;a href="https://k3d.io/">k3d&lt;/a> 安装 &lt;a href="https://github.com/k3s-io/k3s">k3s&lt;/a>。k3d 将在 Docker 容器中运行 k3s，因此需要保证已经安装了 Docker。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ k3d cluster create dubbo-demo -p &lt;span class="s2">&amp;#34;80:80@loadbalancer&amp;#34;&lt;/span> --k3s-server-arg &lt;span class="s1">&amp;#39;--no-deploy=traefik&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装-flomesh">安装 Flomesh&lt;/h2>
&lt;p>从仓库 &lt;code>https://github.com/flomesh-io/service-mesh-dubbo-demo&lt;/code> 克隆代码。进入到 &lt;code>release&lt;/code>目录。&lt;/p>
&lt;p>所有 Flomesh 组件以及用于 demo 的 yamls 文件都位于这个目录中。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f artifacts/cert-manager-v1.3.1.yaml
customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created
namespace/cert-manager created
serviceaccount/cert-manager-cainjector created
serviceaccount/cert-manager created
serviceaccount/cert-manager-webhook created
clusterrole.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
clusterrole.rbac.authorization.k8s.io/cert-manager-view created
clusterrole.rbac.authorization.k8s.io/cert-manager-edit created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created
clusterrole.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created
role.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
role.rbac.authorization.k8s.io/cert-manager:leaderelection created
role.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
rolebinding.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
service/cert-manager created
service/cert-manager-webhook created
deployment.apps/cert-manager-cainjector created
deployment.apps/cert-manager created
deployment.apps/cert-manager-webhook created
mutatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created
validatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意: 要保证 &lt;code>cert-manager&lt;/code> 命名空间中所有的 pod 都正常运行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -n cert-manager
NAME READY STATUS RESTARTS AGE
cert-manager-cainjector-59f76f7fff-ggmdm 1/1 Running &lt;span class="m">0&lt;/span> 32s
cert-manager-59f6c76f4b-r2h5r 1/1 Running &lt;span class="m">0&lt;/span> 32s
cert-manager-webhook-56fdcbb848-sdnxb 1/1 Running &lt;span class="m">0&lt;/span> 32s
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-pipy-operator">安装 Pipy Operator&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f artifacts/pipy-operator.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行完命令后会看到类似的结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">namespace/flomesh created
customresourcedefinition.apiextensions.k8s.io/proxies.flomesh.io created
customresourcedefinition.apiextensions.k8s.io/proxyprofiles.flomesh.io created
serviceaccount/operator-manager created
role.rbac.authorization.k8s.io/leader-election-role created
clusterrole.rbac.authorization.k8s.io/manager-role created
clusterrole.rbac.authorization.k8s.io/metrics-reader created
clusterrole.rbac.authorization.k8s.io/proxy-role created
rolebinding.rbac.authorization.k8s.io/leader-election-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/manager-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/proxy-rolebinding created
configmap/manager-config created
service/operator-manager-metrics-service created
service/proxy-injector-svc created
service/webhook-service created
deployment.apps/operator-manager created
deployment.apps/proxy-injector created
certificate.cert-manager.io/serving-cert created
issuer.cert-manager.io/selfsigned-issuer created
mutatingwebhookconfiguration.admissionregistration.k8s.io/mutating-webhook-configuration created
mutatingwebhookconfiguration.admissionregistration.k8s.io/proxy-injector-webhook-cfg created
validatingwebhookconfiguration.admissionregistration.k8s.io/validating-webhook-configuration created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：要保证 &lt;code>flomesh&lt;/code> 命名空间中所有的 pod 都正常运行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -n flomesh
NAME READY STATUS RESTARTS AGE
proxy-injector-6d5c774bc-rspmc 1/1 Running &lt;span class="m">0&lt;/span> 21s
operator-manager-c95cd449-xxc77 0/1 Running &lt;span class="m">0&lt;/span> 38s
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-ingress-控制器ingress-pipy">安装 Ingress 控制器：ingress-pipy&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f artifacts/ingress-pipy.yaml
namespace/ingress-pipy created
customresourcedefinition.apiextensions.k8s.io/ingressglobalhooks.flomesh.io created
customresourcedefinition.apiextensions.k8s.io/ingressrules.flomesh.io created
serviceaccount/ingress-pipy created
role.rbac.authorization.k8s.io/ingress-pipy-leader-election-role created
clusterrole.rbac.authorization.k8s.io/ingress-pipy-role created
rolebinding.rbac.authorization.k8s.io/ingress-pipy-leader-election-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/ingress-pipy-rolebinding created
configmap/ingress-config created
service/ingress-pipy-cfg created
service/ingress-pipy-controller created
service/ingress-pipy-defaultbackend created
service/webhook-service created
deployment.apps/ingress-pipy-cfg created
deployment.apps/ingress-pipy-controller created
deployment.apps/ingress-pipy-manager created
certificate.cert-manager.io/serving-cert created
issuer.cert-manager.io/selfsigned-issuer created
mutatingwebhookconfiguration.admissionregistration.k8s.io/mutating-webhook-configuration configured
validatingwebhookconfiguration.admissionregistration.k8s.io/validating-webhook-configuration configured
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查 &lt;code>ingress-pipy&lt;/code> 命名空间下 pod 的状态：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -n ingress-pipy
NAME READY STATUS RESTARTS AGE
svclb-ingress-pipy-controller-qwbk9 1/1 Running &lt;span class="m">0&lt;/span> 90s
ingress-pipy-cfg-6c54d5b9b6-6s7lz 1/1 Running &lt;span class="m">0&lt;/span> 90s
ingress-pipy-manager-7988dfbf4f-lxr4b 1/1 Running &lt;span class="m">0&lt;/span> 90s
ingress-pipy-controller-9d4698887-zrpfd 1/1 Running &lt;span class="m">0&lt;/span> 90s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此，你已经成功安装 Flomesh 的所有组件，包括 operator 和 ingress 控制器。&lt;/p>
&lt;h2 id="运行-demo">运行 Demo&lt;/h2>
&lt;h3 id="创建命名空间">创建命名空间&lt;/h3>
&lt;p>Demo 运行在另一个独立的命名空间 &lt;code>flomesh-dubbo&lt;/code> 中，执行命令 &lt;code>kubectl apply -f dubbo-mesh/templates/namespace.yaml&lt;/code> 来创建该命名空间。如果你 &lt;code>describe&lt;/code> 该命名空间你会发现其使用了 &lt;code>flomesh.io/inject=true&lt;/code> 标签。&lt;/p>
&lt;p>这个标签告知 operator 的 admission webHook 拦截标注的命名空间下 pod 的创建。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl describe ns flomesh-dubbo
Name: flomesh-dubbo
Labels: app.kubernetes.io/managed-by&lt;span class="o">=&lt;/span>Helm
app.kubernetes.io/name&lt;span class="o">=&lt;/span>dubbo-mesh
app.kubernetes.io/version&lt;span class="o">=&lt;/span>1.19.0
flomesh.io/inject&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
helm.sh/chart&lt;span class="o">=&lt;/span>dubbo-mesh-0.1.0
kubernetes.io/metadata.name&lt;span class="o">=&lt;/span>flomesh-dubbo
Annotations: &amp;lt;none&amp;gt;
Status: Active
No resource quota.
No LimitRange resource.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建-proxyprofile-资源">创建 ProxyProfile 资源&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubectl apply -f artifacts/proxy-profile.yaml
proxyprofile.flomesh.io/poc-pf-dubbo created
proxyprofile.flomesh.io/poc-pf-http created
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建-mock-服务">创建 mock 服务&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f dubbo-mesh/templates/configmap-mock.yaml
$ kubectl apply -f dubbo-mesh/templates/configmap-proxychains.yaml
$ kubectl apply -f dubbo-mesh/templates/deployment-mock.yaml
$ kubectl apply -f dubbo-mesh/templates/service-mock.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署服务">部署服务&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f artifacts/deployment.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;h3 id="准备">准备&lt;/h3>
&lt;p>访问 demo 服务都要通过 ingress 控制器。因此需要先获取 LB 的 ip 地址。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">//Obtain the controller IP
//Here, we append port.
&lt;span class="nv">ingressAddr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>kubectl get svc ingress-pipy-controller -n ingress-pipy -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.spec.clusterIP}&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>:80
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里我们使用了是 k3d 创建的 k3s，命令中加入了 &lt;code>-p 80:80@loadbalancer&lt;/code> 选项。我们可以使用 &lt;code>127.0.0.1:80&lt;/code> 来访问 ingress 控制器。这里执行命令 &lt;code>ingressAddr=127.0.0.1:80&lt;/code>。&lt;/p>
&lt;p>Ingress 规则中，我们为每个规则指定了 &lt;code>host&lt;/code>，因此每个请求中需要通过 HTTP 请求头 &lt;code>Host&lt;/code> 提供对应的 &lt;code>host&lt;/code>。&lt;/p>
&lt;p>或者在 &lt;code>/etc/hosts&lt;/code> 添加记录：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get ing ingress-canary-router -n flomesh-dubbo -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{range .spec.rules[*]}{.host}{&amp;#39;\n&amp;#39;}&amp;#34;&lt;/span>
dubbo.demo.flomesh.cn
//添加记录到 /etc/hosts
127.0.0.1 dubbo.demo.flomesh.cn
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="灰度">灰度&lt;/h3>
&lt;p>v1、v2 服务只能访问对应版本的服务。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ curl --location --request POST &lt;span class="s1">&amp;#39;http://127.0.0.1:80/hello&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--header &lt;span class="s1">&amp;#39;Host: dubbo.demo.flomesh.cn&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--header &lt;span class="s1">&amp;#39;x-canary-version: v1&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--header &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--data-raw &lt;span class="s1">&amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;Flomesh&amp;#34;}&amp;#39;&lt;/span>
V1-&lt;span class="o">[&lt;/span>hello-service&lt;span class="o">]&lt;/span> : Hello, Flomesh, Today is &lt;span class="o">(&lt;/span>2021-08-17&lt;span class="o">)&lt;/span>, Time is &lt;span class="o">(&lt;/span>04:06:56.823&lt;span class="o">)&lt;/span>
$ curl --location --request POST &lt;span class="s1">&amp;#39;http://127.0.0.1:80/hello&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--header &lt;span class="s1">&amp;#39;Host: dubbo.demo.flomesh.cn&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--header &lt;span class="s1">&amp;#39;x-canary-version: v2&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--header &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--data-raw &lt;span class="s1">&amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;Flomesh&amp;#34;}&amp;#39;&lt;/span>
V2-&lt;span class="o">[&lt;/span>hello-service&lt;span class="o">]&lt;/span> : Hello, Flomesh, Today is &lt;span class="o">(&lt;/span>Tue, 2021-Aug-17&lt;span class="o">)&lt;/span>, Time is &lt;span class="o">(&lt;/span>04:06:37 +0000&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>使用 Flomesh 强化 Spring Cloud 服务治理</title><link>https://atbug.com/enhance-springcloud-service-governance-with-flomesh/</link><pubDate>Tue, 17 Aug 2021 18:47:33 +0800</pubDate><guid>https://atbug.com/enhance-springcloud-service-governance-with-flomesh/</guid><description>
&lt;h2 id="写在最前">写在最前&lt;/h2>
&lt;p>这篇是关于如何使用 &lt;a href="https://flomesh.cn/">Flomesh&lt;/a> 服务网格来强化 Spring Cloud 的服务治理能力，降低 Spring Cloud 微服务架构落地服务网格的门槛，实现“自主可控”。&lt;/p>
&lt;p>文档在 &lt;a href="https://github.com/flomesh-io/flomesh-bookinfo-demo">github&lt;/a> 上持续更新，欢迎大家一起讨论：https://github.com/flomesh-io/flomesh-bookinfo-demo。&lt;/p>
&lt;hr>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/08/17/springdemotypology.png" alt="Architect">&lt;/p>
&lt;h2 id="环境搭建">环境搭建&lt;/h2>
&lt;p>搭建 Kubernetes 环境，可以选择 kubeadm 进行集群搭建。也可以选择 minikube、k3s、Kind 等，本文使用 k3s。&lt;/p>
&lt;p>使用 &lt;a href="https://k3d.io/">k3d&lt;/a> 安装 &lt;a href="https://github.com/k3s-io/k3s">k3s&lt;/a>。k3d 将在 Docker 容器中运行 k3s，因此需要保证已经安装了 Docker。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ k3d cluster create spring-demo -p &lt;span class="s2">&amp;#34;81:80@loadbalancer&amp;#34;&lt;/span> --k3s-server-arg &lt;span class="s1">&amp;#39;--no-deploy=traefik&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装-flomesh">安装 Flomesh&lt;/h2>
&lt;p>从仓库 &lt;code>https://github.com/flomesh-io/flomesh-bookinfo-demo.git&lt;/code> 克隆代码。进入到 &lt;code>flomesh-bookinfo-demo/kubernetes&lt;/code>目录。&lt;/p>
&lt;p>所有 Flomesh 组件以及用于 demo 的 yamls 文件都位于这个目录中。&lt;/p>
&lt;h3 id="安装-cert-manager">安装 Cert Manager&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f artifacts/cert-manager-v1.3.1.yaml
customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created
namespace/cert-manager created
serviceaccount/cert-manager-cainjector created
serviceaccount/cert-manager created
serviceaccount/cert-manager-webhook created
clusterrole.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
clusterrole.rbac.authorization.k8s.io/cert-manager-view created
clusterrole.rbac.authorization.k8s.io/cert-manager-edit created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created
clusterrole.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created
role.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
role.rbac.authorization.k8s.io/cert-manager:leaderelection created
role.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
rolebinding.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
service/cert-manager created
service/cert-manager-webhook created
deployment.apps/cert-manager-cainjector created
deployment.apps/cert-manager created
deployment.apps/cert-manager-webhook created
mutatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created
validatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意: 要保证 &lt;code>cert-manager&lt;/code> 命名空间中所有的 pod 都正常运行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -n cert-manager
NAME READY STATUS RESTARTS AGE
cert-manager-webhook-56fdcbb848-q7fn5 1/1 Running &lt;span class="m">0&lt;/span> 98s
cert-manager-59f6c76f4b-z5lgf 1/1 Running &lt;span class="m">0&lt;/span> 98s
cert-manager-cainjector-59f76f7fff-flrr7 1/1 Running &lt;span class="m">0&lt;/span> 98s
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-pipy-operator">安装 Pipy Operator&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f artifacts/pipy-operator.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行完命令后会看到类似的结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">namespace/flomesh created
customresourcedefinition.apiextensions.k8s.io/proxies.flomesh.io created
customresourcedefinition.apiextensions.k8s.io/proxyprofiles.flomesh.io created
serviceaccount/operator-manager created
role.rbac.authorization.k8s.io/leader-election-role created
clusterrole.rbac.authorization.k8s.io/manager-role created
clusterrole.rbac.authorization.k8s.io/metrics-reader created
clusterrole.rbac.authorization.k8s.io/proxy-role created
rolebinding.rbac.authorization.k8s.io/leader-election-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/manager-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/proxy-rolebinding created
configmap/manager-config created
service/operator-manager-metrics-service created
service/proxy-injector-svc created
service/webhook-service created
deployment.apps/operator-manager created
deployment.apps/proxy-injector created
certificate.cert-manager.io/serving-cert created
issuer.cert-manager.io/selfsigned-issuer created
mutatingwebhookconfiguration.admissionregistration.k8s.io/mutating-webhook-configuration created
mutatingwebhookconfiguration.admissionregistration.k8s.io/proxy-injector-webhook-cfg created
validatingwebhookconfiguration.admissionregistration.k8s.io/validating-webhook-configuration created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：要保证 &lt;code>flomesh&lt;/code> 命名空间中所有的 pod 都正常运行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -n flomesh
NAME READY STATUS RESTARTS AGE
proxy-injector-5bccc96595-spl6h 1/1 Running &lt;span class="m">0&lt;/span> 39s
operator-manager-c78bf8d5f-wqgb4 1/1 Running &lt;span class="m">0&lt;/span> 39s
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-ingress-控制器ingress-pipy">安装 Ingress 控制器：ingress-pipy&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f ingress/ingress-pipy.yaml
namespace/ingress-pipy created
customresourcedefinition.apiextensions.k8s.io/ingressparameters.flomesh.io created
serviceaccount/ingress-pipy created
role.rbac.authorization.k8s.io/ingress-pipy-leader-election-role created
clusterrole.rbac.authorization.k8s.io/ingress-pipy-role created
rolebinding.rbac.authorization.k8s.io/ingress-pipy-leader-election-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/ingress-pipy-rolebinding created
configmap/ingress-config created
service/ingress-pipy-cfg created
service/ingress-pipy-controller created
service/ingress-pipy-defaultbackend created
service/webhook-service created
deployment.apps/ingress-pipy-cfg created
deployment.apps/ingress-pipy-controller created
deployment.apps/ingress-pipy-manager created
certificate.cert-manager.io/serving-cert created
issuer.cert-manager.io/selfsigned-issuer created
mutatingwebhookconfiguration.admissionregistration.k8s.io/mutating-webhook-configuration configured
validatingwebhookconfiguration.admissionregistration.k8s.io/validating-webhook-configuration configured
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查 &lt;code>ingress-pipy&lt;/code> 命名空间下 pod 的状态：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -n ingress-pipy
NAME READY STATUS RESTARTS AGE
svclb-ingress-pipy-controller-8pk8k 1/1 Running &lt;span class="m">0&lt;/span> 71s
ingress-pipy-cfg-6bc649cfc7-8njk7 1/1 Running &lt;span class="m">0&lt;/span> 71s
ingress-pipy-controller-76cd866d78-m7gfp 1/1 Running &lt;span class="m">0&lt;/span> 71s
ingress-pipy-manager-5f568ff988-tw5w6 0/1 Running &lt;span class="m">0&lt;/span> 70s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此，你已经成功安装 Flomesh 的所有组件，包括 operator 和 ingress 控制器。&lt;/p>
&lt;h2 id="中间件">中间件&lt;/h2>
&lt;p>Demo 需要用到中间件完成日志和统计数据的存储，这里为了方便使用 pipy 进行 mock：直接在控制台中打印数据。&lt;/p>
&lt;p>另外，服务治理相关的配置有 mock 的 pipy config 服务提供。&lt;/p>
&lt;h3 id="log--metrics">log &amp;amp; metrics&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; middleware.js &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">pipy()
&lt;/span>&lt;span class="s">.listen(8123)
&lt;/span>&lt;span class="s"> .link(&amp;#39;mock&amp;#39;)
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s">.listen(9001)
&lt;/span>&lt;span class="s"> .link(&amp;#39;mock&amp;#39;)
&lt;/span>&lt;span class="s">.pipeline(&amp;#39;mock&amp;#39;)
&lt;/span>&lt;span class="s"> .decodeHttpRequest()
&lt;/span>&lt;span class="s"> .replaceMessage(
&lt;/span>&lt;span class="s"> req =&amp;gt; (
&lt;/span>&lt;span class="s"> console.log(req.body.toString()),
&lt;/span>&lt;span class="s"> new Message(&amp;#39;OK&amp;#39;)
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> .encodeHttpResponse()
&lt;/span>&lt;span class="s">EOF&lt;/span>
$ docker run --rm --name middleware --entrypoint &lt;span class="s2">&amp;#34;pipy&amp;#34;&lt;/span> -v &lt;span class="si">${&lt;/span>&lt;span class="nv">PWD&lt;/span>&lt;span class="si">}&lt;/span>:/script -p 8123:8123 -p 9001:9001 flomesh/pipy-pjs:0.4.0-118 /script/middleware.js
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pipy-config">pipy config&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; mock-config.json &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">{
&lt;/span>&lt;span class="s"> &amp;#34;ingress&amp;#34;: {},
&lt;/span>&lt;span class="s"> &amp;#34;inbound&amp;#34;: {
&lt;/span>&lt;span class="s"> &amp;#34;rateLimit&amp;#34;: -1,
&lt;/span>&lt;span class="s"> &amp;#34;dataLimit&amp;#34;: -1,
&lt;/span>&lt;span class="s"> &amp;#34;circuitBreak&amp;#34;: false,
&lt;/span>&lt;span class="s"> &amp;#34;blacklist&amp;#34;: []
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s"> &amp;#34;outbound&amp;#34;: {
&lt;/span>&lt;span class="s"> &amp;#34;rateLimit&amp;#34;: -1,
&lt;/span>&lt;span class="s"> &amp;#34;dataLimit&amp;#34;: -1
&lt;/span>&lt;span class="s"> }
&lt;/span>&lt;span class="s">}
&lt;/span>&lt;span class="s">EOF&lt;/span>
$ cat &amp;gt; mock.js &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">pipy({
&lt;/span>&lt;span class="s"> _CONFIG_FILENAME: &amp;#39;mock-config.json&amp;#39;,
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s"> _serveFile: (req, filename, type) =&amp;gt; (
&lt;/span>&lt;span class="s"> new Message(
&lt;/span>&lt;span class="s"> {
&lt;/span>&lt;span class="s"> bodiless: req.head.method === &amp;#39;HEAD&amp;#39;,
&lt;/span>&lt;span class="s"> headers: {
&lt;/span>&lt;span class="s"> &amp;#39;etag&amp;#39;: os.stat(filename)?.mtime | 0,
&lt;/span>&lt;span class="s"> &amp;#39;content-type&amp;#39;: type,
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s"> req.head.method === &amp;#39;HEAD&amp;#39; ? null : os.readFile(filename),
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> ),
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s"> _router: new algo.URLRouter({
&lt;/span>&lt;span class="s"> &amp;#39;/config&amp;#39;: req =&amp;gt; _serveFile(req, _CONFIG_FILENAME, &amp;#39;application/json&amp;#39;),
&lt;/span>&lt;span class="s"> &amp;#39;/*&amp;#39;: () =&amp;gt; new Message({ status: 404 }, &amp;#39;Not found&amp;#39;),
&lt;/span>&lt;span class="s"> }),
&lt;/span>&lt;span class="s">})
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s">// Config
&lt;/span>&lt;span class="s">.listen(9000)
&lt;/span>&lt;span class="s"> .decodeHttpRequest()
&lt;/span>&lt;span class="s"> .replaceMessage(
&lt;/span>&lt;span class="s"> req =&amp;gt; (
&lt;/span>&lt;span class="s"> _router.find(req.head.path)(req)
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> .encodeHttpResponse()
&lt;/span>&lt;span class="s">EOF&lt;/span>
$ docker run --rm --name mock --entrypoint &lt;span class="s2">&amp;#34;pipy&amp;#34;&lt;/span> -v &lt;span class="si">${&lt;/span>&lt;span class="nv">PWD&lt;/span>&lt;span class="si">}&lt;/span>:/script -p 9000:9000 flomesh/pipy-pjs:0.4.0-118 /script/mock.js
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运行-demo">运行 Demo&lt;/h2>
&lt;p>Demo 运行在另一个独立的命名空间 &lt;code>flomesh-spring&lt;/code> 中，执行命令 &lt;code>kubectl apply -f base/namespace.yaml&lt;/code> 来创建该命名空间。如果你 &lt;code>describe&lt;/code> 该命名空间你会发现其使用了 &lt;code>flomesh.io/inject=true&lt;/code> 标签。&lt;/p>
&lt;p>这个标签告知 operator 的 admission webHook 拦截标注的命名空间下 pod 的创建。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl describe ns flomesh-spring
Name: flomesh-spring
Labels: app.kubernetes.io/name&lt;span class="o">=&lt;/span>spring-mesh
app.kubernetes.io/version&lt;span class="o">=&lt;/span>1.19.0
flomesh.io/inject&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
kubernetes.io/metadata.name&lt;span class="o">=&lt;/span>flomesh-spring
Annotations: &amp;lt;none&amp;gt;
Status: Active
No resource quota.
No LimitRange resource.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们首先看下 Flomesh 提供的 CRD &lt;code>ProxyProfile&lt;/code>。这个 demo 中，其定义了 sidecar 容器片段以及所使用的的脚本。检查 &lt;code>sidecar/proxy-profile.yaml&lt;/code> 获取更多信息。执行下面的命令，创建 CRD 资源。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f sidecar/proxy-profile.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否创建成功：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pf -o wide
NAME NAMESPACE DISABLED SELECTOR CONFIG AGE
proxy-profile-002-bookinfo flomesh-spring &lt;span class="nb">false&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;matchLabels&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;sys&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;bookinfo-samples&amp;#34;&lt;/span>&lt;span class="o">}}&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;flomesh-spring&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;proxy-profile-002-bookinfo-fsmcm-b67a9e39-0418&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> 27s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As the services has startup dependencies, you need to deploy it one by one following the strict order. Before starting, check the &lt;strong>Endpoints&lt;/strong> section of &lt;strong>base/clickhouse.yaml&lt;/strong>.&lt;/p>
&lt;p>提供中间件的访问 endpoid，将 &lt;code>base/clickhouse.yaml&lt;/code>、&lt;code>base/metrics.yaml&lt;/code> 和 &lt;code>base/config.yaml&lt;/code> 中的 ip 地址改为本机的 ip 地址（不是 127.0.0.1）。&lt;/p>
&lt;p>修改之后，执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f base/clickhouse.yaml
$ kubectl apply -f base/metrics.yaml
$ kubectl apply -f base/config.yaml
$ kubectl get endpoints samples-clickhouse samples-metrics samples-config
NAME ENDPOINTS AGE
samples-clickhouse 192.168.1.101:8123 3m
samples-metrics 192.168.1.101:9001 3s
samples-config 192.168.1.101:9000 3m
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署注册中心">部署注册中心&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f base/discovery-server.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查注册中心 pod 的状态，确保 3 个容器都运行正常。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod
NAME READY STATUS RESTARTS AGE
samples-discovery-server-v1-85798c47d4-dr72k 3/3 Running &lt;span class="m">0&lt;/span> 96s
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署配置中心">部署配置中心&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f base/config-service.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署-api-网关以及-bookinfo-相关的服务">部署 API 网关以及 bookinfo 相关的服务&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f base/bookinfo-v1.yaml
$ kubectl apply -f base/bookinfo-v2.yaml
$ kubectl apply -f base/productpage-v1.yaml
$ kubectl apply -f base/productpage-v2.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查 pod 状态，可以看到所有 pod 都注入了容器。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pods
samples-discovery-server-v1-85798c47d4-p6zpb 3/3 Running &lt;span class="m">0&lt;/span> 19h
samples-config-service-v1-84888bfb5b-8bcw9 1/1 Running &lt;span class="m">0&lt;/span> 19h
samples-api-gateway-v1-75bb6456d6-nt2nl 3/3 Running &lt;span class="m">0&lt;/span> 6h43m
samples-bookinfo-ratings-v1-6d557dd894-cbrv7 3/3 Running &lt;span class="m">0&lt;/span> 6h43m
samples-bookinfo-details-v1-756bb89448-dxk66 3/3 Running &lt;span class="m">0&lt;/span> 6h43m
samples-bookinfo-reviews-v1-7778cdb45b-pbknp 3/3 Running &lt;span class="m">0&lt;/span> 6h43m
samples-api-gateway-v2-7ddb5d7fd9-8jgms 3/3 Running &lt;span class="m">0&lt;/span> 6h37m
samples-bookinfo-ratings-v2-845d95fb7-txcxs 3/3 Running &lt;span class="m">0&lt;/span> 6h37m
samples-bookinfo-reviews-v2-79b4c67b77-ddkm2 3/3 Running &lt;span class="m">0&lt;/span> 6h37m
samples-bookinfo-details-v2-7dfb4d7c-jfq4j 3/3 Running &lt;span class="m">0&lt;/span> 6h37m
samples-bookinfo-productpage-v1-854675b56-8n2xd 1/1 Running &lt;span class="m">0&lt;/span> 7m1s
samples-bookinfo-productpage-v2-669bd8d9c7-8wxsf 1/1 Running &lt;span class="m">0&lt;/span> 6m57s
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加-ingress-规则">添加 Ingress 规则&lt;/h3>
&lt;p>执行如下命令添加 Ingress 规则。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl apply -f ingress/ingress.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="测试前的准备">测试前的准备&lt;/h3>
&lt;p>访问 demo 服务都要通过 ingress 控制器。因此需要先获取 LB 的 ip 地址。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">//Obtain the controller IP
//Here, we append port.
&lt;span class="nv">ingressAddr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>kubectl get svc ingress-pipy-controller -n ingress-pipy -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.spec.clusterIP}&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>:81
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里我们使用了是 k3d 创建的 k3s，命令中加入了 &lt;code>-p 81:80@loadbalancer&lt;/code> 选项。我们可以使用 &lt;code>127.0.0.1:81&lt;/code> 来访问 ingress 控制器。这里执行命令 &lt;code>ingressAddr=127.0.0.1:81&lt;/code>。&lt;/p>
&lt;p>Ingress 规则中，我们为每个规则指定了 &lt;code>host&lt;/code>，因此每个请求中需要通过 HTTP 请求头 &lt;code>Host&lt;/code> 提供对应的 &lt;code>host&lt;/code>。&lt;/p>
&lt;p>或者在 &lt;code>/etc/hosts&lt;/code> 添加记录：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get ing ingress-pipy-bookinfo -n flomesh-spring -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{range .spec.rules[*]}{.host}{&amp;#39;\n&amp;#39;}&amp;#34;&lt;/span>
api-v1.flomesh.cn
api-v2.flomesh.cn
fe-v1.flomesh.cn
fe-v2.flomesh.cn
//添加记录到 /etc/hosts
127.0.0.1 api-v1.flomesh.cn api-v2.flomesh.cn fe-v1.flomesh.cn fe-v2.flomesh.cn
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="验证">验证&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ curl http://127.0.0.1:81/actuator/health -H &lt;span class="s1">&amp;#39;Host: api-v1.flomesh.cn&amp;#39;&lt;/span>
&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;status&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;UP&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;groups&amp;#34;&lt;/span>:&lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;liveness&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;readiness&amp;#34;&lt;/span>&lt;span class="o">]}&lt;/span>
//OR
$ curl http://api-v1.flomesh.cn:81/actuator/health
&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;status&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;UP&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;groups&amp;#34;&lt;/span>:&lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;liveness&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;readiness&amp;#34;&lt;/span>&lt;span class="o">]}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;h3 id="灰度">灰度&lt;/h3>
&lt;p>在 v1 版本的服务中，我们为 book 添加 rating 和 review。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># rate a book&lt;/span>
$ curl -X POST http://&lt;span class="nv">$ingressAddr&lt;/span>/bookinfo-ratings/ratings &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -H &lt;span class="s2">&amp;#34;Host: api-v1.flomesh.cn&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -d &lt;span class="s1">&amp;#39;{&amp;#34;reviewerId&amp;#34;:&amp;#34;9bc908be-0717-4eab-bb51-ea14f669ef20&amp;#34;,&amp;#34;productId&amp;#34;:&amp;#34;2099a055-1e21-46ef-825e-9e0de93554ea&amp;#34;,&amp;#34;rating&amp;#34;:3}&amp;#39;&lt;/span>
$ curl http://&lt;span class="nv">$ingressAddr&lt;/span>/bookinfo-ratings/ratings/2099a055-1e21-46ef-825e-9e0de93554ea -H &lt;span class="s2">&amp;#34;Host: api-v1.flomesh.cn&amp;#34;&lt;/span>
&lt;span class="c1"># review a book&lt;/span>
$ curl -X POST http://&lt;span class="nv">$ingressAddr&lt;/span>/bookinfo-reviews/reviews &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -H &lt;span class="s2">&amp;#34;Host: api-v1.flomesh.cn&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -d &lt;span class="s1">&amp;#39;{&amp;#34;reviewerId&amp;#34;:&amp;#34;9bc908be-0717-4eab-bb51-ea14f669ef20&amp;#34;,&amp;#34;productId&amp;#34;:&amp;#34;2099a055-1e21-46ef-825e-9e0de93554ea&amp;#34;,&amp;#34;review&amp;#34;:&amp;#34;This was OK.&amp;#34;,&amp;#34;rating&amp;#34;:3}&amp;#39;&lt;/span>
$ curl http://&lt;span class="nv">$ingressAddr&lt;/span>/bookinfo-reviews/reviews/2099a055-1e21-46ef-825e-9e0de93554ea -H &lt;span class="s2">&amp;#34;Host: api-v1.flomesh.cn&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行上面的命令之后，我们可以在浏览器中访问前端服务（&lt;code>http://fe-v1.flomesh.cn:81/productpage?u=normal&lt;/code>、 &lt;code>http://fe-v2.flomesh.cn:81/productpage?u=normal&lt;/code>），只有 v1 版本的前端中才能看到刚才添加的记录。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/08/13/20210813174155.png" alt="v1">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/08/13/20210813174207.png" alt="v2">&lt;/p>
&lt;h3 id="熔断">熔断&lt;/h3>
&lt;p>这里熔断我们通过修改 &lt;code>mock-config.json&lt;/code> 中的 &lt;code>inbound.circuitBreak&lt;/code> 为 &lt;code>true&lt;/code>，来将服务强制开启熔断：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;ingress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="nt">&amp;#34;inbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;rateLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;dataLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;circuitBreak&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">//here&lt;/span>
&lt;span class="nt">&amp;#34;blacklist&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;outbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;rateLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;dataLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ curl http://&lt;span class="nv">$ingressAddr&lt;/span>/actuator/health -H &lt;span class="s1">&amp;#39;Host: api-v1.flomesh.cn&amp;#39;&lt;/span>
HTTP/1.1 &lt;span class="m">503&lt;/span> Service Unavailable
Connection: keep-alive
Content-Length: &lt;span class="m">27&lt;/span>
Service Circuit Break Open
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="限流">限流&lt;/h3>
&lt;p>修改 pipy config 的配置，将 &lt;code>inbound.rateLimit&lt;/code> 设置为 1。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;ingress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="nt">&amp;#34;inbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;rateLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">//here&lt;/span>
&lt;span class="nt">&amp;#34;dataLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;circuitBreak&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;blacklist&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;outbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;rateLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;dataLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们使用 &lt;code>wrk&lt;/code> 模拟发送请求，20 个连接、20 个请求、持续 30s：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ wrk -t20 -c20 -d30s --latency http://&lt;span class="nv">$ingressAddr&lt;/span>/actuator/health -H &lt;span class="s1">&amp;#39;Host: api-v1.flomesh.cn&amp;#39;&lt;/span>
Running 30s &lt;span class="nb">test&lt;/span> @ http://127.0.0.1:81/actuator/health
&lt;span class="m">20&lt;/span> threads and &lt;span class="m">20&lt;/span> connections
Thread Stats Avg Stdev Max +/- Stdev
Latency 951.51ms 206.23ms 1.04s 93.55%
Req/Sec 0.61 1.71 10.00 93.55%
Latency Distribution
50% 1.00s
75% 1.01s
90% 1.02s
99% 1.03s
&lt;span class="m">620&lt;/span> requests in 30.10s, 141.07KB &lt;span class="nb">read&lt;/span>
Requests/sec: 20.60
Transfer/sec: 4.69KB
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从结果来看 20.60 req/s，即每个连接 1 req/s。&lt;/p>
&lt;h3 id="黑白名单">黑白名单&lt;/h3>
&lt;p>将 pipy config 的 &lt;code>mock-config.json&lt;/code> 做如下修改：ip 地址使用的是 ingress controller 的 pod ip。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kgpo -n ingress-pipy ingress-pipy-controller-76cd866d78-4cqqn -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.status.podIP}&amp;#39;&lt;/span>
10.42.0.78
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;ingress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="nt">&amp;#34;inbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;rateLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;dataLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;circuitBreak&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;blacklist&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;10.42.0.78&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">//here&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;outbound&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;rateLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;dataLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>还是访问网关的接口&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl http://&lt;span class="nv">$ingressAddr&lt;/span>/actuator/health -H &lt;span class="s1">&amp;#39;Host: api-v1.flomesh.cn&amp;#39;&lt;/span>
HTTP/1.1 &lt;span class="m">503&lt;/span> Service Unavailable
content-type: text/plain
Connection: keep-alive
Content-Length: &lt;span class="m">20&lt;/span>
Service Unavailable
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>开源评估框架</title><link>https://atbug.com/a-framework-for-open-source-evaluation/</link><pubDate>Mon, 09 Aug 2021 08:36:21 +0800</pubDate><guid>https://atbug.com/a-framework-for-open-source-evaluation/</guid><description>
&lt;p>本文由本人翻译自 &lt;a href="">Bilgin Ibryam&lt;/a> 的 &lt;a href="https://monetize.substack.com/p/a-framework-for-open-source-evaluation">A Framework for Open Source Evaluation&lt;/a>，首发在&lt;a href="https://cloudnative.to/blog/a-framework-for-open-source-evaluation/">云原生社区博客&lt;/a>。&lt;/p>
&lt;hr>
&lt;p>如今，真&lt;a href="https://www.linuxjournal.com/content/open-vs-fauxpen">假&lt;/a>开源无处不在。最近开源项目转为闭源的案例越来越多，同时也有不少闭源项目（按照 &lt;a href="https://opensource.org/osd">OSI 定义&lt;/a>）像开源一样构建社区的例子。这怎么可能，开源项目不应该始终如此吗？&lt;/p>
&lt;p>开源不是非黑即白，它具有开放性、透明、协作性和信任性的多个&lt;a href="https://monetize.substack.com/p/a-holistic-vision-of-open-source">维度&lt;/a>。有些开源是 Github 上的任何项目，有些必须通过 OSI 定义，有些是必须遵守不成文但普遍接受的开源规范。这里通过看一些商业和技术方面，再讨论社区管理习惯，来同大家分享一下我对评估开源项目的看法。&lt;/p>
&lt;h3 id="免责声明">免责声明&lt;/h3>
&lt;ul>
&lt;li>这些是我的个人观点，与我的雇主或我所属的软件基金会和项目无关。&lt;/li>
&lt;li>这不是法律或专业意见（我不是律师，也不是专门从事 OSS 评估的），而是外行的意见。
更新：我收到了多位开源律师的反馈并更新了文章！&lt;/li>
&lt;li>这篇博文由&lt;a href="https://monetize.substack.com/">订阅&lt;/a>和&lt;a href="https://twitter.com/bibryam/status/1371045284751507463">分享&lt;/a>按钮赞助，点击这些按钮表示支持。&lt;/li>
&lt;/ul>
&lt;h3 id="知识产权">知识产权&lt;/h3>
&lt;p>关于“开源”项目的第一个问题是关于知识产权的所有权。好消息是，即使不了解这些法律含义，你可以应用一个简单的 Litmus 测试。该项目是否属于你信任的信誉良好的开源基金会？例如，&lt;a href="https://www.fsf.org/">FSF&lt;/a> 拥有其托管项目的版权，更多情况下拥有基金会（如 &lt;a href="https://www.apache.org/foundation/">ASF&lt;/a>、&lt;a href="https://www.linuxfoundation.org/">LF&lt;/a>) 通过贡献者许可协议，聚合对其项目的贡献许可权。在任何一种情况下，你都可以相信他们将充当良好的去中心化管家，并且不会在一夜之间改变项目的未来方向。如果一个项目不属于信誉良好的软件基金会，而是由一家公司提供支持，那么问题是你是否信任该公司作为供应链合作伙伴。如果这些问题的答案是肯定的，请转到下一部分。如果答案是否定的，那么你最好调查一下版权所有者是谁，以及他们对你的长期前景和潜在风险是什么。今天的单一供应商开源项目，明天可能会变成闭源。&lt;/p>
&lt;h3 id="许可">许可&lt;/h3>
&lt;p>商标出现在许可之前的原因是软件的权利人（通常是作者）通过许可授予最终用户使用一个或多个软件副本的许可。自由软件许可证是一种说明，它授予源代码或其二进制形式的使用者修改和重新分发该软件的权利。如果没有许可，这些行为将受到版权法的禁止。这里的重点是权利人可以改变主意并更改许可。权利持有人可以决定在多个许可证下分发软件或随时将许可证更改为非开源许可证。该软件也可能在&lt;a href="https://opensource.org/node/878">公共领域&lt;/a>，在这种情况下，它不受版权法的限制。公共领域并不等同于开源许可证，这是一种不太流行的方法，我们可以在这里忽略。&lt;/p>
&lt;p>同样，如果不是律师，这是一个外行对许可的 Litmus 测试：该项目是否根据 OSI 批准的&lt;a href="https://opensource.org/licenses/alphabetical">许可清单&lt;/a>获得的许可？如果答案是肯定的，那么你可以依靠这些基金会的尽职调查来审查、分类许可并指出任何限制。如果答案是否定的，请让你公司的律师来查看和解释许可上的每个字以及可能的许可兼容性影响。&lt;/p>
&lt;h3 id="治理">治理&lt;/h3>
&lt;p>在余下的检查中，我们正在从更多的商业和法律方面转向涉及开源项目领域的技术和社区。&lt;/p>
&lt;p>&lt;img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7f06c148-d675-4bb7-803e-b3704f0016ef_3309x2473.png" alt="开源评估框架">&lt;/p>
&lt;p>假设不担心商标持有方（未来的合作伙伴）、许可（使用开源软件的条款），下一个问题是治理。&lt;a href="https://www.oasis-open.org/policies-guidelines/open-projects-process/">治理&lt;/a>是项目决定谁来做什么、他们应该如何做以及何时做的规则或习惯。它定义了与不同项目角色相关的职责、特权和权限，以及人们如何分配到角色和从角色中删除。此处的示例是小型日常活动，例如谁有权批准拉取请求、投票给候选发布、就项目架构达成共识、定义项目路线图以及选举项目治理委员会。&lt;/p>
&lt;p>如果你正在评估对你的组织具有战略意义的项目，你想知道谁负责。不仅如此，你甚至可能&lt;a href="https://hackernoon.com/reciprocity-in-open-source-e60fb98ee1cc">希望&lt;/a>你的开发人员对项目的方向有发言权。&lt;/p>
&lt;p>还有一个简单的 Litmus 测试：对于开源基金会的项目，对于谁可以对重要决策进行投票，以及如何成为决策委员会的一部分，都有明确的规则。在某些基金会（例如 ASF）中，它基于社区成员的个人功绩，而在某些基金会（例如&lt;a href="https://www.cncf.io/"> CNCF &lt;/a>）中，它从成为付费成员组织的员工开始。在基于区块链的开源项目中，它是基于&lt;a href="https://bit.ly/devprtcl">令牌（Token）&lt;/a>的投票持有人。其他基金会有不同的规则，但都力求在多个参与者之间实现中立和权力下放。如果一个项目由一家公司或一个人管理，你相信他们会为项目和社区的利益做出最佳决策。其中一些项目可能已经写下了他们遵循的治理规则，而有些可能根本没有。由你来确定治理动态及其对你的项目参与的重要性。除了具有治理透明度和公开决策之外，另一个方面是治理机构的信任度和声誉。当你查看项目的治理委员会时，是否有一位或一组具有经过验证的技术和社交技能的领导者，让你相信他们可以将项目提升到一个新的水平？或者你是否看到一个在政治斗争中不断争论的团体？这些是开源项目是否会成功并长期发展的一些指标，还是可以预期的头痛和停滞。&lt;/p>
&lt;h3 id="基础设施">基础设施&lt;/h3>
&lt;p>拥有开源许可可能在技术上有资格作为开源项目，但这并不能说明项目是否以开源方式构建。有许多在 OSI 批准的许可下发布的软件示例，但它们是在封闭的基础设施之后开发的。通过基础设施，我的意思是用户快速提问的聊天频道。进行更深入的开发人员讨论的论坛和邮件列表。审查拉取请求的源代码管理系统，以及运行测试和每晚创建二进制文件的构建服务器。&lt;/p>
&lt;p>对于关注开源项目的商务人士和律师来说，这些可能并不重要，但对于将要使用开源项目的技术人员来说，这些是一些假设的好处。这里要做的检查是探索软件是否是使用开放式基础设施以开源方式开发的，而不是闭门造车。以下是几个示例问题：&lt;/p>
&lt;ul>
&lt;li>用户可以在项目聊天中提出问题并在没有中间人的情况下从另一个用户那里得到答案吗？&lt;/li>
&lt;li>开发人员能否与项目提交者联系并获得深入的技术问题的答案？&lt;/li>
&lt;li>你能否运行最新版本并确认已知的错误已修复？&lt;/li>
&lt;li>架构师可以参加每周一次的社区电话会议并确定项目的未来方向吗？（原文 Can an architect the weekly community call and figure out the future direction of the project? ）&lt;/li>
&lt;/ul>
&lt;p>对于封闭的基础架构，你必须创建支持工单并付费才能获得类似问题的答案。通过开放的基础设施和开放的参与，那些知道如何以开源方式工作的人可以获得答案。&lt;/p>
&lt;h3 id="社区和采用">社区和采用&lt;/h3>
&lt;p>开源软件的主要好处之一是它允许好创意的发展和传播。你可能拥有最先进的技术、最宽松的许可和开放式开发，但如果该软件没有不断壮大的社区和不断提高的采用率，那就是一个值得调查的迹象。不同的项目会有不同的采用率。有些可能会迅速成长为主流或被其他同类型项目所取代。一些项目可能有一个小但持续的增长率和一个持续数十年的生态社区。社区规模和采用率是开源项目的最终寿命指标。以下是你可以提出的一些示例问题：&lt;/p>
&lt;ul>
&lt;li>项目中有多少活跃的开发人员（提交者），平均提交率是多少？&lt;/li>
&lt;li>上个月有多少用户订阅了用户论坛以及提出了多少问题？&lt;/li>
&lt;li>软件的最新稳定版本已被下载多少次？&lt;/li>
&lt;li>还有哪些项目和服务&lt;a href="https://libraries.io/">依赖&lt;/a>并使用这个项目？&lt;/li>
&lt;li>有多少商业组织支持这个项目？&lt;/li>
&lt;li>是否有商业组织围绕它提供产品、支持和服务？&lt;/li>
&lt;li>这个项目有多少 StackOverflow 问题？&lt;/li>
&lt;li>有多少书籍、会议演讲和职位描述提到了这个项目？&lt;/li>
&lt;/ul>
&lt;p>执行这些问题会给你一个指示，即该项目是在增长并成为其领域的事实上的标准，还是停滞不前并可能被下一个大项目所取代。&lt;/p>
&lt;p>通常，开源与快节奏的开发和创新有关。同时，开源也是一种创建广泛采用和创建非官方标准的机制。许多开源项目已经变成了标准，例如用于容器编排的 Kubernetes、用于流处理的 Apache Kafka、用于 Web 服务器的 Apache httpd 等。软件中最昂贵的事情之一是找到具有合适技能的人。使用采用率高的开源项目将使你有更好的机会找到技术娴熟的人，并让他们能够更长时间地重复使用他们的技能。&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>根据开源项目的关键程度，有不同的风险和评估标准。对于战略性的、难以替代的项目，这将是你的 IT 基础设施的基础，你需要是已经成为其领域事实上的开源标准的完善项目。在这里确定谁拥有该项目的商标以及谁将成为你的长期合作伙伴非常重要。通常，这些合作伙伴是项目所属软件基金会的成员组织或持有项目 IP 的单个公司。对于后者，你可能需要考虑长期风险，例如核心开发人员分叉项目的机会、提供项目即服务的超大规模者、公司收购等。&lt;/p>
&lt;p>对于交付速度最重要的非战略性、战术性、短期项目，你可以让你的开发人员根据开放性、社区协作和热度（对于某些前端技术很重要）来推动选择和挑选项目。在这里，定期的安全修复、开发人员支持和许可兼容性检查等中短期风险可能就足够了。&lt;/p>
&lt;p>在任何一种情况下，都没有适合所有情况的单一评估标准。你必须在长期商业风险、技术稳定性与最新热度、创新和开发人员满意度之间取得平衡。这里的框架将为你概括需要探索的领域和需要考虑的一些风险。祝你好运！&lt;/p></description></item><item><title>游记 - 2021 北疆之行</title><link>https://atbug.com/2021-xinjiang-trip/</link><pubDate>Sat, 07 Aug 2021 09:51:22 +0800</pubDate><guid>https://atbug.com/2021-xinjiang-trip/</guid><description>
&lt;blockquote>
&lt;p>趁着换工作的间隙，来一场“蓄谋已久”、“说走就走”的旅行。&lt;/p>
&lt;/blockquote>
&lt;p>新疆，是一个美丽而遥远的地方。前段时间看了李娟的《冬牧场》，更是提起了我对新疆对游牧哈萨克族的兴趣。以至后来梦中见到一望无际的戈壁滩，让自己下定决心做出改变。&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>这次北疆之行准备仓促，从路线方案到寻找同伴，都是出发前一周搞定的。&lt;/p>
&lt;p>同伴找的是云原生社区的 &lt;a href="https://jimmysong.io/">宋净超 Jimmy&lt;/a>，同样也是老乡（两人在外漂多年，沟通全是普通话。。。），他从北京出发。由于他的工作性质特别&amp;ndash;远程工作，所以当初临时找同伴的时候想到了他，而且还也在有驾照在手。也由于他需要远程工作，这次我们选择了房车自驾，正好本人也想体验一下房车。&lt;/p>
&lt;p>路书发在了&lt;a href="https://amap.com/roadbook/60ea265bc67d500479ac5535">这里&lt;/a>，全程 2800km+。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/08/07/20210727085117.png" alt="路书">&lt;/p>
&lt;h2 id="建议">建议&lt;/h2>
&lt;p>先说总结，&lt;strong>假如要你跟我走同样的路线而且喜欢驾驶&lt;/strong>，不建议房车（三围太大）。理由：&lt;/p>
&lt;ol>
&lt;li>山路多，各种的弯路，而且路的一侧就是悬崖（我好像还拍过一段 25 分钟的视频）&lt;/li>
&lt;li>昭苏到琼库什台一段的山路，很窄！&lt;/li>
&lt;li>车太重，爬坡非常慢，坡太多！&lt;/li>
&lt;li>车高重心高，戈壁上高速公路横风有时比较强，车子晃动厉害（尤其是吐鲁番至乌鲁木齐的风电区域）；即使没有横风，在超大货车的时候也会有同样的感觉&lt;/li>
&lt;/ol>
&lt;p>房车的居住体验还是不错的（人多不一定），随停随住。&lt;/p>
&lt;p>我的理想方案（下次考虑这么来）：&lt;/p>
&lt;h3 id="非房车">非房车&lt;/h3>
&lt;p>这次的路线，商业化迹象很明显，尤其是独库公路那条线。没有房车，吃住也不需要担心。&lt;/p>
&lt;ol>
&lt;li>吃：首选牧民家，体验最好；再就是各种餐馆，只要是本地人开的，都不会差；自己做？（这次带了灶具，一次没做过）&lt;/li>
&lt;li>住：酒店 &amp;gt; 牧民蒙古包（商业性的） &amp;gt; 自带帐篷（应急+体验）&lt;/li>
&lt;/ol>
&lt;p>不开房车，伊昭、独库公路和其他的山路都会轻松，体验更好。假如是 SUV，底盘高也方便深入草原。注意，为了保护草原牧民的操场车辆不能随便进。可以多问下牧民，付费吃住的话应该没问题。&lt;/p>
&lt;h3 id="房车">房车&lt;/h3>
&lt;p>房车适合宿在草原。假如，真想体验房车，我的建议就是：乌鲁木齐飞伊宁租车，直奔琼库什台村（这段山路实在避不开）。看过琼库什台的原生态草原，其他的草原也就没了兴趣。在那里安静住几天，骑骑马。&lt;/p>
&lt;h2 id="行程">行程&lt;/h2>
&lt;p>本来想写写的，有点多无从下手，看&lt;a href="https://amap.com/roadbook/60ea265bc67d500479ac5535">路书&lt;/a>凑合下吧。先放上列表，有时间我再完善。&lt;/p>
&lt;ul>
&lt;li>Day01 广州 - 乌鲁木齐&lt;/li>
&lt;li>Day02 乌鲁木齐 - 赛里木湖&lt;/li>
&lt;li>Day03 赛里木湖 - 昭苏草原&lt;/li>
&lt;li>Day04 昭苏草原 - 琼库什台村&lt;/li>
&lt;li>Day05 琼库什台村 - 那拉提景区&lt;/li>
&lt;li>Day06 那拉提 - 独库公路南段 - 库车市&lt;/li>
&lt;li>Day07 库车市 - 和硕县&lt;/li>
&lt;li>Day08 和硕县 - 吐鲁番市 - 乌鲁木齐&lt;/li>
&lt;/ul>
&lt;h2 id="视频">视频&lt;/h2>
&lt;ul>
&lt;li>Jimmy 剪辑的&lt;a href="https://www.bilibili.com/video/BV1Ab4y1z7TW/">视频&lt;/a>&lt;/li>
&lt;li>独库公路（有点枯燥，想看的单独找我要吧）&lt;/li>
&lt;/ul></description></item><item><title>Kubernetes 必备工具：2021</title><link>https://atbug.com/translation-kuberletes-essential-tools-2021/</link><pubDate>Thu, 15 Jul 2021 08:10:22 +0800</pubDate><guid>https://atbug.com/translation-kuberletes-essential-tools-2021/</guid><description>
&lt;p>有别于前些天的文章 - &lt;a href="https://mp.weixin.qq.com/s/uU2zmT5yyVcKZ5XmLSRqtg">常用的几款工具让 Kubernetes 集群上的工作更容易&lt;/a> 偏重于工具类来提升工作效率，今天这篇文章更加适合用来做选型时的参考。&lt;/p>
&lt;p>文档翻译自 &lt;a href="https://itnext.io/kubernetes-essential-tools-2021-def12e84c572">Kubernetes Essential Tools: 2021&lt;/a>，篇幅较长，做了部分增删。&lt;/p>
&lt;hr>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>在本文中，我将尝试总结我最喜欢的 &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a> 工具，并特别强调最新的和鲜为人知但我认为会非常流行的工具。&lt;/p>
&lt;p>这只是我根据我的经验得出的个人清单，但为了避免偏见，我还将尝试提及每种工具的替代方案，以便你可以根据自己的需要进行比较和决定。我将尽可能缩短这篇文章并提供链接，以便你可以自行探索更多内容。我的目标是回答这个问题：“我如何在 Kubernetes 中做 X？” 通过描述不同软件开发任务的工具。&lt;/p>
&lt;h2 id="k3d">K3D&lt;/h2>
&lt;p>&lt;a href="https://k3d.io/">K3D&lt;/a> 是我最喜欢的在笔记本电脑上运行 Kubernetes (K8s) 集群的方式。它非常&lt;strong>轻巧且&lt;/strong>速度非常快。它是使用 &lt;strong>Docker&lt;/strong> 围绕 &lt;a href="https://k3s.io/">K3S&lt;/a> 的包装器。所以，你只需要 Docker 来运行它并且资源使用率非常低。唯一的问题是&lt;strong>它不完全符合 K8s 标准&lt;/strong>，但这不应该是本地开发的问题。对于测试环境，你可以使用其他解决方案。K3D 比 Kind 快，但 Kind 完全兼容。&lt;/p>
&lt;h3 id="备选">备选&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://k3s.io/">&lt;strong>K3S&lt;/strong>&lt;/a> 物联网或者边缘计算&lt;/li>
&lt;li>&lt;a href="https://kind.sigs.k8s.io/">&lt;strong>Kind&lt;/strong>&lt;/a> 完全兼容 Kubernetes 的备选&lt;/li>
&lt;li>&lt;a href="https://microk8s.io/">&lt;strong>MicroK8s&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://minikube.sigs.k8s.io/docs/">&lt;strong>MiniKube&lt;/strong>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="krew">Krew&lt;/h2>
&lt;p>&lt;a href="https://krew.sigs.k8s.io/">Krew&lt;/a> 是管理的必备工具 &lt;strong>Kubectl 插件&lt;/strong>，这是一个必须有任何 K8S 用户。我不会详细介绍超过 145 个可用&lt;a href="https://krew.sigs.k8s.io/plugins/">插件&lt;/a>，但至少安装 &lt;a href="https://github.com/ahmetb/kubectx">&lt;strong>kubens&lt;/strong>&lt;/a> 和 &lt;a href="https://github.com/ahmetb/kubectx">&lt;strong>kubectx&lt;/strong>&lt;/a>。&lt;/p>
&lt;h2 id="lens">Lens&lt;/h2>
&lt;p>&lt;a href="https://k8slens.dev/">Lens&lt;/a> 是适用于 SRE、Ops 和开发人员的 K8s &lt;strong>IDE&lt;/strong>。它适用于任何 Kubernetes 发行版：本地或云端。它快速、易于使用并提供实时可观察性。使用 Lens 可以非常轻松地管理多个集群。如果你是集群操作员，这是必须的。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/15/16263041512885.jpg" alt="">&lt;/p>
&lt;h3 id="备选-1">备选&lt;/h3>
&lt;ul>
&lt;li>对于那些喜欢轻量级终端替代品的人来说，&lt;a href="https://k9scli.io/">K9s&lt;/a> 是一个很好的选择。K9s 会持续观察 Kubernetes 的变化，并提供后续命令来与你观察到的资源进行交互。&lt;/li>
&lt;/ul>
&lt;h2 id="helm">Helm&lt;/h2>
&lt;p>&lt;a href="https://helm.sh/">Helm&lt;/a> 不需要介绍，它是 Kubernetes 最著名的包管理器。你应该在 K8s 中使用包管理器，就像在编程语言中使用它一样。Helm 允许你将应用程序打包到 &lt;a href="https://artifacthub.io/">Charts&lt;/a> 中，将复杂的应用程序抽象为易于定义、安装和更新的可重用简单组件。&lt;/p>
&lt;p>它还提供了强大的模板引擎。Helm 很成熟，有很多预定义的 charts，很好的支持，而且很容易使用。&lt;/p>
&lt;h3 id="备选-2">备选&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://kustomize.io/">&lt;strong>Kustomize&lt;/strong>&lt;/a> 是 helm 的一个更新和伟大的替代品，它不使用模板引擎，而是一个覆盖引擎，在其中你有基本的定义和覆盖在它们之上。&lt;/li>
&lt;/ul>
&lt;h2 id="argocd">ArgoCD&lt;/h2>
&lt;p>我相信 &lt;a href="https://www.gitops.tech/">GitOps&lt;/a> 是过去十年中最好的想法之一。在软件开发中，我们应该使用单一的事实来源来跟踪构建软件所需的所有移动部分，而 &lt;strong>Git&lt;/strong> 是做到这一点的完美工具。我们的想法是拥有一个 Git 存储库，其中包含应用程序代码以及表示所需生产环境状态的基础设施 (&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_Code">IaC&lt;/a>) 的声明性描述；以及使所需环境与存储库中描述的状态相匹配的自动化过程。&lt;/p>
&lt;blockquote>
&lt;p>GitOps: versioned CI/CD on top of declarative infrastructure. Stop scripting and start shipping.&lt;/p>
&lt;p>— Kelsey Hightower&lt;/p>
&lt;/blockquote>
&lt;p>尽管使用 &lt;a href="https://www.terraform.io/">Terraform&lt;/a> 或类似工具，你可以实现基础设施即代码（&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">IaC&lt;/a>），但这还不足以将你在 Git 中的所需状态与生产同步。我们需要一种方法来持续监控环境并确保没有配置漂移。使用 Terraform，你将不得不编写脚本来运行&lt;code>terraform apply&lt;/code>并检查状态是否与 Terraform 状态匹配，但这既乏味又难以维护。&lt;/p>
&lt;p>Kubernetes 从头开始​​构建控制循环的思想，这意味着 Kubernetes 一直在监视集群的状态以确保它与所需的状态匹配，例如，运行的副本数量与所需的数量相匹配复制品。GitOps 的想法是将其扩展到应用程序，因此你可以将你的服务定义为代码，例如，通过定义 Helm Charts，并使用利用 K8s 功能的工具来监控你的应用程序的状态并相应地调整集群。也就是说，如果更新你的代码存储库或Helm Chart，生产集群也会更新。这是真正的&lt;a href="https://en.wikipedia.org/wiki/Continuous_deployment">持续部署&lt;/a>。核心原则是应用程序部署和生命周期管理应该自动化、可审计且易于理解。&lt;/p>
&lt;p>对我来说，这个想法是革命性的，如果做得好，将使组织能够更多地关注功能，而不是编写自动化脚本。这个概念可以扩展到软件开发的其他领域，例如，你可以将文档存储在代码中以跟踪更改的历史并确保文档是最新的；或使用&lt;a href="https://github.com/jamesmh/architecture_decision_record">ADR&lt;/a>跟踪架构决策。&lt;/p>
&lt;p>在我看来，在最好的 GitOps 工具 &lt;strong>Kubernetes&lt;/strong> 是 &lt;a href="https://argoproj.github.io/argo-cd/">ArgoCD&lt;/a>。你可以在&lt;a href="https://argoproj.github.io/argo-cd/core_concepts/">此处&lt;/a>阅读更多信息。ArgoCD 是 &lt;strong>Argo&lt;/strong> 生态系统的一部分，其中包括一些其他很棒的工具，其中一些我们将在稍后讨论。&lt;/p>
&lt;p>使用 &lt;strong>ArgoCD&lt;/strong>，你可以在代码存储库中拥有每个环境，你可以在其中定义该环境的所有配置。Argo CD 在指定的目标环境中自动部署所需的应用程序状态。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/15/16263046811430.jpg" alt="">&lt;/p>
&lt;p>ArgoCD 被实现为一个 kubernetes 控制器，它持续监控正在运行的应用程序并将当前的实时状态与所需的目标状态（如 Git 存储库中指定的）进行比较。ArgoCD 报告并可视化差异，并且可以自动或手动将实时状态同步回所需的目标状态。&lt;/p>
&lt;h3 id="备选-3">备选&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://fluxcd.io/">Flux&lt;/a> 刚刚发布了一个具有许多改进的新版本。它提供了非常相似的功能。&lt;/li>
&lt;/ul>
&lt;h2 id="argo-工作流workflows和-argo-事件events">Argo 工作流（Workflows）和 Argo 事件（Events）&lt;/h2>
&lt;p>在 Kubernetes 中，你可能还需要运行批处理作业或复杂的工作流。这可能是你的数据管道、异步流程甚至 CI/CD 的一部分。最重要的是，你甚至可能需要运行对某些事件做出反应的驱动微服务，例如文件上传或消息发送到队列。对于所有这些，我们有 &lt;a href="https://argoproj.github.io/argo-workflows/">Argo Workflows&lt;/a> 和 &lt;a href="https://argoproj.github.io/argo-events/">Argo Events&lt;/a>。&lt;/p>
&lt;p>尽管它们是独立的项目，但它们往往会被部署在一起。&lt;/p>
&lt;p>Argo Workflows 是一个类似于 &lt;a href="https://airflow.apache.org/">Apache Airflow&lt;/a> 的编排引擎，但它是 Kubernetes 原生的。它使用自定义 CRD 来定义复杂的工作流程，使用 YAML 的步骤或 &lt;strong>DAG&lt;/strong>，这在 K8s 中感觉更自然。它有一个漂亮的 UI、重试机制、基于 cron 的作业、输入和输出跟踪等等。你可以使用它来编排数据管道、批处理作业等等。&lt;/p>
&lt;p>有时，你可能希望将管道与异步服务（如 &lt;strong>Kafka&lt;/strong> 等流引擎、队列、webhooks 或深度存储服务）集成。例如，你可能想要对上传到 S3 的文件等事件做出反应。为此，你将使用 &lt;a href="https://argoproj.github.io/argo-events/">Argo 事件（Event）&lt;/a>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/15/16263049343226.jpg" alt="">&lt;/p>
&lt;p>这两个工具组合为你的所有管道需求提供了一个简单而强大的解决方案，包括 CI/CD 管道，它允许你在 Kubernetes 中本地运行 CI/CD 管道。&lt;/p>
&lt;h3 id="备选-4">备选&lt;/h3>
&lt;ul>
&lt;li>对于 ML 管道，你可以使用 &lt;a href="https://www.kubeflow.org/">Kubeflow&lt;/a>。&lt;/li>
&lt;li>对于 CI/CD 管道，你可以使用 &lt;a href="https://tekton.dev/docs/pipelines/pipelines/">Tekton&lt;/a>。&lt;/li>
&lt;/ul>
&lt;h2 id="kaniko">Kaniko&lt;/h2>
&lt;p>我们刚刚看到了如何使用 Argo Workflows 运行 Kubernetes 原生 &lt;strong>CI/CD&lt;/strong> 管道。一个常见的任务是构建 &lt;strong>Docker 镜像&lt;/strong>，这在 Kubernetes 中通常是乏味的，因为构建过程实际上是在容器本身上运行的，你需要使用变通方法来使用主机的 Docker 引擎。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/15/16263050297533.jpg" alt="">&lt;/p>
&lt;p>底线是你不应该使用 &lt;strong>Docker&lt;/strong> 来构建你的镜像：改用 &lt;a href="https://github.com/GoogleContainerTools/kaniko">&lt;strong>Kanico&lt;/strong>&lt;/a>。Kaniko 不依赖于 Docker 守护进程，而是完全在用户空间中执行 Dockerfile 中的每个命令。这使得在无法轻松或安全地运行 Docker 守护程序的环境中构建容器镜像成为可能，例如标准的 Kubernetes 集群。这消除了在 K8s 集群中构建镜像的所有问题。&lt;/p>
&lt;h2 id="istio">Istio&lt;/h2>
&lt;p>&lt;a href="https://istio.io/">Istio&lt;/a> 是市场上最著名的&lt;a href="https://en.wikipedia.org/wiki/Service_mesh">服务网格&lt;/a>，它是开源的并且非常受欢迎。我不会详细介绍什么是服务网格，因为它是一个巨大的话题，但是如果你正在构建&lt;a href="https://microservices.io/">微服务&lt;/a>，并且可能应该这样做，那么你将需要一个服务网格来管理通信、可观察性、错误处理、安全性。与其用重复的逻辑污染每个微服务的代码（译者：SDK 侵入），不如利用服务网格为你做这件事。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/15/16263052962147.jpg" alt="">&lt;/p>
&lt;p>简而言之，服务网格是一个专用的基础设施层，你可以将其添加到你的应用程序中。它允许你透明地添加可观察性、流量管理和安全性等功能，而无需将它们添加到你自己的代码中。&lt;/p>
&lt;p>如果 &lt;strong>Istio&lt;/strong> 用于运行微服务，尽管你可以在任何地方运行 Istio 并使用微服务，但 Kubernetes 已被一次又一次地证明是运行它们的最佳平台。&lt;strong>Istio&lt;/strong> 还可以将你的 K8s 集群扩展到其他服务，例如 VM，允许你拥有在迁移到 Kubernetes 时非常有用的混合环境。&lt;/p>
&lt;h3 id="备选-5">备选&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://linkerd.io/">&lt;strong>Linkerd&lt;/strong>&lt;/a> 是一种更轻巧且可能更快的服务网格。Linkerd 从头开始​​为安全性而构建，包括&lt;a href="https://linkerd.io/2.10/features/automatic-mtls/">默认 mTLS&lt;/a>、&lt;a href="https://github.com/linkerd/linkerd2-proxy">使用 Rust 构建的数据平面&lt;/a>、&lt;a href="https://github.com/linkerd/linkerd2-proxy">内存安全语言&lt;/a>和&lt;a href="https://github.com/linkerd/linkerd2/blob/main/SECURITY_AUDIT.pdf">定期安全审计&lt;/a>等功能&lt;/li>
&lt;li>&lt;a href="https://www.consul.io/">&lt;strong>Consul&lt;/strong>&lt;/a> 是为任何运行时和云提供商构建的服务网格，因此它非常适合跨 K8s 和云提供商的混合部署。如果不是所有的工作负载都在 Kubernetes 上运行，这是一个不错的选择。&lt;/li>
&lt;/ul>
&lt;h2 id="argo-rollouts">Argo Rollouts&lt;/h2>
&lt;p>我们已经提到，你可以使用 Kubernetes 使用 Argo Workflows 或使用 Kanico 构建图像的类似工具来运行 CI/CD 管道。下一个合乎逻辑的步骤是继续并进行持续部署。由于涉及高风险，这在真实场景中是极具挑战性的，这就是为什么大多数公司只做持续交付，这意味着他们已经实现了自动化，但他们仍然需要手动批准和验证，这个手动步骤是这是因为团队&lt;strong>不能完全信任他们的自动化&lt;/strong>。&lt;/p>
&lt;p>那么，你如何建立这种信任以摆脱所有脚本并完全自动化从源代码到生产的所有内容？答案是：可观察性。你需要将资源更多地集中在指标上，并收集准确表示应用程序状态所需的所有数据。目标是使用一组指标来建立这种信任。如果你在 &lt;a href="https://prometheus.io/">Prometheus&lt;/a> 中拥有所有数据，那么你可以自动部署，因为你可以根据这些指标自动逐步推出应用程序。&lt;/p>
&lt;p>简而言之，你需要比 K8s 开箱即用的&lt;a href="https://www.educative.io/blog/kubernetes-deployments-strategies">&lt;strong>滚动更新&lt;/strong>&lt;/a>更高级的部署技术。我们需要使用&lt;a href="https://semaphoreci.com/blog/what-is-canary-deployment">金丝雀部署&lt;/a>进行渐进式交付。目标是逐步将流量路由到应用程序的新版本，等待收集指标，分析它们并将它们与预定义的规则进行匹配。如果一切正常，我们增加流量；如果有任何问题，我们会回滚部署。
要在 Kubernetes 中执行此操作，你可以使用提供 Canary 发布等的 Argo Rollouts 。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/architecture/controller/">Argo Rollouts&lt;/a> 是一个 &lt;a href="https://kubernetes.io/docs/concepts/architecture/controller/">Kubernetes 控制器&lt;/a>和一组 &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/">CRD&lt;/a>，可提供高级部署功能，例如蓝绿、金丝雀、金丝雀分析、实验和向 Kubernetes 的渐进式交付功能。&lt;/p>
&lt;/blockquote>
&lt;p>尽管像 &lt;a href="https://istio.io/">Istio&lt;/a> 这样的服务网格提供 Canary 发布，但 Argo Rollouts 使这个过程变得更加容易并且以开发人员为中心，因为它是专门为此目的而构建的。除此之外，Argo Rollouts 可以与任何服务网格集成。&lt;/p>
&lt;p>Argo Rollouts 功能：&lt;/p>
&lt;ul>
&lt;li>蓝绿更新策略&lt;/li>
&lt;li>金丝雀更新策略&lt;/li>
&lt;li>细粒度、加权的流量转移&lt;/li>
&lt;li>自动回滚和促销或人工判断&lt;/li>
&lt;li>可定制的指标查询和业务 KPI 分析&lt;/li>
&lt;li>入口控制器集成：NGINX、ALB&lt;/li>
&lt;li>服务网格集成：Istio、Linkerd、SMI&lt;/li>
&lt;li>指标提供者集成：Prometheus、Wavefront、Kayenta、Web、Kubernetes Jobs&lt;/li>
&lt;/ul>
&lt;h3 id="备选-6">备选&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://istio.io/">Istio&lt;/a> 作为 Canary 版本的服务网格。Istio 不仅仅是一个渐进式交付工具，它还是一个完整的服务网格。Istio 不会自动部署，Argo Rollouts 可以与 Istio 集成来实现这一点。&lt;/li>
&lt;li>&lt;a href="https://flagger.app/">Flagger&lt;/a> 与 Argo Rollouts 非常相似，并且与 &lt;a href="https://fluxcd.io/">Flux&lt;/a> 很好地集成在一起，因此如果你使用 Flux，请考虑使用 Flagger。&lt;/li>
&lt;li>&lt;a href="https://spinnaker.io/">Spinnaker&lt;/a> 是 Kubernetes 的第一个持续交付工具，它具有许多功能，但使用和设置起来有点复杂。&lt;/li>
&lt;/ul>
&lt;h2 id="crossplane">Crossplane&lt;/h2>
&lt;p>&lt;a href="https://crossplane.io/">&lt;strong>Crossplane&lt;/strong>&lt;/a> 是我最喜欢的 K8s 工具，我对这个项目感到非常兴奋，因为它给 Kubernetes 带来了一个关键的缺失部分：像管理 K8s 资源一样管理第三方服务。这意味着，你可以使用 &lt;strong>YAML&lt;/strong> 中定义的 K8s 资源来配置云提供商数据库，例如 &lt;a href="https://aws.amazon.com/rds/">&lt;strong>AWS RDS&lt;/strong>&lt;/a> 或 &lt;strong>GCP Cloud SQL&lt;/strong>，就像你在 K8s 中配置数据库一样。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/15/16263059248680.jpg" alt="">&lt;/p>
&lt;p>使用 Crossplane，无需使用不同的工具和方法分离基础设施和代码。&lt;strong>你可以使用 K8s 资源定义一切&lt;/strong>。这样，你就无需学习 &lt;a href="https://www.terraform.io/">Terraform&lt;/a> 等新工具并将它们分开保存。&lt;/p>
&lt;blockquote>
&lt;p>Crossplane 是一个开源 Kubernetes 附加组件，它使平台团队能够组装来自多个供应商的基础设施，并公开更高级别的自助 API 供应用程序团队使用，而无需编写任何代码。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Crossplane&lt;/strong> 扩展了你的 Kubernetes 集群，为你提供适用于任何基础架构或托管云服务的 &lt;strong>CRD&lt;/strong>。此外，它允许你完全实现持续部署，因为与 Terraform 等其他工具相反，Crossplane 使用现有的 K8s 功能（例如控制循环）来持续观察你的集群并自动检测任何对其起作用的配置漂移。例如，如果你定义了一个托管数据库实例并且有人手动更改它，Crossplane 将自动检测问题并将其设置回以前的值。这将实施基础设施即代码和 GitOps 原则。Crossplane 与 ArgoCD 配合使用效果很好，它可以查看源代码并确保你的代码存储库是唯一的真实来源，并且代码中的任何更改都会传播到集群以及外部云服务。如果没有 Crossplane，你只能在 K8s 服务中实现 GitOps，而不能在不使用单独进程的情况下在云服务中实现，现在你可以做到这一点，这太棒了。&lt;/p>
&lt;h3 id="备选-7">备选&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.terraform.io/">Terraform&lt;/a> 是最著名的 IaC 工具，但它不是 K8s 原生的，需要新技能并且不会自动监视配置漂移。&lt;/li>
&lt;li>&lt;a href="https://www.pulumi.com/">Pulumi&lt;/a> 是一种 Terraform 替代品，它使用开发人员可以测试和理解的编程语言工作。&lt;/li>
&lt;/ul>
&lt;h2 id="knative">Knative&lt;/h2>
&lt;p>如果你在云中开发应用程序，你可能已经使用了一些无服务器技术，例如 &lt;a href="https://aws.amazon.com/lambda/">AWS Lambda &lt;/a>，它是一种称为 &lt;a href="https://en.wikipedia.org/wiki/Function_as_a_service">FaaS&lt;/a> 的事件驱动范例。&lt;/p>
&lt;p>我过去已经讨论过 &lt;a href="https://en.wikipedia.org/wiki/Serverless_computing">Serverless&lt;/a>，因此请查看我&lt;a href="https://itnext.io/scaling-my-app-serverless-vs-kubernetes-cdb8adf446e1">之前的文章&lt;/a>以了解更多信息。Serverless 的问题在于它与云提供商紧密耦合，因为提供商可以为事件驱动的应用程序创建一个很好的生态系统。&lt;/p>
&lt;p>对于 Kubernetes，如果你希望将函数作为代码运行并使用事件驱动架构，那么你最好的选择是 &lt;a href="https://itnext.io/scaling-my-app-serverless-vs-kubernetes-cdb8adf446e1">Knative&lt;/a>。Knative 旨在在 Kubernetes 上运行函数，在 Pod 之上创建一个抽象。&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ul>
&lt;li>针对常见应用程序用例的具有更高级别抽象的重点 API。&lt;/li>
&lt;li>在几秒钟内建立一个可扩展、安全、无状态的服务。&lt;/li>
&lt;li>松散耦合的功能让你可以使用所需的部分。&lt;/li>
&lt;li>可插拔组件让你可以使用自己的日志记录和监控、网络和服务网格。&lt;/li>
&lt;li>Knative 是可移植的：在 Kubernetes 运行的任何地方运行它，不用担心供应商锁定。&lt;/li>
&lt;li>惯用的开发者体验，支持 GitOps、DockerOps、ManualOps 等常用模式。&lt;/li>
&lt;li>Knative 可以与常见的工具和框架一起使用，例如 Django、Ruby on Rails、Spring 等等。&lt;/li>
&lt;/ul>
&lt;h3 id="备选-8">备选&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://argoproj.github.io/argo-events/">Argo Events&lt;/a> 为 Kubernetes 提供了一个事件驱动的工作流引擎，可以与 AWS Lambda 等云引擎集成。它不是 FaaS，而是为 Kubernetes 提供了一个事件驱动的架构。&lt;/li>
&lt;li>&lt;a href="https://www.openfaas.com/">OpenFaas&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="kyverno">Kyverno&lt;/h2>
&lt;p>Kubernetes 提供了极大的灵活性，以赋予敏捷的自治团队权力，但能力越大，责任越大。必须有一组&lt;strong>最佳实践和规则&lt;/strong>，以确保以一致且有凝聚力的方式来部署和管理符合公司政策和安全要求的工作负载。&lt;/p>
&lt;p>有几种工具可以实现这一点，但没有一个是 Kubernetes 原生的…… 直到现在。&lt;a href="https://kyverno.io/">Kyverno&lt;/a> 是为 Kubernetes 设计的策略引擎，策略作为 Kubernetes 资源进行管理，并且不需要新的语言来编写策略。Kyverno 策略可以验证、改变和生成 Kubernetes 资源。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/15/16263062593080.jpg" alt="">&lt;/p>
&lt;p>你可以应用有关最佳实践、网络或安全性的任何类型的策略。例如，你可以强制所有服务都有标签或所有容器都以非 root 身份运行。你可以在&lt;a href="https://github.com/kyverno/policies/">此处&lt;/a>查看一些政策示例。策略可以应用于整个集群或给定的命名空间。你还可以选择是只想审核策略还是强制执行它们以阻止用户部署资源。&lt;/p>
&lt;h3 id="备选-9">备选&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.openpolicyagent.org/">Open Policy Agent&lt;/a> 是著名的云原生基于策略的控制引擎。它使用自己的声明性语言，并且可以在许多环境中运行，而不仅仅是在 Kubernetes 上。它比 &lt;a href="https://kyverno.io/">Kyverno&lt;/a> 更难管理，但更强大。&lt;/li>
&lt;/ul>
&lt;h2 id="kubevela">Kubevela&lt;/h2>
&lt;p>Kubernetes 的一个问题是开发人员需要非常了解和理解平台和集群配置。许多人会争辩说 &lt;strong>K8s 的抽象级别太低&lt;/strong>，这会给只想专注于编写和交付应用程序的开发人员带来很多摩擦。&lt;/p>
&lt;p>在开放式应用程序模型（&lt;a href="https://oam.dev/">OAM&lt;/a>）的设立是为了克服这个问题。这个想法是围绕应用程序创建更高级别的抽象，它独立于底层运行时。你可以在此处阅读规范。&lt;/p>
&lt;blockquote>
&lt;p>专注于应用程序而不是容器或协调器，开放应用程序模型 [OAM] 带来了模块化、可扩展和可移植的设计，用于使用更高级别但一致的 API 对应用程序部署进行建模。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://kubevela.io/">Kubevela&lt;/a> 是 OAM 模型的一个实现。KubeVela 与运行时无关，可本地扩展，但最重要的是，以应用程序为中心 。在 Kubevela 中，应用程序是作为 Kubernetes 资源实现的一等公民。**集群运营商（Platform Team）和开发者（Application Team）**是有区别的。集群操作员通过定义组件（组成应用程序的可部署/可配置实体，如 Helm Chart）和特征来管理集群和不同的环境。开发人员通过组装组件和特征来定义应用程序。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/15/16263064905339.jpg" alt="">&lt;/p>
&lt;p>KubeVela 是一个&lt;a href="https://cncf.io/">云原生计算基金会&lt;/a>沙箱项目，虽然它仍处于起步阶段，但它可以在不久的将来改变我们使用 Kubernetes 的方式，让开发人员无需成为 Kubernetes 专家即可专注于应用程序。但是，我确实对 &lt;strong>OAM&lt;/strong> 在现实世界中的适用性有一些担忧，因为系统应用程序、ML 或大数据过程等一些服务在很大程度上依赖于低级细节，这些细节可能很难融入 OAM 模型中。&lt;/p>
&lt;h3 id="备选-10">备选&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.shipa.io/getting-started/">Shipa&lt;/a> 遵循类似的方法，使平台和开发团队能够协同工作，轻松将应用程序部署到 Kubernetes。&lt;/li>
&lt;/ul>
&lt;h2 id="snyk">Snyk&lt;/h2>
&lt;p>任何开发过程中一个非常重要的方面是安全性，这一直是 Kubernetes 的一个问题，因为想要迁移到 Kubernetes 的公司无法轻松实现其当前的安全原则。&lt;/p>
&lt;p>&lt;a href="https://snyk.io/">Snyk&lt;/a> 试图通过提供一个可以轻松与 Kubernetes 集成的安全框架来缓解这种情况。它可以检测容器映像、你的代码、开源项目等中的漏洞。&lt;/p>
&lt;h3 id="备选-11">备选&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://falco.org/">Falco&lt;/a> 是 Kubernetes 的运行时安全线程检测工具。&lt;/li>
&lt;/ul>
&lt;h2 id="velero">Velero&lt;/h2>
&lt;p>如果你在 Kubernetes 中运行工作负载并使用卷来存储数据，则需要创建和管理备份。&lt;a href="https://velero.io/">Velero&lt;/a> 提供简单的备份/恢复过程、灾难恢复机制和数据迁移。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/15/16263066379840.jpg" alt="">&lt;/p>
&lt;p>与其他直接访问 Kubernetes etcd 数据库执行备份和恢复的工具不同，Velero 使用 Kubernetes API 来捕获集群资源的状态并在必要时恢复它们。此外，Velero 使你能够在配置的同时备份和恢复你的应用程序持久数据。&lt;/p>
&lt;h2 id="schema-hero">Schema Hero&lt;/h2>
&lt;p>软件开发中的另一个常见过程是在使用关系数据库时管理&lt;strong>模式演变&lt;/strong>。&lt;/p>
&lt;p>&lt;a href="https://schemahero.io/">SchemaHero&lt;/a> 是一种开源数据库架构迁移工具，可将架构定义转换为可应用于任何环境的迁移脚本。它使用 Kubernetes 声明性来管理数据库模式迁移。你只需指定所需的状态，然后 &lt;strong>SchemaHero&lt;/strong> 管理其余的。&lt;/p>
&lt;h3 id="备选-12">备选&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.liquibase.org/">LiquidBase&lt;/a> 是最著名的替代品。它更难使用，且不是 Kubernetes 原生的，但它具有更多功能。&lt;/li>
&lt;/ul>
&lt;h2 id="bitnami-sealed-secrets">Bitnami Sealed Secrets&lt;/h2>
&lt;p>我们已经介绍了许多 &lt;strong>GitOps&lt;/strong> 工具，例如 &lt;a href="https://argoproj.github.io/argo-cd/">ArgoCD&lt;/a>。我们的目标是将所有内容保留在 Git 中，并使用 Kubernetes 声明性来保持环境同步。我们刚刚看到我们如何（并且应该）在 Git 中保留真实来源，并让自动化流程处理配置更改。&lt;/p>
&lt;p>在 Git 中通常很难保留的一件事是诸如数据库密码或 API 密钥之类的秘密，这是因为你永远不应该在代码存储库中存储秘密。一种常见的解决方案是使用外部保管库（例如 &lt;a href="https://aws.amazon.com/secrets-manager/">AWS Secret Manager&lt;/a> 或 &lt;a href="https://www.vaultproject.io/">HashiCorp Vault&lt;/a>）来存储机密，但这会产生很多摩擦，因为你需要有一个单独的流程来处理机密。理想情况下，我们希望有一种方法可以像任何其他资源一样安全地在 Git 中存储机密。&lt;/p>
&lt;p>&lt;a href="https://github.com/bitnami-labs/sealed-secrets">&lt;strong>Sealed Secrets&lt;/strong>&lt;/a> 旨在克服这个问题，允许你使用强加密将敏感数据存储在 Git 中。Bitnami &lt;strong>Sealed Secrets&lt;/strong> 本地集成在 Kubernetes 中，允许你仅通过在 Kubernetes 中运行的 Kubernetes 控制器而不是其他任何人来解密密钥。控制器将解密数据并创建安全存储的原生 K8s 机密。这使我们能够将所有内容作为代码存储在我们的 repo 中，从而允许我们安全地执行持续部署，而无需任何外部依赖。&lt;/p>
&lt;p>Sealed Secrets 由两部分组成：&lt;/p>
&lt;ul>
&lt;li>集群端控制器&lt;/li>
&lt;li>客户端实用程序：&lt;code>kubeseal&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>该 &lt;code>kubeseal&lt;/code> 实用程序使用非对称加密来加密只有控制器才能解密的机密。这些加密的秘密被编码在一个 &lt;code>SealedSecret&lt;/code> K8s 资源中，你可以将其存储在 Git 中。&lt;/p>
&lt;h3 id="备选-13">备选&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://aws.amazon.com/secrets-manager/">AWS Secret Manager&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.vaultproject.io/">HashiCorp Vault&lt;/a>）&lt;/li>
&lt;/ul>
&lt;h2 id="capsule">Capsule&lt;/h2>
&lt;p>许多公司使用&lt;strong>多租户&lt;/strong>来管理不同的客户。这在软件开发中很常见，但在 Kubernetes 中很难实现。&lt;strong>命名空间&lt;/strong>是将集群的逻辑分区创建为隔离切片的好方法，但这不足以安全地隔离客户，我们需要强制执行网络策略、配额等。你可以为每个名称空间创建网络策略和规则，但这是一个难以扩展的乏味过程。此外，租户将不能使用多个命名空间，这是一个很大的限制。&lt;/p>
&lt;p>创建&lt;strong>分层命名空间&lt;/strong>是为了克服其中一些问题。这个想法是为每个租户拥有一个父命名空间，为租户提供公共网络策略和配额，并允许创建子命名空间。这是一个很大的改进，但它在安全和治理方面没有对租户的本地支持。此外，它还没有达到生产状态，但 1.0 版预计将在未来几个月内发布。&lt;/p>
&lt;p>当前解决此问题的常用方法是为每个客户创建一个集群，这是安全的并提供租户所需的一切，但这很难管理且非常昂贵。&lt;/p>
&lt;p>&lt;a href="https://github.com/clastix/capsule">&lt;strong>Capsule&lt;/strong>&lt;/a> 是一种为单个集群中的多个租户提供原生 Kubernetes 支持的工具。使用 Capsule，你可以为所有租户拥有一个集群。Capsule 将为租户提供 “几乎” 原生体验（有一些小限制），他们将能够创建多个命名空间并使用集群，因为它们完全可用，隐藏了集群实际上是共享的事实。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/15/16263070902872.jpg" alt="Capsule 架构">&lt;/p>
&lt;p>在单个集群中，Capsule Controller 在称为 &lt;strong>Tenant&lt;/strong> 的轻量级 Kubernetes 抽象中聚合多个命名空间，这是一组 Kubernetes 命名空间。在每个租户内，用户可以自由创建他们的命名空间并共享所有分配的资源，而策略引擎则使不同的租户彼此隔离。&lt;/p>
&lt;p>租户级别定义的网络和安全策略、资源配额、限制范围、RBAC 和其他策略由租户中的所有命名空间自动继承，类似于分层命名空间。然后用户可以自由地自治操作他们的租户，而无需集群管理员的干预。
Capsule 是 GitOps 就绪的，因为它是声明性的，并且所有配置都可以存储在 Git 中。&lt;/p>
&lt;h2 id="vcluster">vCluster&lt;/h2>
&lt;p>&lt;a href="https://www.vcluster.com/">vCluster&lt;/a> 在多租户方面更进了一步，它在 Kubernetes 集群内提供了虚拟集群。每个集群都在一个常规命名空间上运行，并且是完全隔离的。虚拟集群有自己的 API 服务器和独立的数据存储，所以你在 vCluster 中创建的每个 Kubernetes 对象都只存在于 vcluster 内部。此外，您可以将 kube 上下文与虚拟集群一起使用，以像使用常规集群一样使用它们。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/15/16263071651487.jpg" alt="">&lt;/p>
&lt;p>只要您可以在单个命名空间内创建部署，您就可以创建虚拟集群并成为该虚拟集群的管理员，租户可以创建命名空间、安装 CRD、配置权限等等。&lt;/p>
&lt;p>&lt;strong>vCluster&lt;/strong> 使用 &lt;a href="https://k3s.io/">&lt;strong>k3s&lt;/strong>&lt;/a> 作为其 API 服务器，使虚拟集群超轻量级且经济高效；由于 k3s 集群 100% 合规，虚拟集群也 100% 合规。&lt;strong>vClusters&lt;/strong> 是超轻量级的（1 个 pod），消耗很少的资源并且可以在任何 Kubernetes 集群上运行，而无需对底层集群进行特权访问。与 &lt;strong>Capsule&lt;/strong> 相比，它确实使用了更多的资源，但它提供了更多的灵活性，因为多租户只是用例之一。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/15/16263072079021.jpg" alt="">&lt;/p>
&lt;h2 id="其他工具">其他工具&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cloud-bulldozer/kube-burner">kube-burner&lt;/a> 用于&lt;strong>压力测试&lt;/strong>。它提供指标和警报。&lt;/li>
&lt;li>混沌工程的 &lt;a href="https://github.com/litmuschaos/litmus">Litmus&lt;/a>。&lt;/li>
&lt;li>&lt;a href="https://github.com/bitnami-labs/kubewatch">kubewatch&lt;/a> 用于监控，但主要关注基于 Kubernetes 事件（如资源创建或删除）的推送通知。它可以与 Slack 等许多工具集成。&lt;/li>
&lt;li>&lt;a href="https://www.botkube.io/">BotKube&lt;/a> 是一个消息机器人，用于监控和调试 Kubernetes 集群。与 kubewatch 类似，但更新并具有更多功能。&lt;/li>
&lt;li>&lt;a href="https://getmizu.io/">Mizu&lt;/a> 是一个 API 流量查看器和调试器。&lt;/li>
&lt;li>&lt;a href="https://github.com/senthilrch/kube-fledged">kube-fledged&lt;/a> 是一个 Kubernetes 插件，用于直接在 Kubernetes 集群的工作节点上创建和管理容器镜像的缓存。因此，&lt;strong>应用程序 pod 几乎立即启动&lt;/strong>，因为不需要从注册表中提取图像。&lt;/li>
&lt;/ul>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>在本文中，我们回顾了我最喜欢的 Kubernetes 工具。我专注于可以合并到任何 Kubernetes 发行版中的开源项目。我没有涵盖诸如 &lt;a href="https://www.openshift.com/">OpenShift&lt;/a> 或 Cloud Providers Add-Ons 之类的商业解决方案，因为我想让它保持通用性，但我鼓励您探索如果您在云上运行 Kubernetes 或使用商业工具，您的云提供商可以为您提供什么。&lt;/p>
&lt;p>我的目标是向您展示您可以在 &lt;strong>Kubernetes&lt;/strong> 中完成您在本地所做的一切。我还更多地关注鲜为人知的工具，我认为这些工具可能具有很大的潜力，例如 &lt;a href="https://crossplane.io/">Crossplane&lt;/a>、&lt;a href="https://kubevela.io/">Argo Rollouts&lt;/a>或 &lt;a href="https://kubevela.io/">Kubevela&lt;/a>。我更感兴趣的工具是 &lt;a href="https://www.vcluster.com/">vCluster&lt;/a>、&lt;a href="https://crossplane.io/">Crossplane&lt;/a> 和 ArgoCD/Workflows。&lt;/p></description></item><item><title>Rego 不好用？用 Pipy 实现 OPA</title><link>https://atbug.com/pipy-implement-kubernetes-admission-control/</link><pubDate>Tue, 13 Jul 2021 08:44:56 +0800</pubDate><guid>https://atbug.com/pipy-implement-kubernetes-admission-control/</guid><description>
&lt;p>还不知道 Pipy 是什么的同学可以看下 &lt;a href="https://github.com/flomesh-io/pipy">GitHub&lt;/a> 。&lt;/p>
&lt;blockquote>
&lt;p>Pipy 是一个轻量级、高性能、高稳定、可编程的网络代理。Pipy 核心框架使用 C++ 开发，网络 IO 采用 ASIO 库。 Pipy 的可执行文件仅有 5M 左右，运行期的内存占用 10M 左右，因此 Pipy 非常适合做 Sidecar proxy。&lt;/p>
&lt;p>Pipy 内置了自研的 pjs 作为脚本扩展，使得Pipy 可以用 JS 脚本根据特定需求快速定制逻辑与功能。&lt;/p>
&lt;p>Pipy 采用了模块化、链式的处理架构，用顺序执行的模块来对网络数据块进行处理。这种简单的架构使得 Pipy 底层简单可靠，同时具备了动态编排流量的能力，兼顾了简单和灵活。通过使用 REUSE_PORT 的机制（主流 Linux 和 BSD 版本都支持该功能），Pipy 可以以多进程模式运行，使得 Pipy 不仅适用于 Sidecar 模式，也适用于大规模的流量处理场景。 在实践中，Pipy 独立部署的时候用作“软负载”，可以在低延迟的情况下，实现媲美硬件的负载均衡吞吐能力，同时具有灵活的扩展性。&lt;/p>
&lt;/blockquote>
&lt;p>在玩过几次 Pipy 并探究其工作原理后，又有了更多的想法。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/l8JzYRn350fjuCAOoo8pcg">初探可编程网关 Pipy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/_IeRXp9EJnVsvDfg8tUr1A">可编程网关 Pipy 第二弹：编程实现 Metrics 及源码解读&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/iQWunpazsw86X3kEkB1rJw">可编程网关 Pipy 第三弹：事件模型设计&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>在使用OPA的时候，一直觉得Rego不是那么顺手，使用pipy js来写规则的想法油然而生。今天就一起试试这个思路。果然，不试不知道，一试发现太多的惊喜～Pipy不止于“代理”，更有很多可以适用的场景：&lt;/p>
&lt;ul>
&lt;li>极小的单一可执行文件（single binary）使得 pipy 可能是最好的 “云原生 sidecar”&lt;/li>
&lt;li>sidecar 不仅仅是代理，还可以做控制器，做运算单元&lt;/li>
&lt;li>proxy 的串路结构适合各种管控类的操作，比如访问控制&lt;/li>
&lt;li>Pipy js 的扩展能力和快速编程能力，很适合做 “规则引擎”，或者用最近流行的说法 “云原生的规则引擎”。对比 OPA 我认为它完全够格做一个 “羽量级规则执行引擎”&lt;/li>
&lt;/ul>
&lt;p>现在我更倾向于定义 pipy 是一个 “云原生的流量编程框架”，代理只是其底层的核心能力，叠加了 pipy js 以后，上层可以做的事情很多，“流量滋养万物”。&lt;/p>
&lt;p>在 &lt;a href="https://mp.weixin.qq.com/s/RvqCVAhClJY3o_46ALu1bQ">使用 Open Policy Agent 实现可信镜像仓库检查&lt;/a> 之后，就在想 Pipy 是否一样可以做到，将内核替换成 Pipy + 规则。所以今天大部分内容和上面这篇是相似的。&lt;/p>
&lt;p>来，一起看看这个“不务正业”的 Pipy 如何实现 Kubernetes 的准入控制器 来做镜像的检查。&lt;/p>
&lt;h2 id="环境">环境&lt;/h2>
&lt;p>继续使用 minikube&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube start
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建部署-pipy-的命名空间">创建部署 Pipy 的命名空间&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create namespace pipy
kubens pipy
kubectl label ns pipy pipy/webhook&lt;span class="o">=&lt;/span>ignore &lt;span class="c1">#后面解释&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="规则">规则&lt;/h2>
&lt;p>在 OPA 中，通过 &lt;code>kube-mgmt&lt;/code> 容器监控 &lt;code>configmap&lt;/code> 的改动，将 Policy 推送到同 pod 的 opa 容器中。&lt;/p>
&lt;p>对于 Pipy 为了渐变，直接使用挂载的方式将保存了规则的 &lt;code>configmap&lt;/code> 挂载到 Pipy
的容器中。&lt;/p>
&lt;p>&lt;em>实际的使用中，Pipy 支持轮训的方式检查控制平面中规则的变更，并实时加载；也可以实现与 OPA 的 kube-mgmt 同样的逻辑。&lt;/em>&lt;/p>
&lt;p>实现了&lt;a href="https://atbug.com/image-trusted-repository-with-open-policy-agent/">上一讲功能&lt;/a>的 pipy 规则如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat &amp;gt; pipy-rule.js &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">pipy({
&lt;/span>&lt;span class="s"> _repoPrefix: &amp;#39;192.168.64.1&amp;#39;, //192.168.64.1:5000 是笔者本地容器运行的一个私有仓库。
&lt;/span>&lt;span class="s"> _tagSuffix: &amp;#39;:latest&amp;#39;,
&lt;/span>&lt;span class="s">})
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s">.listen(6443, {
&lt;/span>&lt;span class="s"> tls: {
&lt;/span>&lt;span class="s"> cert: os.readFile(&amp;#39;/certs/tls.crt&amp;#39;).toString(),
&lt;/span>&lt;span class="s"> key: os.readFile(&amp;#39;/certs/tls.key&amp;#39;).toString(),
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s">})
&lt;/span>&lt;span class="s"> .decodeHttpRequest()
&lt;/span>&lt;span class="s"> .replaceMessage(
&lt;/span>&lt;span class="s"> msg =&amp;gt; (
&lt;/span>&lt;span class="s"> ((req, result, invalids, reason) =&amp;gt; (
&lt;/span>&lt;span class="s"> req = JSON.decode(msg.body),
&lt;/span>&lt;span class="s"> invalids = req.request.object.spec.containers.find(container =&amp;gt; (
&lt;/span>&lt;span class="s"> (!container.image.startsWith(_repoPrefix) ? (
&lt;/span>&lt;span class="s"> reason = `${container.image} repo not start with ${_repoPrefix}`,
&lt;/span>&lt;span class="s"> console.log(reason),
&lt;/span>&lt;span class="s"> true
&lt;/span>&lt;span class="s"> ) : (false))
&lt;/span>&lt;span class="s"> ||
&lt;/span>&lt;span class="s"> (container.image.endsWith(_tagSuffix) ? (
&lt;/span>&lt;span class="s"> reason = `${container.image} tag end with ${_tagSuffix}`,
&lt;/span>&lt;span class="s"> console.log(reason),
&lt;/span>&lt;span class="s"> true
&lt;/span>&lt;span class="s"> ) : (false)
&lt;/span>&lt;span class="s"> ))),
&lt;/span>&lt;span class="s"> invalids != undefined ? (
&lt;/span>&lt;span class="s"> result = {
&lt;/span>&lt;span class="s"> &amp;#34;apiVersion&amp;#34;: &amp;#34;admission.k8s.io/v1beta1&amp;#34;,
&lt;/span>&lt;span class="s"> &amp;#34;kind&amp;#34;: &amp;#34;AdmissionReview&amp;#34;,
&lt;/span>&lt;span class="s"> &amp;#34;response&amp;#34;: {
&lt;/span>&lt;span class="s"> &amp;#34;allowed&amp;#34;: false,
&lt;/span>&lt;span class="s"> &amp;#34;uid&amp;#34;: req.request.uid,
&lt;/span>&lt;span class="s"> &amp;#34;status&amp;#34;: {
&lt;/span>&lt;span class="s"> &amp;#34;reason&amp;#34;: reason,
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s"> }
&lt;/span>&lt;span class="s"> ) : (
&lt;/span>&lt;span class="s"> result = {
&lt;/span>&lt;span class="s"> &amp;#34;apiVersion&amp;#34;: &amp;#34;admission.k8s.io/v1beta1&amp;#34;,
&lt;/span>&lt;span class="s"> &amp;#34;kind&amp;#34;: &amp;#34;AdmissionReview&amp;#34;,
&lt;/span>&lt;span class="s"> &amp;#34;response&amp;#34;: {
&lt;/span>&lt;span class="s"> &amp;#34;allowed&amp;#34;: true,
&lt;/span>&lt;span class="s"> &amp;#34;uid&amp;#34;: req.request.uid
&lt;/span>&lt;span class="s"> },
&lt;/span>&lt;span class="s"> }
&lt;/span>&lt;span class="s"> ),
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s"> console.log(JSON.encode(result)),
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s"> new Message({
&lt;/span>&lt;span class="s"> &amp;#39;status&amp;#39; : 200,
&lt;/span>&lt;span class="s"> &amp;#39;headers&amp;#39;: {
&lt;/span>&lt;span class="s"> &amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39;
&lt;/span>&lt;span class="s"> }
&lt;/span>&lt;span class="s"> }, JSON.encode(result))
&lt;/span>&lt;span class="s"> ))()
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> )
&lt;/span>&lt;span class="s"> .encodeHttpResponse()
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将规则保存在 configmap 中：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create configmap pipy-rule --from-file&lt;span class="o">=&lt;/span>pipy-rule.js
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="在-kubernetes-上部署-pipy">在 Kubernetes 上部署 Pipy&lt;/h2>
&lt;p>Kubernetes 与准入控制器（&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/">Admission Controller&lt;/a>）的通信需要使用 TLS。配置 TLS，使用 &lt;code>openssl&lt;/code> 创建证书颁发机构（certificate authority CA）和 OPA 的证书/秘钥对。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">openssl genrsa -out ca.key &lt;span class="m">2048&lt;/span>
openssl req -x509 -new -nodes -key ca.key -days &lt;span class="m">100000&lt;/span> -out ca.crt -subj &lt;span class="s2">&amp;#34;/CN=admission_ca&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为 OPA 创建 TLS 秘钥和证书：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat &amp;gt;server.conf &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">[req]
&lt;/span>&lt;span class="s">req_extensions = v3_req
&lt;/span>&lt;span class="s">distinguished_name = req_distinguished_name
&lt;/span>&lt;span class="s">prompt = no
&lt;/span>&lt;span class="s">[req_distinguished_name]
&lt;/span>&lt;span class="s">CN = pipy.pipy.svc
&lt;/span>&lt;span class="s">[ v3_req ]
&lt;/span>&lt;span class="s">basicConstraints = CA:FALSE
&lt;/span>&lt;span class="s">keyUsage = nonRepudiation, digitalSignature, keyEncipherment
&lt;/span>&lt;span class="s">extendedKeyUsage = clientAuth, serverAuth
&lt;/span>&lt;span class="s">subjectAltName = @alt_names
&lt;/span>&lt;span class="s">[alt_names]
&lt;/span>&lt;span class="s">DNS.1 = pipy.pipy.svc
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意 &lt;code>CN&lt;/code> 和 &lt;code>alt_names&lt;/code> 必须与后面创建 Pipy service 的匹配。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">openssl genrsa -out server.key &lt;span class="m">2048&lt;/span>
openssl req -new -key server.key -out server.csr -config server.conf
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days &lt;span class="m">100000&lt;/span> -extensions v3_req -extfile server.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为 OPA 创建保存 TLS 凭证的 Secret：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create secret tls pipy-server --cert&lt;span class="o">=&lt;/span>server.crt --key&lt;span class="o">=&lt;/span>server.key
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 Pipy 部署为准入控制器（admission controller）。为了方便调试，我们使用启动 Pipy 的时候打开了控制台。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">443&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6443&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gui&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 方便调试&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6060&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6060&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;pipy&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/opt/data/pipy-rule.js&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--gui-port=6060&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 方便调试&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># - &amp;#34;--log-level=debug&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gui&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6060&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6443&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">readOnly&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/certs&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">readOnly&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/opt/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy-rule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy-rule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">configMap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipy-rule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>暴露控制台的访问：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl expose deploy pipy --name pipy-node --type NodePort
kubectl get svc pipy-port
minikube service --url pipy-node -n pipy
&lt;span class="c1"># 找到控制台端口&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来，生成将用于将 Pipy 注册为准入控制器的 manifest。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat &amp;gt; webhook-configuration.yaml &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kind: ValidatingWebhookConfiguration
&lt;/span>&lt;span class="s">apiVersion: admissionregistration.k8s.io/v1beta1
&lt;/span>&lt;span class="s">metadata:
&lt;/span>&lt;span class="s"> name: pipy-validating-webhook
&lt;/span>&lt;span class="s">webhooks:
&lt;/span>&lt;span class="s"> - name: validating-webhook.pipy.flomesh-io.cn
&lt;/span>&lt;span class="s"> namespaceSelector:
&lt;/span>&lt;span class="s"> matchExpressions:
&lt;/span>&lt;span class="s"> - key: pipy/webhook
&lt;/span>&lt;span class="s"> operator: NotIn
&lt;/span>&lt;span class="s"> values:
&lt;/span>&lt;span class="s"> - ignore
&lt;/span>&lt;span class="s"> rules:
&lt;/span>&lt;span class="s"> - operations: [&amp;#34;CREATE&amp;#34;, &amp;#34;UPDATE&amp;#34;]
&lt;/span>&lt;span class="s"> apiGroups: [&amp;#34;*&amp;#34;]
&lt;/span>&lt;span class="s"> apiVersions: [&amp;#34;*&amp;#34;]
&lt;/span>&lt;span class="s"> resources: [&amp;#34;pods&amp;#34;]
&lt;/span>&lt;span class="s"> clientConfig:
&lt;/span>&lt;span class="s"> caBundle: $(cat ca.crt | base64 | tr -d &amp;#39;\n&amp;#39;)
&lt;/span>&lt;span class="s"> service:
&lt;/span>&lt;span class="s"> namespace: pipy
&lt;/span>&lt;span class="s"> name: pipy
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成的配置文件包含 CA 证书的 base64 编码，以便可以在 Kubernetes API 服务器和 OPA 之间建立 TLS 连接。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f webhook-configuration.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;p>&lt;code>pod-bad-repo.yaml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.21.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f pod-bad-repo.yaml
Error from server &lt;span class="o">(&lt;/span>nginx:1.21.1 repo not start with 192.168.64.1&lt;span class="o">)&lt;/span>: error when creating &lt;span class="s2">&amp;#34;pod-bad-repo.yaml&amp;#34;&lt;/span>: admission webhook &lt;span class="s2">&amp;#34;validating-webhook.pipy.flomesh-io.cn&amp;#34;&lt;/span> denied the request: nginx:1.21.1 repo not start with 192.168.64.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>pod-bad-tag.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">192.168.64.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">5000&lt;/span>&lt;span class="l">/nginx:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f pod-bad-tag.yaml
Error from server &lt;span class="o">(&lt;/span>192.168.64.1:5000/nginx:latest tag end with :latest&lt;span class="o">)&lt;/span>: error when creating &lt;span class="s2">&amp;#34;pod-bad-tag.yaml&amp;#34;&lt;/span>: admission webhook &lt;span class="s2">&amp;#34;validating-webhook.pipy.flomesh-io.cn&amp;#34;&lt;/span> denied the request: 192.168.64.1:5000/nginx:latest tag end with :latest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>pod-ok.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">192.168.64.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">5000&lt;/span>&lt;span class="l">/nginx:1.21.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f pod-ok.yaml
pod/web-server created
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>OPA 哪哪都好，唯一缺点就是其引进的 &lt;code>Rego&lt;/code> 语言抬高了使用的门槛。而 Pipy 的规则是通过 JavaScrip 来编写的，前端的同学一样可以完成规则的编写。完全替代可能夸张了一些，但确实在部分场景下可以替代 OPA。&lt;/p>
&lt;p>玩到这里，你会发现有了规则，加上功能强大的过滤器（现在我喜欢叫他们 Hook 了），Pipy 的可玩性非常强。&lt;/p>
&lt;p>比如&lt;a href="https://mp.weixin.qq.com/s/lfU3XKP2oAPOLNkxdR2KVg">OPA: Kubernetes 准入控制策略 Top 5&lt;/a>，比如&amp;hellip;。大胆的想象吧。&lt;/p>
&lt;p>想写一个系列，就叫“如何把 Pipy 玩坏”？&lt;/p></description></item><item><title>Open Policy Agent: Top 5 Kubernetes 准入控制策略</title><link>https://atbug.com/open-policy-agent-top-5-kubernetes-admission-control/</link><pubDate>Mon, 12 Jul 2021 08:20:40 +0800</pubDate><guid>https://atbug.com/open-policy-agent-top-5-kubernetes-admission-control/</guid><description>
&lt;p>如何使用 Open Policy Agent 实现准入策略控制，可以参考&lt;a href="https://mp.weixin.qq.com/s/RvqCVAhClJY3o_46ALu1bQ">这里&lt;/a>&lt;/p>
&lt;p>本文翻译自 &lt;a href="https://thenewstack.io/open-policy-agent-the-top-5-kubernetes-admission-control-policies/">Open Policy Agent: The Top 5 Kubernetes Admission Control Policies&lt;/a>&lt;/p>
&lt;hr>
&lt;p>Kubernetes 开发人员和平台工程师通常承受着非常大的压力，以保持应用程序部署的快速进行，并且总是为了速度和进度而做出妥协。平台团队越来越有责任确保这些妥协（例如管理 Ingress）不会导致客户数据暴露在整个互联网上等后果。&lt;/p>
&lt;p>幸运的是，Kubernetes 提供了设置策略的能力，通过检查并防止部署错误将其投入生产，从而避免这些后果。为了确保团队的应用程序不会比信心更重要，以下是现在应该在集群中运行的前五个 Kubernetes 准入控制策略。&lt;/p>
&lt;h2 id="1-可信镜像仓库">1. 可信镜像仓库&lt;/h2>
&lt;p>此策略很简单，但功能强大：仅允许从受信任的镜像仓库中拉取的容器映像，并且可以选择仅拉取与允许的仓库镜像地址列表匹配的那些镜像。&lt;/p>
&lt;p>当然，从互联网（或可信镜像仓库库以外的任何地方）拉取未知镜像会带来风险——例如恶意软件。但是还有其他很好的理由来维护单一的可信来源，例如在企业中实现可支持性。通过确保镜像仅来自受信任的镜像仓库，可以密切控制镜像库存，降低软件熵和蔓延的风险，并提高集群的整体安全性。&lt;/p>
&lt;p>相关策略：&lt;/p>
&lt;ul>
&lt;li>禁止所有带有“latest” tag 的镜像&lt;/li>
&lt;li>仅允许签名镜像或匹配特定哈希/SHA 的镜像&lt;/li>
&lt;/ul>
&lt;p>&lt;em>策略示例：&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">validating&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">images&lt;/span>
&lt;span class="nx">deny&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">some&lt;/span> &lt;span class="nx">i&lt;/span>
&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kind&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kind&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;Pod&amp;#34;&lt;/span>
&lt;span class="nx">image&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">containers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">image&lt;/span>
&lt;span class="nx">not&lt;/span> &lt;span class="nf">startswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">image&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;hooli.com/&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">msg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Image &amp;#39;%v&amp;#39; comes from untrusted registry&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">image&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-标签安全">2. 标签安全&lt;/h2>
&lt;p>此策略要求所有 Kubernetes 资源都包含指定的标签并使用适当的格式。由于标签决定了 Kubernetes 对象和策略的分组，包括工作负载可以运行的位置——前端、后端、数据层——以及哪些资源可以发送流量，标签错误会导致生产中无法解释的部署和可支持性问题。此外，如果没有对标签应用方式的访问控制，集群就缺乏基本的安全性。最后，手动输入标签的危险在于错误会蔓延，特别是因为标签在 Kubernetes 中既灵活又强大。应用此策略并确保标签配置正确且一致。&lt;/p>
&lt;p>相关政策：&lt;/p>
&lt;ul>
&lt;li>确保每个工作负载都需要特定的注解（annotations）&lt;/li>
&lt;li>指定污点和容忍度以限制可以部署映像的位置&lt;/li>
&lt;/ul>
&lt;p>&lt;em>策略示例：&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">validating&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">existence&lt;/span>
&lt;span class="nx">deny&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">not&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">metadata&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">labels&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">costcenter&lt;/span>
&lt;span class="nx">msg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;Every resource must have a costcenter label&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">deny&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">value&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">metadata&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">labels&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">costcenter&lt;/span>
&lt;span class="nx">not&lt;/span> &lt;span class="nf">startswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;cccode-&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">msg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Costcenter code must start with `cccode-`; found `%v`&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p> ## 3. 禁止（或指定）特权模式&lt;/p>
&lt;p>此策略确保默认情况下容器不能在特权模式下运行 - 除非在允许的情况下排除特定情况（通常很少见）。&lt;/p>
&lt;p>通常，希望避免在特权模式下运行容器，因为它提供对主机资源和内核功能的访问——包括禁用主机级保护的能力。虽然容器在某种程度上是隔离的，但它们最终共享相同的内核。这意味着如果特权容器遭到入侵，它可能会成为入侵整个系统的起点。尽管如此，在特权模式下运行还是有正当理由的——只要确保这些时间是例外，而不是规则。&lt;/p>
&lt;p>相关政策：&lt;/p>
&lt;ul>
&lt;li>禁止不安全的能力（capabilities）&lt;/li>
&lt;li>禁止容器以 root 身份运行（以非 root 身份运行）&lt;/li>
&lt;li>设置 userID&lt;/li>
&lt;/ul>
&lt;p>&lt;em>策略示例：&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">validating&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">privileged&lt;/span>
&lt;span class="nx">deny&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">some&lt;/span> &lt;span class="nx">c&lt;/span>
&lt;span class="nx">input_container&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">securityContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">privileged&lt;/span>
&lt;span class="nx">msg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Container &amp;#39;%v&amp;#39; should not run in privileged mode.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">input_container&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">container&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">container&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">containers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">input_container&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">container&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">container&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">initContainers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="定义和控制入口">定义和控制入口&lt;/h2>
&lt;p>Ingress 策略允许根据需要公开特定服务（允许 Ingress），或者根据需要不公开任何服务。在 Kubernetes 中，很容易意外启动与公共互联网通信的服务（Kubernetes 故障故事中有很多这样的例子）。同时，过于宽松的 Ingress 会导致启动不必要的外部 LoadBalancer，这也可能会变得非常昂贵（如每月预算支出）非常快！此外，当两个服务尝试共享同一个 Ingress 时，它可能会破坏应用程序。&lt;/p>
&lt;p>下面的策略示例防止不同命名空间中的 Ingress 对象共享相同的主机名。这个常见问题意味着新工作负载会从现有工作负载“窃取”互联网流量，这会产生一系列负面后果——从服务中断到数据暴露等等。&lt;/p>
&lt;p>相关政策：&lt;/p>
&lt;ul>
&lt;li>需要 TLS&lt;/li>
&lt;li>禁止/允许特定端口&lt;/li>
&lt;/ul>
&lt;p>&lt;em>策略示例：&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">validating&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ingress&lt;/span>
&lt;span class="nx">deny&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">is_ingress&lt;/span>
&lt;span class="nx">input_host&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rules&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">host&lt;/span>
&lt;span class="nx">some&lt;/span> &lt;span class="nx">other_ns&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">other_name&lt;/span>
&lt;span class="nx">other_host&lt;/span> &lt;span class="o">:=&lt;/span>
&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ingresses&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">other_ns&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">other_name&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rules&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">host&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">input_ns&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">input_name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">other_ns&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">other_name&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">input_host&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">other_host&lt;/span>
&lt;span class="nx">msg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Ingress host conflicts with ingress %v/%v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">other_ns&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">other_name&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">input_ns&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">metadata&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">namespace&lt;/span>
&lt;span class="nx">input_name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">metadata&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>
&lt;span class="nx">is_ingress&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kind&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kind&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;Ingress&amp;#34;&lt;/span>
&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kind&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">group&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;extensions&amp;#34;&lt;/span>
&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kind&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">version&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;v1beta1&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="5-定义和控制出口">5. 定义和控制出口&lt;/h2>
&lt;p>每个应用程序都需要防护栏来控制出口流量的流动方式，此策略允许你指定集群内和集群外的通信。与 Ingress 一样，默认情况下很容易意外地“允许 Egress”到全世界的每个 IP。有时这甚至不是意外——完全的放开通常是确保可以访问新部署的应用程序的最后努力，即使它过于宽松或引入风险。在集群内级别，还有可能无意中将数据发送到不应该拥有的服务。如果服务受到损害，这两种情况都存在数据泄露和盗窃的风险。另一方面：过于严格，使用 Egress 有时会导致配置错误，从而破坏应用程序。实现两全其美意味着使用此策略选择和指定允许 Egress 发生的时间和服务。&lt;/p>
&lt;p>相关政策。&lt;/p>
&lt;ul>
&lt;li>请参阅上面的入口策略&lt;/li>
&lt;/ul>
&lt;p>&lt;em>策略示例：&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">validating&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">egress&lt;/span>
&lt;span class="nx">allow_list&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s">&amp;#34;10.10.0.0/16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;192.168.100.1/32&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">deny&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">reason&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">network_policy_allows_all_egress&lt;/span>
&lt;span class="nx">reason&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;Network policy allows access to any IP address.&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">deny&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">reason&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">allow_list&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kind&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kind&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;NetworkPolicy&amp;#34;&lt;/span>
&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">policyTypes&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;Egress&amp;#34;&lt;/span>
&lt;span class="nx">ipBlock&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">egress&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">ipBlock&lt;/span>
&lt;span class="nx">not&lt;/span> &lt;span class="nf">any&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nx">t&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">net&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">cidr_contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">allow_list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">ipBlock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cidr&lt;/span>&lt;span class="p">)})&lt;/span>
&lt;span class="nx">reason&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;Network policy allows egress traffic outside of allowed IP ranges.&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">network_policy_allows_all_egress&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kind&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kind&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;NetworkPolicy&amp;#34;&lt;/span>
&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">policyTypes&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;Egress&amp;#34;&lt;/span>
&lt;span class="nx">egress&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">egress&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">not&lt;/span> &lt;span class="nx">egress&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">to&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>有了这些政策，你就可以专注于构建一个世界级的平台。当然，如果你想为 Kubernetes 添加更多基本策略，请查看 &lt;a href="https://www.openpolicyagent.org/">openpolicyagent.org&lt;/a>。&lt;/p></description></item><item><title>Kubernetes 的魔力在于企业标准化，而不是应用程序的可移植性</title><link>https://atbug.com/translation-kubernetes-magic-is-in-enterprise-standardization-not-app-portability/</link><pubDate>Sun, 11 Jul 2021 08:05:42 +0800</pubDate><guid>https://atbug.com/translation-kubernetes-magic-is-in-enterprise-standardization-not-app-portability/</guid><description>
&lt;p>笔者：Kubernetes 抽象了资源和工作负载的操作模式，统一了工具集，实现人机接口的标准化。正如类 Docker 工具提供了应用运行时的操作模式；Spring Framework 提供了 Java 应用的开发模式。&lt;/p>
&lt;blockquote>
&lt;p>Kubernetes 是关于跨云的技能、工具和实践的可移植性。不是工作负载的可移植性。 &amp;ndash; Bilgin Lbryam @bibryam&lt;/p>
&lt;/blockquote>
&lt;p>本文翻译自 &lt;a href="https://www.techrepublic.com/google-amp/article/kubernetes-magic-is-in-enterprise-standardization-not-app-portability">Kubernetes magic is in enterprise standardization, not app portability&lt;/a>&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>Kubernetes 不会神奇地使你的应用程序具有可移植性，但它可能会给你带来更好的东西。&lt;/p>
&lt;/blockquote>
&lt;p>云为企业提供了看似无限的选择。然而，根据 &lt;a href="https://juju.is/cloud-native-kubernetes-usage-report-2021">Canonical-sponsored 的一项调查&lt;/a>，这并不是大多数企业采用 &lt;a href="https://www.techrepublic.com/article/kubernetes-the-smart-persons-guide/">Kubernetes&lt;/a> 等云友好技术的原因。相反，Kubernetes 的主要目标是标准化——外观和操作与其他人一样。&lt;/p>
&lt;h2 id="可移植性不是目标">可移植性不是目标&lt;/h2>
&lt;p>我之前已经讨论过这个问题，参考了 Gartner 关于 Kubernetes 和可移植性的指南。许多人认为 Kubernetes（和&lt;a href="https://www.techrepublic.com/article/containers-the-smart-persons-guide">容器&lt;/a>）可以让他们在云之间轻松移植，但事实证明并不是这样的。正如 Gartner 分析师 &lt;a href="https://blogs.gartner.com/marco-meinardi/2020/09/04/adopting-kubernetes-application-portability-not-good-idea/">Marco Meinardi 所写&lt;/a>，当被问及公司是否应该采用“Kubernetes 使他们的应用程序可移植&amp;hellip;&amp;hellip;答案是：不。” 再说一次？&lt;/p>
&lt;blockquote>
&lt;p>调查显示，[在云提供商之间移动应用程序] 的可能性实际上非常低。一旦部署在供应商中，应用程序往往会留在那里。这是因为数据湖难以移植且成本高昂，因此最终成为迁移的重心。&lt;/p>
&lt;/blockquote>
&lt;p>因此 Kubernetes 通常不会被公司接受，以增强应用程序的可移植性；相反，谈论人员可移植性或换言之，技能可移植性更接近事实。Weaveworks 首席执行官亚历克西斯·理查森（Alexis Richardson）&lt;a href="https://twitter.com/monadic/status/1302257531025264642">将这个主题打回家&lt;/a>：&lt;/p>
&lt;blockquote>
&lt;p>重点是“技能可移植性”，因为使用标准操作模型和工具链。大型组织希望开发人员使用标准的工作方式，因为这可以降低培训成本，并消除员工在不同项目之间转移的障碍。如果你的“平台”（或多个平台）基于相同的核心云原生工具集，那么它也可以更轻松、更便宜地应用策略。&lt;/p>
&lt;/blockquote>
&lt;p>这让我们回到规范调查。&lt;/p>
&lt;h2 id="samesies">Samesies&lt;/h2>
&lt;p>当被问及确定与采用 Kubernetes 等云原生技术相关的技术目标时，调查受访者将可移植性排在最后，将更直接的问题排在第一位：&lt;/p>
&lt;ul>
&lt;li>改进维护、监控和自动化 - 64.6%。&lt;/li>
&lt;li>基础设施现代化 - 46.4%。&lt;/li>
&lt;li>更快的上线时间 - 26.5%。&lt;/li>
&lt;li>删除供应商依赖项 - 12.8%。&lt;/li>
&lt;li>全球覆盖率 - 12.5%。&lt;/li>
&lt;li>围绕流量高峰的敏捷性 - 9.2%。&lt;/li>
&lt;li>确保便携性 - 8.9%&lt;/li>
&lt;/ul>
&lt;p>我喜欢 Google Cloud 的开发者倡导者 Kelsey Hightower 在调查报告中评论这些结果的方式：&lt;/p>
&lt;blockquote>
&lt;p>很多人认为组织转向 Kubernetes 是因为规模，或者因为他们想成为超大规模者，或者与 Twitter 拥有相同的流量水平。对于大多数组织而言，情况并非一定如此。很多人都喜欢 K8s 中内置了许多决策，例如日志记录、监控和负载平衡。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>人们往往会忘记事情有多么复杂，只是为了构建一个没有所有自动化的应用程序。如果你在公有云上，你可以使用一些本机集成和工具。但是，如果你在本地，那不是给定的——你必须自己将解决方案粘合在一起。使用 Kubernetes，你几乎将 25 种不同的工具合二为一。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>这就是人们所说的“现代基础设施”的意思——他们并不是在谈论做一些以前从未做过的事情。他们谈论的是过去 10 年或 15 年一直在生产的东西。Kubernetes 是当今所有“现代模式”的检查站。&lt;/p>
&lt;/blockquote>
&lt;p>换句话说，人们真正想要从 Kubernetes 获得的是一种标准的基础设施思考方式。回到 Richardson 之前的观点，虽然 Kubernetes 和云原生技术使公司能够以更高的速度运营，但最大的好处可能是使技能在组织之间可以互换——这为雇主和员工都创造了巨大的绩效收益。这是企业不断增加对 Kubernetes 投资的另一个原因。&lt;/p>
&lt;p>&lt;em>声明：我为 AWS 工作，但此处表达的观点是我的。&lt;/em>&lt;/p></description></item><item><title>使用 Open Policy Agent 实现可信镜像仓库检查</title><link>https://atbug.com/image-trusted-repository-with-open-policy-agent/</link><pubDate>Sat, 10 Jul 2021 07:14:47 +0800</pubDate><guid>https://atbug.com/image-trusted-repository-with-open-policy-agent/</guid><description>
&lt;p>从互联网（或可信镜像仓库库以外的任何地方）拉取未知镜像会带来风险——例如恶意软件。但是还有其他很好的理由来维护单一的可信来源，例如在企业中实现可支持性。通过确保镜像仅来自受信任的镜像仓库，可以密切控制镜像库存，降低软件熵和蔓延的风险，并提高集群的整体安全性。除此以外，有时还会需要检查镜像的 tag，比如禁止使用 latest 镜像。&lt;/p>
&lt;p>这今天我们尝试用“策略即代码”的实现 OPA 来实现功能。&lt;/p>
&lt;p>还没开始之前可能有人会问：明明可以实现个 &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/">Admission Webhook&lt;/a> 就行，为什么还要加上 OPA？&lt;/p>
&lt;p>确实可以，但是这样策略和逻辑都会耦合在一起，当策略需要调整的时候需要修改代码重新发布。而 OPA 就是用来做解耦的，其更像是一个策略的执行引擎。&lt;/p>
&lt;h2 id="什么是-opa">什么是 OPA&lt;/h2>
&lt;p>Open Policy Agent（以下简称 OPA，发音 “oh-pa”）一个开源的通用策略引擎，可以统一整个堆栈的策略执行。OPA 提供了一种高级声明性语言（Rego），可让你将策略指定为代码和简单的 API，以从你的软件中卸载策略决策。你可以使用 OPA 在微服务、Kubernetes、CI/CD 管道、API 网关等中实施策略。&lt;/p>
&lt;p>Rego 是一种高级的声明性语言，是专门为 OPA 建立的。更多 OPA 的介绍可以看 &lt;a href="https://www.openpolicyagent.org/">Open Policy Agent 官网&lt;/a>，不想看英文直接看&lt;a href="https://cloudnative.to/blog/introducing-policy-as-code-the-open-policy-agent-opa/">这里&lt;/a>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/09/20210709182625.png" alt="2021-07-09-18-26-25">&lt;/p>
&lt;p>现在进入正题。&lt;/p>
&lt;h2 id="启动集群">启动集群&lt;/h2>
&lt;p>启动 minikube&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube start
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建用于部署-opa-的命名空间">创建用于部署 OPA 的命名空间&lt;/h2>
&lt;p>创建并切换到命名空间 &lt;code>opa&lt;/code> （命名空间的切换使用 kubens，更多工具介绍见&lt;a href="https://mp.weixin.qq.com/s/uU2zmT5yyVcKZ5XmLSRqtg">这里&lt;/a>）&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create namespace opa
kubens opa
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="在-kubernetes-上部署-opa">在 Kubernetes 上部署 OPA&lt;/h2>
&lt;p>Kubernetes 和 OPA 间的通信必须使用 TLS 进行保护。配置 TLS，使用 &lt;code>openssl&lt;/code> 创建证书颁发机构（certificate authority CA）和 OPA 的证书/秘钥对。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">openssl genrsa -out ca.key &lt;span class="m">2048&lt;/span>
openssl req -x509 -new -nodes -key ca.key -days &lt;span class="m">100000&lt;/span> -out ca.crt -subj &lt;span class="s2">&amp;#34;/CN=admission_ca&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为 OPA 创建 TLS 秘钥和证书：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat &amp;gt;server.conf &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">[req]
&lt;/span>&lt;span class="s">req_extensions = v3_req
&lt;/span>&lt;span class="s">distinguished_name = req_distinguished_name
&lt;/span>&lt;span class="s">prompt = no
&lt;/span>&lt;span class="s">[req_distinguished_name]
&lt;/span>&lt;span class="s">CN = opa.opa.svc
&lt;/span>&lt;span class="s">[ v3_req ]
&lt;/span>&lt;span class="s">basicConstraints = CA:FALSE
&lt;/span>&lt;span class="s">keyUsage = nonRepudiation, digitalSignature, keyEncipherment
&lt;/span>&lt;span class="s">extendedKeyUsage = clientAuth, serverAuth
&lt;/span>&lt;span class="s">subjectAltName = @alt_names
&lt;/span>&lt;span class="s">[alt_names]
&lt;/span>&lt;span class="s">DNS.1 = opa.opa.svc
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意 &lt;code>CN&lt;/code> 和 &lt;code>alt_names&lt;/code> 必须与后面创建 OPA service 的匹配。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">openssl genrsa -out server.key &lt;span class="m">2048&lt;/span>
openssl req -new -key server.key -out server.csr -config server.conf
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days &lt;span class="m">100000&lt;/span> -extensions v3_req -extfile server.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为 OPA 创建保存 TLS 凭证的 Secret：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create secret tls opa-server --cert&lt;span class="o">=&lt;/span>server.crt --key&lt;span class="o">=&lt;/span>server.key
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 OPA 部署为准入控制器（admission controller）。&lt;/p>
&lt;p>&lt;code>admission-controller.yaml&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># 授权 OPA/kube-mgmt 对资源的只读权限&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># kube-mgmt 会同步资源信息给 OPA，以便在策略中使用&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRoleBinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa-viewer&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">roleRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRole&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">view&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">subjects&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Group&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">system:serviceaccounts:opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># 为 OPA/kube-mgmt 定义角色来在 configmaps 中更新策略状态&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Role&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">configmap-modifier&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">apiGroups&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;configmaps&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">verbs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;update&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;patch&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># 为 OPA/kube-mgmt 授予角色&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">RoleBinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa-configmap-modifier&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">roleRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Role&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">configmap-modifier&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">subjects&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Group&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">system:serviceaccounts:opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">443&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8443&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># WARNING: OPA is NOT running with an authorization policy configured. This&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># means that clients can read and write policies in OPA. If you are&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># deploying OPA in an insecure environment, be sure to configure&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># authentication and authorization on the daemon. See the Security page for&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># details: https://www.openpolicyagent.org/docs/security.html.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">openpolicyagent/opa:0.30.1-rootless&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;run&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--server&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--tls-cert-file=/certs/tls.crt&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--tls-private-key-file=/certs/tls.key&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--addr=0.0.0.0:8443&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--addr=http://127.0.0.1:8181&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--log-format=json-pretty&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--set=decision_logs.console=true&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">readOnly&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/certs&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/health?plugins&amp;amp;bundle&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPS&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8443&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/health&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPS&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8443&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kube-mgmt&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">openpolicyagent/kube-mgmt:0.11&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--replicate=v1/pods&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ConfigMap&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa-default-system-main&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">opa&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">main&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> package system
&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> import data.kubernetes.validating.images
&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> main = {
&lt;/span>&lt;span class="sd"> &amp;#34;apiVersion&amp;#34;: &amp;#34;admission.k8s.io/v1beta1&amp;#34;,
&lt;/span>&lt;span class="sd"> &amp;#34;kind&amp;#34;: &amp;#34;AdmissionReview&amp;#34;,
&lt;/span>&lt;span class="sd"> &amp;#34;response&amp;#34;: response,
&lt;/span>&lt;span class="sd"> }
&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> default uid = &amp;#34;&amp;#34;
&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> uid = input.request.uid
&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> response = {
&lt;/span>&lt;span class="sd"> &amp;#34;allowed&amp;#34;: false,
&lt;/span>&lt;span class="sd"> &amp;#34;uid&amp;#34;: uid,
&lt;/span>&lt;span class="sd"> &amp;#34;status&amp;#34;: {
&lt;/span>&lt;span class="sd"> &amp;#34;reason&amp;#34;: reason,
&lt;/span>&lt;span class="sd"> },
&lt;/span>&lt;span class="sd"> } {
&lt;/span>&lt;span class="sd"> reason = concat(&amp;#34;, &amp;#34;, images.deny)
&lt;/span>&lt;span class="sd"> reason != &amp;#34;&amp;#34;
&lt;/span>&lt;span class="sd"> }
&lt;/span>&lt;span class="sd"> else = {&amp;#34;allowed&amp;#34;: true, &amp;#34;uid&amp;#34;: uid}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f admission-controller.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来，生成将用于将 OPA 注册为准入控制器的 manifest。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">cat &amp;gt; webhook-configuration.yaml &amp;lt;&amp;lt;EOF
kind: ValidatingWebhookConfiguration
apiVersion: admissionregistration.k8s.io/v1beta1
metadata:
name: opa-validating-webhook
webhooks:
- name: validating-webhook.openpolicyagent.org
rules:
- operations: [&amp;#34;CREATE&amp;#34;, &amp;#34;UPDATE&amp;#34;]
apiGroups: [&amp;#34;*&amp;#34;]
apiVersions: [&amp;#34;*&amp;#34;]
resources: [&amp;#34;pods&amp;#34;]
clientConfig:
caBundle: $(cat ca.crt | base64 | tr -d &amp;#39;\n&amp;#39;)
service:
namespace: opa
name: opa
EOF
&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成的配置文件包含 CA 证书的 base64 编码，以便可以在 Kubernetes API 服务器和 OPA 之间建立 TLS 连接。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f webhook-configuration.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 OPA 日志：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl logs -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>opa -c opa -f
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="定义策略并通过-kubernetes-将其加载到-opa">定义策略并通过 Kubernetes 将其加载到 OPA&lt;/h2>
&lt;p>这里我们定义了对容器镜像的检查：&lt;/p>
&lt;ul>
&lt;li>是否来自受信任的仓库&lt;/li>
&lt;li>是否使用了 latest tag 的镜像&lt;/li>
&lt;/ul>
&lt;p>&lt;code>image-policy.rego&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">package kubernetes.validating.images
deny&lt;span class="o">[&lt;/span>msg&lt;span class="o">]&lt;/span> &lt;span class="o">{&lt;/span>
some i
input.request.kind.kind &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;Pod&amp;#34;&lt;/span>
image :&lt;span class="o">=&lt;/span> input.request.object.spec.containers&lt;span class="o">[&lt;/span>i&lt;span class="o">]&lt;/span>.image
endswith&lt;span class="o">(&lt;/span>image, &lt;span class="s2">&amp;#34;:latest&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
msg :&lt;span class="o">=&lt;/span> sprintf&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;Image &amp;#39;%v&amp;#39; used latest image&amp;#34;&lt;/span>, &lt;span class="o">[&lt;/span>image&lt;span class="o">])&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>
some i
input.request.kind.kind &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;Pod&amp;#34;&lt;/span>
image :&lt;span class="o">=&lt;/span> input.request.object.spec.containers&lt;span class="o">[&lt;/span>i&lt;span class="o">]&lt;/span>.image
not startswith&lt;span class="o">(&lt;/span>image, &lt;span class="s2">&amp;#34;192.168.64.1:5000&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
msg :&lt;span class="o">=&lt;/span> sprintf&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;Image &amp;#39;%v&amp;#39; comes from untrusted registry&amp;#34;&lt;/span>, &lt;span class="o">[&lt;/span>image&lt;span class="o">])&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create configmap image-policy --from-file&lt;span class="o">=&lt;/span>image-policy.rego
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查 configmap 的 annotation &lt;code>openpolicyagent.org/policy-status&lt;/code> 值是否 为 &lt;code>'{&amp;quot;status&amp;quot;:&amp;quot;ok&amp;quot;}'&lt;/code>。否则，就要根据报错信息处理问题。&lt;/p>
&lt;p>注：&lt;code>192.168.64.1:5000&lt;/code> 是笔者本地容器运行的一个私有仓库。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3.6&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">registry&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">registry:2.7.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">registry&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">REGISTRY_HTTP_ADDR&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0.0.0.0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">5000&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">REGISTRY_STORAGE&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">filesystem&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">REGISTRY_STORAGE_DELETE_ENABLED&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;true&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/lib/registry&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;5000:5000&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;/Users/addo/Downloads/tmp/registry:/var/lib/registry&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;h3 id="pod-bad-repoyaml">pod-bad-repo.yaml&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.21.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f pod-bad-repo.yaml
Error from server &lt;span class="o">(&lt;/span>Image &lt;span class="s1">&amp;#39;nginx:1.21.1&amp;#39;&lt;/span> comes from untrusted registry&lt;span class="o">)&lt;/span>: error when creating &lt;span class="s2">&amp;#34;pod-bad-repo.yaml&amp;#34;&lt;/span>: admission webhook &lt;span class="s2">&amp;#34;validating-webhook.openpolicyagent.org&amp;#34;&lt;/span> denied the request: Image &lt;span class="s1">&amp;#39;nginx:1.21.1&amp;#39;&lt;/span> comes from untrusted registry
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pod-bad-tagyaml">pod-bad-tag.yaml&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">192.168.64.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">5000&lt;/span>&lt;span class="l">/nginx:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f pod-bad-tag.yaml
Error from server &lt;span class="o">(&lt;/span>Image &lt;span class="s1">&amp;#39;192.168.64.1:5000/nginx:latest&amp;#39;&lt;/span> used latest image&lt;span class="o">)&lt;/span>: error when creating &lt;span class="s2">&amp;#34;pod-bad-tag.yaml&amp;#34;&lt;/span>: admission webhook &lt;span class="s2">&amp;#34;validating-webhook.openpolicyagent.org&amp;#34;&lt;/span> denied the request: Image &lt;span class="s1">&amp;#39;192.168.64.1:5000/nginx:latest&amp;#39;&lt;/span> used latest image
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pod-okyaml">pod-ok.yaml&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">192.168.64.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">5000&lt;/span>&lt;span class="l">/nginx:1.21.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f pod-ok.yaml
pod/web-server created
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>策略即代码，以代码的实现表达策略；在通过策略与执行引擎的解耦分离，让策略更加的灵活。&lt;/p>
&lt;p>后面我们再探索 OPA 的更多场景。&lt;/p></description></item><item><title>Kubernetes CKA 证书备考笔记</title><link>https://atbug.com/notes-for-cka-preparation/</link><pubDate>Fri, 02 Jul 2021 08:02:15 +0800</pubDate><guid>https://atbug.com/notes-for-cka-preparation/</guid><description>
&lt;p>Kubernetes 使用有好几年了，但在今年 5 月才完成 CKA 的考试。虽说用了几年，还是提前刷了部分题熟悉下。&lt;/p>
&lt;p>绝大部分题都是有在 minikube 的环境上操作过，只有部分比如升级集群受限于环境问题没有实地操作。&lt;/p>
&lt;h2 id="写在最前">写在最前&lt;/h2>
&lt;ol>
&lt;li>保存常用文档进书签，如果有 Alfred 启用浏览器书签 workflow。效果见下图&lt;/li>
&lt;li>kubectl 自动补全 &lt;code>echo &amp;quot;source &amp;lt;(kubectl completion bash)&amp;quot; &amp;gt;&amp;gt; ~/.bashrc; source ~/.bashrc&lt;/code>&lt;/li>
&lt;li>每道题开始前要切换 context 和 namespace，直接复制题目里的命令即可&lt;/li>
&lt;li>必要的 alias&lt;/li>
&lt;li>善用 &lt;code>--dry-run=client -o yaml&lt;/code> 避免手动敲太多&lt;/li>
&lt;li>善用 &lt;code>kubectl explain [resource[.field]]&lt;/code>&lt;/li>
&lt;li>看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/li>
&lt;li>看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/li>
&lt;li>看懂题目最重要，输出正确的结果更重要（重要的事讲三遍）&lt;/li>
&lt;/ol>
&lt;p>书签地址：&lt;a href="https://gist.github.com/addozhang/3ca950ce9b38930abfe7c5fb067e74de">K8s-CKA-CAKD-Bookmarks.html&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/07/01/20210630162758.png" alt="alfred-bookmarks-workflow">&lt;/p>
&lt;h2 id="安全rbac">安全：RBAC&lt;/h2>
&lt;blockquote>
&lt;p>在默认命名空间中创建一个名为 dev-sa 的服务帐户，dev-sa 可以在 dev 命名空间中创建以下组件：
&lt;code>Deployment&lt;/code>、&lt;code>StatefulSet&lt;/code>、&lt;code>DaemonSet&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点">知识点&lt;/h3>
&lt;ul>
&lt;li>role&lt;/li>
&lt;li>sa&lt;/li>
&lt;li>rolebinding&lt;/li>
&lt;li>auth can-i&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#command-line-utilities">https://kubernetes.io/docs/reference/access-authn-authz/rbac/#command-line-utilities&lt;/a>&lt;/p>
&lt;h3 id="解题思路">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create sa dev-sa
$ kubectl create role dev-role --verb&lt;span class="o">=&lt;/span>create --resource&lt;span class="o">=&lt;/span>deployment,statefulset,daemonset
&lt;span class="c1">#检查&lt;/span>
$ kubectl describe role dev-role
Name: dev-role
Labels: &amp;lt;none&amp;gt;
Annotations: &amp;lt;none&amp;gt;
PolicyRule:
Resources Non-Resource URLs Resource Names Verbs
--------- ----------------- -------------- -----
daemonsets.apps &lt;span class="o">[]&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="o">[&lt;/span>create&lt;span class="o">]&lt;/span>
deployments.apps &lt;span class="o">[]&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="o">[&lt;/span>create&lt;span class="o">]&lt;/span>
statefulsets.apps &lt;span class="o">[]&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="o">[&lt;/span>create&lt;span class="o">]&lt;/span>
$ kubectl create rolebinding dev --serviceaccount default:dev-sa --role dev-role
&lt;span class="c1">#检查&lt;/span>
$ kubectl auth can-i create deployment --as system:serviceaccount:default:dev-sa
yes
$ kubectl auth can-i create statefulset --as system:serviceaccount:default:dev-sa
yes
$ kubectl auth can-i create daemonset --as system:serviceaccount:default:dev-sa
yes
$ kubectl auth can-i create pod --as system:serviceaccount:default:dev-sa
no
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="多容器-pod">多容器 Pod&lt;/h2>
&lt;blockquote>
&lt;p>创建一个pod名称日志，容器名称 &lt;code>log-pro&lt;/code> 使用image &lt;code>busybox&lt;/code>，在 &lt;code>/log/data/output.log&lt;/code> 输出重要信息。然后另一个容器名称 &lt;code>log-cus&lt;/code> 使用 image &lt;code>busybox&lt;/code>，在 &lt;code>/log/data/output.log&lt;/code> 加载 &lt;code>output.log&lt;/code> 并打印它。 请注意，此日志文件只能在 pod 内共享。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-1">知识点&lt;/h3>
&lt;ul>
&lt;li>pod&lt;/li>
&lt;li>volume: emptyDir&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir">https://kubernetes.io/docs/concepts/storage/volumes/#emptydir&lt;/a>&lt;/p>
&lt;h3 id="解题思路-1">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl run log --image busybox --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; log.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 log.yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo important information &amp;gt; /log/data/output.log; sleep 1d&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log-pro&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/log/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">tail -f /log/data/output.log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log-cus&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/log/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">emptyDir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行创建 &lt;code>kubectl apply -f log.yaml&lt;/code>&lt;/p>
&lt;p>检查&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl logs log -c log-cus
important information
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安全网络策略-networkpolicy">安全：网络策略 NetworkPolicy&lt;/h2>
&lt;blockquote>
&lt;p>只有命名空间 &lt;code>mysql&lt;/code> 的 pod 只能被另一个命名空间 &lt;code>internal&lt;/code> 的 pod 通过 8080 端口进行访问&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-2">知识点&lt;/h3>
&lt;ul>
&lt;li>NetworkPolicy&lt;/li>
&lt;li>Ingress&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource">https://kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource&lt;/a>&lt;/p>
&lt;h3 id="解题思路-2">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NetworkPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cka-network&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">target&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#目的命名空间&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policyTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Ingress&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#策略影响入栈流量&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ingress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">from&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#允许流量的来源&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">namespaceSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ns&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#源命名空间的 label&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#允许访问的端口&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="节点状态及污点">节点状态及污点&lt;/h2>
&lt;blockquote>
&lt;p>统计这个集群中没有污染的就绪节点，并输出到文件 &lt;code>/root/cka/readyNode.txt&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-3">知识点&lt;/h3>
&lt;ul>
&lt;li>Node&lt;/li>
&lt;li>Taint（污点）&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/&lt;/p>
&lt;h3 id="解题思路-3">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># Ready 状态的数量&lt;/span>
$ kubectl get node &lt;span class="p">|&lt;/span> grep -w Ready &lt;span class="p">|&lt;/span> wc -l
&lt;span class="c1"># 查看含有 Taint 的数量，需要排除掉这些&lt;/span>
$ kubectl describe node &lt;span class="p">|&lt;/span> grep Taints &lt;span class="p">|&lt;/span> grep -i NoSchedule &lt;span class="p">|&lt;/span> wc -l
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="资源">资源&lt;/h2>
&lt;blockquote>
&lt;p>将占用CPU资源最多的pod名称输出到文件 &lt;code>/root/cka/name.txt&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-4">知识点&lt;/h3>
&lt;ul>
&lt;li>kubectl top 命令&lt;/li>
&lt;li>metrics&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-4">解题思路&lt;/h3>
&lt;p>如果是 minikube 环境，报错 &lt;code>error: Metrics API not available&lt;/code>，可以执行 &lt;code>minikube addons enable metrics-server&lt;/code> 命令开启 metrics server。&lt;/p>
&lt;p>通过 &lt;code>kubectl top&lt;/code> 命令找到 cpu 最高的 pod，将其名字写入 &lt;code>/root/cka/name.txt&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl top pod
&lt;span class="c1"># 或者&lt;/span>
$ kubectl top pod &lt;span class="p">|&lt;/span> sort -k &lt;span class="m">2&lt;/span> -n
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="网络dns">网络：DNS&lt;/h2>
&lt;blockquote>
&lt;p>有 pod 名称 &lt;code>pod-nginx&lt;/code>，创建服务名称 &lt;code>service-nginx&lt;/code>，使用 &lt;code>nodePort&lt;/code> 暴露pod。 然后创建一个 pod 使用 image &lt;code>busybox&lt;/code> 来 &lt;code>nslookup&lt;/code> pod &lt;code>pod-nginx&lt;/code> 和 service &lt;code>service-nginx&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-5">知识点&lt;/h3>
&lt;ul>
&lt;li>service with nodePort&lt;/li>
&lt;li>kubectl expose&lt;/li>
&lt;li>kubectl run&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/&lt;/p>
&lt;h3 id="解题思路-5">解题思路&lt;/h3>
&lt;p>使用 &lt;code>kubectl expose&lt;/code> 创建 service。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 创建 service&lt;/span>
kubectl expose pod pod-nginx --name service-nginx --type NodePort --target-port &lt;span class="m">80&lt;/span>
&lt;span class="c1"># 创建 pod&lt;/span>
kubectl run busybox --image busybox:latest --command sleep 1h
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 pod 的 ip 地址，pod 的 dns lookup 需要用用到 ip。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get po -o wide
NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
busybox 1/1 Running &lt;span class="m">0&lt;/span> 2m17s 172.17.0.5 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
pod-nginx 1/1 Running &lt;span class="m">0&lt;/span> 59m 172.17.0.4 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行 nslookup&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl &lt;span class="nb">exec&lt;/span> busybox -it -- nslookup 172.17.0.4
4.0.17.172.in-addr.arpa &lt;span class="nv">name&lt;/span> &lt;span class="o">=&lt;/span> 172-17-0-4.service-nginx.default.svc.cluster.local.
$ kubectl &lt;span class="nb">exec&lt;/span> busybox -it -- nslookup service-nginx
Server: 10.96.0.10
Address: 10.96.0.10#53
Name: service-nginx.default.svc.cluster.local
Address: 10.110.253.70
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工作负载扩容">工作负载：扩容&lt;/h2>
&lt;blockquote>
&lt;p>将命名空间 &lt;code>dev&lt;/code> 中的 Deployment &lt;code>scale-deploy&lt;/code> 缩放到三个 pod 并记录下来。&lt;/p>
&lt;/blockquote>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment&lt;/p>
&lt;h3 id="知识点-6">知识点&lt;/h3>
&lt;ul>
&lt;li>deployment scale up&lt;/li>
&lt;li>kubectl scale&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-6">解题思路&lt;/h3>
&lt;p>&lt;code>kubectl scale&lt;/code> 的使用，需要参数 &lt;code>--record&lt;/code> 进行记录（将操作命令记录到 deployment 的 &lt;code>kubernetes.io/change-cause&lt;/code> annotation 中）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl scale deployment scale-deploy --replicas &lt;span class="m">3&lt;/span> --record
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群备份及恢复">集群备份及恢复&lt;/h2>
&lt;blockquote>
&lt;p>备份 etcd 并将其保存在主节点上的 &lt;code>/root/cka/etcd-backup.db&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后恢复备份。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-7">知识点&lt;/h3>
&lt;ul>
&lt;li>etcd 的备份及恢复&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster&lt;/p>
&lt;h3 id="解题思路-7">解题思路&lt;/h3>
&lt;p>Kubernetes 的所有数据都记录在 etcd 中，对 etcd 进行备份就是对集群进行备份。&lt;/p>
&lt;p>连接 etcd 需要证书，证书可以从 apiserver 获取，因为 apiserver 需要连接 etcd。新版本的 apiserver 都是以 static pod 的方式运行，证书是通过 volume 挂载到 pod 中的。&lt;/p>
&lt;p>比如 minikube 环境，证书是从 node 节点的 &lt;code>/var/lib/minikube/certs&lt;/code> 挂载进去的。&lt;/p>
&lt;p>要先 ssh 到 master 节点上。命令的执行非常快，如果长时间没结束，那就说名有问题了。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#备份&lt;/span>
$ &lt;span class="nv">ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl snapshot save /root/cka/etcd-backup.db &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于只说了 restore，所以就执行 restore 的命令，默认会恢复到当前目录的 &lt;code>default.etcd&lt;/code> 下。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#恢复&lt;/span>
$ &lt;span class="nv">ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl snapshot restore /root/cka/etcd-backup.db &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群节点升级">集群节点升级&lt;/h2>
&lt;blockquote>
&lt;p>将master节点版本从 1.20.0 升级到 1.21.0，确保 master 节点上的 pod 重新调度到其他节点，升级完成后，使 master 节点可用。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-8">知识点&lt;/h3>
&lt;ul>
&lt;li>drain&lt;/li>
&lt;li>cordon&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/#upgrading-control-plane-nodes&lt;/p>
&lt;h3 id="解题思路-8">解题思路&lt;/h3>
&lt;p>受限于环境，没有实地操作。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 将节点设置为不可调度&lt;/span>
$ kubectl cordon master
&lt;span class="c1"># 驱逐 master 节点上的 pod&lt;/span>
$ kubectl drain master --ignore-daemonsets
&lt;span class="c1"># 进行升级&lt;/span>
$ apt-mark unhold kubelet kubectl &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install -y &lt;span class="nv">kubelet&lt;/span>&lt;span class="o">=&lt;/span>1.21.0-00 &lt;span class="nv">kubectl&lt;/span>&lt;span class="o">=&lt;/span>1.21.0-00 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>apt-mark hold kubelet kubectl
&lt;span class="c1"># 重新启动kubelet&lt;/span>
$ systemctl daemon-reload
$ systemctl restart kubelet
&lt;span class="c1"># 将节点设置为可调度&lt;/span>
$ kubectl uncordon master
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群节点故障排查">集群：节点故障排查&lt;/h2>
&lt;blockquote>
&lt;p>现在 node01 还没有准备好，请找出根本原因并使其准备好，然后创建一个确保它在 node01 上运行的 pod。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-9">知识点&lt;/h3>
&lt;ul>
&lt;li>节点故障排查&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-9">解题思路&lt;/h3>
&lt;p>这种问题大概率问题出在 kubelet 上&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ssh node01
systemctl status kubelet
systemctl restart kubelet
&lt;span class="c1"># 再检查node状态&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>插播一个故障，本地安装 2 个节点的 minikube 集群时，第二个节点持续 &lt;code>NotReady&lt;/code>。使用 &lt;code>systemctl status kubelet&lt;/code> 看到 &lt;code>unable to update cni config: no networks found in /etc/cni/net.mk&lt;/code>。&lt;/p>
&lt;p>检查该目录确实没有文件，从 master 节点复制到该节点后重启 kubelet 解决。&lt;/p>
&lt;h2 id="存储持久化卷">存储：持久化卷&lt;/h2>
&lt;blockquote>
&lt;p>集群中有一个持久卷名称 &lt;code>dev-pv&lt;/code>，创建一个持久卷声明名称 &lt;code>dev-pvc&lt;/code>，确保这个持久卷声明会绑定持久卷，然后创建一个 pod 名称 &lt;code>test-pvc&lt;/code>，将这个 pvc 挂载到 path &lt;code>/tmp/data&lt;/code>，使用 nginx 镜像。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-10">知识点&lt;/h3>
&lt;ul>
&lt;li>PersistentVolume&lt;/li>
&lt;li>PersistentVolumeClaim&lt;/li>
&lt;li>Mount Volume&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume&lt;/p>
&lt;h3 id="解题思路-10">解题思路&lt;/h3>
&lt;p>创建 pvc 前先获取 pv的信息&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pv dev-pv -o yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pv&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; pvc.yaml &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">apiVersion: v1
&lt;/span>&lt;span class="s">kind: PersistentVolumeClaim
&lt;/span>&lt;span class="s">metadata:
&lt;/span>&lt;span class="s"> name: dev-pvc
&lt;/span>&lt;span class="s">spec:
&lt;/span>&lt;span class="s"> accessModes:
&lt;/span>&lt;span class="s"> - ReadWriteOnce
&lt;/span>&lt;span class="s"> resources:
&lt;/span>&lt;span class="s"> requests:
&lt;/span>&lt;span class="s"> storage: 1Gi
&lt;/span>&lt;span class="s">EOF&lt;/span>
$ kubectl apply -f pvc.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pod 的 manifest，记得使用 &lt;code>kubectl run --dry-run=client -o yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl run test-pvc --image nginx --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; test-pvc.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改之后得到最终的 pod yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dev-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>理论上只要 pod 能运行，就说明成功。也可以进一步确认挂载是否成功，在 pod 的 &lt;code>/tmp/data&lt;/code> 中 touch 个文件，然后到节点的目录中查看是有该文件。&lt;/p>
&lt;h2 id="工作负载多容器的-deployment">工作负载：多容器的 Deployment&lt;/h2>
&lt;blockquote>
&lt;p>创建一个名为 &lt;code>deploy-important&lt;/code> 的 Deployment，标签为 &lt;code>id=very-important&lt;/code>（pod 也应该有这个标签）和命名空间 dev 中的 3 个副本。 它应该包含两个容器，第一个名为 &lt;code>container1&lt;/code> 并带有镜像，第二个名为 container2 的图像为 &lt;code>kubernetes/pause&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在一个工作节点上应该只运行该部署的一个 Pod。 我们有两个工作节点：&lt;code>cluster1-worker1&lt;/code> 和 &lt;code>cluster1-worker2&lt;/code>。 因为 Deployment 有三个副本，所以结果应该是在两个节点上都有一个 Pod 正在运行。 不会调度第三个 Pod，除非添加新的工作节点。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-11">知识点&lt;/h3>
&lt;ul>
&lt;li>deployment&lt;/li>
&lt;li>pod label&lt;/li>
&lt;li>replicas&lt;/li>
&lt;li>multi container pod&lt;/li>
&lt;li>pod anti affinity&lt;/li>
&lt;/ul>
&lt;p>官方文档参考：https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#never-co-located-in-the-same-node&lt;/p>
&lt;h3 id="解题思路-11">解题思路&lt;/h3>
&lt;p>先创建模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create deployment deploy-important --image nginx --replicas &lt;span class="m">3&lt;/span> --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; deploy-important.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改后的 yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">affinity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podAntiAffinity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requiredDuringSchedulingIgnoredDuringExecution&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">labelSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">id&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">In&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">very-important&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">topologyKey&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetes.io/hostname&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">container1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetes/pause&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">container2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>minikube 上测试只能调度一个 pod，符合预期&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kgpo
NAME READY STATUS RESTARTS AGE
deploy-important-659d54fc47-6cp8r 0/2 Pending &lt;span class="m">0&lt;/span> 3h10m
deploy-important-659d54fc47-92z4d 2/2 Running &lt;span class="m">0&lt;/span> 3h10m
deploy-important-659d54fc47-c6llc 0/2 Pending &lt;span class="m">0&lt;/span> 3h10m
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="存储secret的使用">存储：Secret的使用&lt;/h2>
&lt;blockquote>
&lt;p>在 &lt;code>secret&lt;/code> 命名空间下，使用镜像 &lt;code> busybox:1.31.1&lt;/code> 创建一个名为 &lt;code>secret-pod&lt;/code> 的 pod，并保证 pod 运行一段时间&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>有个名为 &lt;code>sercret1.yaml&lt;/code> 的 Secret 文件，在 &lt;code>secret&lt;/code> 命名空间下创建 Secret，并以只读的方式挂在到 Pod 的 &lt;code>/tmp/secret1&lt;/code> 目录
创建一个新的 Secret &lt;code>secret2&lt;/code> 包含 &lt;code>user=user1&lt;/code> 和 &lt;code>pass=1234&lt;/code>，分别以缓解变量 &lt;code>APP_USER&lt;/code> 和 &lt;code>APP_PASS&lt;/code> 输入到 Pod 中&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-12">知识点&lt;/h3>
&lt;ul>
&lt;li>secret&lt;/li>
&lt;li>toleration&lt;/li>
&lt;li>taints&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets">https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets&lt;/a>
&lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables">https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables&lt;/a>&lt;/p>
&lt;h3 id="解题思路-12">解题思路&lt;/h3>
&lt;p>创建 namespace&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create ns secret
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pod 模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubectl run secret-pod --image busybox:1.31.1 --dry-run=client -o yaml --command -- sleep 1d &amp;gt; secret-pod.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 secret1.yaml，使用 secret namespace&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">halt&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IyEvYmluL2Jhc2g=&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2021-05-15T07:48:02Z&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Opaque&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 secret2&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create secret generic secret2 --from-literal &lt;span class="nv">user&lt;/span>&lt;span class="o">=&lt;/span>user1 --from-literal &lt;span class="nv">pass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1234&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sleep&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">1d&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox:1.31.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">APP_USER&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">user&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">APP_PASS&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pass&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/secret1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sec&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sec&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl &lt;span class="nb">exec&lt;/span> secret-pod -- cat /tmp/secret1/halt
&lt;span class="c1">#!/bin/bash&lt;/span>
$ kubectl &lt;span class="nb">exec&lt;/span> secret-pod -- env &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;APP_&amp;#39;&lt;/span>
&lt;span class="nv">APP_USER&lt;/span>&lt;span class="o">=&lt;/span>user1
&lt;span class="nv">APP_PASS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1234&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工作负载静态-pod">工作负载：静态 Pod&lt;/h2>
&lt;blockquote>
&lt;p>在 &lt;code>cluster3-master1&lt;/code> 上的 &lt;code>default&lt;/code> 命名空间中创建一个名为 &lt;code>my-static-pod&lt;/code> 的静态 Pod。 使用镜像 &lt;code>nginx:1.16-alpine&lt;/code> 并分配 10m CPU 和 20Mi 内存的资源。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Then create a NodePort Service named static-pod-service which exposes that static Pod on port 80 and check if it has Endpoints and if its reachable through the cluster3-master1 internal IP address. You can connect to the internal node IPs from your main terminal.
然后创建一个名为&lt;code> static-pod-service&lt;/code> 的 NodePort Service，该服务在端口 80 上公开该静态 Pod，并检查它是否具有端点以及是否可以通过 &lt;code>cluster3-master1&lt;/code> 内部 IP 地址访问它。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-13">知识点&lt;/h3>
&lt;ul>
&lt;li>static pod&lt;/li>
&lt;li>resource&lt;/li>
&lt;li>nodeport service&lt;/li>
&lt;li>endpoints&lt;/li>
&lt;/ul>
&lt;p>参考文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/static-pod/">https://kubernetes.io/docs/tasks/configure-pod-container/static-pod/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory">https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-13">解题思路&lt;/h3>
&lt;p>创建pod模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run my-static-pod --image nginx:1.16-alpine --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; static-pod.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改模板，增加资源配置&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-static-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-static-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.16-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-static-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;10m&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;20Mi&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ssh 到主机，找到 kubelet 配置文件的位置 &lt;code>ps -ef | grep kubelet&lt;/code>&lt;/p>
&lt;p>查看配置文件（minikube：/var/lib/kubelet/config.yaml）中 &lt;code>staticPodPath&lt;/code> 配置的就是静态 pod 的 manifest 的位置（minikube：/etc/kubernetes/manifests）&lt;/p>
&lt;p>将 &lt;code>static-pod.yaml&lt;/code> 放到正确的文件夹中，然后重启 kubelet&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查pod是否正确运行&lt;/p>
&lt;p>创建 node port&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl expose pod my-static-pod --name static-pod-service --type NodePort --port &lt;span class="m">80&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否创建成功&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get svc
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
static-pod-service NodePort 10.97.248.99 &amp;lt;none&amp;gt; 80:31938/TCP 68s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 node 的 ip&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get node -o wide
NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME
cka Ready master 10h v1.18.8 192.168.64.3 &amp;lt;none&amp;gt; Buildroot 2020.02.10 4.19.171 docker://20.10.4
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 minikube 的环境下可直接通过 &lt;code>minikube ip&lt;/code> 获取&lt;/p>
&lt;p>测试&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http 192.168.64.3:31938 --headers
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Accept-Ranges: bytes
Connection: keep-alive
Content-Length: &lt;span class="m">612&lt;/span>
Content-Type: text/html
Date: Sat, &lt;span class="m">15&lt;/span> May &lt;span class="m">2021&lt;/span> 08:35:11 GMT
ETag: &lt;span class="s2">&amp;#34;5d52db33-264&amp;#34;&lt;/span>
Last-Modified: Tue, &lt;span class="m">13&lt;/span> Aug &lt;span class="m">2019&lt;/span> 15:45:55 GMT
Server: nginx/1.16.1
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="调度污点和容忍度">调度：污点和容忍度&lt;/h2>
&lt;blockquote>
&lt;p>在命名空间 &lt;code>default&lt;/code> 中创建图像 &lt;code>httpd:2.4.41-alpine&lt;/code> 的单个 Pod。Pod 应命名为 &lt;code>pod1&lt;/code>，容器名为 &lt;code>pod1-container&lt;/code>。在不给任何节点添加新标签的前提下，将该 pod 调度到主节点上。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-14">知识点&lt;/h3>
&lt;ul>
&lt;li>Taint&lt;/li>
&lt;li>Label&lt;/li>
&lt;li>Tolerance&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/&lt;/p>
&lt;h3 id="解题思路-14">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#找出master节点（一般考试只有一个节点）
$ kubectl get node
#找到 master 节点的 taints，需要在 pod 的 .spec.tolerations 排除掉
$ kubectl describe node xxxx | grep -w Taints
#找到 master 节点的 labels
$ kubectl describe node xxxx | grep -w Labels -A10
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建pod模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run pod1 --image httpd:2.4.41-alpine --dry-run&lt;span class="o">=&lt;/span>client -o yaml &amp;gt; pod1.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改模板： 这里假设主节点的 Taint 为 &lt;code>node-role.kubernetes.io/master=:NoSchedule&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># minikube 集群名为 cka，主节点同名&lt;/span>
$ kubectl describe node cka &lt;span class="p">|&lt;/span> grep -i taint
Taints: node-role.kubernetes.io/master:NoSchedule
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终的 pod 如下&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd:2.4.41-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node-role.kubernetes.io/master&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NoSchedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">node-role.kubernetes.io/master&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后检查下是否调度到主节点上：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -o wide
NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
pod1 1/1 Running &lt;span class="m">0&lt;/span> 102s 10.244.0.3 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubectl-命令和排序">kubectl 命令和排序&lt;/h2>
&lt;blockquote>
&lt;p>所有命名空间中都有各种 Pod。 将命令写入 /opt/course/5/find_pods.sh，其中列出所有按 AGE 排序的 Pod（metadata.creationTimestamp）。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将第二个命令写入 /opt/course/5/find_pods_uid.sh，其中列出按字段 metadata.uid 排序的所有 Pod。对这两个命令都使用 kubectl 排序。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-15">知识点&lt;/h3>
&lt;ul>
&lt;li>kubectl 命令的使用，主要是 &lt;code>--all-namespaces&lt;/code> （缩写 &lt;code>-A&lt;/code>） 和 &lt;code>--sort-by&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-15">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; /opt/course/5/find_pods.sh &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kubectl get pod -A --sort-by &amp;#39;.metadata.creationTimestamp&amp;#39;
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat &amp;gt; /opt/course/5/find_pods_uid.sh &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kubectl get pod -A --sort-by &amp;#39;.metadata.uid&amp;#39;
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="存储持久化卷和挂载">存储：持久化卷和挂载&lt;/h2>
&lt;blockquote>
&lt;p>创建一个名为 &lt;code>safari-pv&lt;/code> 的新 &lt;code>PersistentVolume&lt;/code>。它应该具有 2Gi 的容量、&lt;code>accessMode&lt;/code> &lt;code>ReadWriteOnce&lt;/code>、&lt;code>hostPath&lt;/code> &lt;code>/Volumes/Data&lt;/code> 并且没有定义 &lt;code>storageClassName&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>接下来在命名空间 &lt;code>project-tiger&lt;/code> 中创建一个名为 &lt;code>safari-pvc&lt;/code> 的新 &lt;code>PersistentVolumeClaim&lt;/code>。 它应该请求 2Gi 存储，&lt;code>accessMode&lt;/code> &lt;code>ReadWriteOnce&lt;/code> 并且不应定义 &lt;code>storageClassName&lt;/code>。 PVC 应该正确绑定到 PV。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后在命名空间 &lt;code>project-tiger&lt;/code> 中创建一个新的 Deployment &lt;code>safari&lt;/code>，它将该卷挂载到 &lt;code>/tmp/safari-data&lt;/code>。该 Deployment 的 Pod 应该是镜像 httpd:2.4.41-alpine。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-16">知识点&lt;/h3>
&lt;ul>
&lt;li>pv&lt;/li>
&lt;li>pvc&lt;/li>
&lt;li>pod 使用 pvc&lt;/li>
&lt;li>deployment&lt;/li>
&lt;li>mount PVC volume&lt;/li>
&lt;/ul>
&lt;p>参考文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume">https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolumeclaim">https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolumeclaim&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#claims-as-volumes">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#claims-as-volumes&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-16">解题思路&lt;/h3>
&lt;p>创建 pv&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolume&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari-pv&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">local&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">capacity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/Volumes/Data&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pvc&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolumeClaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否绑定成功&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pvc
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE
safari-pvc Bound pvc-d4c15825-2de3-470f-8ed0-9519cacaad21 2Gi RWO standard 24s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 deployment 模板&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl create deployment safari --image httpd:2.4.41-alpine --dry-run&lt;span class="o">=&lt;/span>client -o yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终的yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd:2.4.41-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/safari-data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">safari-pvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubectl-命令和-context">kubectl 命令和 context&lt;/h2>
&lt;blockquote>
&lt;p>可以通过 kubectl 上下文从主终端访问多个集群。将所有这些上下文名称写入 /opt/course/1/contexts。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>接下来在 /opt/course/1/context_default_kubectl.sh 中写一个显示当前上下文的命令，该命令应该使用kubectl。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后在 /opt/course/1/context_default_no_kubectl.sh 中写入第二个执行相同操作的命令，但不使用 kubectl。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-17">知识点&lt;/h3>
&lt;p>kubectl config 相关命令的使用&lt;/p>
&lt;h3 id="解题思路-17">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl config get-contexts -o name &amp;gt; /opt/course/1/contexts
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat &amp;gt; /opt/course/1/context_default_kubectl.sh &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s">kubectl config current-context
&lt;/span>&lt;span class="s">EOF&lt;/span>
chmod +x /opt/course/1/context_default_kubectl.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat ~/.kube/config &lt;span class="p">|&lt;/span> grep current-context &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $2}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工作负载缩容">工作负载：缩容&lt;/h2>
&lt;blockquote>
&lt;p>命名空间 &lt;code>project-c13&lt;/code> 中有两个名为 &lt;code>o3db-*&lt;/code> 的 Pod。 C13 管理层要求将 Pod 缩减为一个副本以节省资源。 记录动作。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-18">知识点&lt;/h3>
&lt;ul>
&lt;li>scale&lt;/li>
&lt;li>deploy&lt;/li>
&lt;li>statefulset&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/zh/docs/tasks/run-application/scale-stateful-set/">https://kubernetes.io/zh/docs/tasks/run-application/scale-stateful-set/&lt;/a>
&lt;a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment">https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment&lt;/a>&lt;/p>
&lt;h3 id="解题思路-18">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl scale &amp;lt;resource&amp;gt; xxx --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>scale 命令需要确认资源类型：deployment/statefulset&lt;/p>
&lt;h2 id="应用就绪和探活">应用就绪和探活&lt;/h2>
&lt;blockquote>
&lt;p>在命名空间 &lt;code>default&lt;/code> 中执行以下操作。为 &lt;code>nginx:1.16.1-alpine&lt;/code> 创建一个名为 &lt;code>ready-if-service-ready&lt;/code> 的 Pod。配置一个 &lt;code>LivenessProbe&lt;/code>，它只是运行 &lt;code>true&lt;/code>。还要配置一个 &lt;code>ReadinessProbe&lt;/code> 来检查 &lt;code>url&lt;/code> &lt;code>http://service-am-i-ready:80&lt;/code> 是否可达，可以使用 &lt;code>wget -T2 -O- http://service-am-i-ready:80&lt;/code>。 启动 Pod 并确认它因为 &lt;code>ReadinessProbe&lt;/code> 而没有准备好。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>创建第二个名为 &lt;code>am-i-ready&lt;/code> 的 Pod 镜像 &lt;code>nginx:1.16.1-alpine&lt;/code>，标签 &lt;code>id:cross-server-ready&lt;/code>。已经存在的服务 &lt;code>service-am-i-ready&lt;/code> 现在应该有第二个 Pod 作为端点。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-19">知识点&lt;/h3>
&lt;ul>
&lt;li>probe&lt;/li>
&lt;li>pod&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&lt;/a>&lt;/p>
&lt;h3 id="解题思路-19">解题思路&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl run ready-if-service-ready --image nginx:1.16.1-alpine --dry-run=client -o yaml &amp;gt; ready-if-service-ready.yaml
kubectl run am-i-ready --image nginx:1.16.1-alpine --labels id=cross-server-ready --dry-run=client -o yaml &amp;gt; am-i-ready.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加 probes&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready-if-service-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready-if-service-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.16.1-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready-if-service-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">hi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">wget&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">T2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">O-&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">http://service-am-i-ready:80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群控制平面">集群：控制平面&lt;/h2>
&lt;blockquote>
&lt;p>使用 &lt;code>ssh cluster1-master1&lt;/code> ssh 进入主节点。检查 master 组件 kubelet、kube-apiserver、kube-scheduler、kube-controller-manager 和 etcd 如何在 master 节点上启动/安装。还要找出 DNS 应用的名称以及它是如何在主节点上启动/安装的。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将结果写入文件 /opt/course/8/master-components.txt。该文件的结构应如下所示：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># /opt/course/8/master-components.txt
kubelet: [TYPE]
kube-apiserver: [TYPE]
kube-scheduler: [TYPE]
kube-controller-manager: [TYPE]
etcd: [TYPE]
dns: [TYPE] [NAME]
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;blockquote>
&lt;p>Choices of [TYPE] are: not-installed, process, static-pod, pod&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-20">知识点&lt;/h3>
&lt;p>Kubernetes components 的安装方式&lt;/p>
&lt;h3 id="解题思路-20">解题思路&lt;/h3>
&lt;p>当前比较的组件都是以static pod的形式运行的，而 static pod 都是由 Kubelet 管理的，所以从 kubelet 处入手。&lt;/p>
&lt;p>以 minikube 为例：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ps -ef &lt;span class="p">|&lt;/span> grep -w kubelet
root &lt;span class="m">140597&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> May15 ? 00:36:00 /var/lib/minikube/binaries/v1.18.8/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>cka --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64.3
$ systemctl is-active kubelet
active
&lt;span class="c1">#kubelet: process&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据前面进程中的信息，查看 &lt;code>/var/lib/kubelet/config.yaml&lt;/code>中的内容。可以得到：&lt;/p>
&lt;p>etcd: static-pod
kube-apiserver: static-pod
kube-controller-manager: static-pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat /var/lib/kubelet/config.yaml &lt;span class="p">|&lt;/span> grep -i staticpod
staticPodPath: /etc/kubernetes/manifests
ls /etc/kubernetes/manifests
etcd.yaml kube-apiserver.yaml kube-controller-manager.yaml kube-scheduler.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后上下dns，查看下pod，得知 dns: pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -A &lt;span class="p">|&lt;/span> grep dns
kube-system coredns-66bff467f8-6k2br 1/1 Running &lt;span class="m">0&lt;/span> 32h
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后将上面的结果写入到 &lt;code>/opt/course/8/master-components.txt&lt;/code>，不能前功尽弃。&lt;/p>
&lt;h2 id="集群pod-调度">集群：Pod 调度&lt;/h2>
&lt;blockquote>
&lt;p>使用 &lt;code>ssh cluster2-master1&lt;/code> ssh 进入主节点。暂时停止 &lt;code>kube-scheduler&lt;/code>，这意味着可以在之后再次启动它。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>为镜像 &lt;code>httpd:2.4-alpine&lt;/code> 创建一个名为 &lt;code>manual-schedule&lt;/code> 的 Pod，确认它已启动但未在任何节点上调度。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>现在您是调度程序并拥有所有权力，在节点 &lt;code>cluster2-master1&lt;/code> 上手动调度该 Pod。 确保它正在运行。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>再次启动 &lt;code>kube-scheduler&lt;/code> 并通过在镜像 &lt;code>httpd:2.4-alpine&lt;/code> 创建第二个名为 &lt;code>manual-schedule2&lt;/code> 的 Pod 并检查它是否在 &lt;code>cluster2-worker1&lt;/code> 上运行来确认其运行正常。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-21">知识点&lt;/h3>
&lt;ul>
&lt;li>kubernetes 组件的运行方式&lt;/li>
&lt;li>创建 pod&lt;/li>
&lt;li>pod 调度&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-21">解题思路&lt;/h3>
&lt;p>kube-scheduler 是以 static pod 的方式运行，因此我们需要 ssh 到节点上，将 scheduler 的 yaml 移出（记住不要删掉，还要还原回去），重启 kubelet&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ps -ef &lt;span class="p">|&lt;/span> grep -w kubelet
root &lt;span class="m">140597&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> May15 ? 00:36:00 /var/lib/minikube/binaries/v1.18.8/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>cka --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64.3
$ cat /var/lib/kubelet/config.yaml &lt;span class="p">|&lt;/span> grep -i staticpod
staticPodPath: /etc/kubernetes/manifests
$ ls /etc/kubernetes/manifests
etcd.yaml kube-apiserver.yaml kube-controller-manager.yaml kube-scheduler.yaml
$ mv /etc/kubernetes/manifests/kube-scheduler.yaml /etc/kubernetes
$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查下 schedule pod 没有运行，然后尝试创建 pod，并查看 pod 处于 pending 状态，即没有 kube-scheduler 为其调度。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run manual-schedule --image httpd:2.4-alpine
$ kubectl get pod &lt;span class="p">|&lt;/span> grep manual-schedule
manual-schedule 0/1 Pending &lt;span class="m">0&lt;/span> 16s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>手动调度，即为 pod 指定一个 &lt;code>nodeName&lt;/code>，我的 minikube 只有一个 node 名为 cka，修改pod：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod manual-schedule -o yaml &amp;gt; manual-schedule.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加 nodeName 之后&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2021-05-16T07:27:16Z&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dev&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resourceVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;84805&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selfLink&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/api/v1/namespaces/dev/pods/manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uid&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">c4b592f6-1e07-4911-a7fe-867d813c7a55&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd:2.4-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual-schedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationMessagePath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/dev/termination-log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationMessagePolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">File&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/run/secrets/kubernetes.io/serviceaccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-token-v7f28&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readOnly&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterFirst&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cka&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#node name here&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enableServiceLinks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">priority&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">schedulerName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-scheduler&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">securityContext&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccount&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccountName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationGracePeriodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NoExecute&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node.kubernetes.io/not-ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Exists&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerationSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">300&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NoExecute&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node.kubernetes.io/unreachable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Exists&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerationSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">300&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-token-v7f28&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">defaultMode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">420&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-token-v7f28&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">phase&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pending&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">qosClass&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">BestEffort&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>强制更新 pod（运行时只能修改部分内容）：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl replace -f manual-schedule.yaml --force
pod &lt;span class="s2">&amp;#34;manual-schedule&amp;#34;&lt;/span> deleted
pod/manual-schedule replaced
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再次检查&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod &lt;span class="p">|&lt;/span> grep manual-schedule
manual-schedule 1/1 Running &lt;span class="m">0&lt;/span> 15s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>恢复 kube-scheduler 的运行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ mv /etc/kubernetes/kube-scheduler.yaml /etc/kubernetes/manifests
$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查是否运行&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod -A &lt;span class="p">|&lt;/span> grep kube-scheduler
kube-system kube-scheduler-cka 1/1 Running &lt;span class="m">0&lt;/span> 66s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建第二个pod，并检查是否在运行（running）状态&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run manual-schedule2 --image httpd:2.4-alpine
pod/manual-schedule2 created
kubectl get pod manual-schedule2
NAME READY STATUS RESTARTS AGE
manual-schedule2 1/1 Running &lt;span class="m">0&lt;/span> 6s
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群备份及恢复-1">集群：备份及恢复&lt;/h2>
&lt;blockquote>
&lt;p>对在 &lt;code>cluster3-master1&lt;/code> 上运行的 etcd 进行备份，并将其保存在主节点上的 &lt;code>/tmp/etcd-backup.db&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>然后在集群中创建一个你喜欢的 Pod。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后恢复备份，确认集群仍在工作并且创建的 Pod 不再与我们在一起。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-22">知识点&lt;/h3>
&lt;ul>
&lt;li>etc 的作用：存储集群的状态信息，包括 pod 信息&lt;/li>
&lt;li>etc 的备份和恢复&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster">https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster&lt;/a>&lt;/p>
&lt;h3 id="解题思路-22">解题思路&lt;/h3>
&lt;p>etcd的命令执行，记得设置API的版本 &lt;code>ETCDCTL_API=3&lt;/code>&lt;/p>
&lt;p>操作 etcd 需要 &lt;code>endpoints&lt;/code>、&lt;code>cacert&lt;/code>、&lt;code>cert&lt;/code>、&lt;code>key&lt;/code>。Kubernetes 的所有组件与 etcd 的数据交互都是通过 api-server 完成的，我只需要找到 api-server 的运行命令就行，两种方式：到 master 主机查看 api-server 的进程；或者去 api-server 的 pod 查看 &lt;code>.spec.containers[].command&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#ssh to master&lt;/span>
$ ps -ef &lt;span class="p">|&lt;/span> grep kube-apiserver
$ kubectl get pod -n kube-system kube-apiserver-cka -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.spec.containers[].command}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>etcd 备份，命令直接从 Kubernetes 官方文档复制再修改&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#ssh to master&lt;/span>
&lt;span class="nv">$ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl --endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt --cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt --key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> snapshot save /tmp/etcd-backup.db
Snapshot saved at /tmp/etcd-backup.db
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建 pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run sleep1d --image busybox --command -- sleep 1d
&lt;span class="c1">#检查 pod 运行情况&lt;/span>
$ kubectl get pod
NAME READY STATUS RESTARTS AGE
sleep1d 1/1 Running &lt;span class="m">0&lt;/span> 10s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>恢复 etcd 的备份，复制前面的命令并修改，恢复备份到 &lt;code>/var/lib/etcd-backup&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ &lt;span class="nv">ETCDCTL_API&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> etcdctl --endpoints&lt;span class="o">=&lt;/span>https://127.0.0.1:2379 --cacert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/etcd/ca.crt --cert&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.crt --key&lt;span class="o">=&lt;/span>/var/lib/minikube/certs/apiserver-etcd-client.key snapshot restore /tmp/etcd-backup.db --data-dir /var/lib/etcd-backup
2021-05-16 08:09:17.797061 I &lt;span class="p">|&lt;/span> mvcc: restore compact to &lt;span class="m">85347&lt;/span>
2021-05-16 08:09:17.803208 I &lt;span class="p">|&lt;/span> etcdserver/membership: added member 8e9e05c52164694d &lt;span class="o">[&lt;/span>http://localhost:2380&lt;span class="o">]&lt;/span> to cluster cdf818194e3a8c32
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 etcd 的配置， &lt;code>/etc/kubernetes/manifests/etcd.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/lib/minikube/certs/etcd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DirectoryOrCreate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">etcd-certs&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/lib/etcd-backup &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#原来是/var/lib/minikube/etcd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DirectoryOrCreate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">etcd-data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存后重启kubelet&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ systemctl restart kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查pod是否存在：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod sleep1d
Error from server &lt;span class="o">(&lt;/span>NotFound&lt;span class="o">)&lt;/span>: pods &lt;span class="s2">&amp;#34;sleep1d&amp;#34;&lt;/span> not found
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安全网络策略">安全：网络策略&lt;/h2>
&lt;blockquote>
&lt;p>发生了一起安全事件，入侵者能够从一个被黑的后端 Pod 访问整个集群。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>为了防止这种情况，在命名空间 &lt;code>project-snake&lt;/code> 中创建一个名为 &lt;code>np-backend&lt;/code> 的 &lt;code>NetworkPolicy&lt;/code>。它应该只允许 &lt;code>backend-*&lt;/code> Pods：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>连接到端口 &lt;code>1111&lt;/code> 上的 &lt;code>db1-*&lt;/code> Pod
连接到端口 &lt;code>2222&lt;/code> 上的 &lt;code>db2-*&lt;/code> Pod
在策略中使用 Pod 的应用程序标签。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>实施后，例如，端口 3333 上从 &lt;code>backend-*&lt;/code> Pod 到 &lt;code>vault-*&lt;/code> Pod 的连接应该不再有效。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-23">知识点&lt;/h3>
&lt;ul>
&lt;li>NetworkPolicy&lt;/li>
&lt;/ul>
&lt;p>参考文档：
&lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies">https://kubernetes.io/docs/concepts/services-networking/network-policies&lt;/a>&lt;/p>
&lt;h3 id="解题思路-23">解题思路&lt;/h3>
&lt;p>为 backend-* pod 设置 egress 的 NetworkPolicy，只允许其访问 db1-* 的 1111 端口和 db2-* 的 2222 端口，策略中使用 app label 来进行匹配。&lt;/p>
&lt;p>从 Kubernetes 官网文档中复制一段yaml配置进行修改。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NetworkPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">np-backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">project-snake&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policyTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Egress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">egress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1111&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db2 &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2222&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设 backend pod 的 app label 为 backend，db1 的 为 db1，db2 的为 db2。&lt;/p>
&lt;p>创建环境：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run backend --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>backend
$ kubectl run db1 --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>db1
$ kubectl run db2 --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>db2
$ kubectl run vault --image nginx --labels &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>vault
$ kubectl get pod -L app
NAME READY STATUS RESTARTS AGE APP
backend 1/1 Running &lt;span class="m">0&lt;/span> 13s backend
db1 1/1 Running &lt;span class="m">0&lt;/span> 66s db1
db2 1/1 Running &lt;span class="m">0&lt;/span> 71s db2
vault 1/1 Running &lt;span class="m">0&lt;/span> 79s vault
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于我们用的 nginx 镜像，将前面的 NetworkPolicy 端口修改一下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NetworkPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">np-backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">policyTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">Egress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">egress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">podSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">db2 &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查一下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get networkpolicy
NAME POD-SELECTOR AGE
np-backend &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>backend 31s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试下网络：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#获取pod ip&lt;/span>
$ kubectl get pod -o wide
NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES
backend 1/1 Running &lt;span class="m">0&lt;/span> 3m15s 172.17.0.7 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
db1 1/1 Running &lt;span class="m">0&lt;/span> 4m8s 172.17.0.6 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
db2 1/1 Running &lt;span class="m">0&lt;/span> 4m13s 172.17.0.3 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
vault 1/1 Running &lt;span class="m">0&lt;/span> 4m21s 172.17.0.4 cka &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="集群kubelet-启动方式">集群：kubelet 启动方式&lt;/h2>
&lt;blockquote>
&lt;p>节点 &lt;code>cluster2-worker1&lt;/code> 已使用 kubeadm 和 TLS 引导添加到集群中。
找到 &lt;code>cluster2-worker1&lt;/code> 的 “Issuer” 和 “Extended Key Usage” 值：
kubelet 客户端证书，用于向外连接到 kube-apiserver 的证书。
kubelet 服务器证书，用于来自 kube-apiserver 的传入连接。
将信息写入文件 &lt;code>/opt/course/23/certificate-info.txt&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="知识点-24">知识点&lt;/h2>
&lt;ul>
&lt;li>kubelet 的功能：连接 api-server；接受来自 api-server 的响应。两种情况都需要 TLS&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-24">解题思路&lt;/h3>
&lt;p>kubelet 连接 apiserver 的方式在配置文件中，先找出配置文件的保存位置。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># ssh 到节点上，查看 kubelet 的启动命令&lt;/span>
$ ps -ef &lt;span class="p">|&lt;/span> grep kubelet
root &lt;span class="m">3935&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 12:54 ? 00:00:23 /var/lib/minikube/binaries/v1.20.0/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --cni-conf-dir&lt;span class="o">=&lt;/span>/etc/cni/net.mk --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>cka-m02 --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --network-plugin&lt;span class="o">=&lt;/span>cni --node-ip&lt;span class="o">=&lt;/span>192.168.64.9
docker &lt;span class="m">13653&lt;/span> &lt;span class="m">13616&lt;/span> &lt;span class="m">0&lt;/span> 13:22 pts/0 00:00:00 grep kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#kubelet 连接 api server 的信息， client cert 的配置所在 /var/lib/kubelet/pki/kubelet-client-current.pem&lt;/span>
cat /var/lib/kubelet/config.yaml
&lt;span class="c1">#kubelet 的启动信息， servert cert 的配置所在 /var/lib/minikube/certs/ca.crt&lt;/span>
cat /etc/kubernetes/kubelet.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ openssl x509 -noout -text -in /var/lib/kubelet/pki/kubelet-client-current.pem &lt;span class="p">|&lt;/span> grep -i issuer
Issuer: &lt;span class="nv">CN&lt;/span> &lt;span class="o">=&lt;/span> minikubeCA
$ openssl x509 -noout -text -in /var/lib/kubelet/pki/kubelet-client-current.pem &lt;span class="p">|&lt;/span> grep -i -A1 extended
X509v3 Extended Key Usage:
TLS Web Client Authentication
$ openssl x509 -noout -text -in /var/lib/minikube/certs/ca.crt &lt;span class="p">|&lt;/span> grep -i issuer
Issuer: &lt;span class="nv">CN&lt;/span> &lt;span class="o">=&lt;/span> minikubeCA
$ openssl x509 -noout -text -in /var/lib/minikube/certs/ca.crt &lt;span class="p">|&lt;/span> grep -i -A1 extended
X509v3 Extended Key Usage:
TLS Web Client Authentication, TLS Web Server Authentication
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后记得将信息写入到 &lt;code>/opt/course/23/certificate-info.txt&lt;/code>&lt;/p>
&lt;h2 id="集群证书">集群：证书&lt;/h2>
&lt;blockquote>
&lt;p>检查 kube-apiserver 服务器证书在 &lt;code>cluster2-master1&lt;/code> 上的有效期。使用 openssl 或 cfssl 执行此操作。将到期日期写入 &lt;code>/opt/course/22/expiration&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>同时运行正确的 kubeadm 命令以列出到期日期并确认两种方法显示相同的日期。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将更新 apiserver 服务器证书的正确 kubeadm 命令写入 &lt;code>/opt/course/22/kubeadm-renew-certs.sh&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-25">知识点&lt;/h3>
&lt;ul>
&lt;li>api-server&lt;/li>
&lt;li>openssl&lt;/li>
&lt;li>kubeadm&lt;/li>
&lt;/ul>
&lt;p>参考文档：https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/#check-certificate-expiration&lt;/p>
&lt;h3 id="解题思路-25">解题思路&lt;/h3>
&lt;p>通过 kube-apiserver pod 的启动命令，或者 ssh 到 master 来查看命令参数，&lt;code>tls-cert-file=/var/lib/minikube/certs/apiserver.crt&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ openssl x509 -noout -text -in /var/lib/minikube/certs/apiserver.crt &lt;span class="p">|&lt;/span> grep -i valid -A2
Validity
Not Before: May &lt;span class="m">13&lt;/span> 22:33:43 &lt;span class="m">2021&lt;/span> GMT
Not After : May &lt;span class="m">14&lt;/span> 22:33:43 &lt;span class="m">2022&lt;/span> GMT
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 &lt;code>May 14 22:33:43 2022 GMT&lt;/code> 写入 &lt;code>/opt/course/22/expiration&lt;/code>&lt;/p>
&lt;p>通过 kubeadm 来检查&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubeadm certs check-expiration | grep -i apiserver
#macos 无法安装 kubeadm
#minikube 无法使用 kubeadm 检查
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 &lt;code>kubeadm certs renew apiserver&lt;/code> 写入 /opt/course/22/kubeadm-renew-certs.sh&lt;/p>
&lt;h2 id="集群升级节点">集群：升级节点&lt;/h2>
&lt;blockquote>
&lt;p>你的同事说节点 &lt;code>cluster3-worker2&lt;/code> 运行的是较旧的 Kubernetes 版本，甚至不属于集群的一部分。将 kubectl 和 kubeadm 更新为在 &lt;code>cluster3-master1&lt;/code> 上运行的确切版本。然后将此节点添加到集群中，您可以为此使用kubeadm。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-26">知识点&lt;/h3>
&lt;ul>
&lt;li>kubeadm 升级集群&lt;/li>
&lt;/ul>
&lt;p>参考文档：&lt;/p>
&lt;h3 id="解题思路-26">解题思路&lt;/h3>
&lt;p>检查node&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get nodes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查当前组件版本&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ssh cluster3-worker2
$ kubeadm version
$ kubectl version --short
Client Version: vx.xx.x
Server Version: vx.xx.x
$ kubelet --version
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#使用命令并升级各个组件，并重启 kubelet
#如果启动失败，一般是需要token连接到api-server，需要ssh到master上运行 kubeadm create token --print-join-command
#再ssh到 node上，执行打印的命令，重启kubelet并检查装填
#最后检查node是否成功加入集群
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-命令">Docker 命令&lt;/h2>
&lt;blockquote>
&lt;p>在命名空间 &lt;code>project-tiger&lt;/code> 中创建一个名为 &lt;code>Tigers-reunite&lt;/code> 的 Pod 镜像 &lt;code>httpd:2.4.41-alpine&lt;/code>，标签为 &lt;code>pod=container&lt;/code> 和 &lt;code>container=pod&lt;/code>。找出 Pod 被安排在哪个节点上。ssh 进入该节点并找到属于该 Pod 的 docker 容器。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>将容器的 docker ID 和这些正在运行的进程/命令写入 &lt;code>/opt/course/17/pod-container.txt&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最后，使用 docker 命令将主 Docker 容器（来自 yaml 中指定的那个）的日志写入 &lt;code>/opt/course/17/pod-container.log&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识点-27">知识点&lt;/h3>
&lt;ul>
&lt;li>docker 命令：ps、logs、inspect&lt;/li>
&lt;/ul>
&lt;h3 id="解题思路-27">解题思路&lt;/h3>
&lt;p>创建 pod&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl run tigers-reunite --image httpd:2.4.41-alpine --labels &lt;span class="nv">pod&lt;/span>&lt;span class="o">=&lt;/span>container,container&lt;span class="o">=&lt;/span>pod
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查 pod 的信息&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pods --show-labels
NAME READY STATUS RESTARTS AGE LABELS
tigers-reunite 1/1 Running &lt;span class="m">0&lt;/span> 34s &lt;span class="nv">container&lt;/span>&lt;span class="o">=&lt;/span>pod,pod&lt;span class="o">=&lt;/span>container
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取pod所在的节点&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod tigers-reunite -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.spec.nodeName}&amp;#39;&lt;/span>
cka
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ssh到节点上&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker ps &lt;span class="p">|&lt;/span> grep tigers-reunite
e6ff69b437bc 54b0995a6305 &lt;span class="s2">&amp;#34;httpd-foreground&amp;#34;&lt;/span> About a minute ago Up About a minute k8s_tigers-reunite_tigers-reunite_dev_53391212-911d-4275-a19d-e8f8b0f85a98_0
06d3ca65eb08 k8s.gcr.io/pause:3.2 &lt;span class="s2">&amp;#34;/pause&amp;#34;&lt;/span> About a minute ago Up About a minute k8s_POD_tigers-reunite_dev_53391212-911d-4275-a19d-e8f8b0f85a98_0
&lt;span class="c1">#使用docker inspect 或者 进入容器直接查看进程&lt;/span>
$ docker inspect e6ff69b437bc &lt;span class="p">|&lt;/span> grep -i &lt;span class="s1">&amp;#39;cmd\|entrypoint&amp;#39;&lt;/span> -A1
&lt;span class="s2">&amp;#34;Cmd&amp;#34;&lt;/span>: &lt;span class="o">[&lt;/span>
&lt;span class="s2">&amp;#34;httpd-foreground&amp;#34;&lt;/span>
--
&lt;span class="s2">&amp;#34;Entrypoint&amp;#34;&lt;/span>: null,
&lt;span class="s2">&amp;#34;OnBuild&amp;#34;&lt;/span>: null,
$ docker inspect 06d3ca65eb08 &lt;span class="p">|&lt;/span> grep -i &lt;span class="s1">&amp;#39;cmd\|entrypoint&amp;#39;&lt;/span> -A1
&lt;span class="s2">&amp;#34;Cmd&amp;#34;&lt;/span>: null,
&lt;span class="s2">&amp;#34;Image&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;k8s.gcr.io/pause:3.2&amp;#34;&lt;/span>,
--
&lt;span class="s2">&amp;#34;Entrypoint&amp;#34;&lt;/span>: &lt;span class="o">[&lt;/span>
&lt;span class="s2">&amp;#34;/pause&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果写入文件&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">e6ff69b437bc httpd-foreground
06d3ca65eb08 pause
&lt;/code>&lt;/pre>&lt;/div>&lt;p>写日志到文件&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="l">docker logs e6ff69b437bc &amp;gt; /opt/course/17/pod-container.log&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>可编程网关 Pipy 第三弹：事件模型设计</title><link>https://atbug.com/pipy-event-handling-design/</link><pubDate>Sun, 27 Jun 2021 09:38:18 +0800</pubDate><guid>https://atbug.com/pipy-event-handling-design/</guid><description>
&lt;p>自从参加了 &lt;a href="https://flomesh.cn/">Flomesh&lt;/a> 的 workshop，了解了可编程网关 &lt;a href="https://github.com/flomesh-io/pipy">Pipy&lt;/a>。对这个“小东西”充满了好奇，前后写了两篇文章，看了部分源码解开了其部分面纱。但始终未见其全貌，没有触及其核心设计。&lt;/p>
&lt;p>不是有句话，“好奇害死猫”。其实应该还有后半句，“满足了就没事”（见&lt;a href="https://zh.wikipedia.org/wiki/%E5%A5%BD%E5%A5%87%E5%AE%B3%E6%AD%BB%E7%8C%AB">维基百科&lt;/a>）。&lt;/p>
&lt;p>所有就有了今天的这一篇，对前两篇感兴趣的可以跳转翻看。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/l8JzYRn350fjuCAOoo8pcg">初探可编程网关 Pipy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/_IeRXp9EJnVsvDfg8tUr1A">可编程网关 Pipy 第二弹：编程实现 Metrics 及源码解读&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>言归正传。&lt;/p>
&lt;h2 id="事件模型">事件模型&lt;/h2>
&lt;p>上篇写了 Pipy 基于事件的信息流转，其实还未深入触及其核心的事件模型。既然是事件模型，先看事件。&lt;/p>
&lt;p>&lt;code>src/event.hpp:41&lt;/code> 中定义了 Pipy 的四种事件：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Data&lt;/code>&lt;/li>
&lt;li>&lt;code>MessageStart&lt;/code>&lt;/li>
&lt;li>&lt;code>MessageEnd&lt;/code>&lt;/li>
&lt;li>&lt;code>SessionEnd&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>翻看源码可知（必须吐槽文档太少）这几种事件其实是有顺序的：&lt;code>MessageStart&lt;/code> -&amp;gt; &lt;code>Data&lt;/code> -&amp;gt; &lt;code>MessageEnd&lt;/code> -&amp;gt; &lt;code>SessionEnd&lt;/code>。&lt;/p>
&lt;p>这种面向事件模型，必然有生产者和消费者。又是翻看源码可知，生产者和消费者都是 &lt;code>pipy::Filter&lt;/code>。我们在上篇文章中讲过：每个 &lt;code>Pipeline&lt;/code> 都有一个过滤器链，类似&lt;strong>单向链表的数据结构&lt;/strong>。&lt;/p>
&lt;p>那是不是按照上面说的，事件是从一个 &lt;code>Filter&lt;/code> 流向下一个 &lt;code>Filter&lt;/code>？也对，也不对。&lt;/p>
&lt;h2 id="矛盾">矛盾？&lt;/h2>
&lt;p>先看 &lt;code>Filter&lt;/code> 如何向下传递事件，&lt;code>src/session.cpp:55&lt;/code> 处，&lt;code>Filter&lt;/code> 持有 &lt;code>output&lt;/code> 变量，类似为 &lt;code>Event::Receiver&lt;/code>（参数为 &lt;code>Event&lt;/code> 的 &lt;code>std::function&lt;/code> 的别名，作为外行的笔者并不懂 c++，但不妨碍了解程序设计）。通过 &lt;code>Receiver&lt;/code> 调用下一个 &lt;code>Filter&lt;/code> 的 &lt;code>#process&lt;/code> 方法。&lt;/p>
&lt;p>这里的 &lt;code>Receiver&lt;/code> 就可以理解为事件发送的窗口，而 &lt;code>#process(Context *ctx, Event *inp)&lt;/code> 就是事件的接收窗口。&lt;/p>
&lt;p>这就是前面为什么说 “事件是从一个 &lt;code>Filter&lt;/code> 流向下一个 &lt;code>Filter&lt;/code>” 是正确的。&lt;/p>
&lt;p>为什么不对？首先，一个 &lt;code>Filter&lt;/code> 会产生多个事件，比如 &lt;code>decodeHttpRequest&lt;/code> 可能会产生 &lt;code>MessageStart&lt;/code>、&lt;code>Data&lt;/code> 和 &lt;code>MessageEnd&lt;/code> 事件，&lt;strong>并且每产生一个事件都会通过&lt;code>Receiver&lt;/code> 向下传递，不会等 &lt;code>#process&lt;/code> 流程结束才传递事件&lt;/strong>；再就是下一个 &lt;code>Filter&lt;/code> 可能并不会对某个事件感兴趣（下一个 &lt;code>Filter&lt;/code> 的 &lt;code>#process&lt;/code> 方法不做任何处理就返回了）。&lt;/p>
&lt;p>可能看下图会更容易理解（图中 &lt;code>no output&lt;/code> 表明事件不会向下传递）：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/27/20210627073856.png" alt="event-handling-flow">&lt;/p>
&lt;h2 id="最简单的示例">最简单的示例&lt;/h2>
&lt;p>在 &lt;code>test/001-echo/pipy.js&lt;/code> 提供了的示例：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">pipy&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6080&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">encodeHttpResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>发起请求&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ curl -X POST localhost:6080 -d &lt;span class="s1">&amp;#39;{}&amp;#39;&lt;/span>
&lt;span class="o">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>HTTP 消息体&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="err">#request
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="nf">POST&lt;/span> &lt;span class="nn">/&lt;/span> &lt;span class="kr">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span>
&lt;span class="n">Content-Type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">application/javascript&lt;/span>
&lt;span class="n">User-Agent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">PostmanRuntime/7.28.1&lt;/span>
&lt;span class="n">Accept&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">*/*&lt;/span>
&lt;span class="n">Postman-Token&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">fc84b575-7fea-487b-a55d-f6085bc62cf7&lt;/span>
&lt;span class="n">Host&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">localhost:6080&lt;/span>
&lt;span class="n">Accept-Encoding&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">gzip, deflate, br&lt;/span>
&lt;span class="n">Connection&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">keep-alive&lt;/span>
&lt;span class="n">Content-Length&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">2&lt;/span>
&lt;span class="err"> &lt;/span>
&lt;span class="p">{}&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="nx">response&lt;/span>
&lt;span class="nx">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mf">1.1&lt;/span> &lt;span class="mi">200&lt;/span> &lt;span class="nx">OK&lt;/span>
&lt;span class="nx">postman&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">token&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">fc84b575&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="nx">fea&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">487&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">a55d&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">f6085bc62cf7&lt;/span>
&lt;span class="nx">accept&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">encoding&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gzip&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">deflate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">br&lt;/span>
&lt;span class="nx">host&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">localhost&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">6080&lt;/span>
&lt;span class="nx">accept&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="err">/*&lt;/span>
&lt;span class="nx">user&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">agent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PostmanRuntime&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mf">7.28.1&lt;/span>
&lt;span class="nx">content&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">application&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">javascript&lt;/span>
&lt;span class="nx">Connection&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">keep&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">alive&lt;/span>
&lt;span class="nx">Content&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Length&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="p">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里我们以过滤器 &lt;code>decodeHttpRequest&lt;/code> 为例，官方的说明是 &lt;code>Deframes an HTTP request message&lt;/code>。前面提到它会产生 3 个事件，都是在 &lt;code>deframe&lt;/code> 的过程中发出的。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/27/20210627080912.png" alt="decodeHttpRequest">&lt;/p>
&lt;p>&lt;code>Session&lt;/code> 调用第一个 &lt;code>Filter&lt;/code> 时，传入的事件类型是 &lt;code>event::Data&lt;/code>。&lt;code>decodeHttpRequest&lt;/code> 关注该事件，并按照 HTTP 协议开始解析。&lt;/p>
&lt;p>在上图可以看到解析的不同阶段，会发出不同的事件。调用 &lt;code>Receiver&lt;/code> 传输事件，调用 &lt;code>encodeHttpResponse&lt;/code> 的 &lt;code>#process()&lt;/code> 方法。&lt;/p>
&lt;p>这里又会好奇，假如上面的示例中去掉两个过滤器中的任何一个，或者都去掉，能不能正常工作？&lt;/p>
&lt;p>答案是都不能！响应状态码都是 &lt;code>502 Bad Gateway&lt;/code>（curl/httpie）。&lt;/p>
&lt;h2 id="分析">分析&lt;/h2>
&lt;p>这里需要结合本文的第一张图 event-handling-flow。&lt;/p>
&lt;h3 id="去掉两个过滤器">去掉两个过滤器&lt;/h3>
&lt;p>假如两个都去掉了，HTTP Request 请求消息会被直接回传给客户端，协议错误。&lt;/p>
&lt;h3 id="去掉-decodehttprequest">去掉 decodeHttpRequest&lt;/h3>
&lt;p>前面提到 &lt;code>Session&lt;/code> 传给第一个 &lt;code>Filter&lt;/code> 的事件是 &lt;code>event::Data&lt;/code>。而 &lt;code>encodeHttpResponse&lt;/code> 针对该事件只会将其保存到 buffer 中。&lt;/p>
&lt;p>然后整个链路在此结束，没有回传任何数据。客户端会等待响应，超时退出（curl）。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/27/20210627084340.png" alt="2021-06-27-08-43-40">&lt;/p>
&lt;h3 id="去掉-encodehttpresponse">去掉 encodeHttpResponse&lt;/h3>
&lt;p>先说结果，与前面一样超时退出。&lt;/p>
&lt;p>为什么会这样，明明 &lt;code>decodeHttpRequest&lt;/code> 产生了 3 个时间，&lt;code>Session&lt;/code> 里的 &lt;code>Receiver&lt;/code> 也有收到，也确实写回了请求 body 里的 &lt;code>{}&lt;/code>。&lt;/p>
&lt;p>&lt;code>encodeHttpResponse&lt;/code> 过滤器有写回响应头，缺少了这些信息，响应就不并不是合法的 HTTP 协议，只是普通的 TCP 协议。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Pipy 基于事件模型的设计，提供了强大的灵活性。允许我们在“规则”中使用不同过滤器针对不同的事件，对请求和响应的信息进行处理。&lt;/p>
&lt;p>“规则” 就是业务逻辑的核心，而 Pipy 就是这逻辑的&lt;strong>执行引擎&lt;/strong>。&lt;/p>
&lt;p>最后，“好奇心是成长的驱动力，永远保持好奇心。”&lt;/p></description></item><item><title>常用的几款工具让 Kubernetes 集群上的工作更容易</title><link>https://atbug.com/tools-accelerate-work-on-kubernetes-cluster/</link><pubDate>Sat, 26 Jun 2021 12:16:28 +0800</pubDate><guid>https://atbug.com/tools-accelerate-work-on-kubernetes-cluster/</guid><description>
&lt;p>之前写过一篇 &lt;a href="https://mp.weixin.qq.com/s/CXJ1zUoktdI3c3CHVju0gA">介绍了工具加速云原生 Java 开发&lt;/a>。&lt;/p>
&lt;p>其实日常工作中在集群上的操作也非常多，今天就来介绍我所使用的工具。&lt;/p>
&lt;h2 id="kubectl-alias">kubectl-alias&lt;/h2>
&lt;p>使用频率最高的工具，我自己稍微修改了一下，加入了 &lt;code>StatefulSet&lt;/code> 的支持。&lt;/p>
&lt;p>这个是我的 &lt;a href="https://github.com/addozhang/kubectl-aliases">https://github.com/addozhang/kubectl-aliases&lt;/a>，基于 &lt;a href="https://github.com/ahmetb/kubectl-aliases">https://github.com/ahmetb/kubectl-aliases&lt;/a>。&lt;/p>
&lt;p>比如输出某个 pod 的 json，&lt;code>kgpoojson xxx&lt;/code> 等同于 &lt;code>kubectl get pod xxx -o json&lt;/code>。&lt;/p>
&lt;p>结合 &lt;a href="https://stedolan.github.io/jq/">jq&lt;/a> 使用效果更好 😂。&lt;/p>
&lt;h3 id="语法解读">语法解读&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;code>k&lt;/code>&lt;/strong>=&lt;code>kubectl&lt;/code>
&lt;ul>
&lt;li>&lt;strong>&lt;code>sys&lt;/code>&lt;/strong>=&lt;code>--namespace kube-system&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>commands:
&lt;ul>
&lt;li>&lt;strong>&lt;code>g&lt;/code>&lt;/strong>=&lt;code>get&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>d&lt;/code>&lt;/strong>=&lt;code>describe&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>rm&lt;/code>&lt;/strong>=&lt;code>delete&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>a&lt;/code>&lt;/strong>:&lt;code>apply -f&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>ak&lt;/code>&lt;/strong>:&lt;code>apply -k&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>k&lt;/code>&lt;/strong>:&lt;code>kustomize&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>ex&lt;/code>&lt;/strong>: &lt;code>exec -i -t&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>lo&lt;/code>&lt;/strong>: &lt;code>logs -f&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>resources:
&lt;ul>
&lt;li>&lt;strong>&lt;code>po&lt;/code>&lt;/strong>=pod, &lt;strong>&lt;code>dep&lt;/code>&lt;/strong>=&lt;code>deployment&lt;/code>, &lt;strong>&lt;code>ing&lt;/code>&lt;/strong>=&lt;code>ingress&lt;/code>, &lt;strong>&lt;code>svc&lt;/code>&lt;/strong>=&lt;code>service&lt;/code>, &lt;strong>&lt;code>cm&lt;/code>&lt;/strong>=&lt;code>configmap&lt;/code>, &lt;strong>&lt;code>sec&lt;/code>=&lt;code>secret&lt;/code>&lt;/strong>,&lt;strong>&lt;code>ns&lt;/code>&lt;/strong>=&lt;code>namespace&lt;/code>, &lt;strong>&lt;code>no&lt;/code>&lt;/strong>=&lt;code>node&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>flags:
&lt;ul>
&lt;li>output format: &lt;strong>&lt;code>oyaml&lt;/code>&lt;/strong>, &lt;strong>&lt;code>ojson&lt;/code>&lt;/strong>, &lt;strong>&lt;code>owide&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>all&lt;/code>&lt;/strong>: &lt;code>--all&lt;/code> or &lt;code>--all-namespaces&lt;/code> depending on the command&lt;/li>
&lt;li>&lt;strong>&lt;code>sl&lt;/code>&lt;/strong>: &lt;code>--show-labels&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>w&lt;/code>&lt;/strong>=&lt;code>-w/--watch&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>value flags (should be at the end):
&lt;ul>
&lt;li>&lt;strong>&lt;code>n&lt;/code>&lt;/strong>=&lt;code>-n/--namespace&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>f&lt;/code>&lt;/strong>=&lt;code>-f/--filename&lt;/code>&lt;/li>
&lt;li>&lt;strong>&lt;code>l&lt;/code>&lt;/strong>=&lt;code>-l/--selector&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="kubectx--kubens">kubectx + kubens&lt;/h2>
&lt;p>&lt;a href="https://github.com/ahmetb/kubectx#installation">安装看这里&lt;/a>&lt;/p>
&lt;p>&lt;code>kubectx&lt;/code> 用于在不同的集群间进行快速切换。假如用 &lt;code>kubectl&lt;/code>，你需要：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># context 列表&lt;/span>
kubectl config current-context
&lt;span class="c1"># 设置 context&lt;/span>
kubectl config use-context coffee
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/kubectxdemo.gif" alt="kubectx-demo">&lt;/p>
&lt;p>&lt;code>kubens&lt;/code> 就是在不同 namespace 间快速切换的工具。用 &lt;code>kubectl&lt;/code> 的话，需要：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># namespace 列表&lt;/span>
kbuectl get ns
&lt;span class="c1"># kubectl config set-context --current --namespace=kube-system&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/kubensdemo.gif" alt="kubens-demo">&lt;/p>
&lt;h2 id="k9s">k9s&lt;/h2>
&lt;p>没错，只比 k8s 多了个 1 😂。&lt;/p>
&lt;p>&lt;a href="https://github.com/derailed/k9s">k9s&lt;/a> 提供了终端 UI 与 Kubernetes 集群进行编辑交互。本人常用的比如：&lt;/p>
&lt;ul>
&lt;li>&lt;code>F&lt;/code> 配置端口转发&lt;/li>
&lt;li>&lt;code>l&lt;/code> 输出 pod 日志&lt;/li>
&lt;li>&lt;code>e&lt;/code> 修改资源对象&lt;/li>
&lt;li>&lt;code>s&lt;/code> pod 终端交互模式&lt;/li>
&lt;li>&lt;code>y&lt;/code> yaml 方式输出资源对象&lt;/li>
&lt;li>&lt;code>d&lt;/code> describe 资源对象&lt;/li>
&lt;li>&lt;code>ctrl+d&lt;/code> 删除 pod&lt;/li>
&lt;/ul>
&lt;p>启动方式&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 指定 namespace 运行&lt;/span>
k9s -n mycoolns
&lt;span class="c1"># 指定 context 运行&lt;/span>
k9s --context coolCtx
&lt;span class="c1"># 只读模式运行&lt;/span>
k9s --readonly
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/20210626102731.png" alt="k9s-pod">&lt;/p>
&lt;p>键入问号“?” 就可以打开快捷操作指引。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/20210626103012.png" alt="help">&lt;/p>
&lt;h2 id="stern">stern&lt;/h2>
&lt;p>&lt;a href="https://github.com/wercker/stern">stern&lt;/a> 可以用来 &lt;code>tail&lt;/code> 集群上的多个 pod 和 pod 中多个容器的日志。不同的 pod 和容器以不同的颜色区分，方便 debug。&lt;/p>
&lt;p>比如使用命令 &lt;code>stern -l tier=control-plane -n kube-system&lt;/code> 可以输出 &lt;code>kube-system&lt;/code> 命名空间下控制平面（&lt;code>label&lt;/code> 为 &lt;code>tier=control-plane&lt;/code>） pod 的日志。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/20210626104458.png" alt="stern-control-plane">&lt;/p>
&lt;p>命令行选项&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">Tail multiple pods and containers from Kubernetes
Usage:
stern pod-query &lt;span class="o">[&lt;/span>flags&lt;span class="o">]&lt;/span>
Flags:
-A, --all-namespaces If present, tail across all namespaces. A specific namespace is ignored even &lt;span class="k">if&lt;/span> specified with --namespace.
--color string Color output. Can be &lt;span class="s1">&amp;#39;always&amp;#39;&lt;/span>, &lt;span class="s1">&amp;#39;never&amp;#39;&lt;/span>, or &lt;span class="s1">&amp;#39;auto&amp;#39;&lt;/span> &lt;span class="o">(&lt;/span>default &lt;span class="s2">&amp;#34;auto&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
--completion string Outputs stern command-line completion code &lt;span class="k">for&lt;/span> the specified shell. Can be &lt;span class="s1">&amp;#39;bash&amp;#39;&lt;/span> or &lt;span class="s1">&amp;#39;zsh&amp;#39;&lt;/span>
-c, --container string Container name when multiple containers in pod &lt;span class="o">(&lt;/span>default &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
--container-state string If present, tail containers with status in running, waiting or terminated. Default to running. &lt;span class="o">(&lt;/span>default &lt;span class="s2">&amp;#34;running&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
--context string Kubernetes context to use. Default to current context configured in kubeconfig.
-e, --exclude strings Regex of log lines to exclude
-E, --exclude-container string Exclude a Container name
--field-selector string Selector &lt;span class="o">(&lt;/span>field query&lt;span class="o">)&lt;/span> to filter on. If present, default to &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> the pod-query.
-h, --help &lt;span class="nb">help&lt;/span> &lt;span class="k">for&lt;/span> stern
-i, --include strings Regex of log lines to include
--init-containers Include or exclude init containers &lt;span class="o">(&lt;/span>default &lt;span class="nb">true&lt;/span>&lt;span class="o">)&lt;/span>
--kubeconfig string Path to kubeconfig file to use
-n, --namespace strings Kubernetes namespace to use. Default to namespace configured in Kubernetes context. To specify multiple namespaces, repeat this or &lt;span class="nb">set&lt;/span> comma-separated value.
-o, --output string Specify predefined template. Currently support: &lt;span class="o">[&lt;/span>default, raw, json&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>default &lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
-l, --selector string Selector &lt;span class="o">(&lt;/span>label query&lt;span class="o">)&lt;/span> to filter on. If present, default to &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> the pod-query.
-s, --since duration Return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to 48h.
--tail int The number of lines from the end of the logs to show. Defaults to -1, showing all logs. &lt;span class="o">(&lt;/span>default -1&lt;span class="o">)&lt;/span>
--template string Template to use &lt;span class="k">for&lt;/span> log lines, leave empty to use --output flag
-t, --timestamps Print timestamps
--timezone string Set timestamps to specific timezone &lt;span class="o">(&lt;/span>default &lt;span class="s2">&amp;#34;Local&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
-v, --version Print the version and &lt;span class="nb">exit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="lens">Lens&lt;/h2>
&lt;p>&lt;a href="https://k8slens.dev/">Lens&lt;/a> 是用来控制 Kubernetes 的 IDE，开源且免费。&lt;/p>
&lt;p>消除了集群操作的复杂性、提供了实时的可观察性、方便故障排查、支持多系统的桌面客户端、兼容多种集群。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/20210626113853.png" alt="Lens">&lt;/p>
&lt;h2 id="infra-app">Infra App&lt;/h2>
&lt;p>&lt;a href="https://infra.app/">Infra App&lt;/a> 跟 Lens 差不多，UI 较 Lens 好些，但是功能就弱很多，类似 Lens 的只读模式。&lt;/p>
&lt;p>免费版比收费版的区别只在于支持的集群数量，免费版只支持一个集群。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/20210626114417.png" alt="Infra">&lt;/p>
&lt;h2 id="kubefwd">kubefwd&lt;/h2>
&lt;p>&lt;a href="https://github.com/txn2/kubefwd">kubefwd&lt;/a>，这个一直有安装但是使用次数寥寥，因为应用之间的访问没有走 service，不过偶尔做些实验的时候会用的上。&lt;/p>
&lt;blockquote>
&lt;p>kubefwd 是一个用于端口转发Kubernetes中指定namespace下的全部或者部分pod的命令行工具。 kubefwd 使用本地的环回IP地址转发需要访问的service，并且使用与service相同的端口。 kubefwd 会临时将service的域条目添加到 /etc/hosts 文件中。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>启动kubefwd后，在本地就能像在Kubernetes集群中一样使用service名字与端口访问对应的应用程序。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/kubefwdani.gif" alt="kubefwd_ani">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/26/16246803227515.jpg" alt="">&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>善用工具可以提升效率，但并不是不可或缺的。&lt;/p>
&lt;p>如果你有其他的工具，欢迎留言提出。&lt;/p></description></item><item><title>Jenkins 如何与 Kubernetes 集群的 Tekton Pipeline 交互？</title><link>https://atbug.com/jenkins-interact-with-tekton-pipelines-via-plugin/</link><pubDate>Wed, 23 Jun 2021 07:58:45 +0800</pubDate><guid>https://atbug.com/jenkins-interact-with-tekton-pipelines-via-plugin/</guid><description>
&lt;p>本文详细介绍了 Jenkins 如何通过 &lt;a href="https://github.com/jenkinsci/tekton-client-plugin">tekton-client-plugin&lt;/a> 实现与 Kubernetes 上的 Tekton Pipeline 交互，包括 Kubernetes 上安装 Jenkins、Tekton Pipelines 等。&lt;/p>
&lt;p>关于如何使用 Tekton Pipeline 实现 CICD 可以看这篇文章 &lt;a href="https://atbug.com/tekton-pipeline-practice/">云原生 CICD: Tekton Pipeline 实战&lt;/a>&lt;/p>
&lt;p>本文用于构建的项目以及所有 manifest yaml 都在可以在&lt;a href="https://github.com/addozhang/tekton-test">这里&lt;/a>下载。&lt;/p>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>惯例，先上总结。&lt;code>tekton-client-plugin&lt;/code> 虽然还是处于初期阶段，但是 &lt;em>其价值非常明显，尤其是对先用使用 Jenkins 作为 CICD 实现的用户来说。从 Jenkins 迁移到云原生的 Tekton 时，可以省掉用户界面的开发成本，而且尽可能少的改变用户习惯&lt;/em> ，依靠版本管理可以控制迁移的节奏。&lt;/p>
&lt;p>&lt;code>tekton-client-plugin&lt;/code> 在今年 5 月 7 日发布的 &lt;code>1.0.0&lt;/code> 版本，目前为 &lt;code>1.0.02&lt;/code>。目前还处于初期阶段，我个人感觉目前仅仅算是打通 Jenkins 与 Tekton 交互这条路，扩展性还不够好。&lt;/p>
&lt;p>比如目前仅仅支持如下几个参数注入到 &lt;code>PipelineRun&lt;/code> 中，难以支撑复杂的流程控制，&lt;a href="https://github.com/jenkinsci/tekton-client-plugin/blob/1.0.2/src/main/java/org/waveywaves/jenkins/plugins/tekton/client/build/create/CreateRaw.java#L292">支持的 Pipeline 参数 hardcode 在代码中&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>BUILD_ID - the build id/number of the Jenkins job&lt;/li>
&lt;li>JOB_NAME - the name of the jenkins job that triggered this pipeline&lt;/li>
&lt;li>PULL_BASE_REF - name of the base branch&lt;/li>
&lt;li>PULL_PULL_SHA - the commit sha of the pull request or branch&lt;/li>
&lt;li>REPO_NAME - name of the repository&lt;/li>
&lt;li>REPO_OWNER - owner of the repository&lt;/li>
&lt;li>REPO_URL - the URL of the repository&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>希望后面会支持自定义参数，比如将更多的项目元数据信息注册到 &lt;code>Pipeline&lt;/code> 中。&lt;/p>
&lt;p>值得一提的是，&lt;code>tekton-client-plugin&lt;/code> 提供了对 Job DSL 的支持，本文后面没有用这种方式，而是用的 FreeStyle Project。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">pipeline {
agent any
stages {
stage(&amp;#39;Stage&amp;#39;) {
steps {
checkout scm
tektonCreateRaw(inputType: &amp;#39;FILE&amp;#39;, input: &amp;#39;.tekton/pipeline.yaml&amp;#39;)
}
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="前置条件">前置条件&lt;/h2>
&lt;h3 id="环境">环境&lt;/h3>
&lt;ul>
&lt;li>Kubernetes：推荐 minikube&lt;/li>
&lt;li>Jenkins：建议在 Kubernetes 上安装&lt;/li>
&lt;li>Tekton&lt;/li>
&lt;li>用于构建的项目&lt;/li>
&lt;/ul>
&lt;h3 id="工具">工具&lt;/h3>
&lt;ul>
&lt;li>kubectl&lt;/li>
&lt;li>tektoncd-cli&lt;/li>
&lt;li>&lt;a href="https://github.com/ahmetb/kubectx">kubectx、kubens&lt;/a>&lt;/li>
&lt;li>helm&lt;/li>
&lt;/ul>
&lt;h2 id="kubernetes-上安装-jenkinshelm">Kubernetes 上安装 Jenkins（Helm）&lt;/h2>
&lt;p>Jenkins 这里使用 Helm 安装到 Kubernetes 上。&lt;/p>
&lt;p>初始化命名空间、持久化卷、ServiceAccount 等。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create namespace jenkins
kubens jenkins
&lt;span class="c1"># 持久化存储，笔者将容量修改为 5G&lt;/span>
http https://raw.githubusercontent.com/jenkins-infra/jenkins.io/master/content/doc/tutorials/kubernetes/installing-jenkins-on-kubernetes/jenkins-volume.yaml --body &amp;gt; jenkins-volume.yaml
&lt;span class="c1"># 创建 PV&lt;/span>
kubectl apply -f jenkins-volume.yaml
&lt;span class="c1"># 创建 service account&lt;/span>
kubectl apply -f https://raw.githubusercontent.com/jenkins-infra/jenkins.io/master/content/doc/tutorials/kubernetes/installing-jenkins-on-kubernetes/jenkins-sa.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="准备-helm-环境并添加-jenkins-chartrepo">准备 helm 环境并添加 Jenkins ChartRepo&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># homebrew 安装 helm&lt;/span>
brew install helm
&lt;span class="c1"># 添加 jenkins chart repo&lt;/span>
helm repo add jenkinsci https://charts.jenkins.io
helm repo update
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置-jenkins-chart">配置 Jenkins Chart&lt;/h3>
&lt;ol>
&lt;li>下载官方的 values yaml进行修改：&lt;code>http https://raw.githubusercontent.com/jenkinsci/helm-charts/main/charts/jenkins/values.yaml &amp;gt; jenkins-values.yaml&lt;/code>&lt;/li>
&lt;li>修改 &lt;code>serviceType&lt;/code> 为 &lt;code>NodePort&lt;/code>，并增加 &lt;code>nodePort: 32000&lt;/code>。用于从 minikube 外访问 Jenkins&lt;/li>
&lt;li>修改 &lt;code>storageClass&lt;/code> 为 &lt;code>jenkins-pv&lt;/code>。前面创建 PV 的时候使用了 &lt;code>jenkins-pv&lt;/code> 作为 &lt;a href="https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/">Dynamic Volume Provisioning&lt;/a> 的 &lt;code>storageClass&lt;/code>&lt;/li>
&lt;li>修改 &lt;code>serviceAccount&lt;/code> 部分，将 &lt;code>create&lt;/code> 设置为 &lt;code>false&lt;/code>（上面已经创建了 &lt;code>serviceAccount&lt;/code>），同时将 &lt;code>name&lt;/code> 指定为前面的 sa 名字 &lt;code>jenkins&lt;/code>&lt;/li>
&lt;li>&lt;code>installPlugins&lt;/code> 下增加 &lt;code>tekton-client:1.0.2&lt;/code>&lt;/li>
&lt;li>修改 &lt;code>adminPassword&lt;/code> 为 &lt;code>admin&lt;/code>。指定初始密码（不指定也可以通过安装输出的说明获取初始密码）&lt;/li>
&lt;li>修改 &lt;code>persistence&lt;/code> 的 &lt;code>size&lt;/code> 为 &lt;code>5Gi&lt;/code> （我的 minikube 的虚拟机只有 20Gi 大小）&lt;/li>
&lt;/ol>
&lt;p>修改后的文件在&lt;a href="https://github.com/addozhang/tekton-test/blob/main/tekton-client-sample/jenkins-values.yaml">这里 jenkins-values.yaml&lt;/a>。&lt;/p>
&lt;h3 id="执行安装">执行安装&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">chart&lt;/span>&lt;span class="o">=&lt;/span>jenkinsci/jenkins
helm install jenkins -n jenkins -f jenkins-values.yaml &lt;span class="nv">$chart&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">NAME: jenkins
LAST DEPLOYED: Sun Jun 20 22:05:53 2021
NAMESPACE: jenkins
STATUS: deployed
REVISION: 1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 Jenkins 的访问地址 &lt;code>echo $(minikube ip):$(kubectl get svc jenkins -o jsonpath=&amp;quot;{.spec.ports[0].nodePort}&amp;quot;)&lt;/code>，然后使用前面设置的账号登录。&lt;/p>
&lt;h2 id="tekton-安装">Tekton 安装&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create ns tekton-pipelines
kubens tekton-pipelines
kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-cli">安装 CLI&lt;/h3>
&lt;p>&lt;code>brew install tektoncd-cli&lt;/code>&lt;/p>
&lt;h3 id="rbac">RBAC&lt;/h3>
&lt;p>Tekton Pipeline 安装完成后，需要给前面创建的 ServiceAccount &lt;code>jenkins&lt;/code> 增加 tekon 资源的操作权限。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="l">//tekton-role.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Role&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-role&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">apiGroups&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">pods&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">pods/log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">verbs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">get&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">list&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">watch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">apiGroups&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">tekton.dev&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">tasks&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">taskruns&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">pipelineruns&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">verbs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">create&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">delete&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">deletecollection&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">get&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">list&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">patch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">update&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">watch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">RoleBinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-role-binding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">roleRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Role&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-role&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">subjects&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ServiceAccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jenkins&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jenkins&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="jenkins-与-tekton-交互">Jenkins 与 Tekton 交互&lt;/h2>
&lt;p>前面大篇幅的都只是准备工作，Jenkins 安装时我们已经添加了 &lt;code>tekton-client-plugin&lt;/code> 插件。&lt;/p>
&lt;p>添加一个名为 &lt;code>tekton-client-sample&lt;/code> 的 &lt;code>FreeStyle project&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/22/20210622-151450.png" alt="创建作业">&lt;/p>
&lt;p>SCM 这里填入用于构建的项目仓库地址以及分支。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/22/20210622-151523.png" alt="配置代码仓库">&lt;/p>
&lt;p>Build 模块中选择 &lt;code>Tekton: Create Resource (RAW)&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/22/20210622-151544.png" alt="增加 Tekton step">&lt;/p>
&lt;p>这里选择 &lt;code>FILE&lt;/code> 类型，因为我已经将 &lt;code>PipelineRun&lt;/code> 的 yaml 放进了代码仓库中了。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/22/20210622151734.png" alt="配置 Resource">&lt;/p>
&lt;p>执行一次构建&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/22/20210622153535.png" alt="构建结束">&lt;/p>
&lt;p>检查下应用&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ kubectl get pod &lt;span class="p">|&lt;/span> grep tekton-test
tekton-test-75975dcc88-xkzb6 1/1 Running &lt;span class="m">0&lt;/span> 3m13s
tekton-test-c26lw-deploy-to-k8s-28trp-pod-w8tgc 0/1 Completed &lt;span class="m">0&lt;/span> 3m18s
tekton-test-c26lw-fetch-from-git-pv66g-pod-nm5qh 0/1 Completed &lt;span class="m">0&lt;/span> 6m30s
tekton-test-c26lw-source-to-image-k8mpg-pod-qh7g4 0/2 Completed &lt;span class="m">0&lt;/span> 6m15s
$ curl &lt;span class="k">$(&lt;/span>minikube ip&lt;span class="k">)&lt;/span>:&lt;span class="k">$(&lt;/span>kubectl get svc tekton-test -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{.spec.ports[0].nodePort}&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>/hi
hello world
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.jenkins.io/doc/book/installing/kubernetes/">Jenkins on Kubernetes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jenkinsci/tekton-client-plugin/blob/master/docs/tutorial.md">Tekton Client Plugin Tutorial&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jenkins.io/blog/2021/04/21/tekton-plugin/#easily-reuse-tekton-and-jenkins-x-from-jenkins">Easily reuse Tekton and Jenkins X from Jenkins&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>云原生 CICD: Tekton Pipeline 实战</title><link>https://atbug.com/tekton-pipeline-practice/</link><pubDate>Tue, 22 Jun 2021 07:19:33 +0800</pubDate><guid>https://atbug.com/tekton-pipeline-practice/</guid><description>
&lt;p>更新历史：&lt;/p>
&lt;ul>
&lt;li>v1：2020.1.21 基于 Tekton Pipline &lt;a href="https://github.com/tektoncd/pipeline/tree/v0.9.0/docs#tekton-pipelines">v0.9.0&lt;/a>&lt;/li>
&lt;li>v2（当前）：2021.6.22 基于 Tekton Pipeline &lt;a href="https://github.com/tektoncd/pipeline/tree/v0.25.0/docs#tekton-pipelines">v0.25.0&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>Tekton 是 Google 开源的 Kubernetes 原生CI/CD 系统, 功能强大扩展性强. 前身是 Knavite 里的 build-pipeline 项目, 后期孵化成&lt;a href="https://github.com/tektoncd/pipeline">独立的项目&lt;/a>. 并成为 &lt;a href="https://cd.foundation/projects/">CDF&lt;/a> 下的四个项目之一, 其他三个分别是 Jenkins, Jenkins X, Spinnaker.&lt;/p>
&lt;p>为什么说 Tekton 是 Kubernetes 原生的, 以内其基于 Kubernetes 的 CRD 定义了 Pipeline 流水线.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/uPic/bquuTV.jpg" alt="">&lt;/p>
&lt;p>CRD 及说明:&lt;/p>
&lt;ul>
&lt;li>Task: 构建任务, 可以定义一些列的 steps. 每个 step 由一个 container 执行.&lt;/li>
&lt;li>TaskRun: task 实际的执行, 并提供执行所需的参数. 这个对象创建后, 就会有 pod 被创建.&lt;/li>
&lt;li>Pipeline: 定义一个或者多个 task 的执行, 以及 PipelineResource 和各种定义参数的集合&lt;/li>
&lt;li>PipelineRun: 类似 task 和 taskrun 的关系: 一个定义一个执行. PipelineRun 则是 pipeline 的实际执行. 创建后也会创建 pod 来执行各个 task.&lt;/li>
&lt;li>&lt;del>PipelineResource: 流水线的输入资源, 比如 github/gitlab 的源码, 某种存储服务的文件, 或者镜像等. 执行时, 也会作为 pod 的其中一个 container 来运行(比如拉取代码).&lt;/del> PipelineResource 目前处于 Alaha，至于原因可以看&lt;a href="https://github.com/tektoncd/pipeline/blob/v0.25.0/docs/resources.md#why-arent-pipelineresources-in-beta">Why Aren&amp;rsquo;t PipelineResources in Beta?&lt;/a>&lt;/li>
&lt;li>Condition: 在 pipeline 的 task 执行时通过添加 condition 来对条件进行评估, 进而判断是否执行 task. 目前是WIP的状态, 待&lt;a href="https://github.com/tektoncd/pipeline/issues/1137">#1137&lt;/a>的完成.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>组件:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>tekton-pipelines-controller&lt;/code>: 监控 CRD 对象(TaskRun, PipelineRun)的创建, 为该次执行创建 pod.&lt;/li>
&lt;li>&lt;code>tekton-pipelines-webhook&lt;/code>: 对 apiserver 提供 http 接口做 CRD 对象的校验.&lt;/li>
&lt;/ul>
&lt;h2 id="前置条件">前置条件&lt;/h2>
&lt;p>文中使用的一些工具，基本都可以通过 homebrew 安装：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stedolan.github.io/jq/">jq&lt;/a> ：操作 json 的命令行工具&lt;/li>
&lt;li>&lt;a href="https://httpie.io/">httpie&lt;/a>：HTTP 客户端命令行工具&lt;/li>
&lt;li>&lt;a href="https://minikube.sigs.k8s.io/docs/start/">minikube 环境&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>文中的 Java 项目以及 tekton 的相关 yaml 都已经提交到了 &lt;a href="https://github.com/addozhang/tekton-test">tekton-test&lt;/a>.&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>参考&lt;a href="https://atbug.com/tekton-installation-and-sample/">上一篇文章&lt;/a>, 文章中有个简单的&amp;quot;hello world&amp;quot;.&lt;/p>
&lt;h2 id="实践">实践&lt;/h2>
&lt;p>到了这里相信已经安装好了 Tekton. 我们使用&lt;a href="https://start.spring.io/">Spring Initializer&lt;/a>生成的项目为例, 演示如何使用 Tekton 实现 CICD.&lt;/p>
&lt;p>开始之前简单整理下这个项目的 CICD 流程:&lt;/p>
&lt;ol>
&lt;li>拉取代码&lt;/li>
&lt;li>maven 打包&lt;/li>
&lt;li>构建镜像并推送&lt;/li>
&lt;li>部署&lt;/li>
&lt;/ol>
&lt;p>&lt;em>注: 所有的操作都是在 &lt;code>tekton-pipelines&lt;/code> namespace 下操作&lt;/em>&lt;/p>
&lt;h3 id="0x00-添加-dockerfile-和部署用的-yaml">0x00 添加 Dockerfile 和部署用的 yaml&lt;/h3>
&lt;p>用于构建镜像的Dockerfile&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">FROM openjdk:8-jdk-alpine
RUN mkdir /app
WORKDIR /app
COPY target/*.jar /app/app.jar
ENTRYPOINT [&amp;#34;sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;java -Xmx128m -Xms64m -jar app.jar&amp;#34;]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>用于部署 K8s Deployment 的 deployment.yml，同时通过创建 &lt;code>NodePort&lt;/code> 类型的 Service 用于访问应用。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;apps/v1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Deployment&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addozhang/tekton-test:latest&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Always&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/info&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">60&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;tekton-test&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;TCP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/info&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NodePort &lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x01-rbac">0x01 RBAC&lt;/h3>
&lt;p>创建 ServiceAccount 用于 Pipeline 的运行。&lt;/p>
&lt;p>&lt;strong>注：这里为了方便，授予了 &lt;code>ClusterRole&lt;/code> &lt;code>admin&lt;/code>。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># serviceaccount.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ServiceAccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRoleBinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipeline-admin-binding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">roleRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRole&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">admin&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># user cluster role admin&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">subjects&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ServiceAccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x02-拉取代码">0x02 拉取代码&lt;/h3>
&lt;p>代码作为构建的输入, 需要提供一个 Pipeline CRD 对象来表示输入是从 git 仓库来获取代码。&lt;/p>
&lt;p>访问 Tekton Hub 可以找到现成的 &lt;a href="https://hub.tekton.dev/tekton/task/git-clone">git-clone task&lt;/a>。&lt;/p>
&lt;p>使用 kubectl 安装：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/main/task/git-clone/0.4/git-clone.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者使用 tekton-cli 安装：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">tkn hub install task git-clone
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x03-maven-打包">0x03 maven 打包&lt;/h3>
&lt;p>Task &lt;code>source-to-image.yaml&lt;/code>的 step &lt;code>maven&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven:3.5.0-jdk-8-alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workingDir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(workspaces.source.path)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">mvn&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">clean&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">install&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">DskipTests&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/root/.m2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/home/docker/.m2 &lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>说明:&lt;/strong>&lt;/p>
&lt;p>有了代码下一步就是执行 maven 的编译打包, 在&lt;code>maven:3.5.0-jdk-8-alpine&lt;/code>镜像中执行&lt;code>mvn&lt;/code>的相关命令.&lt;/p>
&lt;p>这里挂在了一个本地的volume, 避免每次构建重复下载依赖包, 同时里面还有&lt;code> settings.xml&lt;/code>&lt;/p>
&lt;p>&lt;em>注意: 对于 minikube, hostPath 请使用/data/.m2, 否则minikube重启后无法持久化&lt;/em>&lt;/p>
&lt;h3 id="0x04-构建镜像并推送">0x04 构建镜像并推送&lt;/h3>
&lt;p>Task &lt;code>source-to-image.yaml&lt;/code> 的 step &lt;code>build-and-push&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">spec:
params:
- name: pathToDockerFile
description: The path to the dockerfile to build (relative to the context)
default: Dockerfile
- name: imageUrl
description: Url of image repository
- name: imageTag
description: Tag to apply to the built image
default: latest
workspaces:
- name: source
- name: dockerconfig
mountPath: /kaniko/.docker # config.json 的挂载目录
steps:
- name: build-and-push
image: gcr.io/kaniko-project/executor:v1.6.0-debug
command:
- /kaniko/executor
args:
- --dockerfile=$(params.pathToDockerFile)
- --destination=$(params.imageUrl):$(params.imageTag)
- --context=$(workspaces.source.path)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>说明:&lt;/strong>&lt;/p>
&lt;p>镜像的构建, 我们采用了 kaniko。&lt;/p>
&lt;p>镜像仓库我们选择了Docker Hub, 推送的时候需要使用 credentials。&lt;/p>
&lt;p>kaniko 需要将 docker config 的文件存在于 &lt;code>/kanika/.docker&lt;/code> 目录下。这里的思路是将 docker 的 &lt;code>config.json&lt;/code>，以 &lt;code>secret&lt;/code> 的方式持久化，在通过先添加&lt;code> docker-registry&lt;/code>类型的 &lt;code>secret&lt;/code>，然后通过 &lt;code>workspace&lt;/code> 的方式输入到 kaniko 运行环境中。&lt;/p>
&lt;p>&lt;code>config.json&lt;/code> 里面保存的 json 结构化的数据，为了方便通过 dry run 创建&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create secret docker-registry dockerhub --docker-server&lt;span class="o">=&lt;/span>https://index.docker.io/v1/ --docker-username&lt;span class="o">=[&lt;/span>USERNAME&lt;span class="o">]&lt;/span> --docker-password&lt;span class="o">=[&lt;/span>PASSWORD&lt;span class="o">]&lt;/span> --dry-run&lt;span class="o">=&lt;/span>client -o json &lt;span class="p">|&lt;/span> jq -r &lt;span class="s1">&amp;#39;.data.&amp;#34;.dockerconfigjson&amp;#34;&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> base64 -d &amp;gt; /tmp/config.json &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> kubectl create secret generic docker-config --from-file&lt;span class="o">=&lt;/span>/tmp/config.json &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm -f /tmp/config.json
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>执行:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f tasks/source-to-image.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x05-部署">0x05 部署&lt;/h3>
&lt;p>deploy-to-k8s.yaml:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-to-k8s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">inputs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pathToYamlFile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The path to the yaml file to deploy within the git source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deployment.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">run-kubectl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">lachlanevenson/k8s-kubectl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;kubectl&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;apply&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;-f&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/workspace/git-source/$(inputs.params.pathToYamlFile)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>说明:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>pathToYamlFile: 指定部署应用的 yaml。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>执行:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f tasks/deploy-to-k8s.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x06-组装流水线">0x06 组装流水线&lt;/h3>
&lt;p>&lt;code>build-pipeline.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build-pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pathToContext&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The path to the build context, used by Kaniko - within the workspace&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageUrl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Url of image repository&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageTag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Tag to apply to the built image&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tasks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">fetch-from-git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-clone&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(params.git-url)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(params.git-revision)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">output&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source-to-image&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source-to-image&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageUrl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(params.imageUrl)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageTag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(params.imageTag)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dockerconfig&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runAfter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">fetch-from-git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-to-k8s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy-to-k8s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pathToYamlFile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deployment.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runAfter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">source-to-image&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>执行:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f tasks/deploy-to-k8s.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x07-执行流水线">0x07 执行流水线&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PipelineRun&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">generateName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">generic-pr-&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">generic-pipeline-run&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pipelineRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build-pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">main&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.com/addozhang/tekton-test.git &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageUrl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">addozhang/tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageTag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeClaimTemplate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccountName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-build&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>执行:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f run/run.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="0x08-结果">0x08 结果&lt;/h3>
&lt;p>执行流水线后, 可以看到分别创建了下面的几个 pod:&lt;/p>
&lt;ul>
&lt;li>generic-pipeline-run-deploy-to-k8s-xxx&lt;/li>
&lt;li>generic-pipeline-run-fetch-from-git-xxx&lt;/li>
&lt;li>generic-pipeline-run-source-to-image-xxx&lt;/li>
&lt;/ul>
&lt;p>以及我们的应用 &lt;code>tekton-test-xxx&lt;/code>，发起请求测试：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http &lt;span class="k">$(&lt;/span>minikube ip&lt;span class="k">)&lt;/span>:&lt;span class="k">$(&lt;/span>kubectl get svc tekton-test -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{.spec.ports[0].nodePort}&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>/hi --body
hello world
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>目前 Tekton 进入 beta 阶段, 最新的版本是 &lt;code>0.25.0&lt;/code>。基于 CRD 的实现让 Tekton 在实际使用中可以灵活的设计自己的 CICD 流程.&lt;/p>
&lt;p>生态也越来越完善，比如 &lt;a href="https://hub.tekton.dev/">Tekton Hub&lt;/a> 提供了大量的可重用最佳实现的 Task 和 Pipeline。&lt;/p>
&lt;p>下一篇，我们尝试下如何在 Jenkins 中与 Tekton Pipeline 进行交互。&lt;/p>
&lt;p>更多文章:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/_hK6bqODJv3LrwnQaou-hA">Tekton 的工作原理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://atbug.com/tekton-dashboard-installation/">Tekton Dashboard 安装&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://atbug.com/tekton-trigger-glance/">Tekton Trigger 介绍&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://atbug.com/tekton-trigger-practice/">Tekton Trigger 实战&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>源码解析：一文读懂 Kubelet</title><link>https://atbug.com/kubelet-source-code-analysis/</link><pubDate>Tue, 15 Jun 2021 08:25:25 +0800</pubDate><guid>https://atbug.com/kubelet-source-code-analysis/</guid><description>
&lt;p>本文主要介绍 kubelet 功能、核心组件，以及启动流程的源码分析，总结了 kubelet 的工作原理。&lt;/p>
&lt;h2 id="kubelet-简介">kubelet 简介&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/15/20210613091144.png" alt="Kubernetes 的架构图">&lt;/p>
&lt;p>从官方的架构图中很容易就能找到 &lt;code>kubelet&lt;/code>&lt;/p>
&lt;p>执行 &lt;code>kubelet -h&lt;/code> 看到 kubelet 的功能介绍：&lt;/p>
&lt;ul>
&lt;li>kubelet 是每个 Node 节点上都运行的主要“节点代理”。使用如下的一个向 apiserver 注册 Node 节点：主机的 &lt;code>hostname&lt;/code>；覆盖 &lt;code>host&lt;/code> 的参数；或者云提供商指定的逻辑。&lt;/li>
&lt;li>kubelet 基于 &lt;code>PodSpec&lt;/code> 工作。&lt;code>PodSpec&lt;/code> 是用 &lt;code>YAML&lt;/code> 或者 &lt;code>JSON&lt;/code> 对象来描述 Pod。Kubelet 接受通过各种机制（主要是 apiserver）提供的一组 &lt;code>PodSpec&lt;/code>，并确保里面描述的容器良好运行。&lt;/li>
&lt;/ul>
&lt;p>除了由 apiserver 提供 &lt;code>PodSpec&lt;/code>，还可以通过以下方式提供：&lt;/p>
&lt;ul>
&lt;li>文件&lt;/li>
&lt;li>HTTP 端点&lt;/li>
&lt;li>HTTP 服务器&lt;/li>
&lt;/ul>
&lt;p>kubelet 功能归纳一下就是上报 Node 节点信息，和管理（创建、销毁）Pod。 功能看似简单，实际不然。每一个点拿出来都需要很大的篇幅来讲，比如 Node 节点的计算资源，除了传统的 CPU、内存、硬盘，还提供扩展来支持类似 GPU 等资源；Pod 不仅仅有容器，还有相关的网络、安全策略等。&lt;/p>
&lt;h2 id="kubelet-架构">kubelet 架构&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/15/20210614215508.png" alt="2021-06-14-21-55-08">&lt;/p>
&lt;h3 id="重要组件">重要组件&lt;/h3>
&lt;p>kubelet 的架构由 N 多的组件组成，下面简单介绍下比较重要的几个：&lt;/p>
&lt;h4 id="pleg">PLEG&lt;/h4>
&lt;p>即 &lt;strong>Pod Lifecycle Event Generator&lt;/strong>，字面意思 Pod 生命周期事件（&lt;code>ContainerStarted&lt;/code>、&lt;code>ContainerDied&lt;/code>、&lt;code>ContainerRemoved&lt;/code>、&lt;code>ContainerChanged&lt;/code>）生成器。&lt;/p>
&lt;p>其维护着 Pod 缓存；定期通过 &lt;code>ContainerRuntime&lt;/code> 获取 Pod 的信息，与缓存中的信息比较，生成如上的事件；将事件写入其维护的通道（channel）中。&lt;/p>
&lt;h4 id="podworkers">PodWorkers&lt;/h4>
&lt;p>处理事件中 Pod 的同步。核心方法 &lt;code>managePodLoop()&lt;/code> 间接调用 &lt;code>kubelet.syncPod()&lt;/code> 完成 Pod 的同步：&lt;/p>
&lt;ul>
&lt;li>如果 Pod 正在被创建，记录其延迟&lt;/li>
&lt;li>生成 Pod 的 API Status，即 &lt;code>v1.PodStatus&lt;/code>：从运行时的 status 转换成 api status&lt;/li>
&lt;li>记录 Pod 从 &lt;code>pending&lt;/code> 到 &lt;code>running&lt;/code> 的耗时&lt;/li>
&lt;li>在 &lt;code>StatusManager&lt;/code> 中更新 pod 的状态&lt;/li>
&lt;li>杀掉不应该运行的 Pod&lt;/li>
&lt;li>如果网络插件未就绪，只启动使用了主机网络（host network）的 Pod&lt;/li>
&lt;li>如果 static pod 不存在，为其创建镜像（Mirror）Pod&lt;/li>
&lt;li>为 Pod 创建文件系统目录：Pod 目录、卷目录、插件目录&lt;/li>
&lt;li>使用 &lt;code>VolumeManager&lt;/code> 为 Pod 挂载卷&lt;/li>
&lt;li>获取 image pull secrets&lt;/li>
&lt;li>调用容器运行时（container runtime）的 &lt;code>#SyncPod()&lt;/code> 方法&lt;/li>
&lt;/ul>
&lt;h4 id="podmanager">PodManager&lt;/h4>
&lt;p>存储 Pod 的期望状态，kubelet 服务的不同渠道的 Pod&lt;/p>
&lt;h4 id="statsprovider">StatsProvider&lt;/h4>
&lt;p>提供节点和容器的统计信息，有 &lt;code>cAdvisor&lt;/code> 和 &lt;code>CRI&lt;/code> 两种实现。&lt;/p>
&lt;h4 id="containerruntime">ContainerRuntime&lt;/h4>
&lt;p>顾名思义，容器运行时。与遵循 CRI 规范的高级容器运行时进行交互。&lt;/p>
&lt;h4 id="depspodconfig">Deps.PodConfig&lt;/h4>
&lt;p>PodConfig 是一个配置多路复用器，它将许多 Pod 配置源合并成一个单一的一致结构，然后按顺序向监听器传递增量变更通知。&lt;/p>
&lt;p>配置源有：文件、apiserver、HTTP&lt;/p>
&lt;h4 id="syncloop">&lt;code>#syncLoop&lt;/code>&lt;/h4>
&lt;p>接收来自 &lt;code>PodConfig&lt;/code> 的 Pod 变更通知、定时任务、&lt;code>PLEG&lt;/code> 的事件，以及 &lt;code>ProbeManager&lt;/code> 的事件，将 Pod 同步到&lt;strong>期望状态&lt;/strong>。&lt;/p>
&lt;h4 id="podadmithandlers">PodAdmitHandlers&lt;/h4>
&lt;p>Pod admission 过程中调用的一系列处理器，比如 eviction handler（节点内存有压力时，不会驱逐 QoS 设置为 &lt;code>BestEffort&lt;/code> 的 Pod）、shutdown admit handler（当节点关闭时，不处理 pod 的同步操作）等。&lt;/p>
&lt;h4 id="oomwatcher">OOMWatcher&lt;/h4>
&lt;p>从系统日志中获取容器的 OOM 日志，将其封装成事件并记录。&lt;/p>
&lt;h4 id="volumemanger">VolumeManger&lt;/h4>
&lt;p>VolumeManager 运行一组异步循环，根据在此节点上调度的 pod 确定需要附加/挂载/卸载/分离哪些卷并执行操作。&lt;/p>
&lt;h4 id="certificatemanager">CertificateManager&lt;/h4>
&lt;p>处理证书轮换。&lt;/p>
&lt;h4 id="probemanager">ProbeManager&lt;/h4>
&lt;p>实际上包含了三种 Probe，提供 probe 结果缓存和通道。&lt;/p>
&lt;ul>
&lt;li>LivenessManager&lt;/li>
&lt;li>ReadinessManager&lt;/li>
&lt;li>StartupManager&lt;/li>
&lt;/ul>
&lt;h4 id="evictionmanager">EvictionManager&lt;/h4>
&lt;p>监控 Node 节点的资源占用情况，根据驱逐规则驱逐 Pod 释放资源，缓解节点的压力。&lt;/p>
&lt;h4 id="pluginmanager">PluginManager&lt;/h4>
&lt;p>PluginManager 运行一组异步循环，根据此节点确定哪些插件需要注册/取消注册并执行。如 CSI 驱动和设备管理器插件（Device Plugin）。&lt;/p>
&lt;h5 id="csi">CSI&lt;/h5>
&lt;p>Container Storage Interface，由存储厂商实现的存储驱动。&lt;/p>
&lt;h5 id="设备管理器插件device-plugin">设备管理器插件（Device Plugin）&lt;/h5>
&lt;p>Kubernetes 提供了一个 设备插件框架，你可以用它来将系统硬件资源发布到 Kubelet。&lt;/p>
&lt;p>供应商可以实现设备插件，由你手动部署或作为 DaemonSet 来部署，而不必定制 Kubernetes 本身的代码。目标设备包括 GPU、高性能 NIC、FPGA、 InfiniBand 适配器以及其他类似的、可能需要特定于供应商的初始化和设置的计算资源。&lt;/p>
&lt;h2 id="kubelet-的启动流程">kubelet 的启动流程&lt;/h2>
&lt;p>要分析 kubelet 的启动流程，可以从 kubelet 运行方式着手。找一个 Node 节点，很容易就能找到 kubelet 的进程。由于其是以 &lt;code>systemd&lt;/code> 的方式启动，也可以通过 &lt;code>systemctl&lt;/code> 查看其状态。&lt;/p>
&lt;h3 id="kubelet-启动命令">kubelet 启动命令&lt;/h3>
&lt;p>kubelet 的启动命令（minikube 环境）&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ ps -aux &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;/kubelet&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> grep -v grep
root &lt;span class="m">4917&lt;/span> 2.6 0.3 &lt;span class="m">1857652&lt;/span> &lt;span class="m">106152&lt;/span> ? Ssl 01:34 13:05 /var/lib/minikube/binaries/v1.21.0/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>1.21.0 --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64.5
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ systemctl status kubelet.service
● kubelet.service - kubelet: The Kubernetes Node Agent
Loaded: loaded &lt;span class="o">(&lt;/span>/usr/lib/systemd/system/kubelet.service&lt;span class="p">;&lt;/span> disabled&lt;span class="p">;&lt;/span> vendor preset: enabled&lt;span class="o">)&lt;/span>
Drop-In: /etc/systemd/system/kubelet.service.d
└─10-kubeadm.conf
Active: active &lt;span class="o">(&lt;/span>running&lt;span class="o">)&lt;/span> since Sun 2021-06-13 01:34:42 UTC&lt;span class="p">;&lt;/span> 11h ago
Docs: http://kubernetes.io/docs/
Main PID: &lt;span class="m">4917&lt;/span> &lt;span class="o">(&lt;/span>kubelet&lt;span class="o">)&lt;/span>
Tasks: &lt;span class="m">15&lt;/span> &lt;span class="o">(&lt;/span>limit: 38314&lt;span class="o">)&lt;/span>
Memory: 39.4M
CGroup: /system.slice/kubelet.service
└─4917 /var/lib/minikube/binaries/v1.21.0/kubelet --bootstrap-kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/bootstrap-kubelet.conf --config&lt;span class="o">=&lt;/span>/var/lib/kubelet/config.yaml --container-runtime&lt;span class="o">=&lt;/span>docker --hostname-override&lt;span class="o">=&lt;/span>1.21.0 --kubeconfig&lt;span class="o">=&lt;/span>/etc/kubernetes/kubelet.conf --node-ip&lt;span class="o">=&lt;/span>192.168.64
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="源码分析">源码分析&lt;/h3>
&lt;p>从 &lt;code>git@github.com:kubernetes/kubernetes.git&lt;/code> 仓库获取代码，使用最新的 &lt;code>release-1.21&lt;/code> 分支。&lt;/p>
&lt;ul>
&lt;li>&lt;code>cmd/kubelet/kubelet.go:35&lt;/code> 的 &lt;code>main&lt;/code> 方法为程序入口。
&lt;ul>
&lt;li>调用 &lt;code>NewKubeletCommand&lt;/code> 方法，创建 command&lt;/li>
&lt;li>执行 command
&lt;ul>
&lt;li>&lt;code>cmd/kubelet/app/server.go:434&lt;/code> 的 &lt;code>Run&lt;/code> 方法。
&lt;ul>
&lt;li>调用 &lt;code>RunKubelet&lt;/code> 方法。
&lt;ul>
&lt;li>调用 &lt;code>createAndInitKubelet&lt;/code> 方法，创建并初始化 kubelet
&lt;ul>
&lt;li>&lt;code>pkg/kubelet/kubelet.go&lt;/code> 的 &lt;code>NewMainKubelet&lt;/code> 方法，创建 kubelet的 各种组件。共十几个组件，见 &lt;a href="#kubelet-%E6%9E%B6%E6%9E%84">kubelet 的构架&lt;/a>。&lt;/li>
&lt;li>调用 &lt;code>BirtyCry&lt;/code> 方法：放出 &lt;code>Starting&lt;/code> 事件&lt;/li>
&lt;li>调用 &lt;code>StartGarbageCollection&lt;/code> 方法，开启 &lt;code>ContainerGC&lt;/code> 和 &lt;code>ImageGC&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>调用 &lt;code>startKubelet&lt;/code> 方法（大量使用 goroutine 和通道）
&lt;ul>
&lt;li>goroutine：&lt;code>kubelet.Run()&lt;/code>
&lt;ul>
&lt;li>初始化模块
&lt;ul>
&lt;li>metrics 相关&lt;/li>
&lt;li>创建文件系统目录目录&lt;/li>
&lt;li>创建容器日志目录&lt;/li>
&lt;li>启动 &lt;code>ImageGCManager&lt;/code>&lt;/li>
&lt;li>启动 &lt;code>ServerCertificateManager&lt;/code>&lt;/li>
&lt;li>启动 &lt;code>OOMWatcher&lt;/code>&lt;/li>
&lt;li>启动 &lt;code>ResourceAnalyzer&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>goroutine：&lt;code>VolumeManager.Run()&lt;/code> 开始处理 Pod Volume 的卸载和挂载&lt;/li>
&lt;li>goroutine：状态更新 &lt;code>fastStatusUpdateOnce()&lt;/code> （更新 Pod CIDR -&amp;gt; 更新 &lt;code>ContainerRuntime&lt;/code> 状态 -&amp;gt; 更新 Node 节点状态）&lt;/li>
&lt;li>goroutine： &lt;code>NodeLeaseController.Run()&lt;/code> 更新节点租约&lt;/li>
&lt;li>goroutine：&lt;code>podKiller.PerformPodKillingWork&lt;/code> 杀掉未被正确处理的 pod&lt;/li>
&lt;li>&lt;code>StatusManager.Start()&lt;/code> 开始向 apiserver 更新 Pod 状态&lt;/li>
&lt;li>&lt;code>RuntimeClassManager.Start()&lt;/code>&lt;/li>
&lt;li>&lt;code>PLEG.Start()&lt;/code>：持续从 &lt;code>ContainerRuntime&lt;/code> 获取 Pod/容器的状态，并与 kubelet 本地 cache 中的比较，生成对应的 &lt;code>Event&lt;/code>&lt;/li>
&lt;li>&lt;code>syncLoop()&lt;/code> 重点，&lt;strong>&lt;em>持续监控并处理来自文件、apiserver、http 的变更&lt;/em>&lt;/strong>。包括 Pod 的增加、更新、优雅删除、非优雅删除、调和。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>启动 server，暴露 &lt;code>/healthz&lt;/code> 端点&lt;/li>
&lt;li>通知 &lt;code>systemd&lt;/code> &lt;code>kuberlet&lt;/code> 服务已经启动&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="kubelet-的工作原理">kubelet 的工作原理&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/15/20210615000611.png" alt="">&lt;/p>
&lt;ol>
&lt;li>来静态文件、apiserver 以及 HTTP 请求的 Pod 配置变更，被发送到 &lt;code>kubelet.syncLoop&lt;/code>&lt;/li>
&lt;li>PLEG 会定期通过容器运行时获取节点上 Pod 的状态，与其缓存中的 Pod 信息进行比较，封装成事件，进入 PLEG 的通道&lt;/li>
&lt;li>定期检查工作队列中的 Pod&lt;/li>
&lt;li>ProbeManager 的通道中的 Pod&lt;/li>
&lt;li>以上 1~4，都会进入 &lt;code>syncLoopIteration&lt;/code>，并从对应的通道中获取到对应 Pod，将 Pod 的信息保存到 &lt;code>PodManager&lt;/code>；然后分发给 &lt;code>PodWorker&lt;/code>，&lt;a href="#PodWorkers">完成一些列的同步工作&lt;/a>。&lt;/li>
&lt;/ol>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>kubelet 启动流量就讲到这里，虽然复杂，还是有迹可循。只要了解了 kubelet 在 Kubernetes 中的定位及角色，就很容易理解其工作流量。&lt;/p>
&lt;p>后面会再深入分析 Pod 创建及启动流程。&lt;/p></description></item><item><title>可编程网关 Pipy 第二弹：编程实现 Metrics 及源码解读</title><link>https://atbug.com/programming-archive-metrics-with-pipy/</link><pubDate>Fri, 11 Jun 2021 08:27:36 +0800</pubDate><guid>https://atbug.com/programming-archive-metrics-with-pipy/</guid><description>
&lt;p>由于要给团队做一下关于 Flomesh 的分享，准备下材料。&lt;/p>
&lt;p>“分享是最好的学习方法。”&lt;/p>
&lt;p>上一回&lt;a href="https://mp.weixin.qq.com/s/l8JzYRn350fjuCAOoo8pcg">初探可编程网关 Pipy&lt;/a>，领略了 Pipy 的“风骚”。从 Pipy 的 GUI 交互深入了解了 Pipy 的配置加载流程。&lt;/p>
&lt;p>今天看一下 Pipy 如何实现 Metrics 的功能，顺便看下数据如何在多个 Pipeline 中进行流转。&lt;/p>
&lt;h2 id="前置">前置&lt;/h2>
&lt;p>首先，需要对 Pipy 有一定的了解，如果不了解看一下&lt;a href="https://mp.weixin.qq.com/s/l8JzYRn350fjuCAOoo8pcg">上一篇文章&lt;/a>。&lt;/p>
&lt;p>其次构建好 Pipy 环境，关于构建还是去看上一篇文章。&lt;/p>
&lt;h2 id="metrics-功能实现">Metrics 功能实现&lt;/h2>
&lt;p>至于 Pipy 实现 Metrics 的方式，源码中就有，位于 &lt;code>test/006-metrics/pipy.js&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610202734.png" alt="">&lt;/p>
&lt;ul>
&lt;li>代理监听 &lt;code>6080&lt;/code> 端口，后端服务在 &lt;code>8080&lt;/code> 端口，Metrics 在 &lt;code>9090&lt;/code> 端口&lt;/li>
&lt;li>共有 5 个 Pipeline：3 个 listen 类型，2 个 Pipeline 类型&lt;/li>
&lt;li>7 种过滤器：&lt;code>fork&lt;/code>、&lt;code>connect&lt;/code>、&lt;code>decodeHttpRequest&lt;/code>、&lt;code>onMessageStart&lt;/code>、&lt;code>decodeHttpResponse&lt;/code>、&lt;code>encodeHttpRespnse&lt;/code>、&lt;code>replaceMessage&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>贴一下源码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">pipy&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">_metrics&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">count&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">_statuses&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="nx">_latencies&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">25&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">70&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">90&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">300&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nb">Number&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">POSITIVE_INFINITY&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">_buckets&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;span class="nx">_timestamp&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6080&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">fork&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;in&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;127.0.0.1:8080&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">fork&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;out&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Extract request info
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipeline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;in&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">onMessageStart&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">_timestamp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="nx">_metrics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Extract response info
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipeline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;out&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">onMessageStart&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">e&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="p">((&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">latency&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">latency&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">_timestamp&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">_latencies&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findIndex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">latency&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="nx">t&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">_buckets&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">_statuses&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">_statuses&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">))()&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Expose as Prometheus metrics
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">9090&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceMessage&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">sum&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Message&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">[&lt;/span>
&lt;span class="sb">`count &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">_metrics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">...&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">entries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">_statuses&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">([&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`status{code=&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">&amp;#34;} &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">...&lt;/span>&lt;span class="nx">_buckets&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`bucket{le=&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">_latencies&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">&amp;#34;} &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">))(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">encodeHttpResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">// Mock service on port 8080
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8080&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">decodeHttpRequest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceMessage&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">Message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello!\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">encodeHttpResponse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;p>使用 ab 做请求模拟 &lt;code>ab -n 2000 -c 10 http://localhost:6080/&lt;/code>，然后检查下记录的指标。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http :9090 --body
count &lt;span class="m">2000&lt;/span>
status&lt;span class="o">{&lt;/span>&lt;span class="nv">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;200&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">2000&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1762&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1989&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;5&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1994&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;7&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">1999&lt;/span>
bucket&lt;span class="o">{&lt;/span>&lt;span class="nv">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;10&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">2000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="分析">分析&lt;/h2>
&lt;p>&lt;strong>TL;DR：本次示例的核心是 &lt;code>fork&lt;/code>，从字面意思就很容易理解：新开一个处理分支（Pipeline），与主线并行执行。&lt;/strong>&lt;/p>
&lt;p>在 &lt;code>src/inbound.cpp:104 109&lt;/code> 处，Pipy 接收一个新的连接。
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610210104.png" alt="">&lt;/p>
&lt;p>创建 &lt;code>Context&lt;/code> 和 &lt;code>Session&lt;/code>，并在 L178 处注册事件的处理器，然后在 L187 处开始接收数据。
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610210414.png" alt="">&lt;/p>
&lt;p>在 &lt;code>#receive&lt;/code> 方法中，定义了数据接收处理器：将读到的数据写入 &lt;code>buffer&lt;/code> 中。这个 &lt;code>buffer&lt;/code> 存储的是 &lt;code>Event&lt;/code>类型数据。（所以说 Pipy 是基于数据流事件，将一些封装成了事件）&lt;/p>
&lt;p>接着调用 &lt;code>Session#input&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610211221.png" alt="">&lt;/p>
&lt;p>实际上调用的是 &lt;code>ReusableSession#input&lt;/code>，调用 &lt;code>m_filters&lt;/code> 的 &lt;code>#process&lt;/code> 方法。&lt;code>m_filters&lt;/code> 实际上是 &lt;code>Filter&lt;/code> 类型。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610212917.png" alt="">&lt;/p>
&lt;p>为什么只有一个 &lt;code>Filter&lt;/code>？重点来了，看下 &lt;code>ReusableSession&lt;/code> 的构造过程就能明白了（这里用了个反向迭代器）。&lt;code>output&lt;/code> 是当前 &lt;code>Filter&lt;/code> 处理完要执行的，实现类似链式的执行。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610213338.png" alt="">&lt;/p>
&lt;p>再回头看上面的示例，可以想象 &lt;code>fork&lt;/code> 就是 &lt;code>Session&lt;/code> 的 &lt;code>m_filters&lt;/code>。&lt;/p>
&lt;p>&lt;code>src/filters/fork.cpp:85&lt;/code>，在 &lt;code>fork&lt;/code> 过滤器中，在 &lt;em>1&lt;/em> 处从 &lt;code>module&lt;/code> 中获取到目标 &lt;code>Pipeline&lt;/code>，并在 &lt;em>3&lt;/em> 和 &lt;em>4&lt;/em> 处 创建了新的 &lt;code>Session&lt;/code> 并保存原 &lt;code>Session&lt;/code> 的数据。&lt;/p>
&lt;p>然后在 &lt;em>5&lt;/em> 处将原 &lt;code>Event&lt;/code> 输入到新的 &lt;code>Session&lt;/code> 中，触发目标 &lt;code>Pipeline&lt;/code> 的 &lt;code>Filter&lt;/code> 链。&lt;strong>值得注意的是，这里是基于事件的处理，并不是阻塞的。这就意味着，&lt;code>fork&lt;/code> 的目标 &lt;code>pipline&lt;/code>，与 &lt;code>fork&lt;/code> 所在的 pipeline 是并行执行的。&lt;/strong> 在示例中，就是 &lt;code>Pipeline&lt;/code> ‘in’ 与 主 &lt;code>Pipeline&lt;/code> 的 &lt;code>connect&lt;/code> 是并行执行的。&lt;/p>
&lt;p>最终在 &lt;em>6&lt;/em> 处，继续使用原 &lt;code>Session&lt;/code> 的 &lt;code>Filter&lt;/code> 链。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/10/20210610214811.png" alt="">&lt;/p></description></item><item><title>Kubernetes 的自动伸缩你用对了吗？</title><link>https://atbug.com/auto-scaling-best-practice-in-kubernetes/</link><pubDate>Wed, 09 Jun 2021 00:34:25 +0800</pubDate><guid>https://atbug.com/auto-scaling-best-practice-in-kubernetes/</guid><description>
&lt;p>本文翻译自 learnk8s 的 &lt;a href="https://learnk8s.io/kubernetes-autoscaling-strategies#when-autoscaling-pods-goes-wrong">Architecting Kubernetes clusters — choosing the best autoscaling strategy&lt;/a>，&lt;!-- raw HTML omitted -->有增删部分内容&lt;!-- raw HTML omitted -->。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2159402x.png" alt="">&lt;/p>
&lt;p>TL;DR: 在默认设置下，扩展 Kubernetes 集群中的 pod 和节点可能需要几分钟时间。了解如何调整集群节点的大小、配置水平和集群自动缩放器以及过度配置集群以加快扩展速度。&lt;/p>
&lt;h2 id="自动扩展器">自动扩展器&lt;/h2>
&lt;p>在 Kubernetes 中，常说的“自用扩展”有：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/">HPA：Pod 水平缩放器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler">VPA：Pod 垂直缩放器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler">CA：集群自动缩放器&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>不同类型的自动缩放器，使用的场景不一样。&lt;/p>
&lt;h3 id="hpa">HPA&lt;/h3>
&lt;p>HPA 定期检查内存和 CPU 等指标，自动调整 Deployment 中的副本数，比如流量变化：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2206552x.png" alt="调整前">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2207122x.png" alt="调整后">&lt;/p>
&lt;h3 id="vpa">VPA&lt;/h3>
&lt;p>有些时候无法通过增加 Pod 数来扩容，比如数据库。这时候可以通过 VPA 增加 Pod 的大小，比如调整 Pod 的 CPU 和内存：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2212162x.png" alt="调整前">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2212342x.png" alt="调整后">&lt;/p>
&lt;h3 id="ca">CA&lt;/h3>
&lt;p>当集群资源不足时，CA 会自动配置新的计算资源并添加到集群中：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2213392x.png" alt="调整前">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2214182x.png" alt="调整后">&lt;/p>
&lt;h2 id="自动缩放-pod-出错时">自动缩放 Pod 出错时&lt;/h2>
&lt;p>比如一个应用需要 1.5 GB 内存和 0.25 个 vCPU。一个 8GB 和 2 个 vCPU 的节点，可以容纳 4 个这样的 Pod，完美！&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2216192x.png" alt="">&lt;/p>
&lt;p>做如下配置：&lt;/p>
&lt;ol>
&lt;li>HPA：每增加 10 个并发，增加一个副本。即 40 个并发的时候，自动扩展到 4 个副本。（这里使用自定义指标，比如来自 Ingress Controller 的 QPS）&lt;/li>
&lt;li>CA：在资源不足的时候，增加计算节点。&lt;/li>
&lt;/ol>
&lt;p>当并发达到 30 的时候，系统是下面这样。完美！HPA 工作正常，CA 没工作。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2223102x.png" alt="">&lt;/p>
&lt;p>当增加到 40 个并发的时候，系统是下面的情况：&lt;/p>
&lt;ol>
&lt;li>HPA 增加了一个 Pod&lt;/li>
&lt;li>Pod 挂起&lt;/li>
&lt;li>CA 增加了一个节点&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2224462x.png" alt="HPA 工作">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2225022x.png" alt="CA 工作">&lt;/p>
&lt;p>&lt;em>为什么 Pod 没有部署成功？&lt;/em>&lt;/p>
&lt;p>节点上的操作系统进程和 kubelet 也会消耗一部分资源，8G 和 2 vCPU 并不是全都可以提供给 Pod 用的。并且还有一个&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/reserve-compute-resources/#eviction-thresholds">驱逐阈值&lt;/a>：在节点系统剩余资源达到阈值时，会驱逐 Pod，避免 OOM 的发生。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2230402x.png" alt="">&lt;/p>
&lt;p>当然上面的这些都是&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/reserve-compute-resources/#node-allocatable">可配置&lt;/a>的。&lt;/p>
&lt;p>&lt;em>那为什么在创建该 Pod 之前，CA 没有增加新的节点呢？&lt;/em>&lt;/p>
&lt;h2 id="ca-如何工作">CA 如何工作？&lt;/h2>
&lt;p>&lt;strong>CA 在触发自动缩放时，不会查看可用的内存或 CPU。&lt;/strong>&lt;/p>
&lt;p>CA 是面向事件工作的，并每 10 秒检查一次是否存在不可调度（Pending）的 Pod。&lt;/p>
&lt;p>当调度器无法找到可以容纳 Pod 的节点时，这个 Pod 是不可调度的。&lt;/p>
&lt;p>此时，CA 开始创建新节点：CA 扫描集群并检查是否有不可调度的 Pod。&lt;/p>
&lt;p>当集群有多种节点池，CA 会通过选择下面的一种策略：&lt;/p>
&lt;ul>
&lt;li>&lt;code>random&lt;/code>：默认的扩展器，随机选择一种节点池&lt;/li>
&lt;li>&lt;code>most-pods&lt;/code>：能够调度最多 Pod 的节点池&lt;/li>
&lt;li>&lt;code>least-waste&lt;/code>：选择扩展后，资源空闲最少的节点池&lt;/li>
&lt;li>&lt;code>price&lt;/code>：选择成本最低的节点池&lt;/li>
&lt;li>&lt;code>priority&lt;/code>：选择用户分配的具有最高优先级的节点池&lt;/li>
&lt;/ul>
&lt;p>确定类型后，CA 会调用相关 API 来创建资源。（云厂商会实现 API，比如 AWS 添加 EC2；Azure 添加 Virtual Machine；阿里云增加 ECS；GCP 增加 Compute Engine）&lt;/p>
&lt;p>计算资源就绪后，就会进行&lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-tls-bootstrapping/">节点的初始化&lt;/a>。&lt;/p>
&lt;p>注意，这里需要一定的耗时，通常比较慢。&lt;/p>
&lt;h2 id="探索-pod-自动缩放的前置时间">探索 Pod 自动缩放的前置时间&lt;/h2>
&lt;p>四个因素：&lt;/p>
&lt;ol>
&lt;li>HPA 的响应耗时&lt;/li>
&lt;li>CA 的响应耗时&lt;/li>
&lt;li>节点的初始化耗时&lt;/li>
&lt;li>Pod 的创建时间&lt;/li>
&lt;/ol>
&lt;p>默认情况下，&lt;a href="https://github.com/kubernetes/kubernetes/blob/2da8d1c18fb9406bd8bb9a51da58d5f8108cb8f7/pkg/kubelet/kubelet.go#L1855">kubelet 每 10 秒抓取一次 Pod 的 CPU 和内存占用情况&lt;/a>。&lt;/p>
&lt;p>&lt;a href="https://github.com/kubernetes-sigs/metrics-server/blob/master/FAQ.md#how-often-metrics-are-scraped">每分钟，Metrics Server 会将聚合的指标开放&lt;/a>给 Kubernetes API 的其他组件使用。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2256302x.png" alt="">&lt;/p>
&lt;p>&lt;a href="https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#how-does-scale-up-work">CA 每 10 秒排查不可调度的 Pod。&lt;/a>&lt;/p>
&lt;ul>
&lt;li>少于 100 个节点，且每个节点最多 30 个 Pod，时间不超过 30s。平均延迟大约 5s。&lt;/li>
&lt;li>100 到 1000个节点，不超过 60s。平均延迟大约 15s。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2300242x.png" alt="">&lt;/p>
&lt;p>节点的配置时间，取决于云服务商。通常在 3~5 分钟。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2301312x.png" alt="">&lt;/p>
&lt;p>容器运行时创建 Pod：启动容器的几毫秒和&lt;strong>下载镜像的几秒钟&lt;/strong>。如果不做镜像缓存，几秒到 1 分钟不等，取决于层的大小和梳理。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2302382x.png" alt="">&lt;/p>
&lt;p>对于小规模的集群，最坏的情况是 6 分 30 秒。对于 100 个以上节点规模的集群，可能高达 7 分钟。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">HPA delay: 1m30s +
CA delay: 0m30s +
Cloud provider: 4m +
Container runtime: 0m30s +
=========================
Total 6m30s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>突发情况，比如流量激增，你是否愿意等这 7 分钟？&lt;/em>&lt;/p>
&lt;p>&lt;em>这 7 分钟，如何优化压缩？&lt;/em>&lt;/p>
&lt;ul>
&lt;li>HPA 的刷新时间，默认 15 秒，通过 &lt;code>--horizontal-pod-autoscaler-sync-period&lt;/code> 标志控制。&lt;/li>
&lt;li>Metrics Server 的指标抓取时间，默认 60 秒，通过 &lt;code>metric-resolution&lt;/code> 控制。&lt;/li>
&lt;li>CA 的扫描间隔，默认 10 秒，通过 &lt;code>scan-interval&lt;/code> 控制。&lt;/li>
&lt;li>节点上缓存镜像，比如 &lt;a href="https://github.com/senthilrch/kube-fledged">kube-fledged&lt;/a> 等工具。&lt;/li>
&lt;/ul>
&lt;p>即使调小了上述设置，依然会受云服务商的时间限制。&lt;/p>
&lt;p>&lt;em>那么，如何解决？&lt;/em>&lt;/p>
&lt;p>两种尝试：&lt;/p>
&lt;ol>
&lt;li>尽量避免被动创建新节点&lt;/li>
&lt;li>主动创建新节点&lt;/li>
&lt;/ol>
&lt;h2 id="为-kubernetes-选择最佳规格的节点">为 Kubernetes 选择最佳规格的节点&lt;/h2>
&lt;p>&lt;strong>这会对扩展策略产生巨大影响。&lt;/strong>&lt;/p>
&lt;p>&lt;em>这样的场景&lt;/em>&lt;/p>
&lt;p>应用程序需要 1GB 内存和 0.1 vCPU；有一个 4GB 内存和 1 个 vCPU 的节点。&lt;/p>
&lt;p>排除操作系统、kubelet 和阈值保留空间后，有 2.5GB 内存和 0.7 个 vCPU 可用。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2314032x.png" alt="">&lt;/p>
&lt;p>最多只能容纳 2 个 Pod，扩展副本时最长耗时 7 分钟（HPA、CA、云服务商的资源配置耗时）&lt;/p>
&lt;p>假如节点的规格是 64GB 内存和 16 个 vCPU，可用的资源为 58.32GB 和 15.8 个 vCPU。&lt;/p>
&lt;p>&lt;strong>这个节点可以托管 58 个 Pod。只有扩容第 59 个副本时，才需要创建新的节点。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2316562x.png" alt="CleanShot 2021-06-08 at 23.16.56@2x">&lt;/p>
&lt;p>这样触发 CA 的机会更少。&lt;/p>
&lt;p>选择大规格的节点，还有另外一个好处：资源的利用率会更高。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2317562x.png" alt="">&lt;/p>
&lt;p>&lt;strong>节点上可以容纳的 Pod 数量，决定了效率的峰值。&lt;/strong>&lt;/p>
&lt;p>物极必反！更大的实例，并不是一个好的选择：&lt;/p>
&lt;ol>
&lt;li>爆炸半径（Blast radius）：节点故障时，少节点的集群和多节点的集群，前者影响更大。&lt;/li>
&lt;li>自动缩放的成本效益低：增加一个大容量的节点，其利用率会比较低（调度过去的 Pod 数少）&lt;/li>
&lt;/ol>
&lt;p>&lt;em>即使选择了正确规格的节点，配置新的计算单元时，延迟仍然存在。怎么解决？&lt;/em>&lt;/p>
&lt;p>&lt;em>能否提前创建节点？&lt;/em>&lt;/p>
&lt;h2 id="为集群过度配置节点">为集群过度配置节点&lt;/h2>
&lt;p>即为集群增加备用节点，可以：&lt;/p>
&lt;ol>
&lt;li>创建一个节点，并留空 （比如 SchedulingDisabled）&lt;/li>
&lt;li>一旦空节点中有了一个 Pod，马上创建新的空节点&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2325582x.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2326262x.png" alt="CleanShot 2021-06-08 at 23.26.26@2x">&lt;/p>
&lt;p>&lt;strong>这种会产生额外的成本，但是效率会提升。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>CA 并不支持此功能 &amp;ndash; 总是保留一个空节点。&lt;/strong>&lt;/p>
&lt;p>但是，可以伪造。创建一个只占用资源，不使用资源的 Pod 占用整个 Node 节点。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2329322x.png" alt="">&lt;/p>
&lt;p>一旦有了真正的 Pod，驱逐占位的 Pod。
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2330332x.png" alt="">&lt;/p>
&lt;p>待后台完成新的节点配置后，将“占位” Pod 再次占用整个节点。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2331062x.png" alt="">&lt;/p>
&lt;p>这个“占位”的 Pod 可以通过永久休眠来实现空间的保留。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">overprovisioning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">overprovisioning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">overprovisioning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pause&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">k8s.gcr.io/pause&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1739m&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;5.9G&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用&lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/">优先级和抢占&lt;/a>，来实现创建真正的 Pod 后驱逐“占位”的 Pod。&lt;/p>
&lt;p>使用 &lt;code>PodPriorityClass&lt;/code> 在配置 Pod 优先级：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">scheduling.k8s.io/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PriorityClass&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">overprovisioning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="m">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#默认的是 0，这个表示比默认的低&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">globalDefault&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Priority class used by overprovisioning.&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为“占位” Pod 配置优先级：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">overprovisioning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">overprovisioning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">overprovisioning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">priorityClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">overprovisioning&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#HERE&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">reserve-resources&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">k8s.gcr.io/pause&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1739m&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;5.9G&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>已经做完过度配置，应用程序是否需要优化？&lt;/em>&lt;/p>
&lt;h2 id="为-pod-选择正确的内存和-cpu-请求">为 Pod 选择正确的内存和 CPU 请求&lt;/h2>
&lt;p>Kubernetes 是根据 Pod 的内存和 CPU 请求，为其分配节点。&lt;/p>
&lt;p>如果 Pod 的资源请求配置不正确，可能会过晚（或过早）触发自动缩放器。&lt;/p>
&lt;p>这样一个场景：&lt;/p>
&lt;ul>
&lt;li>应用程序平均负载下消耗 512MB 内存和 0.25 个 vCPU。&lt;/li>
&lt;li>高峰时，消耗 4GB 内存 和 1 个 vCPU。（即资源限制，Limit）&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2338292x.png" alt="">&lt;/p>
&lt;p>有三种请求的配置选择：&lt;/p>
&lt;ol>
&lt;li>远低于平均使用量&lt;/li>
&lt;li>匹配平均使用量&lt;/li>
&lt;li>尽量接近限制&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2344462x.png" alt="2">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2345002x.png" alt="2">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2346042x.png" alt="3">&lt;/p>
&lt;p>第一种的问题在于&lt;strong>超卖严重，过度使用节点&lt;/strong>。kubelet 负载高，稳定性差。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2346452x.png" alt="1">&lt;/p>
&lt;p>第三种，会造成资源的利用率低，浪费资源。这种通常被称为 &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/#qos-classes">QoS：Quality of Service class&lt;/a> 中的 &lt;code>Guaranteed&lt;/code> 级别，Pod 不会被终止和驱逐。
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/06/09/cleanshot-20210608-at-2347382x.png" alt="3">&lt;/p>
&lt;p>&lt;em>如何在稳定性和资源使用率间做权衡？&lt;/em>&lt;/p>
&lt;p>这就是 &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/#qos-classes">QoS：Quality of Service class&lt;/a> 中的 &lt;code>Burstable&lt;/code> 级别，即 Pod 偶尔会使用更多的内存和 CPU。&lt;/p>
&lt;ol>
&lt;li>如果节点中有可用资源，应用程序会在返回基线（baseline）前使用这些资源。&lt;/li>
&lt;li>如果资源不足，Pod 将竞争资源（CPU），kubelet 也有可能尝试驱逐 Pod（内存）。&lt;/li>
&lt;/ol>
&lt;p>在 &lt;code>Guaranteed&lt;/code> 和 &lt;code>Burstable&lt;/code> 之前如何做选择？取决于：&lt;/p>
&lt;ol>
&lt;li>想尽量减少 Pod 的重新调度和驱逐，应该是用 &lt;code>Guaranteed&lt;/code>。&lt;/li>
&lt;li>如果想充分利用资源时，使用 &lt;code>Burstable&lt;/code>。比如弹性较大的服务，Web 或者 REST 服务。&lt;/li>
&lt;/ol>
&lt;p>&lt;em>如何做出正确的配置？&lt;/em>&lt;/p>
&lt;p>应该分析应用程序，并测算空闲、负载和峰值时的内存和 CPU 消耗。&lt;/p>
&lt;p>甚至可以通过部署 VPA 来自动调整。&lt;/p>
&lt;h2 id="如何进行集群缩容">如何进行集群缩容？&lt;/h2>
&lt;p>&lt;strong>每 10 秒，当请求（request）利用率低于 50%时，CA 才会决定删除节点。&lt;/strong>&lt;/p>
&lt;p>CA 会汇总同一个节点上的所有 Pod 的 CPU 和内存请求。小于节点容量的一半，就会考虑对当前节点进行缩减。&lt;/p>
&lt;blockquote>
&lt;p>需要注意的是，CA 不考虑实际的 CPU 和内存使用或者限制（limit），只看请求（request）。&lt;/p>
&lt;/blockquote>
&lt;p>移除节点之前，CA 会：&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-types-of-pods-can-prevent-ca-from-removing-a-node">检查 Pod&lt;/a> 确保可以调度到其他节点上。&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#i-have-a-couple-of-nodes-with-low-utilization-but-they-are-not-scaled-down-why">检查节点&lt;/a>，避免节点被过早的销毁，比如两个节点的请求都低于 50%。&lt;/li>
&lt;/ol>
&lt;p>检查都通过之后，才会删除节点。&lt;/p>
&lt;h2 id="为什么不根据内存或-cpu-进行自动缩放">为什么不根据内存或 CPU 进行自动缩放？&lt;/h2>
&lt;p>&lt;strong>基于内存和 CPU 的自动缩放器，不关心 pod。&lt;/strong>&lt;/p>
&lt;p>比如配置缩放器在节点的 CPU 达到总量的 80%，就自动增加节点。&lt;/p>
&lt;p>当你创建 3 个副本的 Deployment，3 个节点的 CPU 达到了 85%。这时会创建一个节点，但你并不需要第 4 个副本，新的节点就空闲了。&lt;/p>
&lt;p>&lt;strong>不建议使用这种类型的自动缩放器。&lt;/strong>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>定义和实施成功的扩展策略，需要掌握以下几点：&lt;/p>
&lt;ul>
&lt;li>节点的可分配资源。&lt;/li>
&lt;li>微调 Metrics Server、HPA 和 CA 的刷新间隔。&lt;/li>
&lt;li>设计集群和节点的规格。&lt;/li>
&lt;li>缓存容器镜像到节点。&lt;/li>
&lt;li>应用程序的基准测试和分析。&lt;/li>
&lt;/ul>
&lt;p>配合适当的监控工具，可以反复测试扩展策略并调整集群的缩放速度和成本。&lt;/p></description></item><item><title>初探可编程网关 Pipy</title><link>https://atbug.com/glance-at-programmable-gateway-pipy/</link><pubDate>Mon, 31 May 2021 00:45:08 +0800</pubDate><guid>https://atbug.com/glance-at-programmable-gateway-pipy/</guid><description>
&lt;p>有幸参加了 &lt;a href="https://flomesh.cn/">Flomesh&lt;/a> 组织的workshop，了解了他们的 Pipy 网络代理，以及围绕 Pipy 构建起来的生态。Pipy 在生态中，不止是代理的角色，还是 Flomesh 服务网格​中的数据平面。&lt;/p>
&lt;p>整理一下，做个记录，顺便瞄一下 Pipy 的部分源码。&lt;/p>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>下面是摘自 Github 上关于 Pipy 的介绍：&lt;/p>
&lt;blockquote>
&lt;p>Pipy 是一个轻量级、高性能、高稳定、可编程的网络代理。Pipy 核心框架使用 C++ 开发，网络 IO 采用 ASIO 库。 Pipy 的可执行文件仅有 5M 左右，运行期的内存占用 10M 左右，因此 Pipy 非常适合做 Sidecar proxy。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Pipy 内置了自研的 pjs 作为脚本扩展，使得Pipy 可以用 JS 脚本根据特定需求快速定制逻辑与功能。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Pipy 采用了模块化、链式的处理架构，用顺序执行的模块来对网络数据块进行处理。这种简单的架构使得 Pipy 底层简单可靠，同时具备了动态编排流量的能力，兼顾了简单和灵活。通过使用 REUSE_PORT 的机制（主流 Linux 和 BSD 版本都支持该功能），Pipy 可以以多进程模式运行，使得 Pipy 不仅适用于 Sidecar 模式，也适用于大规模的流量处理场景。 在实践中，Pipy 独立部署的时候用作“软负载”，可以在低延迟的情况下，实现媲美硬件的负载均衡吞吐能力，同时具有灵活的扩展性。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16221838193789.jpg" alt="">&lt;/p>
&lt;p>Pipy 的核心是消息流处理器：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16221838399668.jpg" alt="">&lt;/p>
&lt;p>Pipy 流量处理的流程：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16221838630400.jpg" alt="">&lt;/p>
&lt;h3 id="核心概念">核心概念&lt;/h3>
&lt;ul>
&lt;li>流（Stream）&lt;/li>
&lt;li>管道（Pipeline）&lt;/li>
&lt;li>模块（Module）&lt;/li>
&lt;li>会话（Session）&lt;/li>
&lt;li>上下文（Context）&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->以下是个人浅见&lt;!-- raw HTML omitted -->：&lt;/p>
&lt;p>Pipy 使用 &lt;code>pjs&lt;/code> 引擎将 JavaScript格式的配置，解析成其抽象的 &lt;code>Configuration&lt;/code> 对象。每个 &lt;code>Configuration&lt;/code> 中包含了多个 &lt;code>Pipeline&lt;/code>，每个 &lt;code>Configuration&lt;/code> 中又会用到多个 &lt;code>Filter&lt;/code>。这些都属于 Pipy 的&lt;em>静态&lt;/em>配置部分。（后面会提到 Pipeline 的三种不同类型）&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223905428188.jpg" alt="">&lt;/p>
&lt;p>而属于&lt;strong>运行时&lt;/strong>的就是流、会话和上下文了，在 Pipy 中，数据流是由对象（Pipy 的&lt;em>抽象&lt;/em>）组成的。而这些对象抵达 Pipy，被抽象成不同的&lt;!-- raw HTML omitted -->事件&lt;!-- raw HTML omitted -->。而事件触发不同的过滤器的执行。&lt;/p>
&lt;p>我个人更喜欢将其核心理解为：对数据流的事件处理引擎。&lt;/p>
&lt;p>理解归理解，实践出真知。“大胆假设，小心求证！”&lt;/p>
&lt;h2 id="本地编译">本地编译&lt;/h2>
&lt;p>从编译 Pipy 开始。&lt;/p>
&lt;h3 id="环境准备">环境准备&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#安装 nodejs&lt;/span>
$ nvm install lts/erbium
&lt;span class="c1">#安装 cmake&lt;/span>
$ brew install cmake
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="编译-pipy">编译 Pipy&lt;/h3>
&lt;p>从 &lt;code>https://github.com/flomesh-io/pipy.git&lt;/code> 克隆代码。&lt;/p>
&lt;p>Pipy 的编译包括了两个部分，GUI 和 Pipy 本体。&lt;/p>
&lt;p>GUI 是 Pipy 提供的一个用于开发模式下进行配置的界面，首先编译Pipy GUI。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># pipy root folder&lt;/span>
$ &lt;span class="nb">cd&lt;/span> gui
$ npm install
$ npm run build
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着编译 Pipy 的本体&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># pipy root folder&lt;/span>
$ mkdir build
$ &lt;span class="nb">cd&lt;/span> build
$ cmake -DCMAKE_BUILD_TYPE&lt;span class="o">=&lt;/span>Release -DPIPY_GUI&lt;span class="o">=&lt;/span>ON ..
$ make
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完成后检查根目录下的 &lt;code>bin&lt;/code> 目录，可以看到 pipy 的可执行文件，大小只有 11M。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223857141237.jpg" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ bin/pipy --help
Usage: pipy &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span> &amp;lt;script filename&amp;gt;
Options:
-h, -help, --help Show &lt;span class="nb">help&lt;/span> information
-v, -version, --version Show version information
--list-filters List all filters
--help-filters Show detailed usage information &lt;span class="k">for&lt;/span> all filters
--log-level&lt;span class="o">=&lt;/span>&amp;lt;debug&lt;span class="p">|&lt;/span>info&lt;span class="p">|&lt;/span>warn&lt;span class="p">|&lt;/span>error&amp;gt; Set the level of log output
--verify Verify configuration only
--reuse-port Enable kernel load balancing &lt;span class="k">for&lt;/span> all listening ports
--gui-port&lt;span class="o">=&lt;/span>&amp;lt;port&amp;gt; Enable web GUI on the specified port
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="demohello-pipy">Demo：Hello Pipy&lt;/h3>
&lt;p>开发模式下可以让 Pipy 携带 GUI 启动，通过 GUI 进行配置。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#指定 gui 的端口为 6060，从 test 目录中加载配置&lt;/span>
$ bin/pipy --gui-port&lt;span class="o">=&lt;/span>&lt;span class="m">6060&lt;/span> test/
2021-05-30 22:48:41 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>gui&lt;span class="o">]&lt;/span> Starting GUI service...
2021-05-30 22:48:41 &lt;span class="o">[&lt;/span>info&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>listener&lt;span class="o">]&lt;/span> Listening on 0.0.0.0:6060
&lt;/code>&lt;/pre>&lt;/div>&lt;p>浏览器中打开
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223862683344.jpg" alt="">&lt;/p>
&lt;p>配置界面
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223865498871.jpg" alt="">&lt;/p>
&lt;p>展开 &lt;code>002-hello&lt;/code> 子目录点选 &lt;code>pipy&lt;/code> 并点击运行按钮：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223866403409.jpg" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ curl -i localhost:6080
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Connection: keep-alive
Content-Length: &lt;span class="m">7&lt;/span>
Hello!
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pipy-过滤器">Pipy 过滤器&lt;/h3>
&lt;p>通过 pipe 的命令可以输出其支持的过滤器列表，一共 31 个。通过将一系列过滤器进行组装，可以实现复杂的流处理。&lt;/p>
&lt;p>比如 &lt;code>007-logging&lt;/code> 的配置实现了日志的功能：记录请求和响应的数据，并批量发送到 ElasticSearch。这里就用到了 &lt;code>fork&lt;/code>、&lt;code>connect&lt;/code>、&lt;code>onSessionStart&lt;/code>、&lt;code>encodeHttpRequest&lt;/code>、&lt;code>decodeHttpRequest&lt;/code>、&lt;code>onMessageStart&lt;/code>、&lt;code>onMessage&lt;/code>、&lt;code>decodeHttpResponse&lt;/code>、&lt;code>replaceMessage&lt;/code>、&lt;code>link&lt;/code>、&lt;code>mux&lt;/code>、&lt;code>task&lt;/code> 等十多种过滤器。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223878872474.jpg" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ bin/pipy --list-filters
connect &lt;span class="o">(&lt;/span>target&lt;span class="o">[&lt;/span>, options&lt;span class="o">])&lt;/span> Sends data to a remote endpoint and receives data from it
demux &lt;span class="o">(&lt;/span>target&lt;span class="o">)&lt;/span> Sends messages to a different pipline with each one in its own session and context
decodeDubbo &lt;span class="o">()&lt;/span> Deframes a Dubbo message
decodeHttpRequest &lt;span class="o">()&lt;/span> Deframes an HTTP request message
decodeHttpResponse &lt;span class="o">()&lt;/span> Deframes an HTTP response message
dummy &lt;span class="o">()&lt;/span> Eats up all events
dump &lt;span class="o">([&lt;/span>tag&lt;span class="o">])&lt;/span> Outputs events to the standard output
encodeDubbo &lt;span class="o">([&lt;/span>head&lt;span class="o">])&lt;/span> Frames a Dubbo message
encodeHttpRequest &lt;span class="o">([&lt;/span>head&lt;span class="o">])&lt;/span> Frames an HTTP request message
encodeHttpResponse &lt;span class="o">([&lt;/span>head&lt;span class="o">])&lt;/span> Frames an HTTP response message
&lt;span class="nb">exec&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nb">command&lt;/span>&lt;span class="o">)&lt;/span> Spawns a child process and connects to its input/output
fork &lt;span class="o">(&lt;/span>target&lt;span class="o">[&lt;/span>, sessionData&lt;span class="o">])&lt;/span> Sends copies of events to other pipeline sessions
link &lt;span class="o">(&lt;/span>target&lt;span class="o">[&lt;/span>, when&lt;span class="o">[&lt;/span>, target2&lt;span class="o">[&lt;/span>, when2, ...&lt;span class="o">]]])&lt;/span> Sends events to a different pipeline
mux &lt;span class="o">(&lt;/span>target&lt;span class="o">[&lt;/span>, selector&lt;span class="o">])&lt;/span> Sends messages from different sessions to a shared pipeline session
onSessionStart &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles the initial event in a session
onData &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles a Data event
onMessageStart &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles a MessageStart event
onMessageEnd &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles a MessageEnd event
onSessionEnd &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles a SessionEnd event
onMessageBody &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles a &lt;span class="nb">complete&lt;/span> message body
onMessage &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Handles a &lt;span class="nb">complete&lt;/span> message including the head and the body
print &lt;span class="o">()&lt;/span> Outputs raw data to the standard output
replaceSessionStart &lt;span class="o">(&lt;/span>callback&lt;span class="o">)&lt;/span> Replaces the initial event in a session
replaceData &lt;span class="o">([&lt;/span>replacement&lt;span class="o">])&lt;/span> Replaces a Data event
replaceMessageStart &lt;span class="o">([&lt;/span>replacement&lt;span class="o">])&lt;/span> Replaces a MessageStart event
replaceMessageEnd &lt;span class="o">([&lt;/span>replacement&lt;span class="o">])&lt;/span> Replaces a MessageEnd event
replaceSessionEnd &lt;span class="o">([&lt;/span>replacement&lt;span class="o">])&lt;/span> Replaces a SessionEnd event
replaceMessageBody &lt;span class="o">([&lt;/span>replacement&lt;span class="o">])&lt;/span> Replaces an entire message body
replaceMessage &lt;span class="o">([&lt;/span>replacement&lt;span class="o">])&lt;/span> Replaces a &lt;span class="nb">complete&lt;/span> message including the head and the body
tap &lt;span class="o">(&lt;/span>quota&lt;span class="o">[&lt;/span>, account&lt;span class="o">])&lt;/span> Throttles message rate or data rate
use &lt;span class="o">(&lt;/span>module, pipeline&lt;span class="o">[&lt;/span>, argv...&lt;span class="o">])&lt;/span> Sends events to a pipeline in a different module
&lt;span class="nb">wait&lt;/span> &lt;span class="o">(&lt;/span>condition&lt;span class="o">)&lt;/span> Buffers up events &lt;span class="k">until&lt;/span> a condition is fulfilled
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="原理">原理&lt;/h3>
&lt;p>“Talk is cheap, show me the code.”&lt;/p>
&lt;h4 id="配置加载">配置加载&lt;/h4>
&lt;p>个人比较喜欢看源码来理解实现，即使是 C++。从浏览器请求入手发现运行时向&lt;code>/api/program&lt;/code> 发送了 &lt;code>POST&lt;/code> 请求，请求的内容是配置文件的地址。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223870171916.jpg" alt="">&lt;/p>
&lt;p>检查源码后，找到逻辑的实现在 &lt;code>src/gui.cpp:189&lt;/code>：&lt;/p>
&lt;ol>
&lt;li>创建新的 worker&lt;/li>
&lt;li>加载配置，将 JavaScrip 代码解析成 &lt;code>Configuration&lt;/code> 对象&lt;/li>
&lt;li>启动 worker，执行&lt;code>Configuration::apply()&lt;/code>&lt;/li>
&lt;li>卸载旧的 worker&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16224186469477.jpg" alt="">&lt;/p>
&lt;p>从 &lt;code>src/api/configuration.cpp:267&lt;/code> 处看：&lt;code>pipeline&lt;/code>、&lt;code>listen&lt;/code> 和 &lt;code>task&lt;/code> 配置实际在 Pipy 的配置中都是被抽象为 &lt;code>Pipeline&lt;/code> 对象，只是在类型上有差异分别为：&lt;code>NAMED&lt;/code>、&lt;code>LISTEN&lt;/code> 和 &lt;code>TASK&lt;/code>。比如 &lt;code>listen&lt;/code> 中可以通过 &lt;code>fork&lt;/code> 过滤器将事件的副本发送到指定的 &lt;code>pipeline&lt;/code> 中。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223897550113.jpg" alt="">&lt;/p>
&lt;h4 id="基于数据流事件的处理">基于数据流事件的处理&lt;/h4>
&lt;p>&lt;code>src/inbound.cpp:171&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223918853729.jpg" alt="">&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>Pipy 虽小（只有 11M），但以其可编程的特性提供了灵活的配置能力，潜力无限。&lt;/p>
&lt;p>Pipy 像处理 HTTP 一样处理任意的七层协议。内部版本支持Dubbo、Redis、Socks 等，目前正在迁移到开源版本。&lt;/p>
&lt;p>期待即将开源的 Portal，以及服务网格 Flomesh。持续关注，后面考虑再写几篇。&lt;/p>
&lt;p>“未来可期！”&lt;/p></description></item><item><title>使用 Quarkus 和 MicroProfile 实现微服务特性</title><link>https://atbug.com/microservicilities-quarkus/</link><pubDate>Wed, 26 May 2021 07:37:04 +0800</pubDate><guid>https://atbug.com/microservicilities-quarkus/</guid><description>
&lt;p>Quarkus 的文章之前写过三篇了，讲过了 Quarkus 的小而快。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/YcEqFm3oxlsEvJ3ckRbQyA">Hello, Quarkus&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/Dq3hQrXE4XWH-MyjBAGMEw">应&amp;quot;云&amp;quot;而生的 Java 框架 Quarkus：构建本机可执行文件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/1eqjYC36O3qm1XDw84aAPA">谁说 Java 不能用来跑 Serverless？&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>一直在酝酿写一篇 Quarkus 生态相关的，因为最近一直在忙 Meetup 的事情而搁浅。正好看到了这篇文章，就拿来翻译一下，补全云原生中的“微服务”这一块。&lt;/p>
&lt;p>本文译自&lt;a href="https://www.infoq.com/articles/microservicilities-quarkus">《Implementing Microservicilities with Quarkus and MicroProfile》&lt;/a> 。&lt;/p>
&lt;hr>
&lt;h2 id="为什么要使用微服务特性">为什么要使用微服务特性？&lt;/h2>
&lt;p>在微服务架构中，一个应用程序是由几个相互连接的服务组成的，这些服务一起工作来实现所需的业务功能。&lt;/p>
&lt;p>因此，典型的企业微服务架构如下所示：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/26/16219855266680.jpg" alt="">&lt;/p>
&lt;p>刚开始，使用微服务架构实现应用程序看起来很容易。&lt;/p>
&lt;p>但是，因为有了单体架构没有一些新的挑战，因此做起来并不容器&lt;/p>
&lt;p>举几个例子，比如容错、服务发现、扩展性、日志记录和跟踪。&lt;/p>
&lt;p>为了解决这些挑战，每个微服务都应实现我们在 Red Hat 所说的“微服务特性”。&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 该术语是指除业务逻辑以外，服务还必须实现来解决的跨领域关注点清单，如下图所示：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/26/16219855419604.jpg" alt="">&lt;/p>
&lt;p>可以用任何语言（Java、Go、JavaScript）或任何框架（Spring Boot、Quarkus）实现业务逻辑，但是围绕业务逻辑，应实现以下关注点：&lt;/p>
&lt;p>&lt;strong>API&lt;/strong>：可通过一组定义的 API 操作来访问该服务。例如，对于 RESTful Web API，HTTP 用作协议。此外，可以使用诸如 Swagger 之类的工具来记录 API 。
&lt;strong>服务发现（Discovery）&lt;/strong>：服务需要发现其他服务。&lt;/p>
&lt;p>&lt;strong>调用服务（Invocation）&lt;/strong>：发现服务后，需要使用一组参数对其进行调用，并选择性地返回响应。&lt;/p>
&lt;p>&lt;strong>弹性（Elasticity）&lt;/strong>：微服务架构的重要特征之一是每个服务都是弹性的，这意味着可以根据系统的关键程度或当前的工作量等参数独立地进行缩放。（译者注：这里的弹性只是资源的弹性）&lt;/p>
&lt;p>&lt;strong>弹性（Resiliency）&lt;/strong>：在微服务架构中，我们在开发时应牢记失败，尤其是在与其他服务进行通信时。在单体应用中，整个应用程序处于启动或关闭状态。但是，当此应用程序分解为微服务体系结构时，该应用程序由多个服务组成，并且所有这些服务都通过网络互连，这意味着该应用程序的某些部分可能正在运行，而其他部分可能会失败。遏制故障对避免通过其他服务传播错误很重要。弹性（或应用程序弹性）是应用程序/服务对问题做出反应并仍然提供最佳结果的能力。（译者注：这里的弹性与容错相关，对失败处理的弹性）&lt;/p>
&lt;p>&lt;strong>管道（Pipeline）&lt;/strong>：服务应独立部署，而无需进行任何形式的编排。因此，每个服务应具有自己的部署管道。&lt;/p>
&lt;p>&lt;strong>身份验证（Authentication）&lt;/strong>：关于微服务体系结构中的安全性的关键方面之一是如何对内部服务之间的调用进行身份验证/授权。Web 令牌（通常是令牌）是在内部服务中安全地表示声明的首选方式。&lt;/p>
&lt;p>&lt;strong>日志记录（Logging）&lt;/strong>：在单体应用程序中，日志记录很简单，因为该应用程序的所有组件都在同一节点上运行。然后现在组件以服务的形式分布在多个节点上，因此，要拥有完整的日志记录视图，需要一个统一的日志记录系统/数据收集器。&lt;/p>
&lt;p>&lt;strong>监控（Monitoring）&lt;/strong>：衡量系统的性能、了解应用程序的整体运行状况，以及在出现问题时发出警报是保持基于微服务的应用程序正确运行的关键方面。监控是控制应用程序的关键方面。&lt;/p>
&lt;p>&lt;strong>跟踪（Tracing）&lt;/strong>：跟踪用于可视化程序的流程和数据进度。作为开发人员/运维人员，当我们需要检查用户在整个应用程序中的行程时，这特别有用。&lt;/p>
&lt;p>Kubernetes正在成为部署微服务的实际工具。这是一个用于自动化、编排、扩展和管理容器的开源系统。&lt;/p>
&lt;p>使用 Kubernetes 时，十个微服务特性中只有三个被涵盖。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/26/16219855537970.jpg" alt="">&lt;/p>
&lt;p>**服务发现 **是通过 &lt;em>Kubernetes 服务&lt;/em>的概念实现的。它提供了一种使用稳定的虚拟 IP 和 DNS 名称将 Kubernetes Pod 分组（作为一个整体）的方法。发现服务只是使用 Kubernetes 的服务名作为 hostname 进行请求。&lt;/p>
&lt;p>使用 Kubernetes 可以很容易地&lt;strong>调用服务&lt;/strong>，因为平台本身提供了调用任何服务所需的网络。&lt;/p>
&lt;p>从一开始，Kubernetes 就一直在考虑&lt;strong>弹性&lt;/strong>（或可伸缩性），例如运行时&lt;code>kubectl scale deployment myservice --replicas=5 command&lt;/code>，myservice deployment 可伸缩至五个副本或实例。Kubernetes 平台负责寻找合适的节点，部署服务并始终保持所需数量的副本并正常运行。&lt;/p>
&lt;p>但是其余的微服务特性又如何呢？Kubernetes 仅涵盖其中的三个，那么我们如何实现剩下的呢？&lt;/p>
&lt;p>根据所使用的语言或框架，可以遵循的策略很多。但是在本文中，我们将了解如何使用 &lt;a href="https://quarkus.io/">Quarkus&lt;/a> 实现其中的一些&lt;a href="https://quarkus.io/">策略&lt;/a>。&lt;/p>
&lt;h2 id="什么是-quarkus">什么是 Quarkus？&lt;/h2>
&lt;p>&lt;a href="https://quarkus.io/">Quarkus&lt;/a> 是针对 Java 虚拟机（JVM）和本机编译的全栈 Kubernetes 本地 Java 框架，专门针对容器优化 Java，使其成为无服务器（Serverless）、云和 Kubernetes 环境的高效平台。&lt;/p>
&lt;p>Instead of reinventing the wheel, Quarkus uses well-known enterprise-grade frameworks backed by standards/specifications and makes them compilable to a binary using &lt;a href="https://www.graalvm.org/">GraalVM&lt;/a>.
Quarkus不用重新发明轮子，而是使用以标准/规范为后盾的知名企业级框架，并使用 &lt;a href="https://www.graalvm.org/">GraalVM&lt;/a> 将其编译为二进制&lt;a href="https://www.graalvm.org/">文件&lt;/a>。&lt;/p>
&lt;h2 id="什么是-microprofile">什么是 MicroProfile？&lt;/h2>
&lt;p>Quarkus 与 &lt;a href="https://microprofile.io/">MicroProfile&lt;/a> 规范集成，从而将企业 Java 生态系统迁移到微服务体系结构中。&lt;/p>
&lt;p>在下图中，我们看到了构成 MicroProfile 规范的所有 API。某些 API（例如 CDI、JSON-P 和 JAX-RS）基于 &lt;a href="https://jakarta.ee/">Jakarta EE&lt;/a>（以前的 Java EE）规范。其余的由 Java 社区开发。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/26/16219855657899.jpg" alt="">&lt;/p>
&lt;p>Let’s implement API, invocation, resilience, authentication, logging, monitoring, and tracing microservicilities using Quarkus.
让我们使用Quarkus实现API、调用、弹性、身份验证、日志记录、监视和跟踪微服务特性。&lt;/p>
&lt;h2 id="如何使用-quarkus-实现微服务特性">如何使用 Quarkus 实现微服务特性&lt;/h2>
&lt;h3 id="入门">入门&lt;/h3>
&lt;p>开始使用 Quarkus 的最快方法是通过在&lt;a href="https://code.quarkus.io/">开始页面&lt;/a>中选择所需的依赖。对于当前示例，选择如下依赖关系以满足微服务需求：&lt;/p>
&lt;p>API：RESTEasy JAX-RS、RESTEasy JSON-B、OpenAPI
调用：REST Client JSON-B
弹性：Fault Tolerance
认证：JWT
记录：GELF
监控：Micrometer metrics
跟踪：OpenTracing&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/26/16219855795760.jpg" alt="">&lt;/p>
&lt;p>我们可以手动选择各自的依赖关系，或浏览以下链接 &lt;a href="https://code.quarkus.io/?a=microservicilities-quarkus&amp;amp;e=resteasy&amp;amp;e=resteasy-jsonb&amp;amp;e=rest-client-jsonb&amp;amp;e=smallrye-jwt&amp;amp;e=smallrye-openapi&amp;amp;e=logging-gelf&amp;amp;e=smallrye-fault-tolerance&amp;amp;e=micrometer&amp;amp;e=smallrye-opentracing">Quarkus 微服务特性生成器&lt;/a>，所有这些都会被选中。然后按“生成应用程序”按钮以下载包含支架应用程序的zip文件。&lt;/p>
&lt;h3 id="服务">服务&lt;/h3>
&lt;p>对于当前示例，仅使用两个服务生成了一个非常简单的应用程序。一个名为“&lt;em>评级服务 rating service&lt;/em>”的服务返回给定书籍的评级，而另一个名为“&lt;em>书籍服务 book service&lt;/em>”的服务则返回一本书的信息及其评级。服务之间的所有调用都必须经过身份验证。&lt;/p>
&lt;p>在下图中，我们看到了整个系统的概述：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/26/16219855936882.jpg" alt="">&lt;/p>
&lt;p>&lt;em>评级服务&lt;/em>已经开发并作为 Linux 容器提供。通过运行以下命令，在端口 9090 上启动服务：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --rm -ti -p 9090:8080
quay.io/lordofthejars/rating-service:1.0.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>要验证服务，请向 http://localhost:9090/rate/1 发出请求&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl localhost:8080/rate/1 -vv
&amp;gt; GET /rate/1 HTTP/1.1
&amp;gt; Host: localhost:8080
&amp;gt; User-Agent: curl/7.64.1
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 &lt;span class="m">401&lt;/span> Unauthorized
&amp;lt; www-authenticate: Bearer &lt;span class="o">{&lt;/span>token&lt;span class="o">}&lt;/span>
&amp;lt; Content-Length: &lt;span class="m">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回的状态码是 &lt;code>401 Unauthorized&lt;/code> 因为没有在请求中携带令牌（JWT）提供授权信息。只有带有 &lt;em>group &lt;code>Echoer&lt;/code>&lt;/em> 有效令牌才能访问评级服务。&lt;/p>
&lt;h3 id="api">API&lt;/h3>
&lt;p>Quarkus 使用众所周知的 JAX-RS 规范来定义 RESTful Web API。在幕后，Quarkus 使用 RESTEasy 实现直接与 Vert.X 框架一起使用，而无需使用 Servlet 技术。&lt;/p>
&lt;p>让我们为实现最常见操作的图书服务定义一个 API：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.Consumes&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.DELETE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.GET&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.POST&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.Path&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.PathParam&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.Produces&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.QueryParam&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.core.MediaType&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.core.Response&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.core.UriBuilder&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/book&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">BookResource&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@GET&lt;/span>
&lt;span class="nd">@Path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/{bookId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Produces&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Book&lt;/span> &lt;span class="nf">book&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;bookId&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">bookId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// logic
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="nd">@POST&lt;/span>
&lt;span class="nd">@Consumes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Response&lt;/span> &lt;span class="nf">getBook&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Book&lt;/span> &lt;span class="n">book&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// logic
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">created&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">UriBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">fromResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BookResource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">book&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bookId&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@DELETE&lt;/span>
&lt;span class="nd">@Path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/{bookId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Response&lt;/span> &lt;span class="nf">delete&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;bookId&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">bookId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// logic
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">noContent&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@GET&lt;/span>
&lt;span class="nd">@Produces&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;search&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Response&lt;/span> &lt;span class="nf">searchBook&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@QueryParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">description&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// logic
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ok&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">books&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先要注意的是，定义了四个不同的端点：&lt;/p>
&lt;ul>
&lt;li>&lt;code>GET /book/{bookId}&lt;/code> 使用 GET HTTP 方法返回带有其评级的图书信息。return 元素会自动解编为 JSON。&lt;/li>
&lt;li>&lt;code>POST /book&lt;/code> 使用 POST HTTP 方法插入一本书作为正文内容。正文内容会自动从 JSON 编组到 Java 对象。&lt;/li>
&lt;li>&lt;code>DELETE /book/{bookId}&lt;/code> 使用 DELETE HTTP 方法通过书的 ID 删除书。&lt;/li>
&lt;li>&lt;code>GET /book/search?description={description}&lt;/code> 按书名搜索书籍。&lt;/li>
&lt;/ul>
&lt;p>注意的第二件事是返回类型，有时是 Java 对象，有时是 Java 实例 &lt;code>javax.ws.rs.core.Response&lt;/code>。使用 Java 对象时，会将其从 Java 对象序列化为 &lt;code>@Produces&lt;/code> 注解中设置的媒体类型。在此特定服务中，输出为 JSON 文档。通过该 &lt;code>Response&lt;/code> 对象，我们可以对返回给调用方的内容进行细粒度的控制。可以设置 HTTP 状态代码、标头或返回给调用方的内容。取决于使用场景，是偏爱一种方法而不是另一种方法。&lt;/p>
&lt;h3 id="调用">调用&lt;/h3>
&lt;p>在定义了用于访问&lt;em>图书服务&lt;/em>的 API 之后，是时候开发一段代码来调用&lt;em>评级服务&lt;/em>以检索图书的评级了。&lt;/p>
&lt;p>Quarkus 使用 &lt;a href="https://github.com/eclipse/microprofile-rest-client">MicroProfile Rest Client&lt;/a> 规范来访问外部（HTTP）服务。它提供了一种类型安全的方法，以通过某些 JAX-RS 2.0 API 通过 HTTP 调用 RESTful 服务，以实现一致性和更易于重用。&lt;/p>
&lt;p>要创建的第一个元素是一个使用 JAX-RS 批注表示远程服务的接口。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.GET&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.Path&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.PathParam&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.Produces&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.core.MediaType&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.eclipse.microprofile.rest.client.inject.RegisterRestClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/rate&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@RegisterRestClient&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">RatingService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@GET&lt;/span>
&lt;span class="nd">@Path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/{bookId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Produces&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">Rate&lt;/span> &lt;span class="nf">getRate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;bookId&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">bookId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the getRate() method is called, a remote HTTP call is invoked at /rate/{bookId} replacing the bookId with the value set in the method parameter. It is important to annotate the interface with the @RegisterRestClient annotation.
Then the RatingService interface needs to be injected into BookResource to execute the remote calls.
当 &lt;code>getRate() &lt;/code>方法被调用时，远程 HTTP 请求在调用 &lt;code>/rate/{bookId}&lt;/code> 替换 &lt;code>bookId&lt;/code> 用在该方法中的参数值集合。用 &lt;code>@RegisterRestClient&lt;/code> 注解对接口进行注解很重要。&lt;/p>
&lt;p>然后 &lt;code>RatingService&lt;/code> 需要将接口注入 &lt;code>BookResource&lt;/code> 以执行远程调用。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.eclipse.microprofile.rest.client.inject.RestClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@RestClient&lt;/span>
&lt;span class="n">RatingService&lt;/span> &lt;span class="n">ratingService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@GET&lt;/span>
&lt;span class="nd">@Path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/{bookId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Produces&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Book&lt;/span> &lt;span class="nf">book&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;bookId&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">bookId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">Rate&lt;/span> &lt;span class="n">rate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ratingService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bookId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Book&lt;/span> &lt;span class="n">book&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findBook&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bookId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">book&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The @RestClient annotation injects a proxied instance of the interface, providing the implementation of the client.
The last thing is to configure the service location (the hostname part). In Quarkus, the configuration properties are set in src/main/resources/application.properties file. To configure the location of the service, we need to use the fully qualified name of the Rest Client interface with URL as key, and the location as a value:
该 &lt;code>@RestClient&lt;/code> 注解注入界面的代理实例，提供客户端的实现。&lt;/p>
&lt;p>最后一件事是配置服务位置（&lt;em>hostname&lt;/em> 部分）。在 Quarkus 中，配置属性在 &lt;code>src/main/resources/application.properties&lt;/code> 文件中设置。要配置服务的位置，我们需要使用 Rest Client 接口的标准名称，其中 URL 作为键，而 location 作为值：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">org.acme.RatingService/mp-rest/url=http://localhost:9090
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在正确访问&lt;em>评估服务&lt;/em>而没有 &lt;code>401 Unauthorized&lt;/code> 问题之前，必须解决相互认证问题。&lt;/p>
&lt;h3 id="身份验证">身份验证&lt;/h3>
&lt;p>基于令牌的身份验证机制允许系统基于安全令牌对身份进行身份验证、授权和验证。Quarkus 与 &lt;a href="https://github.com/eclipse/microprofile-jwt-auth">MicroProfile JWT RBAC 安全&lt;/a>规范集成在一起，以使用 JWT 令牌保护服务。&lt;/p>
&lt;p>要使用 MicroProfile JWT RBAC 安全性保护端点，我们只需要使用批注对方法进行 &lt;code>@RolesAllowed&lt;/code> 注解。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@GET&lt;/span>
&lt;span class="nd">@Path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/{bookId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@RolesAllowed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Echoer&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Produces&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Book&lt;/span> &lt;span class="nf">book&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;bookId&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">bookId&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后，我们配置令牌的发行方和公钥的位置，以验证令牌在 &lt;code>application.properties&lt;/code> 文件中的签名：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">mp.jwt.verify.publickey.location=https://raw.githubusercontent.com/redhat-developer-demos/quarkus-tutorial/master/jwt-token/quarkus.jwt.pub
mp.jwt.verify.issuer=https://quarkus.io/using-jwt-rbac
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此扩展名自动验证：令牌有效；发行方是正确的；令牌尚未修改；签名有效；没有过期。&lt;/p>
&lt;p>这两种&lt;em>图书服务&lt;/em>和&lt;em>评级服务&lt;/em>现在是由同一 JWT 发行方和密钥保护，因此服务之间的通信要求验证提供在令牌的有效承载用户 &lt;code>Authentication&lt;/code> 头部。&lt;/p>
&lt;p>&lt;em>评级服务&lt;/em>启动和运行，让我们开始用下面的命令&lt;em>图书服务&lt;/em>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">./mvnw compile quarkus:dev
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we can make a request to get book information providing a valid JSON Web Token as a bearer token.
The generation of the token is out of the scope of this article, and a token has been already generated:
最后，我们可以请求获取提供有效 JSON Web 令牌作为承载令牌的图书信息。&lt;/p>
&lt;p>令牌的生成不在本文的讨论范围之内，并且已经生成了令牌：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/26/16219856429022.jpg" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">curl -H &amp;#34;Authorization: Bearer eyJraWQiOiJcL3ByaXZhdGVLZXkucGVtIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJqZG9lLXVzaW5nLWp3dC1yYmFjIiwiYXVkIjoidXNpbmctand0LXJiYWMiLCJ1cG4iOiJqZG9lQHF1YXJrdXMuaW8iLCJiaXJ0aGRhdGUiOiIyMDAxLTA3LTEzIiwiYXV0aF90aW1lIjoxNTcwMDk0MTcxLCJpc3MiOiJodHRwczpcL1wvcXVhcmt1cy5pb1wvdXNpbmctand0LXJiYWMiLCJyb2xlTWFwcGluZ3MiOnsiZ3JvdXAyIjoiR3JvdXAyTWFwcGVkUm9sZSIsImdyb3VwMSI6Ikdyb3VwMU1hcHBlZFJvbGUifSwiZ3JvdXBzIjpbIkVjaG9lciIsIlRlc3RlciIsIlN1YnNjcmliZXIiLCJncm91cDIiXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiamRvZSIsImV4cCI6MjIwMDgxNDE3MSwiaWF0IjoxNTcwMDk0MTcxLCJqdGkiOiJhLTEyMyJ9.Hzr41h3_uewy-g2B-sonOiBObtcpkgzqmF4bT3cO58v45AIOiegl7HIx7QgEZHRO4PdUtR34x9W23VJY7NJ545ucpCuKnEV1uRlspJyQevfI-mSRg1bHlMmdDt661-V3KmQES8WX2B2uqirykO5fCeCp3womboilzCq4VtxbmM2qgf6ag8rUNnTCLuCgEoulGwTn0F5lCrom-7dJOTryW1KI0qUWHMMwl4TX5cLmqJLgBzJapzc5_yEfgQZ9qXzvsT8zeOWSKKPLm7LFVt2YihkXa80lWcjewwt61rfQkpmqSzAHL0QIs7CsM9GfnoYc0j9po83-P3GJiBMMFmn-vg&amp;#34; localhost:8080/book/1 -v
&lt;/code>&lt;/pre>&lt;/div>&lt;p>响应又是 forbidden 错误：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt; HTTP/1.1 401 Unauthorized
&amp;lt; Content-Length: 0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可能想知道为什么在提供有效令牌后仍然出现此错误。如果我们检查图书服务的控制台，就会发现抛出了以下异常：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">org.jboss.resteasy.client.exception.ResteasyWebApplicationException: Unknown error, status code 401
at org.jboss.resteasy.client.exception.WebApplicationExceptionWrapper.wrap(WebApplicationExceptionWrapper.java:107)
at org.jboss.resteasy.microprofile.client.DefaultResponseExceptionMapper.toThrowable(DefaultResponseExceptionMapper.java:21)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>发生此异常的原因是，我们已获得身份验证并有权访问&lt;em>图书服务&lt;/em>，但承载令牌尚未传播到&lt;em>评级服务&lt;/em>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/26/16219856618998.jpg" alt="">&lt;/p>
&lt;p>为了自动将 &lt;code>Authorization&lt;/code> 标头从传入请求传播到其余客户端请求，需要进行两次修改。&lt;/p>
&lt;p>第一个修改是修改 Rest Client 界面，并使用对其进行注解 &lt;code>org.eclipse.microprofile.rest.client.inject.RegisterClientHeaders&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/rate&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@RegisterRestClient&lt;/span>
&lt;span class="nd">@RegisterClientHeaders&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">RatingService&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第二个修改是配置在请求之间传播哪些标头。这是在 &lt;code>application.properties&lt;/code> 文件中设置的：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"> org.eclipse.microprofile.rest.client.propagateHeaders=Authorization
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行与之前相同的 curl 命令，我们将获得正确的输出：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&amp;lt; HTTP/1.1 &lt;span class="m">200&lt;/span> OK
&amp;lt; Content-Length: &lt;span class="m">39&lt;/span>
&amp;lt; Content-Type: application/json
&amp;lt;
* Connection &lt;span class="c1">#0 to host localhost left intact&lt;/span>
&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;bookId&amp;#34;&lt;/span>:2,&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;Book 2&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;rating&amp;#34;&lt;/span>:1&lt;span class="o">}&lt;/span>* Closing connection &lt;span class="m">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="弹性">弹性&lt;/h3>
&lt;p>在微服务架构中，具有容错能力很重要，这样可以避免故障从一个服务传播到该服务的所有直接和间接调用方。Quarkus 将 &lt;a href="https://github.com/eclipse/microprofile-fault-tolerance">MicroProfile Fault Tolerance&lt;/a> 规范与以下用于处理故障的注释集成在一起：&lt;/p>
&lt;p>●    &lt;code>@Timeout&lt;/code>：定义抛出异常之前执行的最长时间。
●    &lt;code>@Retry&lt;/code>：如果调用失败，请再次重试执行。
●    &lt;code>@Bulkhead&lt;/code>：限制并发执行，以使该区域中的故障不会使整个系统过载。
●    &lt;code>@CircuitBreaker&lt;/code>：执行反复失败时，将自动进行快速故障切换。
●    &lt;code>@Fallback&lt;/code>：执行失败时，提供备用解决方案/默认值。&lt;/p>
&lt;p>让我们添加三次重试，其中重试之间的延迟计时器为一秒，以防访问&lt;em>评级服务&lt;/em>时发生错误。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Retry&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">maxRetries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1000&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">Rate&lt;/span> &lt;span class="nf">getRate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;bookId&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">bookId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在，停止&lt;em>评级服务&lt;/em>并执行请求。引发以下异常：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">org.jboss.resteasy.spi.UnhandledException: javax.ws.rs.ProcessingException: RESTEASY004655: Unable to invoke request:
org.apache.http.conn.HttpHostConnectException: Connect to localhost:9090 [localhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused
&lt;/code>&lt;/pre>&lt;/div>&lt;p>显然，这里存在错误，但是请注意，由于执行了三次重试（延迟一秒），因此引发异常之前，经过了三秒钟。&lt;/p>
&lt;p>在这种情况下，&lt;em>评级服务&lt;/em>已关闭，因此无法进行恢复，但是在一个实际示例中，&lt;em>评级服务&lt;/em>可能仅在短时间内就恢复了，或者部署了该服务的多个副本，因此可以简单地重试操作可能足以恢复并提供有效的响应。&lt;/p>
&lt;p>但是，当引发异常时重试次数不够时，我们可以将错误传播给调用方，也可以为调用提供替代值。这种选择可以是对另一个系统的调用（即分布式缓存）或静态值。&lt;/p>
&lt;p>对于此用例，当与评级服务的连接失败时，将返回评级值 0。&lt;/p>
&lt;p>要实现回退逻辑，首先要做的是实现将 &lt;code>org.eclipse.microprofile.faulttolerance.FallbackHandler&lt;/code> 返回类型设置为与回退策略方法提供的替代类型相同的接口。对于这种情况，将 &lt;code>Rate&lt;/code> 返回默认对象。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.eclipse.microprofile.faulttolerance.ExecutionContext&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.eclipse.microprofile.faulttolerance.FallbackHandler&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RatingServiceFallback&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">FallbackHandler&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Rate&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Rate&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ExecutionContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Rate&lt;/span> &lt;span class="n">rate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Rate&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">rate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">rate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">rate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后要做的是用注解对 &lt;code>getRating()&lt;/code> 方法进行 &lt;code>@org.eclipse.microprofile.faulttolerance.Fallback&lt;/code> 注解，以配置无法恢复时要执行的回退类。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Retry&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">maxRetries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1000&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Fallback&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RatingServiceFallback&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">Rate&lt;/span> &lt;span class="nf">getRate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;bookId&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">bookId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果重复与以前相同的请求，则不会引发任何异常，但是有效值的输出将 rating 字段设置为 0。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">* Connection #0 to host localhost left intact
{&amp;#34;bookId&amp;#34;:2,&amp;#34;name&amp;#34;:&amp;#34;Book 2&amp;#34;,&amp;#34;rating&amp;#34;:0}* Closing connection 0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>规范提供的任何其他策略都可以使用相同的方法。例如，对于断路器模式：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@CircuitBreaker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">requestVolumeThreshold&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">4&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">failureRatio&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">75&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1000&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果在四个连续调用的滚动窗口中发生了三个（&lt;em>4 x 0.75&lt;/em>）故障，则电路将断开 1000 ms，然后恢复到半断开状态。如果在半开时调用成功，则将其再次关闭。否则，它将保持打开状态&lt;/p>
&lt;h3 id="日志记录">日志记录&lt;/h3>
&lt;p>在微服务架构中，建议将所有服务的日志收集在一个统一的日志中，以更有效地使用和理解。&lt;/p>
&lt;p>一种解决方案是使用 &lt;a href="https://www.fluentd.org/">Fluentd&lt;/a>，它是 &lt;a href="https://www.fluentd.org/">Kubernetes&lt;/a> 中用于统一日志记录层的开源数据收集器。Quarkus 使用 Graylog 扩展日志格式（GELF）与 Fluentd 集成。&lt;/p>
&lt;p>集成真的很简单。首先，与其他任何 Quarkus 应用程序一样使用日志逻辑：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.jboss.logging.Logger&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="n">LOG&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BookResource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="nd">@GET&lt;/span>
&lt;span class="nd">@Path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/{bookId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@RolesAllowed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Echoer&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Produces&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Book&lt;/span> &lt;span class="nf">book&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;bookId&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">bookId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">LOG&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Get Book&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来，启用 GELF 格式并设置 Fluentd 服务器位置：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">quarkus.log.handler.gelf.enabled=true
quarkus.log.handler.gelf.host=localhost
quarkus.log.handler.gelf.port=12201
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后，我们可以向记录的端点发出请求：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -H &lt;span class="s2">&amp;#34;Authorization: Bearer ...&amp;#34;&lt;/span> localhost:8080/book/1
&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;bookId&amp;#34;&lt;/span>:1,&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;Book 1&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;rating&amp;#34;&lt;/span>:3&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出方面没有任何变化，但是日志行已传输到 Fluentd。如果使用 &lt;a href="https://www.elastic.co/kibana">Kibana&lt;/a> 可视化数据，我们将看到存储的日志行：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/26/16219856876241.jpg" alt="">&lt;/p>
&lt;h3 id="监控">监控&lt;/h3>
&lt;p>监控是另一个需要在我们的微服务架构中实现的 “微服务特性”。Quarkus 与 &lt;a href="https://micrometer.io/">Micrometer&lt;/a> 集成在一起以进行应用程序监控。Micrometer 提供了最流行的监控系统的单个入口点，使你无需供应商锁定即可检测基于 JVM 的应用程序代码。&lt;/p>
&lt;p>对于此示例，监控输出采用 &lt;a href="https://prometheus.io/">Prometheus&lt;/a> 格式，但 Micrometer（和 Quarkus）还支持其他格式，例如 Azure Monitor、Stackdriver、SignalFx、StatsD 和 DataDog。&lt;/p>
&lt;p>你可以注册以下 Maven 依赖项以提供 Prometheus 输出：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>io.quarkus&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>quarkus-micrometer-registry-prometheus&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认情况下，Micrometer 扩展注册了一些与系统，JVM 或 HTTP 相关的度量。收集的指标的一个子集在 &lt;code>/q/metrics&lt;/code> 端点处可用，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl localhost:8080/q/metrics
jvm_threads_states_threads&lt;span class="o">{&lt;/span>&lt;span class="nv">state&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;runnable&amp;#34;&lt;/span>,&lt;span class="o">}&lt;/span> 22.0
jvm_threads_states_threads&lt;span class="o">{&lt;/span>&lt;span class="nv">state&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;blocked&amp;#34;&lt;/span>,&lt;span class="o">}&lt;/span> 0.0
jvm_threads_states_threads&lt;span class="o">{&lt;/span>&lt;span class="nv">state&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;waiting&amp;#34;&lt;/span>,&lt;span class="o">}&lt;/span> 10.0
http_server_bytes_read_count 1.0
http_server_bytes_read_sum 0.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是，也可以使用 Micrometer API 来实现特定于应用程序的指标。
让我们实现一个自定义指标，该指标用于衡量评价最高的图书。&lt;/p>
&lt;p>使用 &lt;code>io.micrometer.core.instrument.MeterRegistry&lt;/code> 该类可以完成指标（在这种情况下为量规）的注册。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">MeterRegistry&lt;/span> &lt;span class="n">registry&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">LongAccumulator&lt;/span> &lt;span class="n">highestRating&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LongAccumulator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">BookResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MeterRegistry&lt;/span> &lt;span class="n">registry&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">registry&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">gauge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;book.rating.max&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">BookResource&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">highestRatingBook&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>请求一下，并验证量规是否正确更新。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -H &lt;span class="s2">&amp;#34;Authorization: Bearer ...&amp;#34;&lt;/span> localhost:8080/book/1
&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;bookId&amp;#34;&lt;/span>:1,&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;Book 1&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;rating&amp;#34;&lt;/span>:3&lt;span class="o">}&lt;/span>
curl localhost:8080/q/metrics
&lt;span class="c1"># HELP book_rating_max&lt;/span>
&lt;span class="c1"># TYPE book_rating_max gauge&lt;/span>
book_rating_max 3.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们还可以设置一个计时器来记录从&lt;em>评级服务&lt;/em>获取评级信息所花费的时间。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Supplier&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Rate&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rateSupplier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ratingService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bookId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">};&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">Rate&lt;/span> &lt;span class="n">rate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">timer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;book.rating.test&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">wrap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rateSupplier&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>请求一下，并验证收集评价​​所花费的时间。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># HELP book_rating_test_seconds
# TYPE book_rating_test_seconds summary
book_rating_test_seconds_count 4.0
book_rating_test_seconds_sum 1.05489108
# HELP book_rating_test_seconds_max
# TYPE book_rating_test_seconds_max gauge
book_rating_test_seconds_max 1.018622001
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Micrometer 使用 &lt;code>MeterFilter&lt;/code> 实例来自定义 &lt;code>MeterRegistry&lt;/code> 实例发出的度量。Micrometer 扩展将检测 &lt;code>MeterFilter&lt;/code> CDI bean，并在初始化 &lt;code>MeterRegistry&lt;/code> 实例时使用它们。&lt;/p>
&lt;p>例如，我们可以定义一个通用标签来设置运行应用程序的环境（产品、测试、预发布等）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Singleton&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MicrometerCustomConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Produces&lt;/span>
&lt;span class="nd">@Singleton&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">MeterFilter&lt;/span> &lt;span class="nf">configureAllRegistries&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">MeterFilter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">commonTags&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">Tag&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">of&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;env&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;prod&amp;#34;&lt;/span>&lt;span class="o">)));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>发送新请求并验证指标是否已标记。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">http_client_requests_seconds_max{clientName=&amp;#34;localhost&amp;#34;,env=&amp;#34;prod&amp;#34;,method=&amp;#34;GET&amp;#34;,outcome=&amp;#34;SUCCESS&amp;#34;,status=&amp;#34;200&amp;#34;,uri=&amp;#34;/rate/2&amp;#34;,} 0.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>请注意 &lt;code>env&lt;/code> 包含值为 &lt;code>prod&lt;/code> 的标签。&lt;/p>
&lt;h3 id="跟踪">跟踪&lt;/h3>
&lt;p>Quarkus 应用程序利用 &lt;a href="https://opentracing.io/">OpenTracing&lt;/a> 规范为交互式 Web 应用程序提供分布式跟踪。&lt;/p>
&lt;p>让我们配置 OpenTracing 以连接到 Jaeger 服务器，将 book-service 设置为服务名称以标识跟踪：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">quarkus.jaeger.enabled=true
quarkus.jaeger.endpoint=http://localhost:14268/api/traces
quarkus.jaeger.service-name=book-service
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在发一个请求：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -H &lt;span class="s2">&amp;#34;Authorization: Bearer ...&amp;#34;&lt;/span> localhost:8080/book/1 &lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;bookId&amp;#34;&lt;/span>:1,&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;Book 1&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;rating&amp;#34;&lt;/span>:3&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>访问Jaeger UI以验证是否跟踪了该调用：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/26/16219857070960.jpg" alt="">&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>与开发整体应用程序相比，开发和实现微服务体系结构更具挑战性。我们认为，微服务可以驱动你根据应用程序基础结构正确地开发服务。&lt;/p>
&lt;p>此处介绍的大多数微服务（API 和管道除外）是新的，或者在整体应用中实现方式有所不同。原因是现在应用程序被分解成几部分，所有部分都在网络中互连。&lt;/p>
&lt;p>如果你May 26, 2021打算开发微服务并将其部署到 Kubernetes，那么 Quarkus 是一个很好的解决方案，因为它可以与 Kubernetes 顺利集成。实施大多数微服务很简单，只需要几行代码。&lt;/p>
&lt;p>本文演示的源代码可以在 &lt;a href="https://github.com/lordofthejars/microservicilities-quarkus">github&lt;/a> 上找到。&lt;/p>
&lt;h2 id="关于作者">关于作者&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/26/16219857200384.jpg" alt="">&lt;/p>
&lt;p>Alex Soto 是 Red Hat 开发人员经验总监。他对 Java 世界，软件自动化充满热情，并且他相信开源软件模型。Soto 是 &lt;a href="https://www.manning.com/books/testing-java-microservices">Manning&lt;/a> 的合著者 | &lt;a href="https://www.manning.com/books/testing-java-microservices">测试 Java 微服务&lt;/a>和 &lt;a href="https://www.oreilly.com/library/view/quarkus-cookbook/9781492062646/">O&amp;rsquo;Reilly Quarkus Cookbook&lt;/a> 和几个开源项目的贡献者。自 2017 年以来一直是 Java 冠军，他还是 Salle URL University 的国际演讲者和老师。你可以在 Twitter （Alex Soto）上关注他，以随时了解 Kubernetes 和 Java 世界中正在发生的事情。&lt;/p></description></item><item><title>开箱即用的 Prometheus 告警规则集</title><link>https://atbug.com/introduction-awesome-prometheus-alerts/</link><pubDate>Thu, 13 May 2021 08:01:00 +0800</pubDate><guid>https://atbug.com/introduction-awesome-prometheus-alerts/</guid><description>
&lt;p>在配置系统监控的时候，是不是即使绞尽脑汁监控的也还是不够全面，或者不知如何获取想要的指标。&lt;/p>
&lt;p>&lt;a href="https://awesome-prometheus-alerts.grep.to/">Awesome Prometheus alerts&lt;/a> 维护了一套开箱即用的 Prometheus 告警规则集合，有 300 多个告警规则。同时，还是说明如何获取对应的指标。这些规则，对每个 Prometheus 都是通用的。&lt;/p>
&lt;p>涉及如主机、硬件、容器等基础资源，到数据库、消息代理、运行时、反向代理、负责均衡器，运行时、服务编排，甚至是网络层面和 Prometheus 自身和集群。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/13/alertrulescover.png" alt="alert_rules">&lt;/p>
&lt;p>Prometheus 的安装和配置不做赘述，配置可以看&lt;a href="https://awesome-prometheus-alerts.grep.to/alertmanager">这里&lt;/a>。下面简单看下几个常用规则&lt;/p>
&lt;h3 id="主机和硬件资源">主机和硬件资源&lt;/h3>
&lt;p>主机和硬件资源的告警依赖 &lt;a href="https://github.com/prometheus/node_exporter">node-exporter&lt;/a> 输出的指标。例如：&lt;/p>
&lt;h4 id="内存不足">内存不足&lt;/h4>
&lt;p>可用内存低于阈值 &lt;code>10%&lt;/code> 就会触发告警。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HostOutOfMemory&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 &amp;lt; 10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Host out of memory (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Node memory is filling up (&amp;lt; 10% left)\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="主机异常的网络吞吐">主机异常的网络吞吐&lt;/h5>
&lt;p>最近两分钟入站的流量超过 &lt;code>100m&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>rate&lt;/code> 语法见&lt;a href="https://prometheus.io/docs/prometheus/latest/querying/functions/#rate">这里&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HostUnusualNetworkThroughputIn&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sum by (instance) (rate(node_network_receive_bytes_total[2m])) / 1024 / 1024 &amp;gt; 100&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">5m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Host unusual network throughput in (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Host network interfaces are probably receiving too much data (&amp;gt; 100 MB/s)\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="mysql">Mysql&lt;/h3>
&lt;p>Mysql 的告警依赖 &lt;a href="https://github.com/prometheus/mysqld_exporter">prometheus/mysqld_exporter&lt;/a> 输出的指标。&lt;/p>
&lt;h4 id="连接数过多">连接数过多&lt;/h4>
&lt;p>Mysql 实例的连接数最近一分钟的连接数超过最大值的 &lt;code>80%&lt;/code> 触发告警&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MysqlTooManyConnections(&amp;gt;80%)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">avg by (instance) (rate(mysql_global_status_threads_connected[1m])) / avg by (instance) (mysql_global_variables_max_connections) * 100 &amp;gt; 80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MySQL too many connections (&amp;gt; 80%) (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;More than 80% of MySQL connections are in use on {{ $labels.instance }}\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="慢查询">慢查询&lt;/h4>
&lt;p>最近一分钟慢查询数量大于 0 时触发。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MysqlSlowQueries&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">increase(mysql_global_status_slow_queries[1m]) &amp;gt; 0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MySQL slow queries (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;MySQL server mysql has some new slow query.\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="运行时-jvm">运行时 JVM&lt;/h3>
&lt;p>JVM 的运行时告警，居然只有可怜巴巴的一个。堆空间占用超过 &lt;code>80%&lt;/code> 触发告警。&lt;/p>
&lt;p>依赖 &lt;a href="https://github.com/prometheus/client_java">java-client&lt;/a> 输出的指标。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">JvmMemoryFillingUp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">(sum by (instance)(jvm_memory_used_bytes{area=&amp;#34;heap&amp;#34;}) / sum by (instance)(jvm_memory_max_bytes{area=&amp;#34;heap&amp;#34;})) * 100 &amp;gt; 80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">2m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">JVM memory filling up (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;JVM memory is filling up (&amp;gt; 80%)\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="kubernetes">Kubernetes&lt;/h3>
&lt;p>Kubernetes 相关的告警规则有 33 个，比较丰富。&lt;/p>
&lt;p>摘个比较常见的：容器OOM告警。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">KubernetesContainerOomKiller&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">(kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m &amp;gt;= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason=&amp;#34;OOMKilled&amp;#34;}[10m]) == 1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">0m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Kubernetes container oom killer (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ssl-证书过期">SSL 证书过期&lt;/h3>
&lt;p>通过 &lt;a href="https://github.com/ribbybibby/ssl_exporter">&lt;/a> 输出的指标，可以监控证书过期：未来 &lt;code>7 天&lt;/code> 有证书过期便会触发告警。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">alert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">SslCertificateExpiry(&amp;lt;7Days)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ssl_verified_cert_not_after{chain_no=&amp;#34;0&amp;#34;} - time() &amp;lt; 86400 * 7&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">0m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">severity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">SSL certificate expiry (&amp;lt; 7 days) (instance {{ $labels.instance }})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;{{ $labels.instance }} Certificate is expiring in 7 days\n VALUE = {{ $value }}\n LABELS = {{ $labels }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>今天列出来的也仅仅是冰山一角，而且用户也可以&lt;a href="https://github.com/samber/awesome-prometheus-alerts#-contributing">贡献&lt;/a>出更多的规则。&lt;/p></description></item><item><title>Kubernetes 上如何控制容器的启动顺序？</title><link>https://atbug.com/k8s-1.18-container-start-sequence-control/</link><pubDate>Fri, 30 Apr 2021 07:43:54 +0800</pubDate><guid>https://atbug.com/k8s-1.18-container-start-sequence-control/</guid><description>
&lt;p>去年写过一篇博客：&lt;a href="https://mp.weixin.qq.com/s/5UXhXpwPDBh2xuGKq9Nqig">控制 Pod 内容器的启动顺序&lt;/a>，分析了 &lt;a href="https://github.com/tektoncd">TektonCD&lt;/a> 的容器启动控制的原理。&lt;/p>
&lt;p>为什么要做容器启动顺序控制？我们都知道 Pod 中除了 &lt;code>init-container&lt;/code> 之外，是允许添加多个容器的。类似 TektonCD 中 &lt;code>task&lt;/code> 和 &lt;code>step&lt;/code> 的概念就分别与 &lt;code>pod&lt;/code> 和 &lt;code>container&lt;/code> 对应，而 &lt;code>step&lt;/code> 是按照顺序执行的。此外还有服务网格的场景，sidecar 容器需要在服务容器启动之前完成配置的加载，也需要对容器的启动顺序加以控制。否则，服务容器先启动，而 sidecar 还无法提供网络上的支持。&lt;/p>
&lt;h3 id="现实">现实&lt;/h3>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/30/sidecarlifecycle1.gif" alt="sidecar-lifecycle-1">&lt;/p>
&lt;h3 id="期望">期望&lt;/h3>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/30/sidecarlifecycle2.gif" alt="sidecar-lifecycle-2">&lt;/p>
&lt;p>到了这里肯定有同学会问，&lt;code>spec.containers[]&lt;/code> 是一个数组，数组是有顺序的。Kubernetes 也确实是按照顺序来创建和启动容器，但是 &lt;strong>容器启动成功，并不表示容器可以对外提供服务&lt;/strong>。&lt;/p>
&lt;p>在 Kubernetes 1.18 非正式版中曾在 Lifecycle 层面提供了对 &lt;code>sidecar 类型容器的&lt;/code> 支持，但是最终该功能并&lt;a href="https://github.com/kubernetes/enhancements/issues/753#issuecomment-713471597">没有落地&lt;/a>。&lt;/p>
&lt;p>那到底该怎么做？&lt;/p>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>笔者准备了一个简单的 &lt;a href="https://github.com/addozhang/k8s-container-sequence-sample">go 项目&lt;/a>，用于模拟 sidecar 的启动及配置加载。&lt;/p>
&lt;p>克隆代码后可以通过 &lt;code>make build&lt;/code> 构建出镜像，假如你是用的 minikube 进行的实验，可以通过命令 &lt;code>make load-2-minikube&lt;/code> 将镜像加载到 minikube 节点中。&lt;/p>
&lt;p>使用 Deployment 的方式进行部署，直接用 Pod 也可以。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sample&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sample&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sample&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sample&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">addozhang/k8s-container-sequence-sidecar:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">lifecycle&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">postStart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">exec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">wait&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">app&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/bin/sh&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;date; echo &amp;#39;app container started&amp;#39;; tail -f /dev/null&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面的截图中，演示了在 &lt;code>sample&lt;/code> 命名空间中，pod 内两个容器的执行顺序。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/30/20210430-062819.gif" alt="2021-04-30 06.28.19">&lt;/p>
&lt;h2 id="kubernetes-源码">Kubernetes 源码&lt;/h2>
&lt;p>在 kubelet 的源码 &lt;code>pkg/kubelet/kuberuntime/kuberuntime_manager.go&lt;/code> 中，&lt;code>#SyncPod&lt;/code> 方法用于创建 Pod，步骤比较繁琐，直接看第 7 步：创建普通容器。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// SyncPod syncs the running pod into the desired pod by executing following steps:
&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">// 1. Compute sandbox and container changes.
&lt;/span>&lt;span class="c1">// 2. Kill pod sandbox if necessary.
&lt;/span>&lt;span class="c1">// 3. Kill any containers that should not be running.
&lt;/span>&lt;span class="c1">// 4. Create sandbox if necessary.
&lt;/span>&lt;span class="c1">// 5. Create ephemeral containers.
&lt;/span>&lt;span class="c1">// 6. Create init containers.
&lt;/span>&lt;span class="c1">// 7. Create normal containers.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">kubeGenericRuntimeManager&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">SyncPod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pod&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">podStatus&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">kubecontainer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PodStatus&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pullSecrets&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Secret&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">backOff&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">flowcontrol&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Backoff&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span> &lt;span class="nx">kubecontainer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PodSyncResult&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="c1">// Step 7: start containers in podContainerChanges.ContainersToStart.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">idx&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">podContainerChanges&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ContainersToStart&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;container&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">containerStartSpec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">pod&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Containers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">idx&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>#start&lt;/code> 方法中调用了 &lt;code>#startContainer&lt;/code> 方法，该方法会启动容器，并返回容器启动的结果。注意，这里的结果还 &lt;strong>包含了容器的 Lifecycle hooks 调用&lt;/strong>。&lt;/p>
&lt;p>也就是说，假如容器的 &lt;code>PostStart&lt;/code> hook 没有正确的返回，kubelet 便不会去创建下一个容器。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// startContainer starts a container and returns a message indicates why it is failed on error.
&lt;/span>&lt;span class="c1">// It starts the container through the following steps:
&lt;/span>&lt;span class="c1">// * pull the image
&lt;/span>&lt;span class="c1">// * create the container
&lt;/span>&lt;span class="c1">// * start the container
&lt;/span>&lt;span class="c1">// * run the post start lifecycle hooks (if applicable)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">kubeGenericRuntimeManager&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">startContainer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">podSandboxID&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">podSandboxConfig&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">runtimeapi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PodSandboxConfig&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">spec&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">startSpec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pod&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">podStatus&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">kubecontainer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PodStatus&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pullSecrets&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Secret&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">podIP&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">podIPs&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="c1">// Step 4: execute the post start hook.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Lifecycle&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Lifecycle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PostStart&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">kubeContainerID&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">kubecontainer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ContainerID&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runtimeName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">containerID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handlerErr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">kubeContainerID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Lifecycle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PostStart&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">handlerErr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">recordContainerEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">kubeContainerID&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EventTypeWarning&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">events&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FailedPostStartHook&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">killContainer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">kubeContainerID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;FailedPostStartHook&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reasonFailedPostStartHook&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">klog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ErrorS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrPostStartHook&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handlerErr&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;Failed to kill container&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;pod&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">klog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">KObj&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pod&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="s">&amp;#34;podUID&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pod&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;containerName&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;containerID&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">kubeContainerID&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">String&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrPostStartHook&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handlerErr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现方案">实现方案&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/30/16197365667225.jpg" alt="">&lt;/p>
&lt;p>&lt;a href="https://github.com/addozhang/k8s-container-sequence-sample/blob/main/cmd/entrypoint/wait.go#L26">cmd/entrypoint/wait.go#L26&lt;/a> （这里参考了 Istio 的 pilot-agent 实现 ）&lt;/p>
&lt;p>在 &lt;code>PostStart&lt;/code> 中持续的去检查 &lt;code>/ready&lt;/code> 断点，可以 hold 住当前容器的创建流程。保证 &lt;code>/ready&lt;/code> 返回 &lt;code>200&lt;/code> 后，kubelet 才会去创建下一个容器。&lt;/p>
&lt;p>这样就达到了前面截图中演示的效果。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Now&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Before&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">timeoutAt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">checkIfReady&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">client&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sidecar is ready&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sidecar is not ready&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Duration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">periodMillis&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Millisecond&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sidecar is not ready in %d second(s)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">timeoutSeconds&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://banzaicloud.com/blog/k8s-sidecars/">Sidecar container lifecycle changes in Kubernetes 1.18&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@marko.luksa/delaying-application-start-until-sidecar-is-ready-2ec2d21a7b74">Delaying application start until sidecar is ready&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>云上细粒度访问管理的参考架构</title><link>https://atbug.com/translation-access-management-reference-architecture/</link><pubDate>Wed, 28 Apr 2021 08:02:11 +0800</pubDate><guid>https://atbug.com/translation-access-management-reference-architecture/</guid><description>
&lt;p>本文由 &lt;a href="https://mp.weixin.qq.com/mp/profile_ext?action=home&amp;amp;__biz=MjM5OTg2MTM0MQ==&amp;amp;scene=124#wechat_redirect">Addo Zhang&lt;/a> 翻译自 &lt;a href="https://www.infoq.com/articles/access-management-reference-architecture/">A Reference Architecture for Fine-Grained Access Management on the Cloud&lt;/a>&lt;/p>
&lt;h1 id="什么是访问管理">什么是访问管理？&lt;/h1>
&lt;p>访问管理是识别用户或一组用户是否应该能够访问给定资源（例如主机、服务或数据库）的过程。例如，对于开发人员来说是否可以使用 SSH 登录生产应用程序服务器，如果可以，那么可以登录多长时间？如果 SRE 在非支持时间尝试访问数据库，他们这样做？如果数据工程师已转移到其他团队，他们是否应该继续访问 ETL 管道的 S3 存储桶？&lt;/p>
&lt;h1 id="现在如何进行访问管理">现在如何进行访问管理？&lt;/h1>
&lt;p>在云上各种基础设施和数据服务激增之前，访问管理是 DevOps 和 Security 团队要解决的相对简单的问题。VPN 和堡垒主机是（现在仍然是）在网络级别封锁所有关键资源的首选机制。用户必须先通过 VPN 服务器进行身份验证，或者登录到堡垒主机，然后才能访问专用网络上的所有资源。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/27/16195301216852.jpg" alt="">&lt;/p>
&lt;p>当资源是静态的并且它们的数量相对较小时，此方法效果很好。但是，随着越来越多的资源动态地涌入专用网络的各处，VPN / 堡垒主机解决方案变得站不住脚。&lt;/p>
&lt;p>具体来说，在三个方面，VPN 和堡垒主机不足以作为一种有效的访问管理机制。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>它们作用于网络层面&lt;/strong>：用户通过 VPN 进行身份验证并获得对专用网络的访问权限后，他们实际上就可以访问其上运行的所有服务。无法根据用户的身份在基础架构或数据服务的粒度上管理访问。&lt;/li>
&lt;li>&lt;strong>凭据是攻击的媒介&lt;/strong>：VPN 和堡垒主机都要求用户记住并存储凭据。过期和轮换凭证作为安全策略非常困难，尤其是在涉及大量用户的情况下，凭证因此成为潜在的攻击媒介。&lt;/li>
&lt;li>&lt;strong>不能管理第三方 SaaS 工具&lt;/strong>：SaaS 工具（如 Looker、Tableau 和 Periscope Data）需要直接访问数据端点。因此，使用这些工具访问数据的任何人都无法通过使用了相同的机制和凭据的基础设施进行身份验证。&lt;/li>
&lt;/ul>
&lt;h1 id="云上访问管理的新架构">云上访问管理的新架构&lt;/h1>
&lt;p>在本文中，我们将定义新的参考架构，为那些正在寻求简化访问管理云资源（从 SSH 主机、数据库、数据仓库到消息管道和云存储终结点）解决方案的云原生企业。&lt;/p>
&lt;p>它解决了 VPN 和堡垒主机无法克服的以下特定挑战：&lt;/p>
&lt;ul>
&lt;li>在细粒度的服务级别上进行访问鉴权&lt;/li>
&lt;li>消除共享凭据和个人帐户管理&lt;/li>
&lt;li>通过第三方 SaaS 工具控制访问&lt;/li>
&lt;/ul>
&lt;p>此外，它为具有敏感数据的组织带来以下商业利益：&lt;/p>
&lt;ul>
&lt;li>通过跨所有服务的会话记录和活动监视来满足 FedRamp 和 SOC2 等合规性标准的可审核性&lt;/li>
&lt;li>基于访问者的身份，通过细粒度的授权策略来限制或清除敏感数据，从而实现隐私和数据治理&lt;/li>
&lt;/ul>
&lt;p>该架构建立在以下三个核心原则的基础上，这些原则的实现使 DevOps 和 Security 团队可以在对所有环境进行全面控制的同时，通过简单而一致的体验来提高用户的工作效率。&lt;/p>
&lt;ul>
&lt;li>为访问资源的用户建立不可否认的身份&lt;/li>
&lt;li>使用短期的短暂令牌和证书代替静态凭证和密钥&lt;/li>
&lt;li>在一处集中所有资源类型的细粒度访问策略&lt;/li>
&lt;/ul>
&lt;p>下图显示了参考架构及其组件。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/27/16195323349746.jpg" alt="">&lt;/p>
&lt;p>上图中的 VPN / 堡垒主机已替换为接入网关（Access Gateway）。接入网关实际上是微服务的集合，负责验证单个用户、基于特定属性授权他们的请求，并最终授予他们访问专用网络中的基础结构和数据服务的权限。&lt;/p>
&lt;p>接下来，让我们看一下各个组件，以了解之前概括的核心原理是如何实现的。&lt;/p>
&lt;h2 id="访问控制器">访问控制器&lt;/h2>
&lt;p>支持此体系结构的关键见解是将用户身份验证委派给单个服务（访问控制器），而不是将责任分配给用户可能需要访问的服务。这种联合在 SaaS 应用程序世界中很常见。由单一服务负责身份验证，可以简化应用程序所有者的用户配置和接触配置，并加快应用程序开发。&lt;/p>
&lt;p>对于实际的身份验证序列，访问控制器本身通常会与身份提供商集成，例如 &lt;a href="https://auth0.com/">Auth0&lt;/a> 或 &lt;a href="https://www.okta.com/">Okta&lt;/a>，因此，可以跨提供者和协议提供有用的抽象。最终，身份提供商以签名的 SAML 声明\JWT 令牌或临时证书的形式保证用户的身份不可否认。这样就无需依赖受信任的子网作为用户身份的代理。与 VPN 允许用户访问网络上的所有服务不同，它还允许将访问策略配置到服务的粒度。&lt;/p>
&lt;p>将身份验证委派给身份提供者的另一个好处是，可以使用零信任原则对用户进行身份验证。 具体来说，可以创建身份提供者策略以强制执行以下操作：&lt;/p>
&lt;ul>
&lt;li>禁止从信誉不佳的地理位置和 IP 地址访问&lt;/li>
&lt;li>禁止从已知漏洞的设备（未修补的 OS、较旧的浏览器等）进行访问&lt;/li>
&lt;li>成功进行 SAML 交换后立即触发 MFA&lt;/li>
&lt;/ul>
&lt;h3 id="身份验证序列如何工作">身份验证序列如何工作：&lt;/h3>
&lt;ol>
&lt;li>用户首先通过访问控制器进行身份验证，访问控制器又将身份验证委派给身份提供者。&lt;/li>
&lt;li>成功登录到身份提供者后，访问控制器将生成一个短暂的临时证书，进行签名并将其返回给用户。或者，它可以代替证书生成令牌。只要证书或令牌有效，就可以将其用于连接到 接入网关管理的任何授权基础设施或数据服务。到期后，必须获取新的证书或令牌。&lt;/li>
&lt;li>用户将在步骤（2）中获得的证书传递给他们选择的工具，然后连接到接入网关。根据用户请求访问的服务，基础设施网关或数据网关将首先允许访问控制器验证用户的证书，然后再允许他们访问该服务。因此，访问控制器充当用户与其访问的服务之间的 CA，因此为每个用户提供了不可否认的身份。&lt;/li>
&lt;/ol>
&lt;h2 id="策略引擎">策略引擎&lt;/h2>
&lt;p>当访问控制器强制对用户进行身份验证时，策略引擎会对用户的请求强制进行细粒度的授权。它以易于使用的 YAML 语法接受授权规则（查看最后的示例），并根据用户请求和响应对它们进行评估。&lt;/p>
&lt;p>开放策略代理（OPA）是一个开源的 CNCF 项目，是策略引擎的一个很好的例子。它可以自己作为微服务运行，也可以用作其他微服务进程空间中的库。OPA 中的策略以称为 Rego 的语言编写。另外，也可以在 Rego 之上轻松构建一个简单的 YAML 界面，以简化政策规范。&lt;/p>
&lt;p>具有独立于基础结构和数据服务的安全模型的独立策略引擎的优点如下：&lt;/p>
&lt;ul>
&lt;li>可以以与服务和位置无关的方式指定安全策略
&lt;ul>
&lt;li>例如在所有 SSH 服务器上禁止特权命令&lt;/li>
&lt;li>例如强制执行 MFA 检查所有服务（基础设施和数据）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>策略可以保存在一个地方并进行版本控制
&lt;ul>
&lt;li>策略可以作为代码签入 GitHub 存储库&lt;/li>
&lt;li>每项变更在提交之前都要经过协作审核流程&lt;/li>
&lt;li>存在版本历史记录，可以轻松地还原策略更改&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>基础设施网关和数据网关都依赖于策略引擎，以分别评估用户的基础设施和数据活动。&lt;/p>
&lt;h2 id="基础设施网关">基础设施网关&lt;/h2>
&lt;p>基础设施网关管理和监控对基础设施服务的访问，例如 SSH 服务器和 Kubernetes 集群。它与策略引擎连接，以确定细化的授权规则，并在用户会话期间对所有基础设施活动强制执行这些规则。 为了实现负载平衡，网关可以包含一组工作节点，可以在 AWS 上部署为自动扩展组，也可以在 Kubernetes 集群上作为副本集运行。&lt;/p>
&lt;p>&lt;a href="https://www.boundaryproject.io/">Hashicorp 边界&lt;/a> 是基础设施网关的示例。这是一个开源项目，使开发人员、DevOps 和 SRE 可以使用细粒度的授权来安全地访问基础设施服务（SSH 服务器、Kubernetes 群集），而无需直接访问网络，同时又禁止使用 VPN 或堡垒主机。&lt;/p>
&lt;p>基础设施网关支持 SSH 服务器和 Kubernetes 客户端使用的各种连接协议，并提供以下关键功能：&lt;/p>
&lt;h3 id="会话记录">会话记录&lt;/h3>
&lt;p>这涉及复制用户在会话期间执行的每个命令。捕获的命令通常会附加其他信息，例如用户的身份、他们所属的各种身份提供者组、当天的时间、命令的持续时间以及响应的特征（是否成功、是否有错误、是否已读取或写入数据等）。&lt;/p>
&lt;h3 id="活动监控">活动监控&lt;/h3>
&lt;p>监控使会话记录的概念更进一步。除了捕获所有命令和响应，基础设施网关还将安全策略应用于用户的活动。在发生违规的情况下，它可以选择触发警报、阻止有问题的命令及其响应或完全终止用户的会话。&lt;/p>
&lt;h2 id="数据网关">数据网关&lt;/h2>
&lt;p>数据网关管理和监控对数据服务的访问，例如 MySQL、PostgreSQL 和 MongoDB 等托管数据库、AWS RDS 等 DBaaS 端点、Snowflake 和 Bigquery 等数据仓库、AWS S3 等云存储以及 Kafka 和 Kinesis。它与策略引擎连接，以确定细化的授权规则，并在用户会话期间对所有数据活动强制执行这些规则。&lt;/p>
&lt;p>与基础设施网关类似，数据网关可以包含一组工作节点，可以在 AWS 上部署为自动扩展组，也可以在 Kubernetes 集群上作为副本集运行。&lt;/p>
&lt;p>由于与基础设施服务相比，数据服务的种类更多，因此数据网关通常将支持大量的连接协议和语法。&lt;/p>
&lt;p>此类数据网关的示例是 &lt;a href="https://cyral.com/">Cyral&lt;/a>，这是一种轻量级的拦截服务，以边车（sidecar）的方式部署来监控和管理对现代数据终端节点的访问，如 AWS RDS、Snowflake、Bigquery，、AWS S3、Apache Kafka 等。其功能包括：&lt;/p>
&lt;h3 id="会话记录-1">会话记录&lt;/h3>
&lt;p>这类似于记录基础设施活动，并且涉及用户在会话期间执行的每个命令的副本，并使用丰富的审计信息进行注释。&lt;/p>
&lt;h3 id="活动监控-1">活动监控&lt;/h3>
&lt;p>同样，这类似于监视基础设施活动。例如，以下策略阻止数据分析人员读取敏感的客户 PII。&lt;/p>
&lt;h3 id="隐私权执行">隐私权执行&lt;/h3>
&lt;p>与基础设施服务不同，数据服务授予用户对通常位于数据库、数据仓库、云存储和消息管道中的与客户、合作伙伴和竞争对手有关的敏感数据的读写访问权限。 出于隐私原因，对数据网关的一个非常普遍的要求是能够清理（也称为令牌化或屏蔽）PII，例如电子邮件、姓名、社会保险号、信用卡号和地址。&lt;/p>
&lt;h2 id="那么这种体系结构如何简化访问管理">那么这种体系结构如何简化访问管理？&lt;/h2>
&lt;p>让我们看一些常见的访问管理方案，以了解与使用 VPN 和堡垒主机相比，接入网关架构如何提供细粒度的控制。&lt;/p>
&lt;h2 id="特权活动监控pam">特权活动监控（PAM）&lt;/h2>
&lt;p>这是一个简单的策略，可以在一个地方监视所有基础设施和数据服务中的特权活动：&lt;/p>
&lt;ul>
&lt;li>仅允许属于 Admins 和 SRE 组的个人在 SSH 服务器、Kubernetes 集群和数据库上运行特权命令。&lt;/li>
&lt;li>虽然可以运行特权命令，但是有一些例外形式的限制。具体来说，以下命令是不允许的：
&lt;ul>
&lt;li>“sudo” 和 “yum” 命令可能无法在任何 SSH 服务器上运行&lt;/li>
&lt;li>“kubectl delete” 和 “kubectl taint” 命令可能无法在任何 Kubernetes 集群上运行&lt;/li>
&lt;li>“drop table” 和 “create user” 命令可能无法在任何数据库上运行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/27/16195354276750.jpg" alt="">&lt;/p>
&lt;h2 id="零特权zsp执行">零特权（ZSP）执行&lt;/h2>
&lt;p>The next policy shows an example of enforcing zero standing privileges &amp;ndash; a paradigm where no one has access to an infrastructure or data service by default. Access may be obtained only upon satisfying one or more qualifying criteria:&lt;/p>
&lt;ul>
&lt;li>Only individuals belonging to the Support group are allowed access&lt;/li>
&lt;li>An individual must be on-call to gain access. On call status may be determined by checking their schedule in an incident response service such as PagerDuty&lt;/li>
&lt;li>A multi-factor authentication (MFA) check is triggered upon successful authentication&lt;/li>
&lt;li>They must use TLS to connect to the infrastructure or data service&lt;/li>
&lt;li>Lastly, if a data service is being accessed, full table scans (e.g. SQL requests lacking a WHERE or a LIMIT clause that end up reading an entire dataset) are disallowed.&lt;/li>
&lt;/ul>
&lt;p>下一个策略显示了一个实施零特权的示例 &amp;ndash; 一种默认情况下没有人可以访问基础设施或数据服务的范例。只有满足一个或多个合格标准，才能获得访问权限：&lt;/p>
&lt;ul>
&lt;li>只允许属于支持组的个人访问&lt;/li>
&lt;li>个人必须 on-call 才能获得访问权限。可以通过检查事件响应服务（例如 PagerDuty）中的时间表来确定通话状态&lt;/li>
&lt;li>成功通过身份验证后会触发多因子身份验证（MFA）检查&lt;/li>
&lt;li>他们必须使用 TLS 连接到基础设施或数据服务&lt;/li>
&lt;li>最后，如果正在访问数据服务，则不允许进行全表扫描（例如，缺少 WHERE 或 LIMIT 子句的 SQL 请求最终将读取整个数据集）。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/27/16195356881012.jpg" alt="">&lt;/p>
&lt;h2 id="隐私和数据保护">隐私和数据保护&lt;/h2>
&lt;p>The last policy shows an example of data governance involving data scrubbing:&lt;/p>
&lt;ul>
&lt;li>If anyone from Marketing is accessing PII (social security number (SSN), credit card number (CCN), age), scrub the data before returning&lt;/li>
&lt;li>If anyone is accessing PII using the Looker or Tableau services, also scrub the data&lt;/li>
&lt;li>Scrubbing rules are defined by the specific type of the PII
&lt;ul>
&lt;li>For SSNs, scrub the first 5 digits&lt;/li>
&lt;li>For CCNs, scrub the last  4 digits&lt;/li>
&lt;li>For ages, scrub the last digit i.e., the requestor will know the age brackets but never the actual ages&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>最后一条策略显示了涉及数据清理的数据治理示例：&lt;/p>
&lt;ul>
&lt;li>如果市场营销人员正在访问 PII（社会保险号（SSN）、信用卡号（CCN）、年龄），先清洗数据然后再返回&lt;/li>
&lt;li>如果有人正在使用 Looker 或 Tableau 服务访问 PII，同时清洗数据&lt;/li>
&lt;li>清理规则由 PII 的特定类型定义
&lt;ul>
&lt;li>对于 SSN，清洗前 5 位数字&lt;/li>
&lt;li>对于 CCN，清洗最后 4 位数字&lt;/li>
&lt;li>对于年龄，请清洗最后一位数字，即请求者将知道年龄段，但从不知道实际年龄&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/27/16195358881245.jpg" alt="">&lt;/p>
&lt;h2 id="概括">概括&lt;/h2>
&lt;p>我们看到，对于高度动态的云环境，VPN 和堡垒主机不足以作为高效云环境中的有效访问管理机制。一种新的访问管理体系结构，其重点是不可否认的用户身份，短暂的证书或令牌以及集中的细粒度授权引擎，可有效解决 VPN 和堡垒主机无法解决的难题。除了为访问关键基础设施和数据服务的用户提供全面的安全性之外，该体系结构还可以帮助组织实现其审核、合规性、隐私和保护目标。&lt;/p>
&lt;p>我们还讨论了该架构的参考实现，其中使用了以开发人员为中心的著名开源解决方案，例如 Hashicorp Boundary 和 OPA 以及 Cyral（一种用于现代数据服务的快速且无状态的辅助工具）。 他们一起可以在云上提供细粒度且易于使用的访问管理解决方案。&lt;/p>
&lt;h2 id="关于作者">关于作者&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/27/16195361264391.jpg" alt="">&lt;/p>
&lt;p>&lt;strong>Manav Mital&lt;/strong> 是 Cyral 的联合创始人兼首席执行官，Cyral 是首个为数据云提供可见性、访问控制和保护的云原生安全服务。Cyral 成立于 2018 年，与各种组织合作 - 从云原生初创企业到财富 500 强企业，因为它们采用 DevOps 文化和云技术来管理和分析数据。 Manav 拥有 UCLA 的计算机科学硕士学位和坎普尔的印度理工学院的计算机科学学士学位。&lt;/p>
&lt;h2 id="关于译者">关于译者&lt;/h2>
&lt;p>&lt;strong>Addo Zhang&lt;/strong> 云原生从业人员，爱好各种代码。更多翻译：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/beRHn9l2K4eiS8M1IevcRA">分布式系统在 Kubernetes 上的进化&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/V6lO9sT_6hJVled9sOI4IA">2021 年及未来的云原生预测&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/mw9LhDPiTyooUAXAoKHwTA">应用架构：为什么要随着市场演进&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Quarkus：谁说 Java 不能用来跑 Serverless？</title><link>https://atbug.com/quarkus-enable-java-running-in-serverless/</link><pubDate>Sat, 24 Apr 2021 09:16:05 +0800</pubDate><guid>https://atbug.com/quarkus-enable-java-running-in-serverless/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/24/whynotjava.png" alt="why-not-java">&lt;/p>
&lt;p>想到这个标题的时候，我第一时间想到的就是星爷的《唐伯虎点秋香》的这一幕。&lt;/p>
&lt;p>当讨论起世界上最好的开发语言是什么的时候，Java 的粉丝们总会遇到这种场景：&lt;/p>
&lt;blockquote>
&lt;p>吹：“Java 语法简单，容易上手！”
黑：“Java 启动慢，性能差，耗资源！”
吹：“Java 有世界上最多的程序员！”
黑：“Java 启动慢，性能差，耗资源！”
吹：“Java 生态好！”
黑：“Java 启动慢，性能差，耗资源！”
吹：“滚！”&lt;/p>
&lt;/blockquote>
&lt;p>今天我们继续说说 Quarkus，应“云”而生的 Java 框架。今天算是第三篇了，没看过的同学可以回顾一下：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/YcEqFm3oxlsEvJ3ckRbQyA">Hello, Quarkus&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/Dq3hQrXE4XWH-MyjBAGMEw">应&amp;quot;云&amp;quot;而生的 Java 框架 Quarkus：构建本机可执行文件&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>上一篇的结尾预告：试试 Quarkus 在 ArgoCD 中的应用，看下 Serverless 上的使用体验。不过不想用 ArgoCD 了，因为这 workflow 这种场景实在体现不出 Quarkus 到底有多快。但又想做 Serverless，那就想到了 Knative Serving 了。&lt;/p>
&lt;p>其实，还有一个原因是比较懒，上次的镜像还可以直接拿来用。&lt;/p>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>废话不多说，先上结论。Quarkus 与 Spring 首个请求的响应耗时：&lt;strong>2.5s vs 5.7s&lt;/strong>。&lt;/p>
&lt;p>&lt;em>注：为了忽略拉取镜像的时间差异，提前 pull 镜像。&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/24/cleanshot-20210424-at-0831012x.png" alt="">&lt;/p>
&lt;h2 id="验证">验证&lt;/h2>
&lt;h3 id="环境准备">环境准备&lt;/h3>
&lt;ul>
&lt;li>Kubernetes 1.18+ via minikube&lt;/li>
&lt;li>Istio 1.9.2&lt;/li>
&lt;li>Knative 0.22.0&lt;/li>
&lt;li>Knative CLI （brew 安装）&lt;/li>
&lt;li>watch （brew 安装）&lt;/li>
&lt;/ul>
&lt;p>环境的安装准备参考官方的文档。&lt;/p>
&lt;h4 id="镜像">镜像&lt;/h4>
&lt;p>资源镜像就使用&lt;a href="https://mp.weixin.qq.com/s/Dq3hQrXE4XWH-MyjBAGMEw">上一篇文章&lt;/a>构建的，但需要做下调整：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker tag quarkus/quarkus-getting-started:distroless dev.local/quarkus/quarkus-getting-started:distroless
docker tag spring/spring-getting-started:latest dev.local/spring/spring-getting-started:latest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注：knative 会忽略 &lt;code>dev.local&lt;/code> 镜像的预加载，不会在创建 knative service 的时候拉取。&lt;/p>
&lt;p>然后使用 &lt;code>minikube image load&lt;/code> 加载到 minikube环境中：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube image load dev.local/quarkus/quarkus-getting-started:distroless
minikube image load dev.local/spring/spring-getting-started:latest
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="knative-配置可选">knative 配置（可选）&lt;/h4>
&lt;p>修改 &lt;code>istio-system&lt;/code> namespace 下的 configmap &lt;code>config-domain&lt;/code>，增加新的 domain：&lt;code>nip.io&lt;/code>&lt;/p>
&lt;p>注：这个操作纯属个人喜好，不喜欢那个 &lt;code>example.com&lt;/code>，可跳过。&lt;/p>
&lt;h4 id="获取-istio-ingress-地址">获取 Istio Ingress 地址&lt;/h4>
&lt;p>使用命令获取 Ingress 的访问方式，这里 &lt;code>http2/80&lt;/code> 后的 &lt;code>http://192.168.64.2:31608&lt;/code> 就是我们需要的，记下这个 ip 和端口。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube service list
&lt;span class="p">|&lt;/span>------------------&lt;span class="p">|&lt;/span>----------------------------&lt;span class="p">|&lt;/span>-------------------&lt;span class="p">|&lt;/span>---------------------------&lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> NAMESPACE &lt;span class="p">|&lt;/span> NAME &lt;span class="p">|&lt;/span> TARGET PORT &lt;span class="p">|&lt;/span> URL &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span>------------------&lt;span class="p">|&lt;/span>----------------------------&lt;span class="p">|&lt;/span>-------------------&lt;span class="p">|&lt;/span>---------------------------&lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> default &lt;span class="p">|&lt;/span> kubernetes &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> istio-system &lt;span class="p">|&lt;/span> istio-egressgateway &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> istio-system &lt;span class="p">|&lt;/span> istio-ingressgateway &lt;span class="p">|&lt;/span> status-port/15021 &lt;span class="p">|&lt;/span> http://192.168.64.2:32431 &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> http2/80 &lt;span class="p">|&lt;/span> http://192.168.64.2:31608 &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> https/443 &lt;span class="p">|&lt;/span> http://192.168.64.2:31795 &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> tcp/31400 &lt;span class="p">|&lt;/span> http://192.168.64.2:31369 &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> tls/15443 &lt;span class="p">|&lt;/span> http://192.168.64.2:30293 &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> istio-system &lt;span class="p">|&lt;/span> istiod &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> istio-system &lt;span class="p">|&lt;/span> knative-local-gateway &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-eventing &lt;span class="p">|&lt;/span> broker-filter &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-eventing &lt;span class="p">|&lt;/span> broker-ingress &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-eventing &lt;span class="p">|&lt;/span> eventing-webhook &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-eventing &lt;span class="p">|&lt;/span> imc-dispatcher &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> activator-service &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> autoscaler &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> autoscaler-bucket-00-of-01 &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> autoscaler-hpa &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> controller &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> istio-webhook &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> knative-serving &lt;span class="p">|&lt;/span> webhook &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> kube-system &lt;span class="p">|&lt;/span> kube-dns &lt;span class="p">|&lt;/span> No node port &lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span>------------------&lt;span class="p">|&lt;/span>----------------------------&lt;span class="p">|&lt;/span>-------------------&lt;span class="p">|&lt;/span>---------------------------&lt;span class="p">|&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建-knative-service">创建 Knative service&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c">#quarkus&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">serving.knative.dev/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hello-quarkus&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dev.local/quarkus/quarkus-getting-started:distroless&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Never&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c">#spring&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">serving.knative.dev/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hello-spring&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dev.local/spring/spring-getting-started:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Never&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 cli &lt;code>kn&lt;/code> 命令查看下 service 的信息：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kn service describe hello-quarkus -n default
Name: hello-quarkus
Namespace: default
Age: 21s
URL: http://hello-quarkus.default.nip.io
Revisions:
100% @latest &lt;span class="o">(&lt;/span>hello-quarkus-00001&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>21s&lt;span class="o">)&lt;/span>
Image: dev.local/quarkus/quarkus-getting-started:distroless
Conditions:
OK TYPE AGE REASON
++ Ready 9s
++ ConfigurationsReady 10s
++ RoutesReady 9s
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kn service describe hello-spring -n default
Name: hello-spring
Namespace: default
Age: 44s
URL: http://hello-spring.default.nip.io
Revisions:
100% @latest &lt;span class="o">(&lt;/span>hello-spring-00001&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>44s&lt;span class="o">)&lt;/span>
Image: dev.local/spring/spring-getting-started:latest
Conditions:
OK TYPE AGE REASON
++ Ready 31s
++ ConfigurationsReady 32s
++ RoutesReady 31s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从描述信息中可以拿到服务的访问地址，分别是 &lt;code>http://hello-quarkus.default.nip.io&lt;/code> 和 &lt;code>http://hello-spring.default.nip.io&lt;/code>。&lt;/p>
&lt;p>接下来就需要在本地主机的 hosts 中加入解析：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">192.168.64.2 hello-quarkus.default.nip.io
192.168.64.2 hello-spring.default.nip.io
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="测试">测试&lt;/h3>
&lt;p>上面操作完之后，就可以使用下面的地址访问服务了。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="http://hello-quarkus.default.nip.io:31608/hello/greeting/quarkus">http://hello-quarkus.default.nip.io:31608/hello/greeting/quarkus&lt;/a>
&lt;a href="http://hello-spring.default.nip.io:31608/hello/greeting/spring">http://hello-spring.default.nip.io:31608/hello/greeting/spring&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在测试的过程中，可以通过 &lt;code>watch -n 1 'kubectl get po -n default | grep hello'&lt;/code> 命令来查看 pod 的创建和销毁。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/24/20210424-090756.gif" alt="2021-04-24 09.07.56">&lt;/p></description></item><item><title>服务网格平稳落地：Istio 中精准控制 Sidecar 的注入</title><link>https://atbug.com/how-to-control-istio-sidecar-injection/</link><pubDate>Wed, 21 Apr 2021 08:13:04 +0800</pubDate><guid>https://atbug.com/how-to-control-istio-sidecar-injection/</guid><description>
&lt;h2 id="为什么">为什么&lt;/h2>
&lt;p>说起服务网格，这幅图大家肯定不会陌生。这就是服务网格的网络，也是网格架构的终极形态。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/21/cleanshot-20210420-at-2314142x.png" alt="">&lt;/p>
&lt;p>那在迁移到网格架构之前，我们的系统是什么样的？&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/21/cleanshot-20210420-at-2316432x.png" alt="">&lt;/p>
&lt;p>我们的系统在演进的过程中，不可避免的会遇到各种 0 到 1 过程中的中间态。比如下面这种，可以比较直观的看出 Istio 或者网格是部分覆盖的。这个过程中，我们需要平滑、可控的推进，才能在保障系统可用性的前提下进行架构的演进。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/21/cleanshot-20210420-at-2318242x.png" alt="">&lt;/p>
&lt;h2 id="怎么做">怎么做&lt;/h2>
&lt;p>Sidecar 的注入分两种：手动和自动。&lt;/p>
&lt;h3 id="手动">手动&lt;/h3>
&lt;p>手动就是利用 Istio 的 cli 工具 &lt;code>istioctl kube-inject&lt;/code> 对资源 yaml 进行修改：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ istioctl kube-inject -f samples/sleep/sleep.yaml &lt;span class="p">|&lt;/span> kubectl apply -f -
serviceaccount/sleep created
service/sleep created
deployment.apps/sleep created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>手动的方式比较适合开发阶段使用。&lt;/p>
&lt;h3 id="自动">自动&lt;/h3>
&lt;p>sidecar 的自动注入则是通过 &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/">mutating webhook admission controller&lt;/a> 实现的。其原理简单说就是拦截 pod的创建请求来对 pod 的资源定义进行修改。&lt;/p>
&lt;p>我们对截取了 &lt;code>istio-sidecar-injector&lt;/code> &lt;code>MutatingWebhookConfiguration&lt;/code> 的部分内容。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">webhooks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Exact&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sidecar-injector.istio.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespaceSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">istio-injection&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">enabled&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">objectSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sidecar.istio.io/inject&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NotIn&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#4&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">apiGroups&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiVersions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">CREATE&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">pods&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scope&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>这里的 &lt;code>matchPolicy: Exact&lt;/code> 针对的是 #4 中的 &lt;code>apiGroups&lt;/code>与&lt;code>apiVersions&lt;/code> 的组合，即精确匹配 &lt;code>v1/pods&lt;/code> 的 &lt;code>CREATE&lt;/code> 请求&lt;/li>
&lt;li>顾名思义，匹配符合条件的 &lt;code>namespace&lt;/code>&lt;/li>
&lt;li>同2，匹配符合条件的 &lt;code>object&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>注： #2、#3 支持 Kubernetes 的&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/">标签选择语法&lt;/a>&lt;/p>
&lt;p>按照前面的说明，这个 hook 会拦截打了 &lt;code>istio-injection: enabled&lt;/code> label 的 namespace 下，没有打 &lt;code>sidecar.istio.io/inject: false&lt;/code> 标签的 &lt;code>v1/pod&lt;/code> 的创建。通过 &lt;code>https://istiod.istio-system:443/inject&lt;/code> 端点对 pod 的定义进行定制（添加 &lt;code>init-container&lt;/code>、sidecar 容器等）。&lt;/p>
&lt;p>有人可能会说这样还不够精准，因为可能某个 namespace 下只有部分对象才会注入 sidecar。&lt;/p>
&lt;p>这就需要借助 &lt;code>istiod&lt;/code> 的逻辑了。&lt;/p>
&lt;h3 id="只针对特定-pod-注入sidecar-或忽略注入">只针对特定 pod 注入sidecar 或忽略注入&lt;/h3>
&lt;p>在 &lt;code>configmap&lt;/code> &lt;code>istio-sidecar-injector&lt;/code> 中有两个字段 &lt;code>alwaysInjectSelector&lt;/code> 和 &lt;code>neverInjectSelector&lt;/code>。从名字来看这两个分别提供了白名单、黑名单的功能。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">alwaysInjectSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="l">neverInjectSelector:[]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们只需如下调整（需要重启 istiod），然后为需要注入 sidecar 的资源打上相应的标签即可。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">alwaysInjectSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sidecar.istio.io/inject&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">In&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;enabled&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;yes&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>应“云”而生的 Java 框架：构建本机可执行文件</title><link>https://atbug.com/quarkus-build-native-executable-file/</link><pubDate>Sat, 17 Apr 2021 09:08:40 +0800</pubDate><guid>https://atbug.com/quarkus-build-native-executable-file/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/17/16186233244243.jpg" alt="">&lt;/p>
&lt;blockquote>
&lt;p>电影《功夫》中，火云邪神有句话：“天下武功无坚不摧，唯快不破。”&lt;/p>
&lt;/blockquote>
&lt;p>在 &lt;a href="https://mp.weixin.qq.com/s/YcEqFm3oxlsEvJ3ckRbQyA">上一篇文章&lt;/a> 中，我们写了第一个 Quarkus 应用，并尝试着构建了 &lt;code>legacy-jar&lt;/code> 和 &lt;code>fast-jar&lt;/code>。&lt;/p>
&lt;p>今天来看一下 Quarkus 构建出来的本机可执行文件到底比 Spring 应用能快多少，&lt;strong>生态的成熟度不在这里讨论&lt;/strong>。&lt;/p>
&lt;h2 id="tldr">TLDR&lt;/h2>
&lt;p>先上结论， 与只有一个 Controller 的Spring Web 应用做下对比。&lt;/p>
&lt;h3 id="应用启动时间0012s-vs-2294s">应用启动时间：0.012s vs 2.294s&lt;/h3>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/17/cleanshot-20210417-at-0900292x.png" alt="CleanShot 2021-04-17 at 09.00.29@2x">&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/17/cleanshot-20210417-at-0915282x.png" alt="CleanShot 2021-04-17 at 09.15.28@2x">&lt;/p>
&lt;h3 id="镜像大小49mb-vs-237-mb">镜像大小：49MB vs 237 MB&lt;/h3>
&lt;p>Spring 应用镜像使用 &lt;code>openjdk:11.0-jre-slim&lt;/code> 作为 base 镜像，大小为 220MB。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
spring/spring-getting-started latest 5f47030c5c3f &lt;span class="m">6&lt;/span> minutes ago 237MB
quarkus/quarkus-getting-started distroless2 fe973c5ac172 &lt;span class="m">24&lt;/span> minutes ago 49MB
quarkus/quarkus-getting-started distroless 6fe27dd44e86 &lt;span class="m">31&lt;/span> minutes ago 51MB
quarkus/quarkus-getting-started ubi 8f86f5915715 &lt;span class="m">58&lt;/span> minutes ago 132MB
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="java-应用容器化的困境">Java 应用容器化的困境&lt;/h2>
&lt;p>云原生世界中，应用容器化是个显著的特点。Java 应用容器化时面临了如下问题：&lt;/p>
&lt;ul>
&lt;li>应用启动慢：其实这是 Java 应用的问题。Java 应用占用内存多；JVM 虚拟机启动时需要做环境的初始化、预加载大量的类、初始化线程等等。启动耗时视应用情况需要几秒，甚至可达分钟级。较长的启动耗时，也抑制了水平伸缩性。即使在 Serverless 这种响应耗时要求不高的场景，也会被嫌弃。&lt;/li>
&lt;li>镜像过大：其实使用了镜像的分层设计，常见的一个 SpringCloud 应用的 über-jar 包可能都有 7、80MB。&lt;/li>
&lt;li>空间占用：虽然用了镜像分层，但积少成多，也会增加存储成本。&lt;/li>
&lt;/ul>
&lt;h2 id="quarkus-与本机映像native-image">Quarkus 与本机映像（native image）&lt;/h2>
&lt;p>Quarkus 的开发遵从了容器优先的原则：&lt;/p>
&lt;ul>
&lt;li>支持 Graal/SubstrateVM&lt;/li>
&lt;li>构建时处理元数据&lt;/li>
&lt;li>减少反射的使用&lt;/li>
&lt;li>本机映像预启动&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>本机映像是将 Java 代码提前编译为可执行文件（称为本机映像）的技术。该可执行文件包括应用程序类、其依赖项中的类、运行时库类以及 JDK 中的静态链接本机代码。它不是在 Java VM 上运行，而是包括必要的组件，例如内存管理，线程调度等，这些组件来自另一个运行时系统 “Substrate VM”。“Substrate VM” 是运行时组件（例如反优化器，垃圾收集器，线程调度等）的名称。与 JVM 相比，生成的程序具有更快的启动时间和更低的运行时内存开销。&lt;/p>
&lt;/blockquote>
&lt;h2 id="如何构建本机映像">如何构建本机映像&lt;/h2>
&lt;p>环境配置参考&lt;a href="https://mp.weixin.qq.com/s/YcEqFm3oxlsEvJ3ckRbQyA">上一篇文章&lt;/a>，可以直接&lt;a href="https://github.com/addozhang/quarkus-getting-started">从这里下载源码&lt;/a>。&lt;/p>
&lt;h3 id="配置-graalvm">配置 GraalVM&lt;/h3>
&lt;p>之前我们使用了&lt;a href="https://sdkman.io/"> sdkman&lt;/a> 进行 GraalVM 安装。设置 &lt;code>GRAALVM_HOME&lt;/code> 环境变量：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">export&lt;/span> &lt;span class="nv">GRAALVM_HOME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>sdk home java 21.0.0.2.r11-grl&lt;span class="sb">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>gu&lt;/code> 安装 &lt;code>native-image&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="si">${&lt;/span>&lt;span class="nv">GRAALVM_HOME&lt;/span>&lt;span class="si">}&lt;/span>/bin/gu install native-image
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="构建本机可执行文件">构建本机可执行文件&lt;/h3>
&lt;p>在源码的 &lt;code>pom.xml&lt;/code> 中，我们可以看到如下的 &lt;code>profile&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;profiles&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;profile&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;id&amp;gt;&lt;/span>native&lt;span class="nt">&amp;lt;/id&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;properties&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;quarkus.package.type&amp;gt;&lt;/span>native&lt;span class="nt">&amp;lt;/quarkus.package.type&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/profile&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/profiles&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们使用这个 profile 进行本机可执行文件的构建，整个构建耗时 &lt;strong>几分钟&lt;/strong> 。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">./mvnw package -Pnative
&lt;/code>&lt;/pre>&lt;/div>&lt;p>部分构建日志：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ quarkus-getting-started ---
[INFO]
[INFO] --- quarkus-maven-plugin:1.13.0.Final:build (default) @ quarkus-getting-started ---
[INFO] [org.jboss.threads] JBoss Threads version 3.2.0.Final
[INFO] [io.quarkus.deployment.pkg.steps.JarResultBuildStep] Building native image source jar: /Users/addo/Workspaces/private_w/quarkus-getting-started/target/quarkus-getting-started-1.0.0-SNAPSHOT-native-image-source-jar/quarkus-getting-started-1.0.0-SNAPSHOT-runner.jar
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Building native image from /Users/addo/Workspaces/private_w/quarkus-getting-started/target/quarkus-getting-started-1.0.0-SNAPSHOT-native-image-source-jar/quarkus-getting-started-1.0.0-SNAPSHOT-runner.jar
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildContainerRunner] Using docker to run the native image builder
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildContainerRunner] Checking image status quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java11
21.0.0-java11: Pulling from quarkus/ubi-quarkus-native-image
Digest: sha256:becf08de869e707beaa5e57444b533ef93ebef15aad90c92ac660ddf7cea2b11
Status: Image is up to date for quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java11
quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java11
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Running Quarkus native-image plugin on GraalVM Version 21.0.0 (Java Version 11.0.10+8-jvmci-21.0-b06)
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] docker run --env LANG=C --rm -v /Users/addo/Workspaces/private_w/quarkus-getting-started/target/quarkus-getting-started-1.0.0-SNAPSHOT-native-image-source-jar:/project:z quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java11 -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dvertx.logger-delegate-factory-class-name=io.quarkus.vertx.core.runtime.VertxLogDelegateFactory -J-Dvertx.disableDnsResolver=true -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=1 -J-Duser.language=en -J-Duser.country=CN -J-Dfile.encoding=UTF-8 --initialize-at-build-time= -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy\$BySpaceAndTime -H:+JNI -H:+AllowFoldMethods -jar quarkus-getting-started-1.0.0-SNAPSHOT-runner.jar -H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -J-Xmx5g -H:-AddAllCharsets -H:EnableURLProtocols=http --no-server -H:-UseServiceLoaderFeature -H:+StackTrace quarkus-getting-started-1.0.0-SNAPSHOT-runner
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] classlist: 5,859.24 ms, 0.96 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (cap): 633.34 ms, 0.94 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] setup: 2,468.19 ms, 0.94 GB
00:06:00,437 INFO [org.jbo.threads] JBoss Threads version 3.2.0.Final
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (clinit): 516.65 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (typeflow): 12,642.02 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (objects): 11,340.37 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (features): 525.87 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] analysis: 26,032.67 ms, 2.23 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] universe: 1,394.06 ms, 2.16 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (parse): 2,690.38 ms, 2.16 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (inline): 4,336.77 ms, 2.73 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] (compile): 17,580.03 ms, 2.71 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] compile: 26,152.06 ms, 2.71 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] image: 3,288.43 ms, 2.70 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] write: 1,904.64 ms, 2.70 GB
[quarkus-getting-started-1.0.0-SNAPSHOT-runner:25] [total]: 67,414.16 ms, 2.70 GB
[WARNING] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] objcopy executable not found in PATH. Debug symbols will not be separated from executable.
[WARNING] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] That will result in a larger native image with debug symbols embedded in it.
[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 74739ms
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:21 min
[INFO] Finished at: 2021-04-17T08:06:47+08:00
[INFO] ------------------------------------------------------------------------
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>假如构建时出现类似 &lt;code>Caused by: java.lang.RuntimeException: Image generation failed. Exit code was 137 which indicates an out of memory error. Consider increasing the Xmx value for native image generation by setting the &amp;quot;quarkus.native.native-image-xmx&amp;quot; property&lt;/code> 这种报错。需要调整下 Docker 的设置，比如笔者使用的 macOS，打开 Docker Desktop &amp;gt; Preference &amp;gt; Resource &amp;gt; Advanced，将内存从默认的 2GB 调大，比如 8GB。&lt;/p>
&lt;p>从构建日志可以看出，构建的过程是在 &lt;code>quay.io/quarkus/ubi-quarkus-native-image&lt;/code> 的容器中完成的。虽然异常提示调整 &amp;ldquo;quarkus.native.native-image-xmx&amp;rdquo; ，其实是容器内存太小导致的。&lt;/p>
&lt;/blockquote>
&lt;p>构建成功后，可以在 &lt;code>target&lt;/code> 中找到 &lt;code>quarkus-getting-started-1.0.0-SNAPSHOT-runner&lt;/code>。这是一个可执行文件，大小为 28MB。&lt;/p>
&lt;p>尝试执行该文件，收到 &lt;code>zsh: exec format error: ./target/quarkus-getting-started-1.0.0-SNAPSHOT-runner&lt;/code> 错误。因为这是一个 Linux 可执行文件，因此我们需要在容器中运行。&lt;/p>
&lt;h3 id="构建本机镜像">构建本机镜像&lt;/h3>
&lt;p>在源文件的 &lt;code>src/main/docker&lt;/code> 目录中，我们可以找到 &lt;code>Dockerfile.native&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> registry.access.redhat.com/ubi8/ubi-minimal:8.3&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /work/&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> chown &lt;span class="m">1001&lt;/span> /work &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chmod &lt;span class="s2">&amp;#34;g+rwX&amp;#34;&lt;/span> /work &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chown 1001:root /work&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --chown&lt;span class="o">=&lt;/span>1001:root target/*-runner /work/application&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">EXPOSE&lt;/span>&lt;span class="s"> 8080&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">USER&lt;/span>&lt;span class="s"> 1001&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;./application&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;-Dquarkus.http.host=0.0.0.0&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="运行镜像">运行镜像&lt;/h3>
&lt;p>本地运行一下，可以看出启动只需要 &lt;code>0.013s&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --rm -p 8080:8080 quarkus/quarkus-getting-started:latest
__ ____ __ _____ ___ __ ____ ______
--/ __ &lt;span class="se">\/&lt;/span> / / / _ &lt;span class="p">|&lt;/span> / _ &lt;span class="se">\/&lt;/span> //_/ / / / __/
-/ /_/ / /_/ / __ &lt;span class="p">|&lt;/span>/ , _/ ,&amp;lt; / /_/ /&lt;span class="se">\ \
&lt;/span>&lt;span class="se">&lt;/span>--&lt;span class="se">\_&lt;/span>__&lt;span class="se">\_\_&lt;/span>___/_/ &lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span>&lt;span class="se">\_&lt;/span>___/___/
2021-04-17 00:22:27,146 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> quarkus-getting-started 1.0.0-SNAPSHOT native &lt;span class="o">(&lt;/span>powered by Quarkus 1.13.0.Final&lt;span class="o">)&lt;/span> started in 0.013s. Listening on: http://0.0.0.0:8080
2021-04-17 00:22:27,147 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> Profile prod activated.
2021-04-17 00:22:27,147 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> Installed features: &lt;span class="o">[&lt;/span>cdi, resteasy&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试一下端点：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">http :8080/hello/greeting/quarkus
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Content-Length: &lt;span class="m">14&lt;/span>
Content-Type: text/plain&lt;span class="p">;&lt;/span>&lt;span class="nv">charset&lt;/span>&lt;span class="o">=&lt;/span>UTF-8
Hello, quarkus
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看下镜像的信息，大小为 132MB，其中 base 镜像 &lt;code>ubi-minimal&lt;/code> 就占了 103 MB。感觉还是有点大，是否继续精简一下？&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
quarkus/quarkus-getting-started latest 8f86f5915715 &lt;span class="m">4&lt;/span> minutes ago 132MB
registry.access.redhat.com/ubi8/ubi-minimal 8.3 604ddd554fec &lt;span class="m">2&lt;/span> weeks ago 103MB
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="镜像瘦身">镜像瘦身&lt;/h3>
&lt;p>在 &lt;code>src/main/docker&lt;/code> 中还有个名为 &lt;code>Dockerfile.native-distroless&lt;/code> 的Dockerfile，里面使用了 &lt;code>quay.io/quarkus/quarkus-distroless-image:1.0&lt;/code> 作为 base 镜像&lt;/p>
&lt;p>使用这个Dockerfile进行构建，得到的镜像就小很多，只有 51MB：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
quarkus/quarkus-getting-started distroless 6fe27dd44e86 &lt;span class="m">33&lt;/span> seconds ago 51MB
quarkus/quarkus-getting-started ubi 8f86f5915715 &lt;span class="m">27&lt;/span> minutes ago 132MB
quay.io/quarkus/quarkus-distroless-image 1.0 062663862a83 &lt;span class="m">6&lt;/span> days ago 21.3MB
registry.access.redhat.com/ubi8/ubi-minimal 8.3 604ddd554fec &lt;span class="m">2&lt;/span> weeks ago 103MB
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行成功：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --rm -p 8080:8080 quarkus/quarkus-getting-started:distroless
__ ____ __ _____ ___ __ ____ ______
--/ __ &lt;span class="se">\/&lt;/span> / / / _ &lt;span class="p">|&lt;/span> / _ &lt;span class="se">\/&lt;/span> //_/ / / / __/
-/ /_/ / /_/ / __ &lt;span class="p">|&lt;/span>/ , _/ ,&amp;lt; / /_/ /&lt;span class="se">\ \
&lt;/span>&lt;span class="se">&lt;/span>--&lt;span class="se">\_&lt;/span>__&lt;span class="se">\_\_&lt;/span>___/_/ &lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span>&lt;span class="se">\_&lt;/span>___/___/
2021-04-17 00:51:26,070 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> quarkus-getting-started 1.0.0-SNAPSHOT native &lt;span class="o">(&lt;/span>powered by Quarkus 1.13.0.Final&lt;span class="o">)&lt;/span> started in 0.013s. Listening on: http://0.0.0.0:8080
2021-04-17 00:51:26,071 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> Profile prod activated.
2021-04-17 00:51:26,071 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>main&lt;span class="o">)&lt;/span> Installed features: &lt;span class="o">[&lt;/span>cdi, resteasy&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>极致瘦身，参考了&lt;a href="https://capgemini.github.io/development/Introduction-to-Quarkus-Supersonic-Subatomic-Java/#distroless-images">这里&lt;/a>，我们创建 &lt;code>Dockerfile.native-distroless2&lt;/code>。&lt;/p>
&lt;p>最终镜像的大小为 49MB，与官方提供的 distroless base 镜像只小了 2MB。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
quarkus/quarkus-getting-started distroless2 fe973c5ac172 &lt;span class="m">3&lt;/span> seconds ago 49MB
&lt;/code>&lt;/pre>&lt;/div>&lt;p>前面对比，用来构建 Spring 应用的 base 镜像 &lt;code>openjdk:11.0-jre-slim&lt;/code> 已经有 220MB，这还没算上应用的大小。即使是 &lt;code>openjdk:17-alpine3.13&lt;/code> 也有 182 MB。&lt;/p>
&lt;h2 id="next">NEXT&lt;/h2>
&lt;p>下一回，我们试试 Quarkus 在 ArgoCD 中的应用，看下 Serverless 上的使用体验如何。&lt;/p></description></item><item><title>应“云”而生的 Java 框架：Hello, Quarkus</title><link>https://atbug.com/hello-quarkus/</link><pubDate>Mon, 05 Apr 2021 21:08:40 +0800</pubDate><guid>https://atbug.com/hello-quarkus/</guid><description>
&lt;p>Wikipedia上有关 Quarkus 的信息还很少，只有一句简单的介绍：&lt;/p>
&lt;blockquote>
&lt;p>Quarkus 是专为 OpenJDK HotSpot 和 GraalVM 定制的全栈 Kubernetes 原生 Java 应用程序框架。与如 Spring 之类的其他框架相比，它提供了较小的内存占用并缩短了启动时间。它允许结合命令式和非阻塞响应式编程。&lt;/p>
&lt;/blockquote>
&lt;p>从 Quarkus 的&lt;a href="https://quarkus.io/">官网&lt;/a>，可以看到其有几个特性：&lt;/p>
&lt;ul>
&lt;li>容器优先&lt;/li>
&lt;li>统一了命令式和响应式编程&lt;/li>
&lt;li>开发者友好&lt;/li>
&lt;li>最佳品种的库及标准&lt;/li>
&lt;/ul>
&lt;p>更多 Quarkus 可以参考&lt;a href="https://quarkus.io/">官网&lt;/a>的介绍及文档。今天主要就是跑一下 Quarkus 的 &lt;code>Hello world&lt;/code>。&lt;/p>
&lt;p>放一张官网的图：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/05/16176279246527.jpg" alt="">&lt;/p>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;ul>
&lt;li>基于 Java 11 的 GraalVM&lt;/li>
&lt;li>Maven 3.6.2+&lt;/li>
&lt;/ul>
&lt;p>笔者使用的是 macos 10.15.4，GraalVM 和 Maven 建议通过 &lt;a href="https://sdkman.io">sdkman&lt;/a> 进行安装。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ sdk install java 21.0.0.2.r11-grl &lt;span class="c1">#如果已使用其他 java 版本，可以使用命令 sdk use java 21.0.0.2.r11-grl 进行切换&lt;/span>
$ sdk install maven 3.6.3
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="验证安装">验证安装&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ java -version
openjdk version &lt;span class="s2">&amp;#34;11.0.10&amp;#34;&lt;/span> 2021-01-19
OpenJDK Runtime Environment GraalVM CE 21.0.0.2 &lt;span class="o">(&lt;/span>build 11.0.10+8-jvmci-21.0-b06&lt;span class="o">)&lt;/span>
OpenJDK 64-Bit Server VM GraalVM CE 21.0.0.2 &lt;span class="o">(&lt;/span>build 11.0.10+8-jvmci-21.0-b06, mixed mode, sharing&lt;span class="o">)&lt;/span>
$ mvn -version
Apache Maven 3.6.3 &lt;span class="o">(&lt;/span>cecedd343002696d0abb50b32b541b8a6ba2883f&lt;span class="o">)&lt;/span>
Maven home: /Users/addo/.sdkman/candidates/maven/current
Java version: 11.0.10, vendor: GraalVM Community, runtime: /Users/addo/.sdkman/candidates/java/21.0.0.2.r11-grl
Default locale: en_CN, platform encoding: UTF-8
OS name: &lt;span class="s2">&amp;#34;mac os x&amp;#34;&lt;/span>, version: &lt;span class="s2">&amp;#34;10.15.4&amp;#34;&lt;/span>, arch: &lt;span class="s2">&amp;#34;x86_64&amp;#34;&lt;/span>, family: &lt;span class="s2">&amp;#34;mac&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="快速开始">快速开始&lt;/h2>
&lt;h3 id="创建项目">创建项目&lt;/h3>
&lt;p>创建 quarkus 项目最快的方式是通过 &lt;code>quarkus-maven-plugin&lt;/code> 来创建，使用如下的命令快速可以创建&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ mvn io.quarkus:quarkus-maven-plugin:1.13.0.Final:create &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -DprojectGroupId&lt;span class="o">=&lt;/span>com.atbug.quickstart &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -DprojectArtifactId&lt;span class="o">=&lt;/span>quarkus-getting-started &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -DclassName&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;com.atbug.quickstart.GreetingResource&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -Dpath&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/hello&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>./quarkus-getting-started&lt;/code> 中提供了：&lt;/p>
&lt;ul>
&lt;li>maven 的项目结构&lt;/li>
&lt;li>&lt;code>com.atbug.quickstart.GreetingResource&lt;/code> 暴露了 &lt;code>/hello&lt;/code> 端点，通过 &lt;code>JAX-RS&lt;/code> 注解实现&lt;/li>
&lt;li>相关的单元测试&lt;/li>
&lt;li>应用启动后可以通过 &lt;code>http://localhost:8080&lt;/code> 打开的启动页面&lt;/li>
&lt;li>&lt;code>src/main/docker&lt;/code> 下提供了 &lt;code>native&lt;/code> 和 &lt;code>jvm&lt;/code> 风格的 Dockerfile&lt;/li>
&lt;li>应用配置文件&lt;/li>
&lt;/ul>
&lt;h3 id="运行应用">运行应用&lt;/h3>
&lt;p>执行 &lt;code>./mvnw compile quarkus:dev&lt;/code> 命令可启动应用&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">__ ____ __ _____ ___ __ ____ ______
--/ __ &lt;span class="se">\/&lt;/span> / / / _ &lt;span class="p">|&lt;/span> / _ &lt;span class="se">\/&lt;/span> //_/ / / / __/
-/ /_/ / /_/ / __ &lt;span class="p">|&lt;/span>/ , _/ ,&amp;lt; / /_/ /&lt;span class="se">\ \
&lt;/span>&lt;span class="se">&lt;/span>--&lt;span class="se">\_&lt;/span>__&lt;span class="se">\_\_&lt;/span>___/_/ &lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_/_/&lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span>&lt;span class="se">\_&lt;/span>___/___/
2021-04-05 19:48:36,419 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>Quarkus Main Thread&lt;span class="o">)&lt;/span> quarkus-getting-started 1.0.0-SNAPSHOT on JVM &lt;span class="o">(&lt;/span>powered by Quarkus 1.13.0.Final&lt;span class="o">)&lt;/span> started in 2.135s. Listening on: http://localhost:8080
2021-04-05 19:48:36,448 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>Quarkus Main Thread&lt;span class="o">)&lt;/span> Profile dev activated. Live Coding activated.
2021-04-05 19:48:36,448 INFO &lt;span class="o">[&lt;/span>io.quarkus&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>Quarkus Main Thread&lt;span class="o">)&lt;/span> Installed features: &lt;span class="o">[&lt;/span>cdi, resteasy&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>访问 &lt;code>/hello&lt;/code> 断点&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ http :8080/hello
HTTP/1.1 200 OK
Content-Length: 5
Content-Type: text/plain;charset=UTF-8
Hello
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>笔者通过 &lt;code>httpie&lt;/code> 进行访问，可以通过 &lt;code>brew install httpie&lt;/code> 进行安装，推荐使用。&lt;/p>
&lt;/blockquote>
&lt;h4 id="增加新的断点">增加新的断点&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@GET&lt;/span>
&lt;span class="nd">@Produces&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TEXT_PLAIN&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/greeting/{name}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">greeting&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathParam&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注：&lt;code>PathParam&lt;/code> 来自 &lt;code>org.jboss.resteasy.annotations.jaxrs.PathParam&lt;/code>&lt;/p>
&lt;p>测试：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ http :8080/hello/greeting/Quarkus
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Content-Length: &lt;span class="m">14&lt;/span>
Content-Type: text/plain&lt;span class="p">;&lt;/span>&lt;span class="nv">charset&lt;/span>&lt;span class="o">=&lt;/span>UTF-8
Hello, Quarkus
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为新的端点增加单元测试&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testGreetingEndpoint&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">uuid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UUID&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">randomUUID&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">given&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">pathParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">uuid&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">when&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/hello/greeting/{name}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">then&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">statusCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">200&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">body&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">is&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">uuid&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>./mvnw test&lt;/code> 运行单元测试&lt;/p>
&lt;blockquote>
&lt;p>注意这里使用 intellij 运行单元测试的话，会报错。需要修改 Java Compiler 的配置，添加额外的命令行参数 &lt;code>-parameters&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/05/16176241035940.jpg" alt="">&lt;/p>
&lt;/blockquote>
&lt;h3 id="打包">打包&lt;/h3>
&lt;p>与通常的 maven 项目打包方式一样，执行 &lt;code>./mvnw package&lt;/code>，在 &lt;code>target&lt;/code> 目录中：&lt;/p>
&lt;ul>
&lt;li>&lt;code>quarkus-getting-started-1.0.0-SNAPSHOT.jar&lt;/code> 仅包含了项目编译的类和资源文件，是不可执行的 jar&lt;/li>
&lt;li>&lt;code>quarkus-app&lt;/code> 目录中包含了可执行的 jar 文件 &lt;code>quarkus-run.jar&lt;/code> ，&lt;strong>但是&lt;/strong>，其并不是一个 &lt;code>über-jar&lt;/code>，项目的依赖库都位于 &lt;code>lib&lt;/code>目录中。&lt;/li>
&lt;/ul>
&lt;p>可以通过执行 &lt;code>java -jar target/quarkus-app/quarkus-run.jar&lt;/code> 在启动应用。&lt;/p>
&lt;blockquote>
&lt;p>这意味着假如你想在容器中运行，需要部署整个 &lt;code>quarkus-app&lt;/code> 目录&lt;/p>
&lt;/blockquote>
&lt;h4 id="使用-fast-jar">使用 fast-jar&lt;/h4>
&lt;p>qurakus 的打包方式有两种：&lt;code>legacy-jar&lt;/code> 和 &lt;code>fast-jar&lt;/code>。可以在 &lt;code>application.properties&lt;/code> 文件中进行指定，未显式指定默认为 &lt;code>legacy-jar&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">quarkus.package.type=fast-jar
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>如果要在容器中运行，同样需要部署整个 &lt;code>quarkus-app&lt;/code> 目录
&lt;code>fast-jar&lt;/code> 类型的包比 &lt;code>legacy-jar&lt;/code> 的包启动会快一点点，同时占用的内存也更低。因为 &lt;code>fast-jar&lt;/code> 的包含了依赖包中的类和资源文件的索引，避免在类和资源文件加载时对 classpath 下的包的查找。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>下一篇，试试构建一个原生的可执行文件。&lt;/strong>&lt;/p></description></item><item><title>分布式系统在 Kubernetes 上的进化</title><link>https://atbug.com/translation-distributed-systems-kubernetes/</link><pubDate>Mon, 29 Mar 2021 23:11:25 +0800</pubDate><guid>https://atbug.com/translation-distributed-systems-kubernetes/</guid><description>
&lt;p>本文译自 &lt;a href="https://www.infoq.com/articles/distributed-systems-kubernetes/">The Evolution of Distributed Systems on Kubernetes&lt;/a>&lt;/p>
&lt;p>在 3 月份的 QCon 上，我做了一个关于 Kubernetes 的分布式系统进化的演讲。首先，我想先问一个问题，微服务之后是什么？我相信大家都有各自的答案，我也有我的答案。你会在最后发现我的想法是什么。为了达到这个目的，我建议大家看看分布式系统的需求是什么？以及这些需求在过去是如何发展的，从单体应用开始到 Kubernetes，再到最近的 Dapr、Istio、Knative 等项目，它们是如何改变我们做分布式系统的方式。我们将尝试对未来做一些预测。&lt;/p>
&lt;h2 id="现代分布式应用">现代分布式应用&lt;/h2>
&lt;p>为了给这个话题提供更多的背景信息，我认为的分布式系统是由数百个组件组成的系统。这些组件可以是有状态的、无状态的或者无服务器的。此外，这些组件可以用不同的语言创建，运行在混合环境上，并开发开源技术、开放标准和互操作性。我相信你可以使用闭源软件来构建这样的系统，也可以在 AWS 和其他地方构建。具体到这次演讲，我将关注 Kubernetes 生态系统，以及你如何在 Kubernetes 平台上构建这样一个系统。&lt;/p>
&lt;p>我们从分布式系统的需求讲起。我认为是我们要创建一个应用或者服务，并写一些业务逻辑。那从运行时的平台到构建分布式系统，我们还需要什么呢？在底层，最开始是我们要一些生命周期的能力。当你用任一语言开发你的应用时，我们希望有能力把这个应用可靠地打包和部署、回滚、健康检查。并且能够把应用部署到不同的节点上，并实现资源隔离、扩展、配置管理，以及所有这些。这些都是你创建分布式应用所需要的第一点。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/55image0011616431697020.jpg" alt="">&lt;/p>
&lt;p>第二点是围绕网络。我们有了应用之后，我们希望它能够可靠地连接到其他服务，无论该服务是在集群内部还是在外部。我们希望其具有服务发现、负载均衡的能力。为了不同的发布策略或是其他的一些原因的我们希望有流量转移的能力。然后我们还希望其具有与其他系统进行弹性通信的能力，无论是通过重试、超时还是断路器。要有适当的安全保障，并且要有足够的监控、追踪、可观察性等等。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/25image0021616431698392.jpg" alt="">&lt;/p>
&lt;p>我们有了网络之后，接下来就是我们希望有能力与不同的 API 和端点交互，即资源绑定&amp;ndash;与其他协议和不同的数据格式交互。甚至能够从一种数据格式转换成另一种数据格式。我还会在这里加入诸如滤光的功能，也就是说，当我们订阅一个主题时，我们也许只对某些事件感兴趣。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/45image0031616431697873.jpg" alt="">&lt;/p>
&lt;p>你认为最后一类是什么？是状态。当我在说状态和有状态的抽象时，我并不是在谈论实际的状态管理，比如数据库或者文件系统的功能。我要说的更多是有关幕后依赖状态的开发人员抽象。可能，你需要具有工作流管理的能力。也许你想管理运行时间长的进程或者做临时调度或者某些定时任务来定期运行服务。也许你还想进行分布式缓存，具有幂等性或者支持回滚。所有这些都是开发人员级的原语，但在幕后，它们依赖于具有某种状态。你想随意使用这些抽象俩创建完善的分布式系统。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/26image0041616431697348.jpg" alt="">&lt;/p>
&lt;p>我们将使用这个分布式系统原语的框架来评估它们在 Kubernetes 和其他项目上的变化情况。&lt;/p>
&lt;h2 id="单体架构----传统中间件功能">单体架构 &amp;ndash; 传统中间件功能&lt;/h2>
&lt;p>假设我们从单体架构以及如何获得这些能力开始。在那种情况下，首先是当我说单体的时候，在分布式应用的情况下我想到的是 ESB。ESB 是相当强大的，当我们检查我们的需求列表时，我们会说 ESB 对所有有状态的抽象有很好的支持。&lt;/p>
&lt;p>使用 ESB，你可以进行长时间运行的流程的编排、分布式事务、回滚和幂等。此外，ESB 还提供了出色的资源绑定能力，并且有数百个连接器，支持转换、编排，甚至有联网功能。最后，ESB 甚至可以做服务发现和负载均衡。&lt;/p>
&lt;p>它具有围绕网络连接的弹性的所有功能，因此它可以进行重试。可能 ESB 本质上不是很分布式，所以它不需要非常高级的网络和发布能力。ESB 欠缺的主要是生命周期管理。因为它是单一运行时，所以第一件事就是你只能使用一种语言。通常是创建实际运行时的语言，Java、.NET、或者其他的语言。然后，因为是单一运行时，我们不能轻松地进行声明式的部署或者自动防止。部署是相当大且非常重的，所以它通常涉及到人机交互。这种单体架构的另一个难点是扩展：“我们无法扩展单个组件。”&lt;/p>
&lt;p>最后却并非最不重要的一点是，围绕隔离，无论是资源隔离还是故障隔离。使用单体架构无法完成所有这些工作。从我们的需求框架来看，ESB 的单体架构不符合条件。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/40image0051616431696438.jpg" alt="">&lt;/p>
&lt;h2 id="云原生架构----微服务和-kubernetes">云原生架构 &amp;ndash; 微服务和 Kubernetes&lt;/h2>
&lt;p>接下来，我建议我们研究一下云原生架构以及这些需求是如何变化的。如果我们从一个非常高的层面来看，这些架构是如何发生变化的，云原生可能始于微服务运动。微服务使我们可以按业务领域进行拆分单体应用。事实证明，容器和 Kubernetes 实际上是管理这些微服务的优秀平台。让我们来看一下 Kubernetes 对于微服务特别有吸引力的一些具体特性和功能。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/13image0061616431699209.jpg" alt="">&lt;/p>
&lt;p>从一开始，进行健康状况探测的能力就是 Kubernetes 受欢迎的原因。在实践中，这意味着当你将容器部署到 Pod 中时，Kubernetes 会检查进程的运行状况。通常情况下，该过程模型还不够好。你可能仍然有一个已启动并正在运行的进程，但是它并不健康。这就是为什么还可以使用就绪度和存活度检查的原因。Kubernetes 会做一个就绪度检查，以确定你的应用在启动期间何时准备接受流量。它将进行活跃度检查，以检查服务的运行状况。在 Kubernetes 之前，这并不是很流行，但今天几乎所有语言、所有框架、所有运行时都有健康检查功能，你可以在其中快速启动端点。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/29image0071616431696697.jpg" alt="">&lt;/p>
&lt;p>Kubernetes 引入的下一个特性是围绕应用程序的托管生命周期&amp;ndash;我的意思是，你不再控制何时启动、何时关闭服务。你相信平台可以做到这一点。Kubernetes 可以启动你的应用；它可以将其关闭，然后在不同的节点上移动它。为此，你必须正确执行平台在应用启动和关闭期间告诉你的事件。&lt;/p>
&lt;p>Kubernetes 刘兴的另一件特性是围绕着声明式部署。这意味着你不再需要启动服务；检查日志是否已经启动。你不必手动升级实例&amp;ndash;支持声明式部署的 Kubernetes 可以为你做到这一点。根据你选择的策略，它可以停止旧实例并启动新实例。此外，如果出现问题，可以进行回滚。&lt;/p>
&lt;p>另外就是声明你的资源需求。创建服务时，将其容器化。最好告诉平台该服务将需要多少 CPU 和内存。Kubernetes 利用这些信息为你的工作负载找到最佳节点。在使用 Kubernetes 之前，我们必须根据我们的标准将实例手动放置到一个节点上。现在，我们可以根据自己的偏好来指导 Kubernetes，它将为我们做出最佳的决策。&lt;/p>
&lt;p>如今，在 Kubernetes 上，你可以进行多语言配置管理。无需在应用程序运行时进行配置查找就可以进行任何操作。Kubernetes 会确保配置最终在工作负载所在的同一节点上。这些配置被映射为卷或环境变量，以供你的应用程序使用。&lt;/p>
&lt;p>事实证明，我刚才谈到的那些特定功能也是相关的。比如说，如果要进行自动放置，则必须告诉 Kubernetes 服务的资源需求。然后，你必须告诉它要使用的部署策略。为了让策略正确运行，你的应用程序必须执行来自环境的事件。它必须执行健康检查。一旦采用了所有这些最佳实践并使用所有这些功能，你的应用就会成为出色的云原生公民，并且可以在 Kubernetes 上实现自动化了（这是在 Kubernetes 上运行工作负载的基本模式）。最后，还有围绕着构建 Pod 中的容器、配置管理和行为，还有其他模式。&lt;/p>
&lt;p>我要简要介绍的下一个主题是工作负载。从生命周期的角度来看，我们希望能够运行不同的工作负载。我们也可以在 Kubernetes 上做到这一点。运行十二要素应用程序和无状态微服务非常简单。Kubernetes 可以做到这一点。这不是你将要承担的唯一工作量。可能你还有有状态的工作负载，你可以使用有状态集在 Kubernetes 上完成此工作。&lt;/p>
&lt;p>你可能还有的另一个工作负载是单例。也许你希望某个应用程序的实例是整个集群中应用程序的唯一一个实例&amp;ndash;你希望它成为可靠的单例。如果失败，则重新启动。因此，你可以根据需求以及是否希望单例至少具有一种或最多一种语义来在有状态集和副本集之间进行选择。你可能还有的另一个工作负载是围绕作业和定时作业&amp;ndash;有了 Kubernetes，你也可以实现这些。&lt;/p>
&lt;p>如果我们将所有这些 Kubernetes 功能映射到我们的需求，则 Kubernetes 可以满足生命周期需求。我通常创建的需求列表主要是由 Kubernetes 今天提供给我们的。这些是任何平台上的预期功能，而 Kubernetes 可以为你的部署做的是配置管理、资源隔离和故障隔离。此外，除了无服务器本身之外，它还支持其他工作负载。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/12image0081616431698134.jpg" alt="">&lt;/p>
&lt;p>然后，如果这就是 Kubernetes 给开发者提供的全部功能，那么我们该如何扩展 Kubernetes 呢？以及如何使它具有更多功能？因此，我想描述当今使用的两种常用方法。&lt;/p>
&lt;h2 id="进程外扩展机制">进程外扩展机制&lt;/h2>
&lt;p>首先是 Pod 的概念，Pod 是用于在节点上部署容器的抽象。此外，Pod 给我们提供了两组保证：&lt;/p>
&lt;ul>
&lt;li>第一组是部署保证 &amp;ndash; Pod 中的所有容器始终位于同一个节点上。这意味着它们可以通过 localhost 相互通信，也可以使用文件系统或通过其他 IPC 机制进行异步通信。&lt;/li>
&lt;li>Pod 给我们的另一组保证是围绕生命周期的。Pod 中的所有容器并非都相等。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/22image0091616431698660.jpg" alt="">&lt;/p>
&lt;p>根据使用的是 init 容器还是应用程序容器，你会获得不同的保证。例如，init 容器在开始时运行；当 Pod 启动时，它按顺序一个接一个地运行。他们仅在之前的容器已成功完成时运行。它们有助于实现由容器驱动的类似工作流的逻辑。&lt;/p>
&lt;p>另一方面，应用程序容器是并行运行的。它们在整个 Pod 的生命周期中运行，这也是 sidecar 模式的基础。sidecar 可以运行多个容器，这些容器可以协作并共同为用户提供价值。这也是当今我们看到的扩展 Kubernetes 附加功能的主要机制之一。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/9image0101616431695489.jpg" alt="">&lt;/p>
&lt;p>为了解释以下功能，我必须简要地告诉你 Kubernetes 内部的工作方式。它是基于调谐循环的。调谐循环的思想是将期望状态驱动到实际状态。在 Kubernetes 中，很多功能都是靠这个来实现的。例如，当你说我要两个 Pod 实例，这系统的期望状态。有一个控制循环不断地运行，并检查你的 Pod 是否有两个实例。如果不存在两个实例，它将计算差值。它将确保存在两个实例。&lt;/p>
&lt;p>这方面的例子有很多。一些是副本集或有状态集。资源定义映射到控制器是什么，并且每个资源定义都有一个控制器。该控制器确保现实世界与所需控制器相匹配，你甚至可以编写自己的自定义控制器。&lt;/p>
&lt;p>当在 Pod 中运行应用程序时，你将无法在运行时加载任何配置文件更改。然而，你可以编写一个自定义控制器，检测 config map 的变化，重新启动 Pod 和应用程序&amp;ndash;从而获取配置更改。&lt;/p>
&lt;p>事实证明，即使 Kubernetes 拥有丰富的资源集合，但它们并不能满足你的所有不同需求。Kubernetes 引入了自定义资源定义的概念。这意味着你可以对需求进行建模并定义适用于 Kubernetes 的 API。它与其他 Kubernetes 原生资源共存。你可以用能理解模型的任何语言编写自己的控制器。你可以设计一个用 Java 实现的 ConfigWatcher，描述我们前面所解释的内容。这就是 operator 模式，即与自定义资源定义一起使用的控制器。如今，我们看到很多 operator 假如，这就是第二种扩展 Kubernetes 附加功能的方式。&lt;/p>
&lt;p>接下来，我想简单介绍一下基于 Kubernetes 构建的一些平台，这些平台大量使用 sidecar 和 operator 来给开发者提供额外的功能。&lt;/p>
&lt;h2 id="什么是服务网格">什么是服务网格？&lt;/h2>
&lt;p>让我们从服务网格开始，什么是服务网格？&lt;/p>
&lt;p>我们有两个服务，服务 A 要调用服务 B，并且可以用任何语言。把这个当做是我们的应用工作负载。服务网格使用 sidecar 控制器，并在我们的服务旁边注入一个代理。你最终会在 Pod 中得到两个容器。代理是一个透明的代理，你的应用对这个代理完全无感知&amp;ndash;它拦截所有传入和传出的流量。此外，代理还充当数据防火墙。&lt;/p>
&lt;p>这些服务代理的集合代表了你的数据平面，并且很小且无状态。为了获得所有状态和配置，它们依赖于控制平面。控制平面是保持所有配置，收集指标，做出决定并与数据平面进行交互的有状态部分。此外，它们是不同控制平面和数据平面的正确选择。事实证明，我们还需要一个组件-一个 API 网关，以将数据获取到我们的集群中。一些服务网格具有自己的 API 网关，而某些使用第三方。如果你研究下所有这些组件，它们将提供我们所需的功能。&lt;/p>
&lt;p>API 网关主要专注于抽象我们服务的实现。它隐藏细节并提供边界功能。服务网格则相反。在某种程度上，它增强了服务内的可见性和可靠性。可以说，API 网关和服务网格共同提供了所有网络需求。要在 Kubernetes 上获得网络功能，仅使用服务是不够的：“你需要一些服务网格。”&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/19image0111616431696146.jpg" alt="">&lt;/p>
&lt;h2 id="什么是-knative">什么是 Knative？&lt;/h2>
&lt;p>我要讨论的下一个主题是 Knative，这是 Google 几年前启动的一个项目。它是 Kubernetes 之上的一层，可为您提供无服务器功能，并具有两个主要模块：&lt;/p>
&lt;ul>
&lt;li>Knative 服务 - 围绕着请求-应答交互，以及&lt;/li>
&lt;li>Knative Eventing - 更多的是用于事件驱动的交互。&lt;/li>
&lt;/ul>
&lt;p>只是让你感受一下，Knative Serving 是什么？通过 Knative Serving，你可以定义服务，但这不同于 Kubernetes 服务。这是 Knative 服务。使用 Knative 服务定义工作负载后，你就会得到具有无服务器的特征的部署。你不需要有启动并运行实例。它可以在请求到达时从零开始。你得到的是无服务器的能力；它可以迅速扩容，也可以缩容到零。&lt;/p>
&lt;p>Knative Eventing 为我们提供了一个完全声明式的事件管理系统。假设我们有一些要与之集成的外部系统，以及一些外部的事件生产者。在底部，我们将应用程序放在具有 HTTP 端点的容器中。借助 Knative Eventing，我们可以启动代理，该代理可以触发 Kafka 映射的代理，也可以在内存或者某些云服务中。此外，我们可以启动连接到外部系统的导入器，并将事件导入到我们的代理中。这些导入器可以基于，例如，具有数百个连接器的 Apache Camel。&lt;/p>
&lt;p>一旦我们将事件发送给代理，然后用 YAML 文件声明，我们可以让容器订阅这些事件。在我们的容器中，我们不需要任何消息客户端&amp;ndash;比如 Kafka 客户端。我们的容器将使用云事件通过 HTTP POST 获取事件。这是一个完全平台管理的消息传递基础设施。作为开发人员，你必须在容器中编写业务代码，并且不处理任何消息传递逻辑。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/8image0121616431698919.jpg" alt="">&lt;/p>
&lt;p>从我们的需求的角度来看，Knative 可以满足其中的一些要求。从生命周期的角度来看，它为我们的工作负载提供了无服务器的功能，因此能够将其扩展到零，并从零开始激活。从网络的角度来看，如果服务网格之间存在某些重叠，则 Knative 也可以进行流量转移。从绑定的角度来看，它对使用 Knative 导入程序进行绑定提供了很好的支持。它可以使我们进行发布/订阅，或点对点交互，甚至可以进行一些排序。它可以满足几类需求。&lt;/p>
&lt;h2 id="什么是-dapr">什么是 Dapr？&lt;/h2>
&lt;p>另一个使用 sidecar 和 operator 的项目是 &lt;a href="https://dapr.io/">Dapr&lt;/a>，它是微软几个月前才开始并且正在迅速流行起来。此外，1.0 版本 &lt;a href="https://www.infoq.com/news/2021/02/dapr-production-ready/">被认为是生产可用的&lt;/a>。它是一个作为 sidecar 的分布式系统工具包&amp;ndash;Dapr 中的所有内容都是作为 sidecar 提供的，并且有一套他们所谓的构件或功能集的集合。&lt;/p>
&lt;p>这些功能是什么呢？第一组功能是围绕网络。Dapr 可以进行服务发现和服务之间的点对点集成。同样，它也可以进行服务网格的追踪、可靠通信、重试和恢复。第二套功能是围绕资源绑定：&lt;/p>
&lt;ul>
&lt;li>它有很多云 API、不同系统的连接器，以及&lt;/li>
&lt;li>也可以做消息发布/订阅和其他逻辑。&lt;/li>
&lt;/ul>
&lt;p>有趣的是，Dapr 还引入了状态管理的概念。除了 Knative 和服务网格提供的功能外，Dapr 在状态存储之上进行了抽象。此外，你通过存储机制支持与 Dapr 进行基于键值的交互。&lt;/p>
&lt;p>在较高的层次上，架构是你的应用程序位于顶部，可以使用任何语言。你可以使用 Dapr 提供的客户端库，但你不必这样做。你可以使用语言功能来执行称为 sidecar 的 HTTP 和 gRPC。与 服务网格的区别在于，这里的 Dapr sidecar 不是一个透明的代理。它是一个显式代理，你必须从你的应用中调用它，并通过 HTTP 或 gRPC 与之交互。根据你需要的功能，Dapr 可以与其他如云服务的系统对话。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/18image0131616431699532.jpg" alt="">&lt;/p>
&lt;p>在 Kubernetes 上，Dapr 是作为 sidecar 部署的，并且可以在 Kubernetes 之外工作（不仅仅是 Kubernetes）。此外，它还有一个 operator &amp;ndash; 而 sidecar 和 Operator 是主要的扩展机制。其他一些组件管理证书、处理基于 actor 的建模并注入 sidecar。你的工作负载与 sidecar 交互，并尽其所能与其他服务对话，让你与不同的云提供商进行互操作。它还为你提供了额外的分布式系统功能。&lt;/p>
&lt;p>综上所述，这些项目所提供的功能，我们可以说 ESB 是分布式系统的早期化身，其中我们有集中式的控制平面和数据平面&amp;ndash;但是扩展性不好。在云原生中，集中式控制平面仍然存在，但是数据平面是分散的&amp;ndash;并且具有隔音功能和高度的可扩展性。&lt;/p>
&lt;p>我们始终需要 Kubernetes 来做良好的生命周期管理，除此之外，你可能还需要一个或多个附加组件。你可能需要 Istio 来进行高级联网。你可能会使用 Knative 来进行无服务器工作负载，或者使用 Dapr 来做集成。这些框架可与 Istio 和 Envoy 很好的配合使用。从 Dapr 和 Knative 的角度来看，你可能必须选择一个。它们共同以云原生的方式提供了我们过去在 ESB 上拥有的东西。&lt;/p>
&lt;h2 id="未来云原生趋势--生命周期趋势">未来云原生趋势&amp;ndash;生命周期趋势&lt;/h2>
&lt;p>在接下来的部分，我列出了一些我认为在这些领域正在发生令人振奋的发展的项目。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/8image0141616431695762.jpg" alt="">&lt;/p>
&lt;p>我想从生命周期开始。通过 Kubernetes，我们可以为应用程序提供一个有用的生命周期，这可能不足以进行更复杂的生命周期管理。比如，如果你有一个更复杂的有状态应用，则可能会有这样的场景，其中 Kubernetes 中的部署原语不足以为应用提供支持。&lt;/p>
&lt;p>在这些场景下，你可以使用 operator 模式。你可以使用一个 operator 来进行部署和升级，还可以将 S3 作为服务备份的存储介质。此外，你可能还会发现 Kubernetes 的实际健康检查机制不够好。假设存活检查和就绪检查不够好。在这种情况下，你可以使用 operator 对你的应用进行更智能的存活和就绪检查，然后在此基础上进行恢复。&lt;/p>
&lt;p>第三个领域就是自动伸缩和调整。你可以让 operator 更好的了解你的应用，并在平台上进行自动调整。目前，编写 operator 的框架主要有两个，一个是 Kubernetes 特别兴趣小组的 Kubebuilder，另一个是红帽创建的 operator 框架的一部分&amp;ndash;operator SDK。它有以下几个方面的内容：&lt;/p>
&lt;p>Operator SDK 让你可以编写 operator &amp;ndash; operator 生命周期管理器来管理 operator 的生命周期，以及可以发布你的 operator 到 OperatorHub。如今在 OperatorHub，你会看到 100 多个 operator 用于管理数据库、消息队列和监控工具。从生命周期空间来看，operator 可能是 Kubernetes 生态系统中发展最活跃的领域。&lt;/p>
&lt;h2 id="网络趋势---envoy">网络趋势 - Envoy&lt;/h2>
&lt;p>我选的另一个项目是 &lt;a href="https://www.envoyproxy.io/">Envoy&lt;/a>。服务网格接口规范的引入将使你更轻松地切换不同的服务网格实现。在部署上 Istio 对架构进行了一些整合。你不再需要为控制平面部署 7 个 Pod；现在，你只需要部署一次就可以了。更有趣的是在 Envoy 项目的数据平面上所正在发生的：越来越多的第 7 层协议被添加到 Envoy 中。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/11image0151616431697613.jpg" alt="">&lt;/p>
&lt;p>服务网格增加了对更多协议的支持，比如 MongoDB、ZooKeeper、MySQL、Redis，而最新的协议是 Kafka。我看到 Kafka 社区现在正在进一步改进他们的协议，使其对服务网格更加友好。我们可以预料将会有更紧密的集成、更多的功能。最有可能的是，会有一些桥接的能力。你可以从服务中在你的应用本地做一个 HTTP 调用，而代理将在后台使用 Kafka。你可以在应用外部，在 sidecar 中针对 Kafka 协议进行转换和加密。&lt;/p>
&lt;p>另一个令人兴奋的发展是引入了 HTTP 缓存。现在 Envoy 可以进行 HTTP 缓存。你不必在你的应用中使用缓存客户端。所有这些都是在 sidecar 中透明地完成的。有了 tap 过滤器，你可以 tap 流量并获得流量的副本。最近，WebAssembly 的引入，意味着如果你要为 Envoy 编写一些自定义的过滤器，你不必用 C++ 编写，也不必编译整个 Envoy 运行时。你可以用 WebAssembly 写你的过滤器，然后在运行时进行部署。这些大多数还在进行中。它们不存在，说明数据平面和服务网格无意停止，仅支持 HTTP 和 gRPC。他们有兴趣支持更多的应用层协议，为你提供更多的功能，以实现更多的用例。最主要的是，随着 WebAssembly 的引入，你现在可以在 sidecar 中编写自定义逻辑。只要你没有在其中添加一些业务逻辑就可以了。&lt;/p>
&lt;h2 id="绑定趋势---apache-camel">绑定趋势 - Apache Camel&lt;/h2>
&lt;p>&lt;a href="https://camel.apache.org/">Apache Camel&lt;/a> 是一个用于集成的项目，它具有很多使用企业集成模式连接到不同系统的连接器。 比如 &lt;a href="https://camel.apache.org/releases/release-3.0.0/">Camel version 3&lt;/a> 就深度集成到了 Kubernetes 中，并且使用了我们到目前为止所讲的那些原语，比如 operator。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/7image0161616431694981.jpg" alt="">&lt;/p>
&lt;p>你可以在 Camel 中用 Java、JavaScript 或 YAML 等语言编写你的集成逻辑。最新的版本引入了一个 Camel operator，它在 Kubernetes 中运行并理解你的集成。当你写好 Camel 应用，将其部署到自定义资源中，operator 就知道如何构建容器或查找依赖项。根据平台的能力，不管是只用 Kubernetes，还是带有 Knative 的 Kubernetes，它都可以决定要使用的服务以及如何实现集成。在运行时之外有相当多的智能 &amp;ndash; 包括 operator &amp;ndash; 所有这些都非常快地发生。为什么我会说这是一个绑定的趋势？主要是因为 Apache Camel 提供的连接器的功能。这里有趣的一点是它如何与 Kubernetes 深度集成。&lt;/p>
&lt;h2 id="状态趋势---cloudstate">状态趋势 - Cloudstate&lt;/h2>
&lt;p>另一个我想讨论的项目是 &lt;a href="https://cloudstate.io/">Cloudstate&lt;/a> 和与状态相关的趋势。Cloudstate 是 Lightbend 的一个项目，主要致力于无服务器和功能驱动的开发。最新发布的版本，正在使用 sidecar 和 operator 与 Kubernetes 进行深度集成。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/8image0171616431996943.jpg" alt="">&lt;/p>
&lt;p>这个创意是，当你编写你的功能时，你在功能中要做的就是使用 gRPC 来获取状态并与之进行交互。整个状态管理在与其他 sidecar 群集的 sidear 中进行。它使你能够进行事件溯源、CQRS、键值查询、消息传递。&lt;/p>
&lt;p>从应用程序角度来看，你并不了解所有这些复杂性。你所做的只是调用一个本地的 sidecar，而 sidecar 会处理这些复杂的事情。它可以在后台使用两个不同的数据源。而且它拥有开发人员所需的所有有状态抽象。&lt;/p>
&lt;p>到目前为止，我们已经看到了云原生生态系统中的最新技术以及一些仍在进行中的开发。我们如何理解这一切？&lt;/p>
&lt;h2 id="多运行时微服务已经到来">多运行时微服务已经到来&lt;/h2>
&lt;p>如果你看微服务在 Kubernetes 上的样子，则将需要使用某些平台功能。此外，你将需要首先使用 Kubernetes 的功能进行生命周期管理。然后，很有可能透明地，你的服务会使用某些服务网格（例如 Envoy）来获得增强的网络功能，无论是流量路由、弹性、增强的安全性，甚至出于监控的目的。除此之外，根据你的场景和使用的工作负载可能需要 Dapr 或者 Knative。所有这些都代表了进程外附加的功能。剩下的就是编写业务逻辑，不是放在最上面而是作为一个单独的运行时来编写。未来的微服务很有可能将是由多个容器组成的这种多运行时。有些是透明的，有些则是非常明确的。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/6image0181616431996411.jpg" alt="">&lt;/p>
&lt;h2 id="智能的-sidecar-和愚蠢的管道">智能的 sidecar 和愚蠢的管道&lt;/h2>
&lt;p>如果更深入地看，那可能是什么样的，你可以使用一些高级语言编写业务逻辑。是什么并不重要，不必仅是 Java，因为你可以使用任何其他语言并在内部开发自定义逻辑。&lt;/p>
&lt;p>你的业务逻辑与外部世界的所有交互都是通过 sidecar 发生的，并与平台集成进行生命周期管理。它为外部系统执行网络抽象，为你提供高级的绑定功能和状态抽象。sidecar 是你不需要开发的东西。你可以从货架上拿到它。你用一点 YAML 或 JSON 配置它，然后就可以使用它。这意味着你可以轻松地更新 sidecar，因为它不再被嵌入到你的运行时。这使得打补丁、更新变得更加更容易。它为我们的业务逻辑启用了多语言运行时。&lt;/p>
&lt;h2 id="微服务之后是什么">微服务之后是什么？&lt;/h2>
&lt;p>这让我想到了最初的问题，微服务之后是什么？&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/6image0201616431995910.jpg" alt="">&lt;/p>
&lt;p>如果我们看下架构的发展历程，应用架构在很高的层面上是从单体应用开始的。然而微服务给我们提供了如何把一个单体应用拆分成独立的业务域的指导原则。之后又出现了无服务器和功能即服务（FaaS），我们说过可以按操作将其进一步拆分，从而实现极高的可扩展性-因为我们可以分别扩展每个操作。&lt;/p>
&lt;p>我想说的是 FaaS 并不是最好的模式 &amp;ndash; 因为功能并不是实现合理的复杂服务的最佳模式，在这种情况下，当多个操作必须与同一个数据集进行交互时，你希望它们驻留在一起。可能是多运行时（我把它称为 &lt;a href="https://www.infoq.com/articles/multi-runtime-microservice-architecture/">Mecha 架构&lt;/a>），在该架构中你将业务逻辑放在一个容器中，而所有与基础设施相关的关注点作为一个单独的容器存在。它们共同代表多运行时微服务。也许这是一个更合适的模型，因为它有更好的属性。&lt;/p>
&lt;p>你可以获得微服务的所有好处。仍然将所有域和所有限界上下文放在一处。你将所有的基础设施和分布式应用需求放在一个单独的容器中，并在运行时将它们组合在一起。大概，现在最接近这种模型的是 Dapr。他们正在遵循这种模型。如果你仅对网络方面感兴趣，那么可能使用 Envoy 也会接近这种模型。&lt;/p>
&lt;h2 id="关于作者">关于作者&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/03/30/21bilgin-ibryam15886810412341616480845087.jpeg" alt="">&lt;/p>
&lt;p>&lt;strong>Bilgin Ibryam&lt;/strong> 是红帽公司的产品经理和前架构师、提交人，并且是 Apache 软件基金会的成员。他是开源布道者，经常写博客、发表演讲，是 &lt;a href="https://k8spatterns.io/">Kubernetes Patterns&lt;/a> 和 Camel Design Patterns 书籍的作者。Bilgin 目前的工作主要集中在分布式系统、事件驱动架构以及可重复的云原生应用开发模式和实践上。请关注他 @bibryam 了解未来类似主题的更新。&lt;/p></description></item><item><title>【译】2021 年及未来的云原生预测</title><link>https://atbug.com/translation-cloud-native-predictions-for-2021-and-beyond/</link><pubDate>Tue, 09 Feb 2021 06:43:54 +0800</pubDate><guid>https://atbug.com/translation-cloud-native-predictions-for-2021-and-beyond/</guid><description>
&lt;p>本文译自 &lt;a href="https://www.cncf.io/blog/2021/01/29/cloud-native-predictions-for-2021-and-beyond/">Cloud Native Predictions for 2021 and Beyond&lt;/a>&lt;/p>
&lt;p>原文发布在 &lt;a href="https://www.aniszczyk.org/2021/01/19/cloud-native-predictions-for-2021-and-beyond/">Chris Aniszczyk 的个人博客&lt;/a>&lt;/p>
&lt;p>我希望每个人都有一个美好的假期，因为 2021 年 1 月的前几周一直非常疯狂，从叛乱到新的 COVID 菌株。在云原生国度，CNCF 最近发布了关于我们去年完成的所有工作的&lt;a href="https://www.cncf.io/cncf-annual-report-2020/">年度报告&lt;/a>。我建议大家找个机会去看一下这份报告，在疫情大流行的这一年，我们收获颇丰。&lt;a href="https://twitter.com/CloudNativeFdn/status/1343914259177222145">https://twitter.com/CloudNativeFdn/status/1343914259177222145&lt;/a>&lt;/p>
&lt;p>作为我工作的一部分，我对云原生趋势有一个独特的观点，送给所有与我合作的会员公司和开发人员，所以我想我会分享我对 2021 年及以后云原生发展的想法。&lt;/p>
&lt;p>&lt;strong>云原生的 IDE&lt;/strong>&lt;/p>
&lt;p>作为一个在 Eclipse 基金会内部从事开发者工具工作的人，我对最近的技术状态进展感到无比兴奋。未来，开发生命周期（代码、构建、调试）将主要发生在云端，而不是你本地的 Emacs 或 VSCode。你将每一个拉动请求最终得到一个完整的开发环境设置，预先配置并连接到他们自己的部署，以协助你的开发和调试需求。今天这种技术的一个具体例子是通过 GitHub &lt;a href="https://github.com/features/codespaces">Codespaces&lt;/a> 和 &lt;a href="https://gitpod.io/">GitPod&lt;/a> 实现的。虽然 GitHub Codespaces 还处于测试阶段，但今天你可以通过 GitPod 来体验，以 &lt;a href="https://gitpod.io/#https://github.com/prometheus/prometheus">Prometheus&lt;/a> 为例。一分钟左右，你就拥有了一个有编辑器和预览环境的完全实时的开发环境。最疯狂的是，这个开发环境（工作空间）是 &lt;a href="https://github.com/prometheus/prometheus/blob/master/.gitpod.yml">用代码描述&lt;/a>，并且可以像其他代码工件一样，与你团队的其他开发者共享。&lt;/p>
&lt;p>最后，我期望在接下来的一年里，能看到云原生 IDE 领域出现令人难以置信的创新，特别是随着 GitHub Codespaces 进入测试版之后，并得到广泛地使用，让开发者可以体验到这个新概念，并爱上它。&lt;/p>
&lt;p>&lt;strong>边缘的 Kubernetes&lt;/strong>&lt;/p>
&lt;p>Kubernetes 是通过在大规模数据中心的使用而诞生的，但 Kubernetes 会像 Linux 一样为新的环境而进化。Linux 所发生的事情是，终端用户最终对内核进行了扩展，以支持从移动、嵌入式等各种新的部署场景。我坚信 Kubernetes 也会经历类似的进化，我们已经见证了 Telcos（和其他初创公司）通过将 VNFs 转化为 &lt;a href="https://github.com/cncf/cnf-wg">云原生网络功能&lt;/a>（CNFs），以及 &lt;a href="https://k3s.io/">k3s&lt;/a>、KubeEdge、k0s、&lt;a href="https://www.lfedge.org/">LFEdge&lt;/a>、Eclipse ioFog 等开源项目，来探索 Kubernetes 作为边缘平台。推动超大规模云服务支持电信公司和边缘的能力，再加上重用云原生软件的能力，以及建立在现有庞大的生态系统基础上的能力，将巩固 Kubernetes 在未来几年内成为边缘计算的主导平台。&lt;/p>
&lt;p>&lt;strong>云原生 + Wasm&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://webassembly.org/">Web Assembly&lt;/a>(Wasm) 是一项新的技术，但我预计它将成为云原生生态系统中不断增长的实用工具和工作负载，特别是随着 &lt;a href="https://wasi.dev/">WASI&lt;/a> 的成熟，以及 Kubernetes 更多地作为边缘编排工具使用，如前所述。一个场景是增强扩展机制，就像 Envoy 对过滤器和 LuaJIT 所做的那样。你可以与一个支持各种编程语言的更小的优化运行时协同，而不是直接与 Lua 打交道。Envoy 项目目前正处于 &lt;a href="https://www.solo.io/blog/the-state-of-webassembly-in-envoy-proxy/">采用 Wasm&lt;/a> 的过程中，我预计任何使用脚本语言作为流行扩展机制的环境都会出现被 Wasm 全盘取代的情况。&lt;/p>
&lt;p>在 Kubernetes 方面，有像微软的 &lt;a href="https://deislabs.io/posts/introducing-krustlet/">Krustlet&lt;/a> 这样的项目，正在探索如何在 Kubernetes 中支持基于 WASI 的运行时。这不应该太令人惊讶，因为 Kubernetes 已经在通过 CRD 和其他机制扩展，以运行不同类型的工作负载，如 VM（&lt;a href="https://kubevirt.io/">KubeVirt&lt;/a>）等等。&lt;/p>
&lt;p>另外，如果你是 Wasm 的新手，我推荐 Linux 基金会的这本新的 &lt;a href="https://www.edx.org/course/introduction-to-webassembly-runtime">入门课程&lt;/a>，它对其进行了介绍，以及优选的文档。&lt;/p>
&lt;p>&lt;strong>FinOps 的崛起（CFM）&lt;/strong>&lt;/p>
&lt;p>新冠病毒的爆发加速了向云原生的转变。至少有一半的公司在危机中加快了他们的云计划。近 60% 的受访者表示，由于 COVID-19 大流行，云计算的使用量将超过之前的计划 (&lt;a href="https://info.flexera.com/SLO-CM-REPORT-State-of-the-Cloud-2020">2020 年云计算现状报告&lt;/a>)。除此之外，云财务管理 (或 FinOps) 对许多公司来说是一个日益严重的问题和 &lt;a href="https://www.wsj.com/articles/cloud-bills-will-get-loftier-1518363001">关注&lt;/a>，老实说，在过去 6 个月里，我与正在进行云原生之旅的公司进行的讨论中，大约有一半的讨论都会提到这个问题。你也可以说，云提供商没有动力让云财务管理变得更容易，因为这将使客户更容易减少支出，然而，在我看来，真正的痛苦是缺乏围绕云财务管理的开源创新和标准化（所有的云都以不同的方式进行成本管理）。在 CNCF 的背景下，试图让 FinOps 变得更容易的开源项目并不多，有 &lt;a href="https://github.com/kubecost/cost-model">KubeCost&lt;/a> 项目，但还相当早期。&lt;/p>
&lt;p>另外，Linux 基金会最近推出了 &lt;a href="https://www.finops.org/blog/linux-foundation">FinOps 基金会&lt;/a> 来帮助这个领域的创新，他们在这个领域有一些 &lt;a href="https://www.edx.org/course/introduction-to-finops">很棒的入门材料&lt;/a>。我期望在未来几年，在 FinOps 领域能看到更多的开源项目和规范。&lt;/p>
&lt;p>&lt;strong>云原生中更多的使用 Rust&lt;/strong>&lt;/p>
&lt;p>Rust 仍然是一门年轻而小众的编程语言，特别是如果你以 Redmonk 的 &lt;a href="https://redmonk.com/sogrady/2020/07/27/language-rankings-6-20/">编程语言排名&lt;/a> 为例。然而，我的感觉是，鉴于已经有一些 &lt;a href="https://www.cncf.io/blog/2020/06/22/rust-at-cncf/">使用 Rust 的 CNCF 项目&lt;/a>，以及它出现在像 microvm &lt;a href="https://firecracker-microvm.github.io/">Firecracker&lt;/a> 这样有趣的基础设施项目中，你将在未来一年中看到 Rust 出现在更多的云原生项目中。虽然 CNCF 目前有超多的项目是用 Golang 编写的，但我预计随着 &lt;a href="https://blog.rust-lang.org/2020/08/18/laying-the-foundation-for-rusts-future.html">Rust 社区的成熟&lt;/a>，几年后基于 Rust 的项目将与基于 Go 的项目平起平坐。&lt;/p>
&lt;p>&lt;strong>GitOps+CD/PD 增长显著&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://www.weave.works/blog/what-is-gitops-really">GitOps&lt;/a> 是云原生技术的一种操作模式，提供了一套统一部署、管理和监控应用程序的最佳实践 (最初是由 Weaveworks 名气很大的 Alexis Richardson&lt;a href="https://www.weave.works/blog/gitops-operations-by-pull-request">创造&lt;/a>)。GitOps 最重要的方面是通过声明的方式描述所需的在 Git 中版本化的系统状态，这基本上可以使一系列复杂的系统变更被正确地应用，然后进行验证（通过 Git 和其他工具启用的漂亮的审计日志）。从实用的角度来看，GitOps 改善了开发者的体验，随着 Argo、GitLab、Flux 等项目的发展，我预计今年 GitOps 工具会更多地冲击企业。如果你看过 GitLab 的 &lt;a href="https://about.gitlab.com/blog/2020/07/14/gitops-next-big-thing-automation/">数据&lt;/a>，GitOps 还是一个大部分公司还没有探索出来的新兴的实践，但随着越来越多的公司大规模采用云原生软件，我认为 GitOps 自然会随之而来。如果你有兴趣了解更多关于这个领域的信息，我推荐你去看看 CNCF 中 &lt;a href="https://codefresh.io/devops/announcing-gitops-working-group/">新&lt;/a> 成立的 &lt;a href="https://github.com/gitops-working-group/gitops-working-group">GitOps 工作组&lt;/a>。&lt;/p>
&lt;p>&lt;strong>服务目录2.0：云原生开发者仪表盘&lt;/strong>&lt;/p>
&lt;p>服务目录的概念并不是一个新事物，对于我们一些在 &lt;a href="https://en.wikipedia.org/wiki/ITIL">ITIL&lt;/a> 时代成长起来的老人们来说，你可能还记得 &lt;a href="https://en.wikipedia.org/wiki/Configuration_management_database">CMDBs&lt;/a> （恐怖）等东西。然而，随着微服务和云原生开发的兴起，对服务进行编目和索引各种实时服务元数据的能力对于推动开发者自动化是至关重要的。这可以包括使用服务目录来了解所有权来处理事件管理、管理 SLO 等。&lt;/p>
&lt;p>在未来，你将看到开发人员仪表盘的趋势，它不仅是一个服务目录，而且提供了通过各种自动化功能在扩展仪表盘的能力。这方面的典范开源例子是 Lyft 的 &lt;a href="https://engineering.atspotify.com/2020/03/17/what-the-heck-is-backstage-anyway/">Backstage&lt;/a> 和 &lt;a href="https://eng.lyft.com/announcing-clutch-the-open-source-platform-for-infrastructure-tooling-143d00de9713">Clutch&lt;/a>，然而，任何拥有相当现代的云原生部署的公司往往都有一个平台基础设施团队，他们已经尝试构建类似的东西。随着开源开发者仪表盘与 &lt;a href="https://backstage.io/plugins">大型插件生态系统&lt;/a> 的成熟，你会看到其被各地的平台工程团队加速采用。&lt;/p>
&lt;p>&lt;strong>跨云变得更真实&lt;/strong>&lt;/p>
&lt;p>Kubernetes 和云原生运动已经证明了云原生和多云方式在生产环境中是可行的，数据很清楚地表明“93% 的企业都有使用微软 Azure、亚马逊网络服务和谷歌云等多个提供商的策略” (&lt;a href="https://info.flexera.com/SLO-CM-REPORT-State-of-the-Cloud-2020">2020 年云计算现状报告&lt;/a>)。事实上，Kubernetes 这些年伴随着云市场的发展而更加成熟，将有望解锁程序化的跨云管理服务。这种方法的一个具体例子体现在 Crossplane 项目中，该项目提供了一个开源的跨云控制平面，利用 Kubernetes API 的可扩展性来实现跨云工作负载管理（参见 &lt;a href="https://thenewstack.io/gitlab-deploys-the-crossplane-control-plane-to-offer-multicloud-deployments/">&amp;ldquo;GitLab 部署 Crossplane 控制平面，提供多云部署 &amp;ldquo;&lt;/a>）。&lt;/p>
&lt;p>&lt;strong>主流 eBPF&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Berkeley_Packet_Filter">eBPF&lt;/a> 允许你在不改变内核代码或加载模块的情况下，在 Linux 内核中运行程序，你可以把它看作是一种沙箱扩展机制。eBPF 允许 &lt;a href="https://ebpf.io/projects">新一代软件&lt;/a> 从改进的网络、监控和安全等各种不同的方向扩展 Linux 内核的行为。从历史上看，eBPF 的缺点是它需要一个现代的内核版本来利用它，在很长一段时间里，这对许多公司来说都不是一个现实的选择。然而，事情正在发生变化，甚至新版本的 RHEL 终于支持 eBPF，所以你会看到更多的项目利用其 [优势]（https://sysdig.com/blog/sysdig-and-falco-now-powered-by-ebpf/）。如果你看过 Sysdig 最新的 &lt;a href="https://sysdig.com/blog/sysdig-2021-container-security-usage-report/">容器报告&lt;/a>，你会发现 Falco 的采用率最近在上升，虽然 Sysdig 的报告可能有点偏颇，但它反映在生产使用上。所以请继续关注，并期待未来更多基于 eBPF 的项目。&lt;/p>
&lt;p>&lt;strong>最后，祝大家 2021 年快乐！&lt;/strong>&lt;/p>
&lt;p>我还有一些预测和趋势要分享，尤其是围绕终端用户驱动的开源、服务网格拆解/标准化、Prometheus+OTel、保障软件供应链安全的 KYC 等等，但我会把这些留到更详细的文章中去，9 个预测足以开启新的一年！总之，感谢大家的阅读，希望在 2021 年 5 月的 &lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/">KubeCon+CloudNativeCon EU&lt;/a> 上与大家见面，报名已开始！&lt;/p></description></item><item><title>【译】应用架构：为什么要随着市场演进</title><link>https://atbug.com/translation-application-architecture-why-it-should-evolve-with-the-market/</link><pubDate>Sun, 17 Jan 2021 21:37:23 +0800</pubDate><guid>https://atbug.com/translation-application-architecture-why-it-should-evolve-with-the-market/</guid><description>
&lt;p>本文译自 &lt;a href="https://www.cncf.io/blog/2021/01/07/application-architecture-why-it-should-evolve-with-the-market/">Application architecture: why it should evolve with the market&lt;/a>
最初由Mia Platform团队发布在&lt;a href="https://blog.mia-platform.eu/en/application-architecture-why-it-should-evolve-with-the-market">Mia Platform的博客&lt;/a>上&lt;/p>
&lt;p>如今，IT 挑战在于通过有效选择应用架构来适应市场和业务需求的发展。为了满足业务和客户的需求，IT 部门应能够对技术和&lt;strong>方法&lt;/strong>采取行动以确保软件具有灵活性，并实现产品和服务的持续创新流程，从而做出更快的反应 。&lt;/p>
&lt;p>当然，过去的单体应用程序和刚性基础设施无法做到这一点。相反，它可以通过&lt;strong>为演化而设计的架构&lt;/strong>来实现，该架构在需要时易于更新和重构。容器化实践的广泛应用（根据 &lt;a href="https://www.gartner.com/en/newsroom/press-releases/2020-06-25-gartner-forecasts-strong-revenue-growth-for-global-co">Gartner&lt;/a>，到2022年，大公司的就业人数将从目前的 30％ 增长到 75％），这种情况下采用云原生方法重新设计微服务应用是成功的关键。&lt;/p>
&lt;h2 id="如何构建不断发展的应用架构">如何构建不断发展的应用架构&lt;/h2>
&lt;p>海外专家称它们为&lt;strong>可演进的架构&lt;/strong>，以将它们与当今阻碍或无助于改变的传统架构区分开。应用架构基于&lt;a href="https://blog.mia-platform.eu/it/architettura-a-microservizi-i-vantaggi-per-il-business-e-per-lit">微服务架构风格&lt;/a> ，被设计成在现代虚拟化 IT 和云环境中发挥最佳性能。&lt;/p>
&lt;p>基本思想是&lt;strong>创建可以轻松“分解”的应用程序，其组件可以在其他上下文或组合中重用&lt;/strong>，如 Lego 系列。开发一系列微服务，每个微服务都用于执行单个业务功能（根据“单一职责原则”），可以在应用本身的开发和演进中获得相当大的灵活性。实际上，可以根据支持功能的特定生命周期独立开发、更新和测试服务。&lt;/p>
&lt;p>此外，谈到部署，微服务应用的架构具有很大的优势：可以根据需要在内部或云中通过使用可用资源来扩展单个微服务。&lt;/p>
&lt;p>为此，微服务应用获得&lt;strong>基于容器的基础设施&lt;/strong>的支持，该基础设施通过业务编排系统（通常为 &lt;a href="https://blog.mia-platform.eu/en/kubernetes-why-it-is-so-popular-and-who-should-use-it">Kubernetes&lt;/a>）进行管理，该流程可以自动化并促进公司系统之间以及从这些系统到云提供商服务的软件作业的迁移。&lt;/p>
&lt;h2 id="随着业务发展的应用架构的优势">随着业务发展的应用架构的优势&lt;/h2>
&lt;p>基于微服务的应用架构在开发和部署方面具有更大的自治权。如我们所见，微服务可以在其他应用程序中单独实现、“分解”、更新和重用。因此，通过产品或客户需求的演变，它有降低&lt;strong>减少市场所需的每个新产品的设计/开发时间和成本&lt;/strong>。&lt;/p>
&lt;p>此外，通过使用容器化实践，可以简化在本地、云、多云或混合环境的任何环境中应用程序的部署，从而优化成本。&lt;/p>
&lt;p>在微服务架构风格的优点中，我们还发现有可能在各种服务之间的对话及其健康状况上获得更大的&lt;strong>透明度&lt;/strong>：更好的可观察性意味着可以轻松解决复杂应用的问题。实际上，管理员可以&lt;strong>更快地定位和解决性能和安全性问题&lt;/strong>，在运维和代码层面实施措施，从而使响应速度与变更的长期有效性保持一致。&lt;/p>
&lt;p>通过采用微服务以及新的开发和部署方法，可以创建能够随时间发展的应用架构。除了 IT 团队必须掌握的新技能外，还必须对公司的未来有一个清晰的愿景，以确保所提供的服务对业务发展有用。&lt;/p>
&lt;h2 id="创建可演进的应用架构">创建可演进的应用架构&lt;/h2>
&lt;p>我们已经看到了基于微服务的现代应用架构如何保证软件的灵活性，并允许你利用本地和按需使用的所有资源，在可以&lt;strong>方便地&lt;/strong>获得所需性能、降低成本或保护数据的&lt;strong>位置分配作业&lt;/strong>。&lt;/p>
&lt;p>为了使之成为可能，有必要在云和混合环境中创建和管理虚拟化的 IT 环境，并&lt;strong>采用最合适的方法和策略&lt;/strong>。例如，在用于将开发和运维活动链接在一起的DevOps领域中，&lt;strong>持续集成/持续交付&lt;/strong>（CI / CD）策略的方法学支持可帮助提高更新速度和应用软件的质量。&lt;/p>
&lt;p>此外，微服务可促进对&lt;a href="https://blog.mia-platform.eu/it/da-monolite-a-microservizi-come-far-evolvere-unapplicazione-legacy">遗留应用程序的集成&lt;/a>，从而使公司更加敏捷，并利用市场上最&lt;strong>先进的解决方案&lt;/strong>。除了需要新的技术和工作方法外，现在还需要可演进的应用架构来&lt;strong>支持数字化转型所决定的不断变化的需求&lt;/strong>。&lt;/p></description></item><item><title>Envoy listener filter times out 问题</title><link>https://atbug.com/envoy-listener-filter-times-out/</link><pubDate>Wed, 09 Dec 2020 20:00:00 +0800</pubDate><guid>https://atbug.com/envoy-listener-filter-times-out/</guid><description>
&lt;p>最近在看 openservicemesh 相关内容，这周更新了 main 分支的代码之后。发现原本 v0.5.0 时可以正常代理的 mysql 流量，在新的 commit 中无法代理了。&lt;/p>
&lt;p>开启 envoy 的 filter debug 日志后发现出现了超时。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">[2020-12-09 08:54:42.285][15][debug][filter] [source/extensions/filters/listener/original_dst/original_dst.cc:18] original_dst: New connection accepted
[2020-12-09 08:54:42.285][15][debug][filter] [source/extensions/filters/listener/http_inspector/http_inspector.cc:38] http inspector: new connection accepted
[2020-12-09 08:54:42.285][15][trace][filter] [source/extensions/filters/listener/http_inspector/http_inspector.cc:105] http inspector: recv: 0
[2020-12-09 08:54:57.286][15][debug][conn_handler] [source/server/connection_handler_impl.cc:273] listener filter times out after 15000 ms
&lt;/code>&lt;/pre>&lt;/div>&lt;p>贴一下 outbound listener 的配置片段:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;type.googleapis.com/envoy.admin.v3.ListenersConfigDump&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;version_info&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;dynamic_listeners&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;outbound_listener&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;active_state&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;version_info&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;listener&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;type.googleapis.com/envoy.config.listener.v3.Listener&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;outbound_listener&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;socket_address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.0.0.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;port_value&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15001&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;filter_chains&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="err">//省略其他&lt;/span> &lt;span class="err">filter&lt;/span> &lt;span class="err">chain&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;filters&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;envoy.filters.network.tcp_proxy&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;typed_config&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;stat_prefix&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;passthrough-outbound&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;cluster&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;passthrough-outbound&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}],&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;outbound-egress-filter-chain&amp;#34;&lt;/span>
&lt;span class="p">}],&lt;/span>
&lt;span class="nt">&amp;#34;listener_filters&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;envoy.filters.listener.original_dst&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;envoy.filters.listener.http_inspector&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;traffic_direction&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;OUTBOUND&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;last_updated&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2020-12-08T10:07:41.191Z&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="分析">分析&lt;/h3>
&lt;p>Envoy 那边看到了有个 &lt;a href="https://github.com/envoyproxy/envoy/issues/7195">issue&lt;/a>，为此增加了 timeout 的设置，默认 15s。&lt;/p>
&lt;ul>
&lt;li>&lt;code>listener_filters_timeout&lt;/code>：默认 15s。等待 listener filter 完成的超时时间，如果设置为 0，则不超时。如果没有设置下面的配置为&lt;code>true&lt;/code>，则会直接关闭连接。&lt;/li>
&lt;li>&lt;code>continue_on_listener_filters_timeout&lt;/code>：默认 &lt;code>false&lt;/code>。超时时是否使用默认的 filter_chain 创建连接。&lt;/li>
&lt;/ul>
&lt;p>对比之前的版本，不同之处是在 filter 中多了 &lt;code>envoy.filters.listener.http_inspector&lt;/code>。一个 http_inspector 为何 hold 住整个 follow。&lt;/p>
&lt;p>正好昨天&lt;a href="https://mp.weixin.qq.com/s/pmDw779cfj8SXjqAni3mCA">配置了 Clion 用于源码阅读&lt;/a>，看下 &lt;code>http_inspector&lt;/code> 的源码：&lt;/p>
&lt;p>在&lt;code>http_inspector.cc&lt;/code>的&lt;code>onRead&lt;/code>方法，在做&lt;code>MSG_PEEK&lt;/code>是铁定读不到数据的，见上面的日志，同时查看 stats &lt;code>http_inspector.read_error: 0&lt;/code>。可见，返回了&lt;code>ParseState::Continue&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>Api::IoError::IoErrorCode::Again&lt;/code>的意思是：&lt;code>No data available right now, try again later.&lt;/code>
对于&lt;code>ParseState::Continue&lt;/code>的解释是：&lt;code>Parser expects more data.&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/12/09/screenshot-20201209-at-165537.png" alt="screenshot 2020-12-09 at 16.55.37">&lt;/p>
&lt;p>由于&lt;code>onRead&lt;/code>返回了&lt;code>ParseState::Continue&lt;/code>，&lt;code>onAccept&lt;/code>方法会返回 &lt;code>Network::FilterStatus::StopIteration&lt;/code>。返回之前会注册个针对&lt;code>Event::FileReadyType::Read | Event::FileReadyType::Closed&lt;/code> 的 callback，用于读取到数据或者关闭文件时进行回调处理。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>Network::FilterStatus::StopIteration&lt;/code>：&lt;code>Stop executing further filters.&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/12/09/screenshot-20201209-at-165220.png" alt="screenshot 2020-12-09 at 16.52.20">&lt;/p>
&lt;p>&lt;code>source/server/connection_handler_impl.cc&lt;/code> 的 &lt;code>continueFilterChain&lt;/code>方法，看注释：&lt;code>Blocking at the filter but no error&lt;/code>。等待上面的 callback 被调用。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/12/09/screenshot-20201209-at-171328.png" alt="screenshot 2020-12-09 at 17.13.28">&lt;/p>
&lt;p>由于前面直接从&lt;code>for&lt;/code> loop 中跳出，迭代并没有执行到&lt;code>end&lt;/code>，会启动一个超时的 timer。
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/12/09/screenshot-20201209-at-172017.png" alt="screenshot 2020-12-09 at 17.20.17">&lt;/p>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/pmDw779cfj8SXjqAni3mCA">配置 Clion 阅读 envoy 源码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/envoyproxy/envoy/issues/7195">allow fallback to default filter chain when listener filters timeout&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>使用 cLion 阅读 envoy 源码</title><link>https://atbug.com/read-envoy-source-code-in-clion/</link><pubDate>Tue, 08 Dec 2020 20:53:39 +0800</pubDate><guid>https://atbug.com/read-envoy-source-code-in-clion/</guid><description>
&lt;p>虽然不写 C++，但是看点代码还是能看懂。Envoy 的功能配置复杂，有时候处理问题还是需要看下源码的。&lt;/p>
&lt;p>Vim 或者 Code 就算了，我只是阅读源码需要关联跳转就行。在 Clion 中，代码的关联跳转需要一个CMakeLists.txt 文件。&lt;/p>
&lt;p>我将生成的内容挂在了 &lt;a href="https://gist.github.com/addozhang/82b172a4276acd073329e5deab272f18">gist&lt;/a> 上了，不想花费时间生成的可以直接复制。&lt;/p>
&lt;h2 id="准备环境">准备环境&lt;/h2>
&lt;h3 id="1-安装依赖的工具">1. 安装依赖的工具&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">brew install coreutils wget cmake libtool go automake ninja clang-format
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-bazel">2. bazel&lt;/h3>
&lt;p>使用 homebrew 进行安装： &lt;code>brew install bazel&lt;/code> 即可&lt;/p>
&lt;p>安装问运行编译测试下：&lt;code>bazel build //source/exe:envoy-static&lt;/code>，提示版本太高。&lt;/p>
&lt;p>现在 homebrew 安装的版本是&lt;code>3.7.1&lt;/code>，而 envoy 需要&lt;code>3.4.1&lt;/code>。&lt;/p>
&lt;p>按照提示下载&lt;code>3.4.1&lt;/code>的版本：&lt;code>cd &amp;quot;/usr/local/Cellar/bazel/3.7.1/libexec/bin&amp;quot; &amp;amp;&amp;amp; curl -fLO https://releases.bazel.build/3.4.1/release/bazel-3.4.1-darwin-x86_64 &amp;amp;&amp;amp; chmod +x bazel-3.4.1-darwin-x86_64&lt;/code>，然后 &lt;em>进到目录里进行下替换&lt;/em> 。&lt;/p>
&lt;p>&lt;strong>注意：编译耗时很长，吃 cpu。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">INFO: Elapsed time: 1844.351s, Critical Path: 336.48s
INFO: &lt;span class="m">4918&lt;/span> processes: &lt;span class="m">4918&lt;/span> darwin-sandbox.
INFO: Build completed successfully, &lt;span class="m">6088&lt;/span> total actions
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/12/08/16074319425868.jpg" alt="">&lt;/p>
&lt;h3 id="3-生成cmakeliststxt文件">3. 生成&lt;code>CMakeLists.txt&lt;/code>文件&lt;/h3>
&lt;p>这就是为什么上面需要安装编译工具了，clone &lt;code>git@github.com:lizan/bazel-cmakelists.git&lt;/code> 这个仓库。&lt;/p>
&lt;p>只要&lt;code>bazel&lt;/code>编译能通过，就可以使用这个工具生成文件了。&lt;/p>
&lt;p>在 envoy 源码根目录执行命令：&lt;code>/path_to_bazel-cmakelists/bazel-cmakelists //source/exe:envoy-static&lt;/code>。&lt;/p>
&lt;p>执行结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">CMakeLists.txt generated in following directory:
/Users/addo/Workspaces/github_w/envoyproxy/envoy
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-clion-刷新">4. Clion 刷新&lt;/h3>
&lt;p>Clion 检测到 CMakeLists.txt 之后就会自动刷新 workspace，自此就可以在 Clion 中愉快的阅读源码了。&lt;/p></description></item><item><title>Kubernetes 源码解析 - Informer</title><link>https://atbug.com/kubernetes-source-code-how-informer-work/</link><pubDate>Sun, 16 Aug 2020 23:32:38 +0800</pubDate><guid>https://atbug.com/kubernetes-source-code-how-informer-work/</guid><description>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/wY8ZevIHIH7CD-fWGZecPQ">上篇&lt;/a>扒了 HPA 的源码，但是没深入细节，今天往细节深入。&lt;/p>
&lt;p>开局先祭出一张图：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/08/16/15975802542217.png" alt="">&lt;/p>
&lt;h2 id="为什么要有-informer">为什么要有 Informer？&lt;/h2>
&lt;p>Kubernetes 中的持久化数据保存在 etcd中，各个组件并不会直接访问 etcd，而是通过 api-server暴露的 RESTful 接口对集群进行访问和控制。&lt;/p>
&lt;p>资源的控制器（图中右侧灰色的部分）读取数据也并不会直接从 api-server 中获取资源信息（这样会增加 api-server 的压力），而是从其“本地缓存”中读取。这个“本地缓存”只是表象的存在，加上缓存的同步逻辑就是今天要是说的&lt;code>Informer&lt;/code>（灰色区域中的第一个蓝色块）所提供的功能。&lt;/p>
&lt;p>从图中可以看到 Informer 的几个组件：&lt;/p>
&lt;ul>
&lt;li>Reflector：与 &lt;code>api-server&lt;/code>交互，监听资源的变更。&lt;/li>
&lt;li>Delta FIFO Queue：增量的 FIFO 队列，保存 Reflector 监听到的资源变更（简单的封装）。&lt;/li>
&lt;li>Indexer：Informer 的本地缓存，FIFO 队列中的数据根据不同的变更类型，在该缓存中进行操作。
&lt;ul>
&lt;li>Local Store：&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/wY8ZevIHIH7CD-fWGZecPQ">上篇&lt;/a> 提到了水平自动伸缩的控制器&lt;code>HorizontalController&lt;/code>，其构造方法就需要提供 &lt;code>Informer&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//pkg/controller/podautoscaler/horizontal.go
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">HorizontalController&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">scaleNamespacer&lt;/span> &lt;span class="nx">scaleclient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ScalesGetter&lt;/span>
&lt;span class="nx">hpaNamespacer&lt;/span> &lt;span class="nx">autoscalingclient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscalersGetter&lt;/span>
&lt;span class="nx">mapper&lt;/span> &lt;span class="nx">apimeta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RESTMapper&lt;/span>
&lt;span class="nx">replicaCalc&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ReplicaCalculator&lt;/span>
&lt;span class="nx">eventRecorder&lt;/span> &lt;span class="nx">record&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EventRecorder&lt;/span>
&lt;span class="nx">downscaleStabilisationWindow&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>
&lt;span class="nx">hpaLister&lt;/span> &lt;span class="nx">autoscalinglisters&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscalerLister&lt;/span>
&lt;span class="nx">hpaListerSynced&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">InformerSynced&lt;/span>
&lt;span class="nx">podLister&lt;/span> &lt;span class="nx">corelisters&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PodLister&lt;/span>
&lt;span class="nx">podListerSynced&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">InformerSynced&lt;/span>
&lt;span class="nx">queue&lt;/span> &lt;span class="nx">workqueue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RateLimitingInterface&lt;/span>
&lt;span class="nx">recommendations&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">][]&lt;/span>&lt;span class="nx">timestampedRecommendation&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewHorizontalController&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">evtNamespacer&lt;/span> &lt;span class="nx">v1core&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EventsGetter&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">scaleNamespacer&lt;/span> &lt;span class="nx">scaleclient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ScalesGetter&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">hpaNamespacer&lt;/span> &lt;span class="nx">autoscalingclient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscalersGetter&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">mapper&lt;/span> &lt;span class="nx">apimeta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RESTMapper&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">metricsClient&lt;/span> &lt;span class="nx">metricsclient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MetricsClient&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">//从HorizontalPodAutoscalerInformer 获取hpa 实例信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">hpaInformer&lt;/span> &lt;span class="nx">autoscalinginformers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscalerInformer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">//从PodInformer 中获取 pod 信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">podInformer&lt;/span> &lt;span class="nx">coreinformers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PodInformer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">resyncPeriod&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">downscaleStabilisationWindow&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">tolerance&lt;/span> &lt;span class="kt">float64&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">cpuInitializationPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">delayOfInitialReadinessStatus&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">HorizontalController&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="nx">hpaInformer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Informer&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">AddEventHandlerWithResyncPeriod&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="c1">//添加事件处理器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResourceEventHandlerFuncs&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">AddFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">hpaController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enqueueHPA&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">UpdateFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">hpaController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">updateHPA&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">DeleteFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">hpaController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">deleteHPA&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">resyncPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerInformer&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">Informer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SharedIndexInformer&lt;/span>
&lt;span class="nf">Lister&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscalerLister&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>HorizontalPodAutoscalerInformer&lt;/code>的实例化方法中就出现了今天的正主&lt;code>cache.NewSharedIndexInformer()&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/informers/autoscaling/v1/horizontalpodautoscaler.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewFilteredHorizontalPodAutoscalerInformer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">client&lt;/span> &lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Interface&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">namespace&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resyncPeriod&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indexers&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Indexers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tweakListOptions&lt;/span> &lt;span class="nx">internalinterfaces&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TweakListOptionsFunc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SharedIndexInformer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewSharedIndexInformer&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="c1">//用于 list 和 watch api-server 中的资源。比如用来创建 Reflector
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ListWatch&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">ListFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">options&lt;/span> &lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ListOptions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">tweakListOptions&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">tweakListOptions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//使用 HPA API 获取 HPA资源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AutoscalingV1&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">HorizontalPodAutoscalers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">namespace&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">List&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">WatchFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">options&lt;/span> &lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ListOptions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">watch&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Interface&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">tweakListOptions&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">tweakListOptions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//使用 HPA API 监控 HPA资源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AutoscalingV1&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">HorizontalPodAutoscalers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">namespace&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Watch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">autoscalingv1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscaler&lt;/span>&lt;span class="p">{},&lt;/span>
&lt;span class="nx">resyncPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">indexers&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="初始化">初始化&lt;/h2>
&lt;h3 id="informer">Informer&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/index.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Indexers&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">IndexFunc&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">IndexFunc&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">([]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>实例化 Indexers &lt;code>cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/shared_informer.go
&lt;/span>&lt;span class="c1">// ListerWatcher 用于 list 和watch api-server 上的资源
&lt;/span>&lt;span class="c1">//runtime.Object要监控的资源的运行时对象
&lt;/span>&lt;span class="c1">//time.Duration同步的间隔时间
&lt;/span>&lt;span class="c1">//Indexers 提供不同资源的索引数据的信息查询方法，如 namespace =&amp;gt; MetaNamespaceIndexFunc
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewSharedIndexInformer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lw&lt;/span> &lt;span class="nx">ListerWatcher&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">objType&lt;/span> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">defaultEventHandlerResyncPeriod&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indexers&lt;/span> &lt;span class="nx">Indexers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">SharedIndexInformer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">realClock&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">clock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RealClock&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">sharedIndexInformer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">sharedIndexInformer&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">processor&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">sharedProcessor&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">clock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">realClock&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">indexer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">NewIndexer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">DeletionHandlingMetaNamespaceKeyFunc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indexers&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">//初始化 Indexer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">listerWatcher&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">lw&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">objectType&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">objType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">resyncCheckPeriod&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">defaultEventHandlerResyncPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">defaultEventHandlerResyncPeriod&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">defaultEventHandlerResyncPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">cacheMutationDetector&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">NewCacheMutationDetector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%T&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">objType&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="nx">clock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">realClock&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">sharedIndexInformer&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="indexer">Indexer&lt;/h3>
&lt;p>&lt;code>Indexer&lt;/code>提供了本地缓存的实现：计算 key 和对数据进行控制（通过调用&lt;code>ThreadSafeStore&lt;/code>的接口）&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Indexer&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Store&lt;/span>
&lt;span class="nf">Index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indexName&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">([]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">IndexKeys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indexName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indexedValue&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">([]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">ListIndexFuncValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indexName&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;span class="nf">ByIndex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indexName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indexedValue&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">([]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">GetIndexers&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">Indexers&lt;/span>
&lt;span class="nf">AddIndexers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">newIndexers&lt;/span> &lt;span class="nx">Indexers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Indexer&lt;/code> 的创建&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/store.go
&lt;/span>&lt;span class="c1">//keyFunc：key 的生成规则
&lt;/span>&lt;span class="c1">//indexers：提供了索引资源的不同信息的访问方法，如用于查询命名空间的 namespace =&amp;gt; MetaNamespaceIndexFunc
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewIndexer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">keyFunc&lt;/span> &lt;span class="nx">KeyFunc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indexers&lt;/span> &lt;span class="nx">Indexers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Indexer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">cacheStorage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">NewThreadSafeStore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indexers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Indices&lt;/span>&lt;span class="p">{}),&lt;/span>
&lt;span class="nx">keyFunc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">keyFunc&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="threadsafestore">&lt;code>ThreadSafeStore&lt;/code>&lt;/h4>
&lt;p>ThreadSafeStore提供了对存储的并发访问接口&lt;/p>
&lt;p>注意事项：不能修改Get或List返回的任何内容，因为它不仅会破坏线程安全，还会破坏索引功能。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/thread_safe_store.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewThreadSafeStore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indexers&lt;/span> &lt;span class="nx">Indexers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">indices&lt;/span> &lt;span class="nx">Indices&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">ThreadSafeStore&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">threadSafeMap&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">items&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{}{},&lt;/span>
&lt;span class="nx">indexers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">indexers&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">indices&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">indices&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">threadSafeMap&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">lock&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RWMutex&lt;/span>
&lt;span class="nx">items&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="c1">//key =&amp;gt; value
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">indexers&lt;/span> &lt;span class="nx">Indexers&lt;/span> &lt;span class="c1">//value 的信息的访问方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">indices&lt;/span> &lt;span class="nx">Indices&lt;/span> &lt;span class="c1">//索引
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="reflector">Reflector&lt;/h3>
&lt;p>&lt;code>Reflector&lt;/code>通过&lt;code> ListerWatcher&lt;/code>（API）与&lt;code>api-server&lt;/code>交互，对资源进行监控。将资源实例的创建、更新、删除等时间封装后保存在&lt;code>Informer&lt;/code>的FIFO 队列中。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/reflector.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewReflector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lw&lt;/span> &lt;span class="nx">ListerWatcher&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">expectedType&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="nx">store&lt;/span> &lt;span class="nx">Store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resyncPeriod&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Reflector&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">NewNamedReflector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">naming&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetNameFromCallsite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">internalPackages&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">lw&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">expectedType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resyncPeriod&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// NewNamedReflector same as NewReflector, but with a specified name for logging
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewNamedReflector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lw&lt;/span> &lt;span class="nx">ListerWatcher&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">expectedType&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="nx">store&lt;/span> &lt;span class="nx">Store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resyncPeriod&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Reflector&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Reflector&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">listerWatcher&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">lw&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">store&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//FIFO队列
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">period&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">resyncPeriod&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">resyncPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">clock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">clock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RealClock&lt;/span>&lt;span class="p">{},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">setExpectedType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">expectedType&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加同步事件监听器">添加同步事件监听器&lt;/h3>
&lt;p>通过&lt;code>sharedIndexInformer#AddEventHandlerWithResyncPeriod()&lt;/code>注册事件监听器。&lt;/p>
&lt;p>以前面的 HorizontalController为例，创建 informer 的时候添加了三个处理方法：&lt;code>AddFunc&lt;/code>、&lt;code>UpdateFunc&lt;/code>、&lt;code>DeleteFunc&lt;/code>。这三个方法的实现是将对应的元素的 key（固定格式 &lt;code>namespace/name&lt;/code>）从&lt;code> workequeue&lt;/code>中进行入队、出队的操作。（资源控制器监听了该 &lt;code>workqueue&lt;/code>）&lt;/p>
&lt;h2 id="运行">运行&lt;/h2>
&lt;h3 id="controller-manager">&lt;code>controller-manager&lt;/code>&lt;/h3>
&lt;p>在通过&lt;code>InformerFactory&lt;/code>创建&lt;code>Informer&lt;/code>完成后，都会将新建的&lt;code> Informer&lt;/code>加入到&lt;code>InformerFactory&lt;/code>的一个&lt;code>map&lt;/code>中。&lt;/p>
&lt;p>在&lt;code>controller-manager&lt;/code>在完成所有的控制器（各种&lt;code>Controller&lt;/code>，包括 CRD）后，会调用&lt;code>InformerFactory#Start()&lt;/code>来启动&lt;code>InformerFactory&lt;/code>的&lt;code>map&lt;/code>中的所有&lt;code> Informer&lt;/code>（调用&lt;code>Informer#Run()&lt;/code>方法）&lt;/p>
&lt;h3 id="sharedindexinformerrun">&lt;code>sharedIndexInformer#Run()&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/shared_informer.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sharedIndexInformer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stopCh&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">utilruntime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleCrash&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">//创建一个增量的 FIFO队列：DeltaFIFO
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">fifo&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewDeltaFIFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MetaNamespaceKeyFunc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">cfg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Config&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Queue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">fifo&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">ListerWatcher&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listerWatcher&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">ObjectType&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">objectType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">FullResyncPeriod&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resyncCheckPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">RetryOnError&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">ShouldResync&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">shouldResync&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Process&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HandleDeltas&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//启动前的初始化，创建 Controller
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startedLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startedLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">controller&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cfg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">clock&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clock&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">started&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="nx">processorStopCh&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{})&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">wait&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Group&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// Wait for Processor to stop
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">defer&lt;/span> &lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">processorStopCh&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Tell Processor to stop
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StartWithChannel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">processorStopCh&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cacheMutationDetector&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Run&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StartWithChannel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">processorStopCh&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">run&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//退出时的状态清理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startedLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startedLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stopped&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="c1">// Don&amp;#39;t want any new listeners
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}()&lt;/span>
&lt;span class="c1">//实行控制逻辑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stopCh&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="controllerrun">&lt;code>controller#Run()&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/controller.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stopCh&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">utilruntime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleCrash&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">stopCh&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="c1">//创建一个 Reflector，用于从 api-server list 和 watch 资源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewReflector&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ListerWatcher&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ObjectType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Queue&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FullResyncPeriod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ShouldResync&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ShouldResync&lt;/span>
&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clock&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clock&lt;/span>
&lt;span class="c1">//为 controller 指定 Reflector
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reflectorMutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reflector&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">r&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reflectorMutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">wait&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Group&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">//执行Reflector#Run()：会启动一个goroutine开始监控资源，将 watch 到的数据写入到queue（FIFO 队列）中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StartWithChannel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stopCh&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Run&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//持续从 queue（FIFO 队列） 获取数据并进行处理，处理的逻辑在sharedIndexInformer#HandleDeltas()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">wait&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Until&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processLoop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">stopCh&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sharedindexinformerhandledeltas">&lt;code>sharedIndexInformer#HandleDeltas()&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/client-go/tools/cache/shared_informer.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sharedIndexInformer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">HandleDeltas&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">blockDeltas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">blockDeltas&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">// from oldest to newest
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">d&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="nx">Deltas&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//循环处理 FIFO 队列中取出的资源实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Type&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">Sync&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Added&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Updated&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">//同步（后面详细解读）、新增、更新事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">isSync&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">Sync&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cacheMutationDetector&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AddObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">exists&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">exists&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//如果 indexer 中已经存在，更掉用 update 方法进行更新
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//更新成功后发送“更新”通知：包含了新、旧资源实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">distribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">updateNotification&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">oldObj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newObj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="nx">isSync&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//如果 indexer 中没有该资源实例，则放入 indexer 中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//添加成功后，发送“新增”通知：包含了新加的资源实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">distribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">addNotification&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">newObj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="nx">isSync&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">Deleted&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">//删除事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1">//从 indexer 中删除
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//删除成功后，发送“删除通知”：包含了删除的资源实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">distribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">deleteNotification&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">oldObj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Object&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Informer 的实现不算复杂，却在 Kubernetes 中很常见，每种资源的控制也都通过 Informer 来获取&lt;code>api-server&lt;/code>的资源实例的变更。&lt;/p></description></item><item><title>Kubernetes 源码解析 - HPA 水平自动伸缩如何工作</title><link>https://atbug.com/kubernetes-source-code-how-hpa-work/</link><pubDate>Sat, 15 Aug 2020 02:09:37 +0800</pubDate><guid>https://atbug.com/kubernetes-source-code-how-hpa-work/</guid><description>
&lt;p>HPA - Horizontal Pod Autoscaler 的缩写，Pod 水平自动伸缩。通过对 Pod 负载的监控，来自动增加或者减少 Pod 的副本数量。&lt;/p>
&lt;p>从字面意思来看，其主要包含了两部分：&lt;/p>
&lt;ul>
&lt;li>监控 Pod 的负载&lt;/li>
&lt;li>控制 Pod 的副本数量&lt;/li>
&lt;/ul>
&lt;p>那具体是如何实现的呢？以下基于1.17 源码，来分析下 HPA 如何工作。&lt;/p>
&lt;p>&lt;strong>注意：文章中的代码在源码的基础上进行了精简：删掉了注释、序列化等信息，或保留了部分核心代码，加上新的注释。&lt;/strong>&lt;/p>
&lt;h2 id="资源">资源&lt;/h2>
&lt;p>HPA 的资源是&lt;code>HorizontalPodAutoscaler&lt;/code>，在&lt;code>v1&lt;/code>版本中，只支持基于 CPU 指标的计算；在&lt;code>v2beta2&lt;/code>版本中加入了基于内存和自定义指标的计算。&lt;/p>
&lt;h3 id="v1">v1&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/api/autoscaling/v1/types.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">HorizontalPodAutoscaler&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TypeMeta&lt;/span>
&lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ObjectMeta&lt;/span>
&lt;span class="nx">Spec&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerSpec&lt;/span>
&lt;span class="nx">Status&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerStatus&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerSpec&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ScaleTargetRef&lt;/span> &lt;span class="nx">CrossVersionObjectReference&lt;/span> &lt;span class="c1">//监控的目标资源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">MinReplicas&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int32&lt;/span> &lt;span class="c1">//最小副本数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">MaxReplicas&lt;/span> &lt;span class="kt">int32&lt;/span> &lt;span class="c1">//最大副本数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">TargetCPUUtilizationPercentage&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int32&lt;/span> &lt;span class="c1">//触发调整的CPU 使用率
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="v2">v2&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//staging/src/k8s.io/api/autoscaling/v2beta2/types.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">HorizontalPodAutoscaler&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TypeMeta&lt;/span>
&lt;span class="nx">metav1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ObjectMeta&lt;/span>
&lt;span class="nx">Spec&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerSpec&lt;/span>
&lt;span class="nx">Status&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerStatus&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">HorizontalPodAutoscalerSpec&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ScaleTargetRef&lt;/span> &lt;span class="nx">CrossVersionObjectReference&lt;/span> &lt;span class="c1">//监控的目标资源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">MinReplicas&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int32&lt;/span>
&lt;span class="nx">MaxReplicas&lt;/span> &lt;span class="kt">int32&lt;/span>
&lt;span class="nx">Metrics&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">MetricSpec&lt;/span> &lt;span class="c1">//新加入的自定义指标
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">MetricSpec&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Type&lt;/span> &lt;span class="nx">MetricSourceType&lt;/span> &lt;span class="c1">//指标源的类型：Object（基于某个对象）、Pods（基于pod 数）、Resource（基于资源使用计算，比如v1 版本中cpu）、External（基于外部的指标）。对应 MetricsClient 接口的四个方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Object&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ObjectMetricSource&lt;/span> &lt;span class="c1">//对应 Object 类型的指标源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Pods&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">PodsMetricSource&lt;/span> &lt;span class="c1">//对应 Pod 类型的指标源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Resource&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ResourceMetricSource&lt;/span> &lt;span class="c1">//对应 Resource 类型的指标源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">External&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExternalMetricSource&lt;/span> &lt;span class="c1">//对应 External 类型的指标源
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">ObjectMetricSource&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">DescribedObject&lt;/span> &lt;span class="nx">CrossVersionObjectReference&lt;/span> &lt;span class="c1">//目标对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Target&lt;/span> &lt;span class="nx">MetricTarget&lt;/span> &lt;span class="c1">//指定指标的目标值、平均值或者平均使用率
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Metric&lt;/span> &lt;span class="nx">MetricIdentifier&lt;/span> &lt;span class="c1">//指标标识：名字、label选择器
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">PodsMetricSource&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Metric&lt;/span> &lt;span class="nx">MetricIdentifier&lt;/span>
&lt;span class="nx">Target&lt;/span> &lt;span class="nx">MetricTarget&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">ResourceMetricSource&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Name&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResourceName&lt;/span>
&lt;span class="nx">Target&lt;/span> &lt;span class="nx">MetricTarget&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">ExternalMetricSource&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Metric&lt;/span> &lt;span class="nx">MetricIdentifier&lt;/span>
&lt;span class="nx">Target&lt;/span> &lt;span class="nx">MetricTarget&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">MetricTarget&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Type&lt;/span> &lt;span class="nx">MetricTargetType&lt;/span> &lt;span class="c1">//类型：Utilization、Value、AverageValue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Value&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Quantity&lt;/span>
&lt;span class="nx">AverageValue&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Quantity&lt;/span>
&lt;span class="nx">AverageUtilization&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int32&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="控制器-horizontalcontroller">控制器 &lt;code>HorizontalController&lt;/code>&lt;/h2>
&lt;p>&lt;code>HorizontalController&lt;/code>被通过 key &lt;code>horizontalpodautoscaling&lt;/code> 加入到 controller manager 中。用来控制&lt;code>HorizontalPodAutoscaler&lt;/code>实例。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">///cmd/kube-controller-manager/app/controllermanager.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewControllerInitializers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">loopMode&lt;/span> &lt;span class="nx">ControllerLoopMode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">InitFunc&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="nx">controllers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;horizontalpodautoscaling&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">startHPAController&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="获取负载指标">获取负载指标&lt;/h3>
&lt;p>既然 Pod 副本数量的计算是基于 Pod 的负载情况，那边需要途径获取负载数据，这个途径就是&lt;code>MetricsClient&lt;/code>。&lt;/p>
&lt;p>&lt;code>MetricsClient&lt;/code>有两种实现：REST 方式和传统（Legacy）方式，分别是&lt;code>restMetricsClient&lt;/code>和&lt;code>HeapsterMetricsClient&lt;/code>。一个是REST 实现以支持自定义的指标；一个是传统的 Heapster 指标（heapster 已经从 1.13 版本开始被废弃了）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//cmd/kube-controller-manager/app/autoscaling.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">startHPAController&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">ControllerContext&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">AvailableResources&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">schema&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GroupVersionResource&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Group&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;autoscaling&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Version&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;v1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Resource&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;horizontalpodautoscalers&amp;#34;&lt;/span>&lt;span class="p">}]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ComponentConfig&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HPAController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscalerUseRESTClients&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// use the new-style clients if support for custom metrics is enabled
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nf">startHPAControllerWithRESTClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">startHPAControllerWithLegacyClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="控制器逻辑horizontalcontrollerrun">控制器逻辑&lt;code>HorizontalController#Run()&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//pkg/controller/podautoscaler/horizontal.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">HorizontalController&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stopCh&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">utilruntime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleCrash&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ShutDown&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">klog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Infof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Starting HPA controller&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">klog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Infof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Shutting down HPA controller&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 等待 informer 完成HorizontalPodAutoscaler相关事件的同步
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WaitForNamedCacheSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;HPA&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">stopCh&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hpaListerSynced&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">podListerSynced&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// start a single worker (we may wish to start more in the future)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//执行 worker 逻辑，直到收到退出指令
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">go&lt;/span> &lt;span class="nx">wait&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Until&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">worker&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">stopCh&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">stopCh&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>worker&lt;/code>的核心是从工作队列中获取一个 key（格式为：namespace/name），然后对 key 进行 reconcile（这个词是Kubernetes 的核心，翻译为“调和”、“和解”。个人更喜欢“调整”，即&lt;strong>将实例的状态调整为期望的状态&lt;/strong>。此处，对于 hpa 的实例的每个事件，都会按照特定的逻辑调整目标实例的 Pod 的副本数量。）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//pkg/controller/podautoscaler/horizontal.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">HorizontalController&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">worker&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">processNextWorkItem&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">klog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Infof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;horizontal pod autoscaler controller worker shutting down&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">HorizontalController&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">processNextWorkItem&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">quit&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">quit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">deleted&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">reconcileKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">utilruntime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">deleted&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AddRateLimited&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对 key 进行 reconcile 的调用栈：&lt;code>HorizontalController#reconcileKey -&amp;gt; HorizontalController#reconcileAutoscaler -&amp;gt; HorizontalController#computeReplicasForMetrics -&amp;gt; ScaleInterface#Update&lt;/code>&lt;/p>
&lt;p>简单来说就是先从&lt;code>Informer&lt;/code>中拿到 key 对应的&lt;code>HorizontalPodAutoscaler&lt;/code>资源实例；然后通过&lt;code>HorizontalPodAutoscaler&lt;/code>实例中的信息，检查目标资源的Pod 负载以及当前的副本数，得到期望的 Pod 副本数；最终通过 Scale API 来调整 Pod 的副本数。最后会将调整的原因、计算的结果等信息写入&lt;code>HorizontalPodAutoscaler&lt;/code>实例的 condition 中。&lt;/p>
&lt;h3 id="计算期望的副本数">计算期望的副本数&lt;/h3>
&lt;p>对每个指标进行计算，都会得到建议的副本数，然后最大的那个就是最终的期望副本数。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//pkg/controller/podautoscaler/horizontal.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">HorizontalController&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">computeReplicasForMetrics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hpa&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">autoscalingv2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HorizontalPodAutoscaler&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">scale&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">autoscalingv1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Scale&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">metricSpecs&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">autoscalingv2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MetricSpec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">replicas&lt;/span> &lt;span class="kt">int32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">metric&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">statuses&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">autoscalingv2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MetricStatus&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">timestamp&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Time&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">metricSpec&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">metricSpecs&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">replicaCountProposal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">metricNameProposal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">timestampProposal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">condition&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">computeReplicasForMetric&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hpa&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">metricSpec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">specReplicas&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">statusReplicas&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">selector&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">statuses&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">invalidMetricsCount&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">invalidMetricCondition&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">condition&lt;/span>
&lt;span class="nx">invalidMetricError&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">invalidMetricsCount&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">replicas&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">replicaCountProposal&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">replicas&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">timestamp&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">timestampProposal&lt;/span>
&lt;span class="nx">replicas&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">replicaCountProposal&lt;/span>
&lt;span class="nx">metric&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">metricNameProposal&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>#computeStatusForObjectMetric&lt;/code>（注意这个方法名少了个 &amp;ldquo;s&amp;rdquo;）使用&lt;code>MetricsClient&lt;/code>得到指定指标的值。&lt;/p>
&lt;p>这个流程的细节还可以继续深挖，但到此已够我们理解 HPA​ 的实现方式了。​&lt;/p></description></item><item><title>带你了解 Ribbon 负载均衡器的实现</title><link>https://atbug.com/how-loadbalancer-works-in-ribbon/</link><pubDate>Tue, 09 Jun 2020 19:35:53 +0800</pubDate><guid>https://atbug.com/how-loadbalancer-works-in-ribbon/</guid><description>
&lt;p>Spring Cloud 中 &lt;code>Ribbon&lt;/code>有在 &lt;code>Zuul&lt;/code> 和 &lt;code>Feign&lt;/code> 中使用，当然也可以通过在&lt;code>RestTemplate&lt;/code>的 bean 定义上添加&lt;code>@LoadBalanced&lt;/code>注解方式获得一个带有负载均衡更能的&lt;code>RestTemplate&lt;/code>。&lt;/p>
&lt;p>不过实现的方法都大同小异：对&lt;code>HttpClient&lt;/code>进行封装，加上实例的”选择“（这个选择的逻辑就是我们所说的负载均衡）。&lt;/p>
&lt;p>要学习某个框架的时候，最简单的方案就是：&lt;strong>Running+Debugging&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>跑就是了。&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>debug 不一定是为了 bug&lt;/p>
&lt;p>debug 出真知&lt;/p>
&lt;p>Debugging = Learning&lt;/p>
&lt;/blockquote>
&lt;p>选用 &lt;a href="https://www.alispit.tel">Ali Spittel&lt;/a> 的一条推文：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/06/09/screenshot-20200609-at-165236.png" alt="screenshot 2020-06-09 at 16.52.36">&lt;/p>
&lt;h3 id="以-zuul-路由的线程栈为例">以 Zuul 路由的线程栈为例&lt;/h3>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/06/09/screenshot-20200609-at-151421.png" alt="screenshot 2020-06-09 at 15.14.21">&lt;/p>
&lt;p>调整下顺序：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">RetryableRibbonLoadBalancingHttpClient&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RibbonApacheHttpRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IClientConfig&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">RetryableRibbonLoadBalancingHttpClient&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">executeWithRetry&lt;/span>&lt;span class="o">(...)&lt;/span>
&lt;span class="n">RetryTemplate&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetryCallback&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">RecoveryCallback&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;)&lt;/span>
&lt;span class="n">RetryTemplate&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">doExecute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetryCallback&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">RecoveryCallback&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">RetryState&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">RetryTemplate&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">canRetry&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetryPolicy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RetryContext&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">InterceptorRetryPolicy&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">canRetry&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetryContext&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">AbstractLoadBalancingClient&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">choose&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">serviceId&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">ZoneAwareLoadBalancer&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">chooseServer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">//key as serviceId
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">BaseLoadBalancer&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">chooseServer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">PredicateBasedRule&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">choose&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">AbstractServerPredicate&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">chooseRoundRobinAfterFiltering&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Server&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">servers&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">loadBalancerKey&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">AbstractServerPredicate&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">apply&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Predicate&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="分析">分析&lt;/h3>
&lt;p>Zuul 收到请求经过一系列 Filter 的处理，来到 &lt;code>RibbonRoutingFilter&lt;/code>；将请求封装成 &lt;code>RibbonCommandContext&lt;/code>，然后使用 context 构建 &lt;code>RibbonCommand&lt;/code>。最终调用&lt;code>RibbonCommand#execute()&lt;/code>方法，将请求路由到下游。&lt;/p>
&lt;p>&lt;code>RibbonCommand&lt;/code>持有&lt;code>AbstractLoadBalancerAwareClient&lt;/code>的对象，通过该 client 在处理请求和响应。&lt;/p>
&lt;p>对于 &lt;strong>retryable&lt;/strong> 的 client（比如此处的&lt;code>RetryableRibbonLoadBalancingHttpClient&lt;/code>）， &lt;em>&lt;em>每次处理请求的时候都会创建一个&lt;/em>&lt;/em> &lt;code>RetryTemplate&lt;/code>对象来处理请求；同时根据&lt;code>RetryPolicy&lt;/code>来创建&lt;code>RetryContext&lt;/code>对象，用来保存重试的上下文，并 &lt;em>检查实例是否可以进行重试&lt;/em> 。&lt;/p>
&lt;p>注意重点就在这里：检查的时候&lt;strong>如果重试次数为 0 且要检查的实例为空&lt;/strong>（说明是第一次请求），这时便会通过&lt;strong>负载均衡器客户端&lt;/strong>（基本都是&lt;code>AbstractLoadBalancingClient&lt;/code>的子类）从后端列表择出一个实例，保存在&lt;code>RetryContext&lt;/code>中。&lt;/p>
&lt;p>负载均衡器客户端使用&lt;strong>负载均衡器&lt;/strong>（&lt;code>ILoadBalancer&lt;/code>的实现）来选择实例。每个负载均衡器都有自己的规则（&lt;code>IRule&lt;/code>的实现类），通过规则来选择实例。&lt;/p>
&lt;p>&lt;code>IRule&lt;/code>的实现不是很多，&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/06/09/screenshot-20200609-at-163309.png" alt="screenshot 2020-06-09 at 16.33.09">&lt;/p>
&lt;p>其中的&lt;code>ClientConfigEnabledRoundRobinRule&lt;/code>在&lt;code>RoundRobinRule&lt;/code>的基础上，增加了配置的接口（因为其实现了&lt;code>IClientConfigAware&lt;/code>接口）可以对规则进行配置。&lt;/p>
&lt;p>某些&lt;code>ClientConfigEnabledRoundRobinRule&lt;/code>的子类了，增加了&lt;code>Predicate&lt;/code>逻辑：使用&lt;code>Predicate&lt;/code>（&lt;code>AbstractServerPredicate&lt;/code>的子类）的逻辑进行选择；而&lt;code>ClientConfigEnabledRoundRobinRule&lt;/code>只是简单的使用&lt;code>RoundRobinRule&lt;/code>进行选择。&lt;/p>
&lt;p>因此选择的逻辑都是在&lt;code>AbstractServerPredicate&lt;/code>子类中，其有个特别的子类&lt;code>CompositePredicate&lt;/code>，顾名思义就是将多个逻辑整合在一起（使用&lt;code>Predicate#and()&lt;/code>将所有逻辑串联起来，达到&lt;code>&amp;amp;&amp;amp;&lt;/code>的效果），所有的逻辑检查都通过（返回&lt;code>true&lt;/code>）时，这个实例就会被选中。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/06/09/screenshot-20200609-at-165642.png" alt="screenshot 2020-06-09 at 16.56.42">&lt;/p>
&lt;hr>
&lt;p>那么现在要你写个自己负载均衡规则，应该知道从哪里入手了吧？:D&lt;/p></description></item><item><title>Eureka 实例注册状态保持 STARTING 的问题排查</title><link>https://atbug.com/troubleshooting-on-eureka-instance-keep-starting/</link><pubDate>Thu, 28 May 2020 22:04:02 +0800</pubDate><guid>https://atbug.com/troubleshooting-on-eureka-instance-keep-starting/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/28/maninblackshirtandgraydenimpantssittingongray11342.jpg" alt="">&lt;/p>
&lt;p>这是真实发生在生产环境的 case，实例启动后正常运行，而在注册中心的状态一直保持&lt;code>STARTING&lt;/code>，而本地的状态为&lt;code>UP&lt;/code>。导致服务的消费方无法发现可用实例。&lt;/p>
&lt;p>这种情况的出现概率非常低，运行一年多未发现两个实例同时出现问题的情况，因此多实例运行可以避免。文末有问题的解决方案，不想花时间看分析过程可直接跳到最后。&lt;/p>
&lt;p>环境说明：&lt;/p>
&lt;blockquote>
&lt;p>eureka-client: 1.7.2
spring-boot: 1.5.12.RELEASE
spring-cloud: Edgware.SR3&lt;/p>
&lt;/blockquote>
&lt;h2 id="问题重现">问题重现&lt;/h2>
&lt;p>借助&lt;code>Btrace&lt;/code>重现, &lt;code>java -noverify -cp .:btrace-boot.jar -javaagent:btrace-agent.jar=script=&amp;lt;pre-compiled-btrace-script&amp;gt; &amp;lt;MainClass&amp;gt; &amp;lt;AppArguments&amp;gt;&lt;/code>&lt;/p>
&lt;h3 id="思路">思路&lt;/h3>
&lt;p>主线程更新实例本地状态(STARTING-&amp;gt;UP)前, 等待心跳线程完成第一次心跳并尝试注册实例, 获取到当前的状态&lt;code>STARTING&lt;/code>. 主线程更新状态后触发&lt;/p>
&lt;p>&lt;a href="https://gist.github.com/addozhang/9b584470558beb862abeb93e74c1a9b4">Btrace 脚本&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.sun.btrace.annotations.BTrace&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.sun.btrace.annotations.Kind&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.sun.btrace.annotations.Location&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.sun.btrace.annotations.OnMethod&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.concurrent.atomic.AtomicBoolean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">com.sun.btrace.BTraceUtils.currentThread&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">com.sun.btrace.BTraceUtils.println&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author Addo.Zhang
&lt;/span>&lt;span class="cm"> * @date 2019-07-31
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@BTrace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">unsafe&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EurekaRequest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span> &lt;span class="n">heartbeatThreadRegistrationStarted&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span> &lt;span class="n">replicatorThreadRegistrationCompleted&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span> &lt;span class="n">statusUP&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="nd">@OnMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">location&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Location&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Kind&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LINE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">45&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">waitHeartbeatExecution&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">currentThread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; is waiting heartbeatThreadRegistrationStarted thread executing first&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">heartbeatThreadRegistrationStarted&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@OnMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">location&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Location&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Kind&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LINE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">46&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">markStatusUp&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">statusUP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Heartbeat thread executed and &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">currentThread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; continues procedure to change status to [UP]&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@OnMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;com.netflix.discovery.converters.EurekaJacksonCodec$InstanceInfoSerializer&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">location&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Location&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Kind&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LINE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">369&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">continueRegistrationExecution&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">doExecution&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@OnMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;com.logancloud.forge.discovery.converters.LoganEurekaJacksonCodec$LoganInstanceInfoSerializer&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">location&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Location&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Kind&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LINE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">117&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">continueRegistrationExecution2&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">doExecution&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doExecution&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">currentThread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; started to proceed registration&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;HeartbeatExecutor&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">heartbeatThreadRegistrationStarted&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">statusUP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">replicatorThreadRegistrationCompleted&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">500&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//interval for replicator registration request completed.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">interrupt&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;InstanceInfoReplicator&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">replicatorThreadRegistrationCompleted&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">currentThread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; thread registration completed&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/28/15652581664364.jpg" alt="">&lt;/p>
&lt;ol>
&lt;li>心跳线程&lt;code>HeartbeatThread&lt;/code>发送心跳请求(&lt;code>PUT&lt;/code>), 注册中心返回404.&lt;/li>
&lt;li>实例信息同步线程&lt;code>InstanceInfoReplicator&lt;/code>发送注册请求(&lt;code>POST&lt;/code>): 状态为&lt;code>UP&lt;/code>, &lt;code>lastDirtyTimestamp&lt;/code>为&lt;code>a&lt;/code>&lt;/li>
&lt;li>心跳线程发送实例注册请求(&lt;code>POST&lt;/code>): 状态为&lt;code>STARTING&lt;/code>, &lt;code>lastDirtyTimestamp&lt;/code>为&lt;code>a&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="服务注册">服务注册&lt;/h2>
&lt;p>先分析服务实例的注册逻辑.&lt;/p>
&lt;h3 id="instanceinfo初始化">InstanceInfo初始化&lt;/h3>
&lt;p>通过&lt;code>InstanceInfoFactory#create()&lt;/code>方法来初始化&lt;code>ApplicationInfoManager.instanceInfo&lt;/code>实例时, 实例状态被设置为&lt;code>STARTING&lt;/code>&lt;/p>
&lt;h3 id="服务实例注册">服务实例注册&lt;/h3>
&lt;p>服务实例注册的真正逻辑是在&lt;code>DiscoveryClient#register()&lt;/code>中完成的. 但是这个方法的调用却有两个入口, 在整个过程中可解释为主动注册和被动注册.&lt;/p>
&lt;h4 id="一-主动注册">一. 主动注册&lt;/h4>
&lt;p>&lt;code>EurekaAutoServiceRegistration&lt;/code>实现了&lt;code>SmartLifecycle&lt;/code>接口, 在&lt;code>EurekaClientAutoConfiguration#eurekaAutoServiceRegistration()&lt;/code>被实例化.&lt;/p>
&lt;p>&lt;code>EurekaAutoServiceRegistration#start()&lt;/code>方法将&lt;code>EurekaRegistration&lt;/code>注册给&lt;code>EurekaServiceRegistry&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">start&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">running&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getNonSecurePort&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//调用EurekaServiceRegistry进行注册
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serviceRegistry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registration&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//发布实例注册的事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">publishEvent&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">InstanceRegisteredEvent&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstanceConfig&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">running&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>&lt;code>EurekaServiceRegistry#register()&lt;/code>:
先将实例状态设置为初始状态&lt;strong>UP&lt;/strong>(可通过&lt;code>eureka.instance.initial-status&lt;/code>修改, 默认为&lt;code>UP&lt;/code>). 这里会触发&lt;code>StatusChangeListener#notify()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EurekaRegistration&lt;/span> &lt;span class="n">reg&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">maybeInitializeClient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">reg&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isInfoEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Registering application &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstanceConfig&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getAppname&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; with eureka with status &amp;#34;&lt;/span>
&lt;span class="o">+&lt;/span> &lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstanceConfig&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getInitialStatus&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getApplicationInfoManager&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">setInstanceStatus&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstanceConfig&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getInitialStatus&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHealthCheckHandler&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//2
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getEurekaClient&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">registerHealthCheck&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">reg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHealthCheckHandler&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>DiscoveryClient&lt;/code>内部匿名类提供了&lt;code>StatusChangeListener&lt;/code>的实现, 调用&lt;code>InstanceInfoReplicator#onDemandUpdate()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">statusChangeListener&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ApplicationInfoManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">StatusChangeListener&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getId&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;statusChangeListener&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">notify&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StatusChangeEvent&lt;/span> &lt;span class="n">statusChangeEvent&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InstanceStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DOWN&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">statusChangeEvent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getStatus&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">InstanceStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DOWN&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">statusChangeEvent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPreviousStatus&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// log at warn level if DOWN was involved
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">warn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Saw local status change event {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">statusChangeEvent&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Saw local status change event {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">statusChangeEvent&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">instanceInfoReplicator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">onDemandUpdate&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>InstanceInfoReplicator&lt;/code>是在&lt;code>DiscoveryClient#initScheduledTasks()&lt;/code>中实例化的&lt;code>Runnable&lt;/code>的实现, 实例化之后, 使用其内部的调度线程池调度一个线程. 而&lt;code>onDemandUpdate()&lt;/code>也同样会使用调度线程池调度一个线程.&lt;/p>
&lt;p>其&lt;code>#run()&lt;/code>方法会调用&lt;code>DiscoveryClient#refreshInstanceInfo()&lt;/code>来更新状态. 状态的更新是通过&lt;code>HealthCheckHandler&lt;/code>来实现的, 具体请看&lt;a href="#%E7%8A%B6%E6%80%81%E6%A3%80%E6%9F%A5">状态检查&lt;/a>. 然后调用&lt;code>DiscoveryClient#register()&lt;/code>方法进行注册.&lt;/p>
&lt;h4 id="二-被动注册">二. 被动注册&lt;/h4>
&lt;p>上面提到了&lt;code>DiscoveryClient#initScheduledTasks()&lt;/code>, 这里的task除了&lt;code>InstanceInfoReplicator&lt;/code>之外还有其他的线程. 其中一个是线条线程&lt;code>HeartbeatThread&lt;/code>. 这个线程会每隔一段时间向注册中心发送一个&lt;code>PUT&lt;/code>类型的HTTP请求: 上报实例的状态(状态(status), 以及状态修改的时间(lastDirtyTimestamp)).&lt;/p>
&lt;p>这个请求可能会有两种结果: &lt;code>404&lt;/code>和&lt;code>200&lt;/code>. 前者说明注册中心中还没有这个实例的注册信息; 后者说明状态上报成功.&lt;/p>
&lt;p>假如是&lt;code>404&lt;/code>, 便直接发起注册的动作, 即调用&lt;code>DiscoveryClient#register()&lt;/code>方法进行注册.&lt;/p>
&lt;h4 id="状态检查">状态检查&lt;/h4>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/28/15459820056548.jpg" alt="">&lt;/p>
&lt;p>&lt;code>CloudEurekaClient&lt;/code>通过&lt;code>HealthCheckHandler&lt;/code>来检查实例的健康状态, 看下&lt;code>HealthCheckCallbackToHandlerBridge&lt;/code>实现: callback为空, 或者当前状态为&lt;code>STARTING&lt;/code>或者&lt;code>OUT_OF_SERVICE&lt;/code>时, 返回当前的状态. 我们没有设置callback, 故而总是会返回当前的状态. 比如应用启动的初始状态为&lt;code>STARTING&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">InstanceInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">InstanceStatus&lt;/span> &lt;span class="nf">getStatus&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">InstanceInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">InstanceStatus&lt;/span> &lt;span class="n">currentStatus&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">callback&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">InstanceInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">InstanceStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">STARTING&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">currentStatus&lt;/span>
&lt;span class="o">||&lt;/span> &lt;span class="n">InstanceInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">InstanceStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OUT_OF_SERVICE&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">currentStatus&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// Do not go to healthcheck handler if the status is starting or OOS.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">currentStatus&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isHealthy&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">InstanceInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">InstanceStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UP&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">InstanceInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">InstanceStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DOWN&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="问题分析">问题分析&lt;/h2>
&lt;h3 id="现象">现象&lt;/h3>
&lt;h4 id="tcp抓包">TCP抓包&lt;/h4>
&lt;p>HeartBeat请求和Fetch请求正常. &lt;code>status=UP&amp;amp;lastDirtyTimestamp=1545039481813&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/28/15459763724617.jpg" alt="">&lt;/p>
&lt;h4 id="堆信息">堆信息&lt;/h4>
&lt;p>本地状态为UP, &lt;code>lastDirtyTimestamp&lt;/code>为1545039481813, &lt;code>lastUpdatedTimestamp&lt;/code>为1545039472888&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/28/15459778021925.jpg" alt="">&lt;/p>
&lt;h4 id="注册中心里的实例信息">注册中心里的实例信息&lt;/h4>
&lt;p>状态为STARTING, &lt;code>lastDirtyTimestamp&lt;/code>为1545039481813, &lt;code>registrationTimestamp&lt;/code>为1545039481898, &lt;code>lastUpdatedTimestamp&lt;/code>为1545039481899&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;instance&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;instanceId&amp;gt;&lt;/span>xp-xtower-webapp-boot-6-txcxb:xp-xtower-webapp-boot:10100&lt;span class="nt">&amp;lt;/instanceId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;hostName&amp;gt;&lt;/span>10.128.41.74&lt;span class="nt">&amp;lt;/hostName&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;app&amp;gt;&lt;/span>XP-XTOWER-WEBAPP-BOOT&lt;span class="nt">&amp;lt;/app&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;ipAddr&amp;gt;&lt;/span>10.128.41.74&lt;span class="nt">&amp;lt;/ipAddr&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;status&amp;gt;&lt;/span>STARTING&lt;span class="nt">&amp;lt;/status&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;overriddenstatus&amp;gt;&lt;/span>UNKNOWN&lt;span class="nt">&amp;lt;/overriddenstatus&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;port&lt;/span> &lt;span class="na">enabled=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>10100&lt;span class="nt">&amp;lt;/port&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;securePort&lt;/span> &lt;span class="na">enabled=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>443&lt;span class="nt">&amp;lt;/securePort&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;countryId&amp;gt;&lt;/span>1&lt;span class="nt">&amp;lt;/countryId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dataCenterInfo&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>MyOwn&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dataCenterInfo&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;leaseInfo&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;renewalIntervalInSecs&amp;gt;&lt;/span>5&lt;span class="nt">&amp;lt;/renewalIntervalInSecs&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;durationInSecs&amp;gt;&lt;/span>20&lt;span class="nt">&amp;lt;/durationInSecs&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;registrationTimestamp&amp;gt;&lt;/span>1545039481898&lt;span class="nt">&amp;lt;/registrationTimestamp&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;lastRenewalTimestamp&amp;gt;&lt;/span>1545950719063&lt;span class="nt">&amp;lt;/lastRenewalTimestamp&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;evictionTimestamp&amp;gt;&lt;/span>0&lt;span class="nt">&amp;lt;/evictionTimestamp&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;serviceUpTimestamp&amp;gt;&lt;/span>0&lt;span class="nt">&amp;lt;/serviceUpTimestamp&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/leaseInfo&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;metadata&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;forge&amp;gt;&lt;/span>1.0.0&lt;span class="nt">&amp;lt;/forge&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;management.port&amp;gt;&lt;/span>10100&lt;span class="nt">&amp;lt;/management.port&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jmx.port&amp;gt;&lt;/span>1099&lt;span class="nt">&amp;lt;/jmx.port&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;group&amp;gt;&lt;/span>innovation&lt;span class="nt">&amp;lt;/group&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/metadata&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;homePageUrl&amp;gt;&lt;/span>http://10.128.41.74:10100/&lt;span class="nt">&amp;lt;/homePageUrl&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;statusPageUrl&amp;gt;&amp;lt;/statusPageUrl&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;healthCheckUrl&amp;gt;&lt;/span>http://10.128.41.74:10100/health&lt;span class="nt">&amp;lt;/healthCheckUrl&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;vipAddress&amp;gt;&lt;/span>xp-xtower-webapp-boot&lt;span class="nt">&amp;lt;/vipAddress&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;secureVipAddress&amp;gt;&lt;/span>xp-xtower-webapp-boot&lt;span class="nt">&amp;lt;/secureVipAddress&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;isCoordinatingDiscoveryServer&amp;gt;&lt;/span>false&lt;span class="nt">&amp;lt;/isCoordinatingDiscoveryServer&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;lastUpdatedTimestamp&amp;gt;&lt;/span>1545039481899&lt;span class="nt">&amp;lt;/lastUpdatedTimestamp&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;lastDirtyTimestamp&amp;gt;&lt;/span>1545039481813&lt;span class="nt">&amp;lt;/lastDirtyTimestamp&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;actionType&amp;gt;&lt;/span>ADDED&lt;span class="nt">&amp;lt;/actionType&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/instance&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Scope&lt;/th>
&lt;th>Status&lt;/th>
&lt;th>lastDirtyTimestamp&lt;/th>
&lt;th>lastUpdatedTimestamp&lt;/th>
&lt;th>registrationTimestamp&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Request&lt;/td>
&lt;td>UP&lt;/td>
&lt;td>1545039481813&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Local&lt;/td>
&lt;td>UP&lt;/td>
&lt;td>1545039481813&lt;/td>
&lt;td>1545039472888&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Remote&lt;/td>
&lt;td>STARTING&lt;/td>
&lt;td>1545039481813&lt;/td>
&lt;td>1545039481899&lt;/td>
&lt;td>1545039481898&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>结合起来看, 问题出在&lt;code>lastDirtyTimestamp&lt;/code>未更新, 导致注册中心的状态未更新. 而&lt;code>lastUpdatedTimestamp&lt;/code>的时间为1545039481899, 与&lt;code>lastDirtyTimestamp&lt;/code>相差&lt;code>86毫秒&lt;/code>.&lt;/p>
&lt;p>服务端&lt;code>InstanceResource#validateDirtyTimestamp()&lt;/code>根据本地保存的实例的信息, 和心跳请求发送过来的请求做比较, 决定响应的状态码&lt;code>200&lt;/code>, &lt;code>404&lt;/code>或者&lt;code>409&lt;/code>&lt;/p>
&lt;h3 id="推理">推理&lt;/h3>
&lt;p>注册中心里实例的状态为&lt;code>STARTING&lt;/code>, 可以确定实例是[被动注册](#二. 被动注册)的.&lt;/p>
&lt;p>这里有几个时间点:&lt;/p>
&lt;ul>
&lt;li>&lt;code>1545039472888&lt;/code>: &lt;code>InstanceInfo&lt;/code>对象实例化的时间, 因为本地对象的&lt;code>#lastUpdatedTimestamp&lt;/code>字段只有在实例化才会赋值, 此后不会被修改. 见&lt;a href="#%E5%A0%86%E4%BF%A1%E6%81%AF">堆信息&lt;/a>&lt;/li>
&lt;li>&lt;code>1545039481813&lt;/code>: 状态从&lt;code>STARTING&lt;/code>变为&lt;code>UP&lt;/code>的时间, 也是实例状态的最后一次更新时间. 此后的心跳请求都会带上实例的最新状态(&lt;code>UP&lt;/code>)和状态的最后一次更新时间(&lt;code>1545039481813&lt;/code>), 见&lt;a href="#TCP%E6%8A%93%E5%8C%85">TCP抓包&lt;/a>.&lt;/li>
&lt;li>&lt;code>1545039481898&lt;/code>: 注册中心收到实例的注册请求的时间. 见&lt;a href="#%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E9%87%8C%E7%9A%84%E5%AE%9E%E4%BE%8B%E4%BF%A1%E6%81%AF">注册中心里的实例信息&lt;/a>&lt;/li>
&lt;li>&lt;code>1545039481899&lt;/code>: 注册中心中的实例信息被更新的时间. 这个时间只比注册的时间晚了&lt;em>1毫秒&lt;/em>. 见&lt;a href="#%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E9%87%8C%E7%9A%84%E5%AE%9E%E4%BE%8B%E4%BF%A1%E6%81%AF">注册中心里的实例信息&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>综上可见, 被动注册时发送请求, 拿到的实例的旧的状态&lt;code>STARTING&lt;/code>, 修改时间确实最新的&lt;code>1545039481813&lt;/code>. 后续的心跳上报实例状态为最新的&lt;code>UP&lt;/code>, 修改时间也是最新的&lt;code>1545039481813&lt;/code>. 但是由于最后修改时间与注册时的最后修改时间相同, 即使状态已经变为&lt;code>UP&lt;/code>, 注册中心在收到心跳请求之后也不会将状态更新为&lt;code>UP&lt;/code>.&lt;/p>
&lt;p>服务端&lt;code>InstanceResource#renewLease()&lt;/code> -&amp;gt; &lt;code>InstanceResource#validateDirtyTimestamp()&lt;/code>: 如果请求中的&lt;code>lastDirtyTimestamp&lt;/code>与当前保存的实例的相同, 则直接返回OK, 不会更新注册中心中保存的实例的状态.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="n">Response&lt;/span> &lt;span class="nf">validateDirtyTimestamp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">lastDirtyTimestamp&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">isReplication&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">InstanceInfo&lt;/span> &lt;span class="n">appInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstanceByAppAndId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">appInfo&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">lastDirtyTimestamp&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">lastDirtyTimestamp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">appInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastDirtyTimestamp&lt;/span>&lt;span class="o">())))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">appInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastDirtyTimestamp&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">lastDirtyTimestamp&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">isReplication&lt;/span>&lt;span class="o">};&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">lastDirtyTimestamp&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">appInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastDirtyTimestamp&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="s">&amp;#34;Time to sync, since the last dirty timestamp differs -&amp;#34;&lt;/span>
&lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; ReplicationInstance id : {},Registry : {} Incoming: {} Replication: {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">status&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Status&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NOT_FOUND&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">appInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastDirtyTimestamp&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lastDirtyTimestamp&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// In the case of replication, send the current instance info in the registry for the
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// replicating node to sync itself with this one.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isReplication&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="s">&amp;#34;Time to sync, since the last dirty timestamp differs -&amp;#34;&lt;/span>
&lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; ReplicationInstance id : {},Registry : {} Incoming: {} Replication: {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">status&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Status&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CONFLICT&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">entity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">appInfo&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ok&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ok&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="为什么会出现这种情况">为什么会出现这种情况?&lt;/h4>
&lt;p>应用启动过程中会有两个线程会触发&lt;strong>注册&lt;/strong>的动作&lt;/p>
&lt;ol>
&lt;li>&lt;code>InstanceInfoReplicator&lt;/code>线程: &lt;code>DiscoveryClient&lt;/code>中的&lt;code>ApplicationInfoManager.StatusChangeListener&lt;/code>监听到实例状态发生变化, 会新建一个线程将实例注册到注册中心&lt;/li>
&lt;li>&lt;code>DiscoveryClient$HeartbeatThread&lt;/code>线程: 这个线程在&lt;code>DiscoveryClient&lt;/code>实例初始化后延迟(与心跳间隔时间相同, 默认是&lt;code>30s&lt;/code>, 中台为提高实例发现效率将其改为了&lt;code>5s&lt;/code>)启动运行. 第一次发送心跳请求是如果注册中心返回&lt;strong>404&lt;/strong>(说明心跳线程提实例状态更新线程先启动), 则会先将实例注册到注册中心.&lt;/li>
&lt;/ol>
&lt;p>上面两个线程都通过调用&lt;code>AbstractJerseyEurekaHttpClient$register()&lt;/code>方法并使用&lt;code>EurekaJacksonCodec$InstanceInfoSerializer&lt;/code>将实例信息序列化. 序列化的过程中&lt;strong>先记录实例的状态后记录实例状态的最后修改时间(lastDirtyTimestamp)&lt;/strong>, 这两个操作不是一个原子操作.&lt;/p>
&lt;p>非常极端的情况下(&lt;strong>缩小心跳间隔增加了出现的概率, 但依然极地&lt;/strong>), 两个操作之间(心跳线程先拿到实例状态&lt;code>STARTING&lt;/code>)主线程修改了实例状态为&lt;code>UP&lt;/code>, 同时修改了&lt;code>lastDirtyTimestamp&lt;/code>, 并触发了&lt;code>InstanceInfoReplicator&lt;/code>线程的注册操作, 此时心跳线程获取到的实例的最后修改时间与&lt;code>STARTING&lt;/code>状态并不一致. 之后同样注册动作覆盖了实例在注册中心的状态: &lt;code>UP -&amp;gt; STARTING&lt;/code>.&lt;/p>
&lt;p>后续的心跳请求带去的最新状态&lt;code>UP&lt;/code>和&lt;code>lastDirtyTimestamp&lt;/code>, 并不会更新在注册中心的状态.&lt;/p>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;p>在&lt;code>EurekaJacksonCodec$InstanceInfoSerializer#serialize()&lt;/code>方法中, 将&lt;code>#autoMarshalEligible()&lt;/code> 的调用移到&lt;code>jgen.writeStartObject()&lt;/code>后面. 这样就使得&lt;code>lastDirtyTimestamp&lt;/code>的获取比&lt;code>status&lt;/code>早, 就能保证即使注册时的&lt;code>lastDirtyTimestamp&lt;/code>小于真正的, 但是状态是与实际相符. &lt;code>lastDirtyTimestamp&lt;/code>会在后续的心跳请求中更新.
&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/28/15476421041186.jpg" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">addInstance-info.getStatus(): UP
addInstance-info.getLastDirtyTimestamp(): 1565164484429
addInstance-info.getStatus(): STARTING
addInstance-info.getLastDirtyTimestamp(): 1565164484415
renew-status-in-registry: UP
renew-lastDirtyTimestamp: 1565164484429
renew-appInfo.getLastDirtyTimestamp(): 1565164484429
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/Netflix/eureka/pull/1229">PR&lt;/a> 已经提交并合并完成，然而 1.7.x 的版本不知何时会发布修复版本&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/Netflix/eureka/issues/1174">GitHub issue&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Netflix/eureka/pull/1229">PR&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Tekton 的工作原理</title><link>https://atbug.com/how-tekton-works/</link><pubDate>Sat, 23 May 2020 22:47:14 +0800</pubDate><guid>https://atbug.com/how-tekton-works/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/24/tekton.jpeg" alt="tekton">&lt;/p>
&lt;p>&lt;em>这篇文章是基于 Tekton Pipeline 的最新版本&lt;code>v0.12.1&lt;/code>版本。&lt;/em>&lt;/p>
&lt;p>快速入门请参考：&lt;a href="https://atbug.com/tekton-trigger-practice/">云原生 CICD: Tekton Pipeline 实战&lt;/a> ，&lt;em>实战是基于版本 v0.10.x&lt;/em>。&lt;/p>
&lt;h2 id="pipeline-crd-与核心资源的关系">Pipeline CRD 与核心资源的关系&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ k api-resources --api-group&lt;span class="o">=&lt;/span>tekton.dev
NAME SHORTNAMES APIGROUP NAMESPACED KIND
clustertasks tekton.dev &lt;span class="nb">false&lt;/span> ClusterTask
conditions tekton.dev &lt;span class="nb">true&lt;/span> Condition
pipelineresources tekton.dev &lt;span class="nb">true&lt;/span> PipelineResource
pipelineruns pr,prs tekton.dev &lt;span class="nb">true&lt;/span> PipelineRun
pipelines tekton.dev &lt;span class="nb">true&lt;/span> Pipeline
taskruns tr,trs tekton.dev &lt;span class="nb">true&lt;/span> TaskRun
tasks tekton.dev &lt;span class="nb">true&lt;/span> Task
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Tekton Pipelines提供了上面的CRD，其中部分CRD与k8s core中资源相对应&lt;/p>
&lt;ul>
&lt;li>Task =&amp;gt; Pod&lt;/li>
&lt;li>Task.Step =&amp;gt; Container&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/23/15902164552270.jpg" alt="">&lt;/p>
&lt;h2 id="工作原理">工作原理&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/23/15902280074872.jpg" alt="">
(图片来自)&lt;/p>
&lt;p>Tekton Pipeline 是基于 Knative 的实现，pod &lt;code>tekton-pipelines-controller&lt;/code> 中有两个 &lt;a href="https://knative.dev/docs/eventing/samples/writing-receive-adapter-source/03-controller/">Knative Controller&lt;/a>的实现：PipelineRun 和 TaskRun。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/23/15902270934199.jpg" alt="">&lt;/p>
&lt;h3 id="task的执行顺序">Task的执行顺序&lt;/h3>
&lt;p>PipelineRun Controller 的 &lt;code>#reconcile()&lt;/code>方法，监控到有&lt;code>PipelineRun&lt;/code>被创建。然后从&lt;code>PipelineSpec&lt;/code>的 tasks 列表，构建出一个图（&lt;code>graph&lt;/code>），用于描述&lt;code>Pipeline&lt;/code>中 Task 间的依赖关系。依赖关系是通过&lt;code>runAfter&lt;/code>和&lt;code>from&lt;/code>，进而控制&lt;a href="#Task%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F">Task的执行顺序&lt;/a>。与此同时，准备&lt;code>PipelineRun&lt;/code>中定义的&lt;code>PipelineResources&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// Node represents a Task in a pipeline.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Node&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Task represent the PipelineTask in Pipeline
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Task&lt;/span> &lt;span class="nx">Task&lt;/span>
&lt;span class="c1">// Prev represent all the Previous task Nodes for the current Task
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Prev&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Node&lt;/span>
&lt;span class="c1">// Next represent all the Next task Nodes for the current Task
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Next&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Node&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Graph represents the Pipeline Graph
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Graph&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//Nodes represent map of PipelineTask name to Node in Pipeline Graph
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Nodes&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Node&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">Build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tasks&lt;/span> &lt;span class="nx">Tasks&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Graph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>PipelineRun&lt;/code>中定义的参数（parameters）也会注入到&lt;code>PipelineSpec&lt;/code>中：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">pipelineSpec&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">resources&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ApplyParameters&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pipelineSpec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来就是调用&lt;code>dag#GetSchedulable()&lt;/code>方法，获取未完成（通过Task状态判断）的 Task 列表；&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">GetSchedulable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">g&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Graph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">doneTasks&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">struct&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为 Task A 创建&lt;code>TaskRun&lt;/code>，假如&lt;code>Task&lt;/code>配置了&lt;code>Condition&lt;/code>。会先为 condition创建一个&lt;code>TaskRun&lt;/code>，只有在 condition 的&lt;code>TaskRun&lt;/code>运行成功，才会运行 A 的&lt;code>TaskRun&lt;/code>；否则就跳过。&lt;/p>
&lt;h3 id="step的执行顺序">Step的执行顺序&lt;/h3>
&lt;p>这一部分篇幅较长，之前的文章 &lt;a href="https://atbug.com/control-process-order-of-pod-containers/">控制 Pod 内容器的启动顺序&lt;/a> 中提到过。&lt;/p>
&lt;p>这里补充一下&lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/#the-downward-api">Kubernetes Downward API&lt;/a>的使用，Kubernetes Downward API的引入，控制着 &lt;code>Task&lt;/code> 的第一个 &lt;code>Step&lt;/code> 在何时执行。&lt;/p>
&lt;p>&lt;code>TaskRun&lt;/code> Controller 在 reconciling 的过程中，在相应的 &lt;code>Pod&lt;/code> 状态变为&lt;code>Running&lt;/code>时，会将&lt;code>tekton.dev/ready=READY&lt;/code>写入到 Pod 的 annotation 中，来通知第一个&lt;code>Step&lt;/code>的执行。&lt;/p>
&lt;p>Pod的部分内容：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">wait_file&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/downward/ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">wait_file_content&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">post_file&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/tools/0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">termination_path&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/termination&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/ko-app/git-init&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ssh://git@gitlab.nip.io:8022/addozhang/logan-pulse.git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">develop&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">path&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/workspace/git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/tools/entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tekton/downward&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-internal-downward&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">downwardAPI&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">defaultMode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">420&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">items&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">fieldRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">metadata.annotations[&amp;#39;tekton.dev/ready&amp;#39;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-internal-downward&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对原生的排序step container进一步处理：启动命令使用&lt;code>entrypoint&lt;/code>提供，并设置执行参数：&lt;/p>
&lt;p>&lt;code>entrypoint.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">orderContainers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">entrypointImage&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">steps&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">results&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">v1alpha1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TaskResult&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">initContainer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;place-tools&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Image&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">entrypointImage&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Command&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;cp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;/ko-app/entrypoint&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">entrypointBinary&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">VolumeMounts&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">VolumeMount&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">toolsMount&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">steps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">corev1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Container&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;No steps specified&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">steps&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">argsForEntrypoint&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">argsForEntrypoint&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="c1">// First step waits for the Downward volume file.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s">&amp;#34;-wait_file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">downwardMountPoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">downwardMountReadyFile&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="s">&amp;#34;-wait_file_content&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Wait for file contents, not just an empty file.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Start next step.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s">&amp;#34;-post_file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mountPoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s">&amp;#34;-termination_path&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">terminationPath&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1">// All other steps wait for previous file, write next file.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">argsForEntrypoint&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="s">&amp;#34;-wait_file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mountPoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s">&amp;#34;-post_file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mountPoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="s">&amp;#34;-termination_path&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">terminationPath&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="自动运行的容器">自动运行的容器&lt;/h3>
&lt;p>这些自动运行的容器作为 pod 的&lt;code>initContainer&lt;/code>会在 step 容器运行之前运行&lt;/p>
&lt;h4 id="credential-initializer">&lt;code>credential-initializer&lt;/code>&lt;/h4>
&lt;p>用于将 &lt;code>ServiceAccount&lt;/code> 的相关secrets持久化到容器的文件系统中。比如 ssh 相关秘钥、config文件以及know_hosts文件；docker registry 相关的凭证则会被写入到 docker 的配置文件中。&lt;/p>
&lt;h4 id="working-dir-initializer">&lt;code>working-dir-initializer&lt;/code>&lt;/h4>
&lt;p>收集&lt;code>Task&lt;/code>内的各个&lt;code>Step&lt;/code>的&lt;code>workingDir&lt;/code>配置，初始化目录结构&lt;/p>
&lt;h4 id="place-scripts">&lt;code>place-scripts&lt;/code>&lt;/h4>
&lt;p>假如&lt;code>Step&lt;/code>使用的是&lt;code>script&lt;/code>配置（与command+args相对），这个容器会将脚本代码（&lt;code>script&lt;/code>字段的内容）持久化到&lt;code>/tekton/scripts&lt;/code>目录中。&lt;/p>
&lt;p>注：所有的脚本会自动加上&lt;code>#!/bin/sh\nset -xe\n&lt;/code>，所以&lt;code>script&lt;/code>字段里就不必写了。&lt;/p>
&lt;h4 id="place-tools">&lt;code>place-tools&lt;/code>&lt;/h4>
&lt;p>将&lt;code>entrypoint&lt;/code>的二进制文件，复制到&lt;code>/tekton/tools/entrypoint&lt;/code>.&lt;/p>
&lt;h3 id="taskstep间的数据传递">Task/Step间的数据传递&lt;/h3>
&lt;p>针对不同的数据，有多种不同的选择。比如&lt;code>Workspace&lt;/code>、&lt;code>Result&lt;/code>、&lt;code>PipelineResource&lt;/code>。对于由于&lt;code>Task&lt;/code>的执行是通过&lt;code>Pod&lt;/code>来完成的，而&lt;code>Pod&lt;/code>会调度到不同的节点上。因此&lt;code>Task&lt;/code>间的数据传递，需要用到持久化的卷。&lt;/p>
&lt;p>而&lt;code>Step&lt;/code>作为&lt;code>Pod&lt;/code>中的容器来运行，&lt;/p>
&lt;h4 id="workspace">Workspace&lt;/h4>
&lt;p>工作区，可以理解为一个挂在到容器上的卷，用于文件的传递。&lt;/p>
&lt;h5 id="persistentvolumeclaim">&lt;code>persistentVolumeClaim&lt;/code>&lt;/h5>
&lt;p>引用已存在&lt;code>persistentVolumeClaim&lt;/code>卷（volume）。这种工作空间，可多次使用，需要先进行创建。比如 Java 项目的 &lt;code>maven&lt;/code>，编译需要本地依赖库，这样可以节省每次编译都要下载依赖包的成本。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2-pv-claim&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolume&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2-pv&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">local&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storageClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">capacity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">10Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteMany&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/data/.m2&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolumeClaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">m2-pv-claim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storageClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">manual&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># volumeName: m2-pv&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteMany&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">10Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="volumeclaimtemplate">&lt;code>volumeClaimTemplate&lt;/code>&lt;/h5>
&lt;p>为每个&lt;code>PipelineRun&lt;/code>或者&lt;code>TaskRun&lt;/code>创建&lt;code>PersistentVolumeClaim&lt;/code>卷（volume）的模板。比如一次构建需要从 git 仓库克隆代码，而针对不同的流水线代码仓库是不同的。这里就会用到&lt;code>volumeClaimTemplate&lt;/code>，为每次构建创建一个&lt;code>PersistentVolumeClaim&lt;/code>卷。（从0.12.0开始）&lt;/p>
&lt;p>生命周期同&lt;code>PipelineRun&lt;/code>或者&lt;code>TaskRun&lt;/code>，运行之后释放。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeClaimTemplate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteMany&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>相较于&lt;code>persistantVolumeClain&lt;/code>类型的workspace，&lt;code>volumeClaimTemplate&lt;/code>不需要在每次在&lt;code>PipelineRun&lt;/code>完成后清理工作区；并发情况下可能会出现问题。&lt;/p>
&lt;h5 id="emptydir">&lt;code>emptyDir&lt;/code>&lt;/h5>
&lt;p>引用&lt;code>emptyDir&lt;/code>卷，跟随&lt;code>Task&lt;/code>生命周期的临时目录。适合在&lt;code>Task&lt;/code>的&lt;code>Step&lt;/code>间共享数据，无法在多个&lt;code>Task&lt;/code>间共享。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">temp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">emptyDir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="configmap">&lt;code>configMap&lt;/code>&lt;/h5>
&lt;p>引用一个&lt;code>configMap&lt;/code>卷，将&lt;code>configMap&lt;/code>卷作为工作区，有如下限制：&lt;/p>
&lt;ul>
&lt;li>挂载的卷是&lt;code>只读&lt;/code>的&lt;/li>
&lt;li>需要提前创建&lt;code>configMap&lt;/code>&lt;/li>
&lt;li>&lt;code>configMap&lt;/code>的&lt;a href="https://github.com/kubernetes/kubernetes/blob/f16bfb069a22241a5501f6fe530f5d4e2a82cf0e/pkg/apis/core/validation/validation.go#L5042">大小限制为1MB（K8s的限制）&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>使用场景，比如使用&lt;code>maven&lt;/code>编译Java项目，配置文件&lt;code>settings.xml&lt;/code>可以使用&lt;code>configMap&lt;/code>作为工作区&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven-settings&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">configmap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven-settings&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="secret">&lt;code>secret&lt;/code>&lt;/h5>
&lt;p>用于引用&lt;code>secret&lt;/code>卷，同&lt;code>configMap&lt;/code>工作区一样，也有限制：&lt;/p>
&lt;ul>
&lt;li>挂载的卷是&lt;code>只读&lt;/code>的&lt;/li>
&lt;li>需要提前创建&lt;code>secret&lt;/code>&lt;/li>
&lt;li>&lt;code>secret&lt;/code>的&lt;a href="https://github.com/kubernetes/kubernetes/blob/f16bfb069a22241a5501f6fe530f5d4e2a82cf0e/pkg/apis/core/validation/validation.go#L5042">大小限制为1MB（K8s的限制）&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="result">Result&lt;/h4>
&lt;p>&lt;code>results&lt;/code>字段可以用来配置多个文件用来存储&lt;code>Tasks&lt;/code>的执行结果，这些文件保存在&lt;code>/tekton/results&lt;/code>目录中。&lt;/p>
&lt;p>在&lt;code>Pipeline&lt;/code>中，可以通过&lt;code>tasks.[task-nanme].results.[result-name]&lt;/code>注入到其他&lt;code>Task&lt;/code>的参数中。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">A simple task that prints the date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">results&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-unix-timestamp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The current date in unix timestamp format&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-human-readable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The current date in human readable format&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date-unix-timestamp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bash:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> #!/usr/bin/env bash
&lt;/span>&lt;span class="sd"> date +%s | tee $(results.current-date-unix-timestamp.path)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date-humman-readable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bash:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> #!/usr/bin/env bash
&lt;/span>&lt;span class="sd"> date | tee $(results.current-date-human-readable.path)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PipelineRun&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pass-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pipelineSpec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tasks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">print-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">read-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runAfter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#配置执行顺序&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">print-date&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskSpec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-unix-timestamp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">string&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-human-readable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">string&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">read&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> echo $(params.current-date-unix-timestamp)
&lt;/span>&lt;span class="sd"> echo $(params.current-date-human-readable)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-unix-timestamp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(tasks.print-date.results.current-date-unix-timestamp)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 注入参数&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">current-date-human-readable&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(tasks.print-date.results.current-date-human-readable)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 注入参数 &lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">┌──────Logs(tekton-pipelines/pass-date-read-date-rhlf2-pod-9b2sk)[all] ────────── │
│ place-scripts stream closed ││ step-read 1590242170 │
│ step-read Sat May 23 13:56:10 UTC 2020 ││ step-read + echo 1590242170 │
│ step-read + echo Sat May 23 13:56:10 UTC 2020 │
│ place-tools stream closed │
│ step-read stream closed │
│
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="pipelineresource">PipelineResource&lt;/h4>
&lt;p>&lt;code>PipelineResource&lt;/code>在最后提，因为目前只是&lt;code>alpha&lt;/code>版本，何时会进入&lt;code>beta&lt;/code>或者弃用目前还是未知数。有兴趣的可以看下这里：&lt;a href="https://tekton.dev/docs/pipelines/resources/#why-aren-t-pipelineresources-in-beta">Why Aren’t PipelineResources in Beta?&lt;/a>&lt;/p>
&lt;p>简单来说，&lt;code>PipelineResource&lt;/code>可以通过其他的方式实现，而其本身也存在弊端：比如实现不透明，debug有难度；功能不够强；降低了Task的重用性等。&lt;/p>
&lt;p>比如&lt;code>git&lt;/code>类型的&lt;code>PipelineResource&lt;/code>，可以通过&lt;code>workspace&lt;/code>和&lt;code>git-clone&lt;/code> Task来实现；存储类型的，也可以通过&lt;code>workspace&lt;/code>来实现。&lt;/p>
&lt;p>这也就是为什么&lt;a href="#Workspace">上面介绍workspace的篇幅&lt;/a>比较大。个人也偏向于使用&lt;code>workspace&lt;/code>，灵活度高；使用workspace的Task重用性强。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://atbug.com/tekton-trigger-practice">云原生 CICD: Tekton Pipeline 实战&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://atbug.com/control-process-order-of-pod-containers">控制 Pod 内容器的启动顺序&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://knative.dev/docs/eventing/samples/writing-receive-adapter-source/03-controller">Knative Controller&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tekton.dev/docs/pipelines/resources/#why-aren-t-pipelineresources-in-beta">Why Aren’t PipelineResources in Beta?&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Java 中的 Mysql 时区问题</title><link>https://atbug.com/mysql-timezone-in-java/</link><pubDate>Thu, 14 May 2020 11:34:24 +0800</pubDate><guid>https://atbug.com/mysql-timezone-in-java/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/14/anonymouspersonwithminiatureairplaneonchalkboard37.jpg" alt="anonymous-person-with-miniature-airplane-on-chalkboard-3769120">&lt;/p>
&lt;p>&lt;em>(Photo by Andrea Piacquadio from Pexels)&lt;/em>&lt;/p>
&lt;p>话说工作十多年，mysql 还真没用几年。起初是外企银行，无法直接接触到 DB；后来一直从事架构方面，也多是解决问题为主。&lt;/p>
&lt;p>这次搭建海外机房，围绕时区大家做了一番讨论。不说最终的结果是什么，期间有同事认为 DB 返回的是 UTC 时间。&lt;/p>
&lt;p>这里简单做个验证，顺便看下时区的问题到底是如何处理。&lt;/p>
&lt;h2 id="环境">环境&lt;/h2>
&lt;blockquote>
&lt;p>openjdk version &amp;ldquo;1.8.0_242&amp;rdquo;
mysql-connector-java &amp;ldquo;8.0.20&amp;rdquo;
mysql &amp;ldquo;5.7&amp;rdquo; 时区 TZ=Europe/London
本地时区 GMT+8&lt;/p>
&lt;/blockquote>
&lt;p>创建个简单的库&lt;code>test&lt;/code>及表&lt;code>user&lt;/code>， 表结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="o">`&lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="o">`&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="o">`&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">`&lt;/span> &lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">`&lt;/span>&lt;span class="n">birth_date&lt;/span>&lt;span class="o">`&lt;/span> &lt;span class="k">timestamp&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">DEFAULT&lt;/span> &lt;span class="k">CURRENT_TIMESTAMP&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="n">ENGINE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">InnoDB&lt;/span> &lt;span class="k">DEFAULT&lt;/span> &lt;span class="n">CHARSET&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">latin1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>插入一条测试数据：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">insert&lt;/span> &lt;span class="k">into&lt;/span> &lt;span class="o">`&lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="o">`&lt;/span>
&lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">values&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Tom&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2020-05-15 08:00:00&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">Query&lt;/span> &lt;span class="n">OK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="k">row&lt;/span> &lt;span class="n">affected&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">01&lt;/span> &lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">select&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="k">user&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">+&lt;/span>&lt;span class="c1">------+---------------------+
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">birth_date&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+&lt;/span>&lt;span class="c1">------+---------------------+
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span> &lt;span class="n">Tom&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">2020&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">05&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">14&lt;/span> &lt;span class="mi">08&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">00&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+&lt;/span>&lt;span class="c1">------+---------------------+
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="k">row&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="k">set&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span> &lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试代码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Connection&lt;/span> &lt;span class="n">conn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DriverManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc:mysql://localhost:3306/test?useSSL=false&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Statement&lt;/span> &lt;span class="n">stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createStatement&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;select * from user where name = &amp;#39;Tom&amp;#39;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ResultSet&lt;/span> &lt;span class="n">rs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getResultSet&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Timestamp&lt;/span> &lt;span class="n">timestamp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTimestamp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;birth_date&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">timestamp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toLocalDateTime&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">2020-05-14T15:00
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="分析">分析&lt;/h2>
&lt;p>程序的执行过程同时用 wireshark 抓了包。可以看到一次查询，做了这么多次的交互（包含了会话初始化）。这里可以看到 #177 的交互返回查询的结果：&lt;code>Tom 2020-05-14 08:00:00&lt;/code>，与 DB 中的数据相符。&lt;strong>可见，返回的并不是 UTC 时间&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/14/15894244815090.jpg" alt="">&lt;/p>
&lt;p>在 TCP 抓包结果中 #155 的查询语句：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="cm">/* mysql-connector-java-8.0.20 (Revision: afc0a13cd3c5a0bf57eaa809ee0ee6df1fd5ac9b) */&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="o">@@&lt;/span>&lt;span class="k">session&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">auto_increment_increment&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">auto_increment_increment&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">character_set_client&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">character_set_client&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">character_set_connection&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">character_set_connection&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">character_set_results&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">character_set_results&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">character_set_server&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">character_set_server&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">collation_server&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">collation_server&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">collation_connection&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">collation_connection&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">init_connect&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">init_connect&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">interactive_timeout&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">interactive_timeout&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">license&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">license&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">lower_case_table_names&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">lower_case_table_names&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">max_allowed_packet&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">max_allowed_packet&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">net_write_timeout&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">net_write_timeout&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">performance_schema&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">performance_schema&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">query_cache_size&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">query_cache_size&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">query_cache_type&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">query_cache_type&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">sql_mode&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">sql_mode&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">system_time_zone&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">system_time_zone&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">time_zone&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">time_zone&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">transaction_isolation&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">transaction_isolation&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">@@&lt;/span>&lt;span class="n">wait_timeout&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">wait_timeout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/14/15894253881690.jpg" alt="">&lt;/p>
&lt;p>服务端返回的 &lt;code>time_zone&lt;/code> 为 &lt;code>BST&lt;/code>。与本地时区的转换，由 mysql 的 connector 自动完成。&lt;/p>
&lt;h2 id="进阶">进阶&lt;/h2>
&lt;h3 id="时区自动转换">时区自动转换&lt;/h3>
&lt;p>实现源码：&lt;/p>
&lt;p>&lt;code>ResultSetImpl&lt;/code>源码&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">defaultTimestampValueFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SqlTimestampValueFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">pset&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServerSession&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getServerTimeZone&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Timestamp&lt;/span> &lt;span class="nf">getTimestamp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">columnIndex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">checkRowPos&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">checkColumnBounds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">columnIndex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">thisRow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">columnIndex&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">defaultTimestampValueFactory&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="如何确认服务端时区">如何确认服务端时区？&lt;/h3>
&lt;p>使用会话中的服务端时区进行服务端时区。会话初始化时会进行时区的确认，比如前面获取的到&lt;code>BST&lt;/code>。确认时区的逻辑在&lt;code>NativeProtocol#configureTimezone()&lt;/code>中：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configureTimezone&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">从mysql的响应获取&lt;/span> &lt;span class="n">time_zone&lt;/span> &lt;span class="n">和&lt;/span> &lt;span class="n">system_time_zone&lt;/span> &lt;span class="n">的设置&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">configuredTimeZoneOnServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverSession&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServerVariable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;time_zone&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SYSTEM&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configuredTimeZoneOnServer&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">configuredTimeZoneOnServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverSession&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServerVariable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;system_time_zone&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="err">#&lt;/span>&lt;span class="n">从&lt;/span> &lt;span class="n">jdbc&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="n">参数&lt;/span> &lt;span class="n">serverTimezone&lt;/span> &lt;span class="n">获取时区&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPropertySet&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getStringProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PropertyKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverTimezone&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">configuredTimeZoneOnServer&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//如果 jdbc url 中未通过 serverTimezone 指定时区。则从TimeZoneMapping.properties中获取mysql 回传的时区缩写对应的标准时区，比如此处的 BST =&amp;gt; Europe/London
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//会出现无法映射的情况，不如 CEST 无法映射到 =&amp;gt; Europe/Berlin，可以指定自定义的 Properties 文件进行映射
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// user can override this with driver properties, so don&amp;#39;t detect if that&amp;#39;s the case
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">StringUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmptyOrWhitespaceOnly&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TimeUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCanonicalTimezone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configuredTimeZoneOnServer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">getExceptionInterceptor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IllegalArgumentException&lt;/span> &lt;span class="n">iae&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">ExceptionFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WrongArgumentException&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">iae&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMessage&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">getExceptionInterceptor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//如果 jdbc url 中通过 serverTimezone 指定了时区，则优先使用该时区
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">canonicalTimezone&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverSession&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setServerTimeZone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TimeZone&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTimeZone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// The Calendar class has the behavior of mapping unknown timezones to &amp;#39;GMT&amp;#39; instead of throwing an exception, so we must check for this...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">canonicalTimezone&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;GMT&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverSession&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServerTimeZone&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getID&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;GMT&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">ExceptionFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WrongArgumentException&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Messages&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Connection.9&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">canonicalTimezone&lt;/span> &lt;span class="o">}),&lt;/span>
&lt;span class="n">getExceptionInterceptor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="关于-servertimezone-的官方说明">关于 serverTimezone 的官方说明&lt;/h3>
&lt;blockquote>
&lt;p>Override detection/mapping of time zone. Used when time zone from server doesn&amp;rsquo;t map to Java time zone&lt;/p>
&lt;/blockquote>
&lt;p>修改一下 jdbc url，通过&lt;code>serverTimezone&lt;/code>指定时区为 &lt;code>GMT+8&lt;/code>：&lt;code>jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;amp;useSSL=false&lt;/code>&lt;/p>
&lt;p>再次执行代码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">2020-05-14T08:00
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>翻译：多运行时微服务架构</title><link>https://atbug.com/translation-multi-runtime-microservices-architecture/</link><pubDate>Wed, 01 Apr 2020 23:18:00 +0800</pubDate><guid>https://atbug.com/translation-multi-runtime-microservices-architecture/</guid><description>
&lt;p>这样文章通过Google翻译和人工逐字修改的方式完成的，某些位置也加上自己的理解。如有错误，请指出。&lt;/p>
&lt;p>翻译这篇文章的目的其实是为了自己加深对微服务、分布式架构以及多运行时架构的理解。整篇文章从”战略“上分析了微服务”从古至今“解决的问题，以及带来的新问题；进而在“战术”层面，给出了解决这些新问题的手段。&lt;/p>
&lt;p>个人见解：架构从来都是解决问题并带来问题， &lt;em>取舍之道&lt;/em> 。&lt;/p>
&lt;h3 id="背景知识">背景知识&lt;/h3>
&lt;p>微服务的 12 要素：&lt;/p>
&lt;ol>
&lt;li>基准代码：一份基准代码，多份部署&lt;/li>
&lt;li>依赖：显式声明依赖关系&lt;/li>
&lt;li>配置：在环境中存储配置&lt;/li>
&lt;li>后端服务：把后端服务当做附加资源&lt;/li>
&lt;li>构建、发布、运行：严格分离构建和运行&lt;/li>
&lt;li>进程：以一个或多个无状态进程运行应用&lt;/li>
&lt;li>端口绑定：通过端口绑定提供服务&lt;/li>
&lt;li>并发：通过进程模型进行扩展&lt;/li>
&lt;li>易处理：快速启动和优雅终止可最大化健壮性&lt;/li>
&lt;li>开发环境与线上环境等价：尽可能的保持开发、预发布、线上环境相同&lt;/li>
&lt;li>日志：把日志当做事件流&lt;/li>
&lt;li>管理进程：后台管理任务当做一次性进程运行&lt;/li>
&lt;/ol>
&lt;p>&lt;em>原文从此处开始：&lt;/em>&lt;/p>
&lt;ul>
&lt;li>创建分布式系统并非易事。围绕“微服务”架构和“ 12要素应用程序”设计出现了最佳实践。这些提供了与交付生命周期，网络，状态管理以及对外部依赖项的绑定有关的准则。&lt;/li>
&lt;li>但是，以可扩展和可维护的方式一致地实施这些原则是具有挑战性的。&lt;/li>
&lt;li>解决这些原理的以技术为中心的传统方法包括企业服务总线（ESB）和面向消息的中间件（MOM）。虽然这些解决方案提供了良好的功能集，但主要的挑战是整体架构以及业务逻辑和平台之间的紧密技术耦合。&lt;/li>
&lt;li>随着云，容器和容器协调器（Kubernetes）的流行，出现了解决这些原理的新解决方案。例如，Knative用于交付，服务网格用于网络，而Camel-K用于绑定和集成。&lt;/li>
&lt;li>通过这种方法，业务逻辑（称为“微逻辑”）构成了应用程序的核心，并且可以创建提供强大的现成分布式原语的sidecar“ mecha”组件。&lt;/li>
&lt;li>微观组件和机械组件的这种分离可以改善第二天的操作，例如打补丁和升级，并有助于维持业务逻辑内聚单元的长期可维护性。&lt;/li>
&lt;/ul>
&lt;p>创建良好的分布式应用程序并非易事：此类系统通常遵循12要素应用程序和微服务原则。它们必须是无状态的，可伸缩的，可配置的，独立发布的，容器化的，可自动化的，并且有时是事件驱动的和无服务器的。创建后，它们应该易于升级，并且长期可以承受。在当今的技术中，要在这些相互竞争的要求之间找到良好的平衡仍然是一项艰巨的努力。&lt;/p>
&lt;p>在本文中，我将探讨分布式平台如何发展以实现这种平衡，更重要的是，在分布式系统的演进中还需要发生什么事情，以简化可维护的分布式体系结构的创建。如果您想让我实时谈论这个话题，请加入我的QCon 三月的伦敦。&lt;/p>
&lt;h2 id="分布式应用程序需求">分布式应用程序需求&lt;/h2>
&lt;p>在此讨论中，我将把现代分布式应用程序的需求分为四个类别-生命周期，网络，状态，绑定-并简要分析它们在最近几年中的发展情况。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/04/01/15856635785757.jpg" alt="">&lt;/p>
&lt;h3 id="生命周期-lifecycle">生命周期 Lifecycle&lt;/h3>
&lt;ul>
&lt;li>打包 Packaging&lt;/li>
&lt;li>健康检查 Healthcheck&lt;/li>
&lt;li>部署 Deployment&lt;/li>
&lt;li>扩展 Scaling&lt;/li>
&lt;li>配置 Configuration&lt;/li>
&lt;/ul>
&lt;p>让我们从基础开始。当我们编写一项功能时，编程语言将指示生态系统中的可用库，打包格式和运行时。例如，Java使用.jar格式，将所有Maven依赖项用作生态系统，并将JVM用作运行时。如今，随着发布周期的缩短，生命周期更重要的是能够自动部署，从错误中恢复以及扩展服务的能力。这组功能广泛地代表了我们的应用程序生命周期需求。&lt;/p>
&lt;blockquote>
&lt;p>译者：错误恢复依赖健康检查&lt;/p>
&lt;/blockquote>
&lt;h3 id="网络-networking">网络 Networking&lt;/h3>
&lt;ul>
&lt;li>服务发现 Service Discovery&lt;/li>
&lt;li>A/B 测试、金丝雀部署 A/B Testing，Canary rollouts&lt;/li>
&lt;li>重试、超时、断路器 Retry，timeout，circuit breaker&lt;/li>
&lt;li>点到点、发布/订阅 Point-to-point，pub/sub&lt;/li>
&lt;li>安全、可观测性 Security observability&lt;/li>
&lt;/ul>
&lt;p>从某种意义上讲，今天几乎每个应用程序都是分布式应用程序，因此需要联网。但是现代分布式系统需要从更广泛的角度掌握网络。从服务发现和错误恢复开始，到启用现代软件发布技术以及各种跟踪和遥测。为了我们的目的，我们甚至将不同的消息交换模式，点对点和发布/订阅方法以及智能路由机制包括在此类别中。&lt;/p>
&lt;h3 id="状态-state">状态 State&lt;/h3>
&lt;ul>
&lt;li>工作流管理 Workflow mgmt&lt;/li>
&lt;li>幂等性 Idempotency&lt;/li>
&lt;li>临时调度 Temporal scheduling&lt;/li>
&lt;li>缓存 Caching&lt;/li>
&lt;li>应用状态 Application State&lt;/li>
&lt;/ul>
&lt;p>当我们谈论状态时，通常是关于服务状态以及为什么最好是无状态的。但是管理服务的平台本身需要状态。这对于执行可靠的服务编排和工作流，分布式单例，临时调度（cron作业），幂等性，有状态的错误恢复，缓存等是必需的。此处列出的所有功能都依赖于底层的状态。虽然实际的状态管理不在本文讨论范围之内，但关注状态的分布式原语及其抽象却很受关注。&lt;/p>
&lt;h3 id="绑定-binding">绑定 Binding&lt;/h3>
&lt;ul>
&lt;li>连接器 Connectors&lt;/li>
&lt;li>协议转换 Protocol conversion&lt;/li>
&lt;li>消息转换 Message transformation&lt;/li>
&lt;li>消息路由 Message routeing&lt;/li>
&lt;li>事务性 Transactionality&lt;/li>
&lt;/ul>
&lt;p>分布式系统的组件不仅必须彼此对话，而且还必须与现代或旧式外部系统集成。这就要求连接器能够转换各种协议，支持不同的消息交换模式（例如轮询，事件驱动，请求/答复）转换消息格式，甚至能够执行自定义的错误恢复过程和安全机制。&lt;/p>
&lt;blockquote>
&lt;p>译者：执行自定义的错误恢复过程和安全机制 &amp;ndash; 事务&lt;/p>
&lt;/blockquote>
&lt;p>在不涉及一次性使用案例的情况下，以上内容代表了创建良好的分布式系统所需的通用原语的良好集合。如今，许多平台都提供了这样的功能，但是本文中我们要寻找的是过去十年中我们使用这些功能的方式如何变化，以及在下一个十年中它将如何变化。为了进行比较，让我们看一下过去的十年，看看基于Java的中间件如何满足这些需求。&lt;/p>
&lt;h2 id="传统中间件的限制">传统中间件的限制&lt;/h2>
&lt;p>上一代的企业服务总线（ESB）及其变体（例如面向消息的中间件，更轻量级的集成框架等）可满足上述需求，这是一种众所周知的传统解决方案。ESB 是一种中间件，可以使用面向服务的体系结构（即经典SOA）在异构环境之间实现互操作性。&lt;/p>
&lt;p>ESB可以为您提供良好的功能集，但ESB的主要挑战是整体架构以及业务逻辑和平台之间紧密的技术耦合，从而导致技术和组织集中化。在将服务开发并部署到这样的系统中时，它与分布式系统框架紧密结合，从而限制了服务的发展。这通常只会在软件生命周期的后期才变得明显。&lt;/p>
&lt;p>以下是每类需求的一些问题和局限性，这些问题和局限性使得ESB在现代时代不再有用。&lt;/p>
&lt;h3 id="生命周期">生命周期&lt;/h3>
&lt;p>在传统的中间件中，通常只有一个受支持的语言运行时（例如Java），它规定了软件的打包方式，可用的库，必须定期对其进行打补丁等。业务服务必须使用那些使其与以相同语言编写的平台紧密结合的库。实际上，这导致协调的服务和平台升级，从而阻止了独立和常规的服务和平台发布。&lt;/p>
&lt;h3 id="联网">联网&lt;/h3>
&lt;p>尽管传统的中间件拥有围绕与其他内部和外部服务交互的高级功能集，但它具有一些主要缺点。 网络功能集中于一种主要语言及其相关技术。 对于Java来说，即JMS，JDBC，JTA等。更重要的是，网络问题和语义也深深地刻在业务服务中。 有一些具有抽象的库来解决网络问题（例如曾经很受欢迎的Hystrix项目），但是该库的抽象“泄漏”到了服务的编程模型，交换模式和错误处理语义以及库本身中。 虽然可以方便地在一个位置编写和读取与网络方面混合的整个业务逻辑，但是这将两个问题紧密地耦合到一个实现中，最终形成了一条共同的演进路径。&lt;/p>
&lt;p>译者：这里问题在于一些通用的高级功能与语言绑定。这里提到的 Hystrix 作为断路器的一个实现，使用的时候需要采用 Hystrix 的编程模型。如果切换到其他的实现，则需要学习和改造的成本。&lt;/p>
&lt;h3 id="状态">状态&lt;/h3>
&lt;p>为了进行可靠的服务编排，业务流程管理以及实施模式（例如Saga模式和其他运行缓慢的流程），平台需要在幕后保持持久状态。同样，临时动作（例如触发计时器和cron作业）建立在状态之上，并且需要在分布式环境中对数据库进行集群化和恢复。这里的主要约束是以下事实：与状态交互的库和接口没有完全抽象出来，也没有与服务运行时分离。通常，这些库必须配置有数据库详细信息，并且它们存在于服务中，从而将语义和依赖关系泄漏到应用程序域中&lt;/p>
&lt;h3 id="绑定">绑定&lt;/h3>
&lt;p>使用集成中间件的主要驱动程序之一是能够使用不同的协议，数据格式和消息交换模式连接到其他各种系统。但是，这些连接器必须与应用程序一起使用，这意味着必须将依赖关系与业务逻辑一起进行更新和修补。这意味着必须在服务内来回转换数据类型和数据格式。这意味着必须根据消息交换模式来构造代码并设计流程。这些是即使抽象的端点如何影响传统中间件中服务实现的一些示例。&lt;/p>
&lt;blockquote>
&lt;p>译者：使用不同 RPC 实现的服务之间的对话，比如某个服务调用会同时（空间上）调用使用 Dubbo 协议的服务和使用 RESTful 协议的服务&lt;/p>
&lt;/blockquote>
&lt;h2 id="云原生趋势">云原生趋势&lt;/h2>
&lt;p>传统的中间件功能强大。它具有所有必要的技术功能，但缺乏现代数字业务需求所要求的快速更改和扩展的能力。这就是微服务体系结构及其设计现代分布式应用程序的指导原则所要解决的问题。&lt;/p>
&lt;p>微服务背后的思想及其技术要求促进了容器和Kubernetes的普及和广泛使用。这开始了一种新的创新方式，这种方式将影响我们今后几年处理分布式应用程序的方式。让我们看看Kubernetes和相关技术如何影响每组需求。&lt;/p>
&lt;h3 id="生命周期-1">生命周期&lt;/h3>
&lt;p>容器和Kubernetes将我们打包、分发和部署应用程序的方式发展为与语言无关的格式。关于Kubernetes模式和Kubernetes对开发人员的影响的文章很多，在这里我将简短介绍。但是请注意，对于Kubernetes，要管理的最小原语是容器，它专注于在容器级别和流程模型上交付分布式原语。这意味着它在管理应用程序的生命周期方面，运行状况检查、恢复、部署和扩展方面做得很好，但是在容器内的分布式应用程序的其他方面却没有做得那么好，例如灵活的网络、状态管理和绑定。&lt;/p>
&lt;p>您可能会指出，Kubernetes具有状态工作负载、服务发现、cron作业和其他功能。的确如此，但是所有这些原语都是在容器级别的，并且在容器内部，开发人员仍然必须使用特定于语言的库来访问我们在本文开头列出的更详细的功能。这就是推动诸如Envoy、Linkerd、Consul、Knative、Dapr、Camel-K等项目的原因。&lt;/p>
&lt;h3 id="网络">网络&lt;/h3>
&lt;p>事实证明，Kubernetes提供的围绕服务发现的基本网络功能是一个很好的基础，但对于现代应用程序来说还不够。随着微服务数量的增加和部署速度的加快，对更高级的发布策略、管理安全性、指标、跟踪、从错误中恢复、错误模拟等等方面的需求变得越来越具有吸引力，并产生了一种新的软件类别，称为服务网格。&lt;/p>
&lt;p>这里更令人兴奋的是，趋势是将与网络相关的问题从包含业务逻辑的服务移出到单独的运行时（无论是sidecar还是节点级代理）。如今，服务网格可以执行高级路由、助力测试、处理安全性的某些部分，更甚至特定于应用程序的协议（例如，Envoy支持Kafka，MongoDB，Redis，MySQL等）。尽管作为解决方案的服务网格可能尚未得到广泛采用，但它触及了分布式系统中的真正痛点，我相信它将找到其形状和存在形式。&lt;/p>
&lt;p>除了典型的服务机制外，还有其他项目，例如Skupper，这些项目证实了将网络功能放入外部运行时代理的趋势。Skupper通过第7层虚拟网络解决了多集群间的通信难题，并提供了先进的路由和连接功能。但是，Skupper并没有被嵌入到业务服务运行时中，而是每个Kubernetes命名空间运行一个实例，该实例充当共享的补充工具。&lt;/p>
&lt;p>综上所述，容器和Kubernetes在应用程序的生命周期管理方面迈出了重要的一步。服务网格和相关技术遇到了真正的痛点，并为将更多职责从应用程序移到代理中奠定了基础。让我们看看下一步。&lt;/p>
&lt;h3 id="状态-1">状态&lt;/h3>
&lt;p>我们在前面列出了依赖状态的主要集成原语。管理状态非常困难，应将其委派给专门的存储软件和托管服务。这不是这里的主题，而是在语言无关的抽象中使用状态来帮助集成用例。今天，许多努力试图在语言无关的抽象后面提供有状态的原语。有状态的工作流管理是基于云的服务中的强制性功能，例如AWS Step Functions，Azure Durable Functions等示例。在基于容器的部署中，CloudState和Dapr都依赖于sidecar模型来进一步解耦分布式应用程序中的状态抽象。&lt;/p>
&lt;p>我也期待将上面列出的所有有状态功能抽象到一个单独的运行时中。这意味着工作流管理、单例、幂等、事务管理、cron作业触发器和有状态错误处理都可靠地发生在Sidecar（或主机级代理）中，而不是存在于服务中。业务逻辑不需要在应用程序中包含此类依赖关系和语义，并且可以从绑定环境中声明性地请求此类行为。例如，Sidecar可以充当cron作业触发器、幂等消费者和工作流管理器，而自定义业务逻辑可以作为回调调用或插入工作流的某些阶段、错误处理、临时调用或唯一幂等要求等。&lt;/p>
&lt;p>另一个有状态用例是缓存。无论是由服务网格层执行请求缓存，还是使用诸如Infinispan，Redis，Hazelcast等之类的数据缓存，都有一些将缓存功能推到应用程序运行时之外的示例。&lt;/p>
&lt;h3 id="绑定-1">绑定&lt;/h3>
&lt;p>尽管我们的主题是将所有分布式需求与应用程序运行时脱钩，但这种趋势也继续伴随着绑定。连接器、协议转换、消息转换
、错误处理和安全中介都可以移出服务运行时。我们还没有到那里，但是在诸如Knative和Dapr之类的项目中朝这个方向进行了尝试。将所有这些职责移出应用程序运行时将导致更小，更注重业务逻辑的代码。这样的代码将在独立于分布式系统需求的运行时中运行，而分布式系统需求可以作为预包装功能使用。&lt;/p>
&lt;p>Apache Camel-K 采用了另一种有趣的方法。该项目没有使用来伴随主应用程序的代理运行时，而是依靠智能的Kubernetes Operator来构建具有Kubernetes和Knative的附加平台功能的应用程序运行时。在这里，单一代理是负责包括应用程序所需的分布式系统原语的操作员。不同之处在于，某些分布式原语已添加到应用程序运行时中，而某些已在平台中启用（也可能包括Sidecar）。&lt;/p>
&lt;h2 id="未来架构趋势">未来架构趋势&lt;/h2>
&lt;p>概括地说，我们可以得出结论，通过将功能部件转移到平台级别，分布式应用程序的产品化达到了新的领域。除了生命周期之外，现在我们还可以观察到联网，状态抽象，声明性事件和端点绑定（拆箱即用），并且EIPs在此列表中排在后面。有趣的是，产品化使用进程外模型（sidecar）进行功能扩展，而不是使用运行时库或纯平台功能（例如新的Kubernetes功能）。&lt;/p>
&lt;blockquote>
&lt;p>译者：产品化可以理解为分布式原语的内聚：便于独立发布和演进。&lt;/p>
&lt;/blockquote>
&lt;p>现在，我们通过将所有传统的中间件功能（也称为ESB）转移到其他运行时中来，不久，我们在服务中要做的就只是编写业务逻辑。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/04/01/15857495038535.jpg" alt="">
传统中间件平台和云原生平台概述&lt;/p>
&lt;p>与传统的ESB时代相比，此体系结构将业务逻辑与平台更好地分离了，但是还没有完全分离。许多分布式原语，例如经典的企业集成模式（EIP）：拆分器、聚合器、过滤器、基于内容的路由器；流处理模式：映射、过滤、折叠、联接、合并、滑动窗口；仍然必须包含在业务逻辑运行时中，许多其他依赖于多个不同且重叠的平台附加组件。&lt;/p>
&lt;p>如果我们将在不同领域进行创新的各种云原生项目进行堆叠，那么最终将得到如下图所示：&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/04/01/15857496466055.jpg" alt="">
多运行时微服务&lt;/p>
&lt;p>这里的图仅用于说明目的，它有目的地选择代表性的项目并将其映射到分布式原语的类别。实际上，您不会同时使用所有这些项目，因为其中一些项目是重叠的且不兼容的工作负载模型。如何解释这个图？&lt;/p>
&lt;ul>
&lt;li>Kubernetes和容器在多语言应用程序的生命周期管理中取得了巨大飞跃，并为未来的创新奠定了基础。&lt;/li>
&lt;li>服务网格技术通过高级网络功能在Kubernetes上进行了改进，并开始涉足应用程序方面。&lt;/li>
&lt;li>尽管Knative通过快速扩展主要专注于无服务器工作负载，但它也满足了服务编排和事件驱动的绑定需求。&lt;/li>
&lt;li>Dapr以Kubernetes、Knative和Service Mesh的思想为基础，并深入应用程序运行时以解决有状态的工作负载、绑定和集成需求，充当现代的分布式中间件。&lt;/li>
&lt;/ul>
&lt;p>该图可帮助您直观地看到，很可能在将来，我们最终将使用多个运行时来实现分布式系统。多个运行时，不是因为有多个微服务，而是因为每个微服务都将由多个运行时组成，最有可能是两个运行时-&lt;strong>自定义业务逻辑运行时&lt;/strong>和&lt;strong>分布式原语运行时&lt;/strong>。&lt;/p>
&lt;h2 id="引入多运行时微服务">引入多运行时微服务&lt;/h2>
&lt;p>这是开始形成的多运行时微服务体系结构的简要说明。&lt;/p>
&lt;p>您还记得科学家们制作的电影中的Avatar和机甲（机械套件），他们去旷野探索潘多拉吗？这种多运行时架构类似于这些Mecha-为类人动物驾驶员赋予超能力的套装。在电影中，您要穿上套装才能获得力量并获得破坏性武器。在这种软件架构中，您具有构成应用程序核心的业务逻辑（称为micrologic微逻辑）和提供强大且拆箱即用的分布式原语的sidecar mecha组件。微逻辑与mecha功能相结合，形成了一个多运行时微服务，该服务将进程外功能用于解决其分布式系统需求。最棒的是，Avatar 2即将面世，以帮助推广这种架构。我们最终可以在所有软件会议上用令人赞叹的机甲图片代替老式的边车摩托车；-)。接下来，让我们看看该软件体系结构的详细信息。&lt;/p>
&lt;p>这是一个类似于客户端-服务器体系结构的两组件模型，其中每个组件都是独立的运行时。它与纯客户端-服务器体系结构的不同之处在于，这两个组件都位于同一主机上，彼此之间没有可靠的网络连接。这两个组件的重要性相同，它们可以在任一方向上启动操作并充当客户端或服务器。其中的一个组件称为为逻辑（Micrologic），它拥有从几乎所有分布式系统问题中剥离出来的非常少的业务逻辑。另一个随附的组件是Mecha，它提供了我们在本文中一直讨论的所有分布式系统功能（生命周期除外，它是一个平台功能）。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/04/01/15857504765833.jpg" alt="">
多运行时（进程外）微服务架构&lt;/p>
&lt;p>Micrologic和Mecha可能是一对一的部署（称为sidecar模型），也可以是带有几个Micrologic运行时的共享Mecha。第一种模型最适用于Kubernetes等环境，而第二种模型则适用于边缘部署。&lt;/p>
&lt;h3 id="微逻辑运行时特征">微逻辑运行时特征&lt;/h3>
&lt;p>让我们简要地探讨Micrologic运行时的一些特征：&lt;/p>
&lt;ul>
&lt;li>Micrologic组件本身不是微服务。它包含微服务将具有的业务逻辑，但是该逻辑只能与Mecha组件结合使用。另一方面，微服务是自包含的，没有整体功能的一部分，也没有一部分处理流程扩展到其他运行时中。Micrologic及其与Mecha对应的产品的组合形成了微服务。&lt;/li>
&lt;li>这也不是函数或无服务器架构。无服务器最著名的是其提供的快速扩展和从零扩展到零的能力。在无服务器体系结构中，函数实现单个操作，因为这是可伸缩性的单位。在这方面，函数不同于实现多种操作的Micrologic，但实现方式不是端到端的。最重要的是，操作的实现分布在Mecha和Micrologic运行时上。&lt;/li>
&lt;li>这是客户端-服务器体系结构的一种特殊形式，针对无需编码即可使用众所周知的分布式原语进行了优化。另外，如果我们假设Mecha扮演服务器角色，那么每个实例都必须经过专门配置以便与单个客户端一起工作。它不是那种旨在与典型的客户端-服务器体系结构同时支持多个客户端的通用服务器实例。（译者：多运行时架构中假如 mecha 作为服务端，那么微逻辑作为客户端。客户端与服务端的关系多为一对一，或者多对一。而传统微服务架构中的客户端服务端一般是多对多）&lt;/li>
&lt;li>Micrologic中的用户代码不会直接与其他系统交互，也不会实现任何分布式系统原语。它通过事实上的标准（例如HTTP / gRPC，CloudEvents规范）与Mecha进行交互，并且Mecha使用丰富的功能并在配置的步骤和机制的指导下与其他系统进行通信。&lt;/li>
&lt;li>尽管Micrologic仅负责实现从分布式系统问题中剥离出来的业务逻辑，但它仍必须至少实现一些API。它必须允许Mecha和平台通过预定义的API和协议与其进行交互（例如，通过遵循Kubernetes部署的云原生设计原则）。（译者：比如微逻辑需要实现健康检查的 API，方便平台-Kubernetes 或者 mecha 进行健康检查）&lt;/li>
&lt;/ul>
&lt;h3 id="mecha运行时特征">Mecha运行时特征&lt;/h3>
&lt;p>以下是一些Mecha运行时特征：&lt;/p>
&lt;ul>
&lt;li>Mecha是一个通用的、高度可配置的、可重用的组件、提供分布式原语作为现成的功能。&lt;/li>
&lt;li>Mecha的每个实例都必须配置为与一个Micrologic组件（边车模型）一起使用，或者配置为与几个组件共享（节点级别）。&lt;/li>
&lt;li>Mecha不对Micrologic运行时做任何假设。它与使用开放协议和格式（例如HTTP / gRPC，JSON，Protobuf，CloudEvents）的多语言微服务甚至单片系统一起使用。&lt;/li>
&lt;li>Mecha以简单的文本格式（例如YAML，JSON）声明性地配置，该格式表明要启用的功能以及如何将其绑定到Micrologic端点。对于专门的API交互，可以为Mechan附加规范，例如OpenAPI，AsyncAPI，ANSI-SQL等。对于由多个处理步骤组成的有状态工作流，可以使用诸如Amazon State Language的规范。对于无状态集成，可以使用与Camel-K YAML DSL类似的方法来使用企业集成模式（EIP）。这里的关键点是，所有这些都是Mecha无需编码即可实现的简单的、基于文本的、声明性的、多种语言的定义。请注意，这些都是未来派的预测，当前，没有用于状态编排或EIP的Mechas，但是我希望现有的Mechas（Envoy，Dapr，Cloudstate等）很快就会开始添加此类功能。Mecha是应用程序级别的分布式原语抽象层。&lt;/li>
&lt;li>与其为了不同目的而依赖于多个代理的（例如网络代理、缓存代理、绑定代理），而应该由一个Mecha提供所有这些功能。一些功能（例如存储、消息持久性、缓存等）的实现将被其他云或本地服务注入并支持。&lt;/li>
&lt;li>一些与生命周期管理有关的分布式系统问题可以由管理平台（例如Kubernetes或其他云服务）来处理，而不是使用通用的开放规范（例如Open App Model）提供的Mecha运行时。&lt;/li>
&lt;/ul>
&lt;h3 id="这种架构的主要好处是什么">这种架构的主要好处是什么？&lt;/h3>
&lt;p>好处是业务逻辑和越来越多的分布式系统问题之间的耦合变得松散。软件系统的这两个要素具有完全不同的动力学。业务逻辑始终是内部编写的唯一的自定义代码。它经常更改，具体取决于您的组织优先级和执行能力。另一方面，用于解决本文中列出的问题的分布式原语，并且众所周知。这些由软件供应商开发，并作为库，容器或服务使用。该代码根据供应商的优先级、发布周期、安全补丁、开放源代码管理规则等而更改。这两部分之间几乎不可见并且无法相互控制。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/04/01/15857520911736.jpg" alt="">
业务逻辑和分布式系统关注不同架构中的耦合&lt;/p>
&lt;p>微服务原理有助于通过有限的上下文使不同的业务领域脱钩，每个微服务都可以独立发展。但是微服务架构无法解决将业务逻辑与中间件问题耦合在一起带来的困难。对于某些依赖于集成用例的微服务，这可能不是一个大因素。但是，如果您的领域涉及复杂的集成（也是越来越多的人所面临的），那么遵循微服务原则也无法帮助您避免与中间件的耦合。即使中间件是为您包含在微服务中的库，当您开始迁移和更改这些库时，这种耦合便会显现出来。还有您需要的分布的原语越多，您与集成平台的耦合就越强。通过预定义的API（而不是库）来访问作为独立运行时/进程的中间件，有助于解耦并实现每个组件的独立演进。&lt;/p>
&lt;p>这也是为供应商分发和维护复杂的中间件软件的较好的方法。只要与中间件的交互是通过开放API和标准的进程间通信进行的，软件供应商就可以按照自己的节奏自由发布补丁和升级。消费者可以自由使用他们喜欢的语言、库、运行时、部署方法和过程。&lt;/p>
&lt;h3 id="这种架构的主要缺点是什么">这种架构的主要缺点是什么？&lt;/h3>
&lt;p>进程间通信。分布式系统的业务逻辑和中间件机制（您可以看到名称的来源）在不同的运行时中，并且需要HTTP或gRPC调用而不是进程内方法调用。但是请注意，这并不是跨机器或数据中心的网络调用。Micrologic运行时和Mecha应当位于同一主机上，并且延迟时间短，并且出现网络问题的可能性最小。&lt;/p>
&lt;p>复杂。下一个问题是，是否值得为获得某些好处而进行复杂的开发、并维护此类系统。我认为答案将越来越倾向于是。分布式系统的需求和发布周期的步伐正在增加，并且此架构为此进行了优化。我前段时间写道，未来的开发人员必须具备混合开发技能。这种体系结构进一步证实了这一趋势。应用程序的一部分将使用高级编程语言编写，部分功能将由必须进行声明性配置的现成组件提供。这两个部分的互连不是在编译时或在启动时通过进程内依赖注入，而是在部署时通过进程间通信互连。该模型可实现更高的软件重用率和更快的变更速度。&lt;/p>
&lt;h3 id="微服务后无法使用的功能">微服务后无法使用的功能&lt;/h3>
&lt;p>微服务架构有一个明确的目标。它为变化而优化。通过将应用程序划分到业务域中，此软件架构通过独立的团队分离、管理并以独立的步调发布的服务，为软件演进和可维护性提供了最佳的服务边界。&lt;/p>
&lt;p>如果我们看一下无服务器体系结构的编程模型，它主要基于功能。功能已针对可伸缩性进行了优化。通过功能，我们将每个操作分解为一个独立的组件，以便可以快速，独立和按需扩展。在此模型中，部署粒度是一项功能。之所以选择该函数，是因为它是代码结构：其输入的速率与缩放行为直接相关。这是一种针对极端可伸缩性（而不是复杂系统的长期可维护性）进行了优化的体系结构。&lt;/p>
&lt;p>从AWS Lambda的流行及其完全托管的运营性质来看，Serverless的其他方面又如何呢？在这方面，“AWS无服务器”为配置速度进行了优化，但缺少控制和锁定功能。但是完全托管的方面不是应用程序体系结构，而是一种软件使用模型。它在功能上是正交的，类似于使用基于SaaS的平台，该平台在理想情况下应适用于任何类型的体系结构，无论是整体式、微服务、机甲还是功能。在许多方面，AWS Lambda类似于完全托管的Mecha架构，但有一个很大的区别：Mecha不执行功能模型，而是允许围绕业务域使用更具凝聚力的代码构造，而与所有中间件无关。&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/04/01/15857521845846.jpg" alt="">
架构优化&lt;/p>
&lt;p>另一方面，Mecha架构为中间件独立性优化了微服务。尽管微服务彼此独立，但它们在很大程度上依赖于嵌入的分布式原语。Mecha架构将这两个问题分为单独的运行时，从而允许独立团队独立发布它们。这种解耦可以改善第二天（day-2）的操作（例如修补和升级），并改善业务逻辑内聚单元的长期可维护性。在这方面，Mecha架构是微服务架构的自然发展，它通过根据引起最大摩擦的边界拆分软件来进行开发。与功能模型相比，该优化以软件重用和演化的形式提供了更多好处，而功能模型则以代码的过度分配为代价进行了优化，以实现极高的可伸缩性。&lt;/p>
&lt;blockquote>
&lt;p>译者：day-2可以理解为前一天的发布带来的问题需要第二天的发布进行修复，而多运行时解耦了业务逻辑和分布式原语，允许其中一个的独立发布，不需要统一安排升级的节点。&lt;/p>
&lt;/blockquote>
&lt;h2 id="结论">结论&lt;/h2>
&lt;p>分布式应用程序有许多要求。创建高效的分布式系统需要多种技术和良好的集成方法。尽管传统的单体中间件提供了分布式系统所需的所有必要的技术功能，但它缺乏业务所需的快速更改、适应和扩展的能力。这就是为什么基于微服务的架构背后的思想为容器和Kubernetes的快速普及做出了贡献。随着云原生领域的最新发展，我们现在通过将所有传统中间件功能转移到平台和现成的辅助运行时中来全面发展。&lt;/p>
&lt;p>应用程序功能的这种产品化主要是使用进程外模型进行功能扩展，而不是运行时库或纯平台功能。这意味着，将来很有可能我们将使用多个运行时来实现分布式系统。多个运行时，不是因为有多个微服务，而是因为每个微服务都将由多个运行时组成。自定义微业务逻辑的运行时，以及拆箱即用的分布式原语运行时。&lt;/p>
&lt;h2 id="关于作者">关于作者&lt;/h2>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/04/01/15857522443912.jpg" alt="">&lt;/p>
&lt;p>Bilgin Ibryam是Red Hat的首席架构师、提交者和Apache Software Foundation的成员。他是一位开源的传播者
、博客作者、偶尔的演讲者，并且是Kubernetes Patterns和Camel Design Patterns书籍的作者。在日常工作中，Bilgin乐于指导、编码并带领开发人员成功构建开源解决方案。他当前的工作集中在区块链、分布式系统、微服务、devops和云原生应用程序开发上。&lt;/p>
&lt;p>原文的某些连接：&lt;/p>
&lt;ul>
&lt;li>12-Factors：https://12factor.net/zh_cn/&lt;/li>
&lt;li>原文：https://www.infoq.com/articles/multi-runtime-microservice-architecture/&lt;/li>
&lt;/ul></description></item><item><title>控制 Pod 内容器的启动顺序</title><link>https://atbug.com/control-process-order-of-pod-containers/</link><pubDate>Thu, 12 Mar 2020 22:05:16 +0800</pubDate><guid>https://atbug.com/control-process-order-of-pod-containers/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/04/30/screenshot-20210430-at-092623.png" alt="">&lt;/p>
&lt;p>2021.4.30 更新：&lt;/p>
&lt;p>最新的方案，请跳转新篇 &lt;a href="https://mp.weixin.qq.com/s/8DqF_N_fjiM9AOouvddvgA">Kubernetes 上如何控制容器的启动顺序&lt;/a>。&lt;/p>
&lt;hr>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>众所周知, Kubernetes Pod 内有两种容器: 初始化容器(init container)和应用容器(app container). 其中初始化容器的执行先于应用容器, 并且初始化容器和应用容器的个数分别为 &lt;code>0~n&lt;/code> 和 &lt;code>1~n&lt;/code>.&lt;/p>
&lt;p>初始化容器会按照顺序执行, 顺序执行的前提是初始化容器始终会运行到完成(completed)状态. 而应用容器恰好相反: 启动顺序随机, 并始终保持运行(running)状态.&lt;/p>
&lt;h2 id="问题">问题&lt;/h2>
&lt;p>工作中有个架构的方案使用到了 sidecar 容器: 将基础组件功能从容器转移到 sidecar 容器中, 其中有个功能是从远程配置中心获取配置并保持实时更新. 保证实时更新没有问题, 但是配置文件需要在 app 启动之前完成初始化.&lt;/p>
&lt;p>对于同为&amp;quot;应用容器&amp;quot;类型的 sidecar 容器来说, 由于容器启动顺序随机而无法做到这一点.&lt;/p>
&lt;p>当时我们给定的方案是增加一个初始化容器进行配置的初始化, 不可避免的我们需要增加一个额外的容器, 即使是这个容器的生命周期非常短.&lt;/p>
&lt;p>追求极致的我们总是对这个额外增加的容器耿耿于怀: 假如能控制应用容器的启动顺序&amp;hellip;&lt;/p>
&lt;h3 id="新发现">新发现&lt;/h3>
&lt;p>近期在研究 CDF (Continuous Delivery Foundation)下的 &lt;a href="https://github.com/tektoncd">Tekton&lt;/a>, 其中有个概念是其将流水线(pipeline)中的各个步骤(step)作为应用容器在同一个 Pod 中运行.&lt;/p>
&lt;p>我们都知道流水线中的步骤是按照定义的顺序执行的, 那么 Tekton 是如何保证应用容器的执行顺序的?&lt;/p>
&lt;p>查看 pod 的 manifest 之后发现了下面的容器配置 (这个容器的作用从 git 仓库克隆代码)&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">wait_file&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/downward/ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">wait_file_content&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">post_file&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/tools/0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">termination_path&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/termination&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/ko-app/git-init&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">http://gitlab.nip.io:8088/addozhang/tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">develop&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">path&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/workspace/git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tekton/tools/entrypoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>克隆代码的命令是:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">git-init -url http://gitlab.nip.io:8088/addozhang/tekton-test -revision develop -path /workspace/git-source
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是容器的启动命令是&lt;code>/tekton/tools/entrypoint&lt;/code>并带上了一坨的参数(此处略过, 后面分析).&lt;/p>
&lt;p>翻看了下&lt;a href="https://github.com/tektoncd/pipeline/tree/master/cmd/entrypoint">文档&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>This binary is used to override the entrypoint of a container by wrapping it. In tektoncd/pipeline this is used to make sure Task&amp;rsquo;s steps are executed in order, or for sidecars.&lt;/p>
&lt;p>这个二进制文件被用于通过包装的方式来覆盖容器的入口点. 在 tektoncd/pipeline 中确保任务中的步骤或者 sidecar 被顺序地执行.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>-entrypoint&lt;/code>: 原始的容器启动命令, 作为 &lt;code>entrypoint&lt;/code> 的子进程运行. 即上面的 &lt;code>git-init XXXX&lt;/code>&lt;/li>
&lt;li>&lt;code>-post_file&lt;/code>: 子进程运行结束后写的文件路径(即上面的&lt;code>/tekton/tools/0&lt;/code>). 如果子进程执行失败, 则写一个&lt;code>{{post_file}}.err&lt;/code>文件, 而不是&lt;code>{{post_file}}&lt;/code>&lt;/li>
&lt;li>&lt;code>-wait_file&lt;/code>: 启动子进程&lt;strong>前&lt;/strong>监控的文件路径(即上面的&lt;code>/tekton/downward/ready&lt;/code>). 通过监控到的&lt;code>{{watch_file}}&lt;/code>或者&lt;code>{{watch_file}}.err&lt;/code>文件来决定执行子进程, 还是跳过执行然后写入&lt;code>{{post_file}}.err&lt;/code>文件并返回错误码(&lt;code>exitCode&lt;/code> &amp;gt;= 0)&lt;/li>
&lt;li>&lt;code>-wait_file_content&lt;/code>: 等待&lt;code>wait_file&lt;/code>有实际内容写入, 持续监控&lt;code>wait_file&lt;/code>直到有内容写入.&lt;/li>
&lt;/ul>
&lt;p>回头看上面容器配置:&lt;/p>
&lt;ol>
&lt;li>容器的&lt;code>entrypoint&lt;/code>启动进程&lt;/li>
&lt;li>监控到&lt;code>/tekton/downward/ready&lt;/code>文件的创建, 并等待文件内容的写入&lt;/li>
&lt;li>执行&lt;code>git-init&lt;/code>子进程, 从 git 仓库克隆源码&lt;/li>
&lt;li>创建&lt;code>/tekton/tools/0&lt;/code>文件&lt;/li>
&lt;/ol>
&lt;h3 id="实际应用">实际应用&lt;/h3>
&lt;p>这个方案是否能解决我们的问题, 还是有一定的局限性的.&lt;/p>
&lt;p>首先需要应用容器的启动命令进行重新的编排, 这个存在一定的挑战. 需要统一应用的启动命令才能做到规模化+自动化.&lt;/p>
&lt;p>其次引入可用于监控的文件, 需要额外增加&lt;code>Volume&lt;/code>用于跨容器的文件访问. 当然通过增加&lt;code>emptyDir&lt;/code>的&lt;code>Volume&lt;/code>即可.&lt;/p>
&lt;p>同时 sidecar 容器需要在完成启动后创建&lt;code>post_file&lt;/code>, 应用容器可以使用这个&lt;code>entrypoint&lt;/code>进行包装.&lt;/p>
&lt;p>如果要突破这个局限, CRD 无非是个优秀的方案. 下一篇, 我们通过一个简单的 CRD 来实现.&lt;/p></description></item><item><title>Go Docker 镜像进阶: 精简镜像</title><link>https://atbug.com/build-minimal-docker-image-for-go-app/</link><pubDate>Wed, 11 Mar 2020 23:00:27 +0800</pubDate><guid>https://atbug.com/build-minimal-docker-image-for-go-app/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/03/11/15839387687383.jpg" alt="">
​[图片来自 https://www.facebook.com/sequenceprocess/]&lt;/p>
&lt;h3 id="问题-入门到生产级的差距">问题: 入门到生产级的差距&lt;/h3>
&lt;p>昨天的文章《为 Go 应用创建 Docker 镜像》, 算是入门级的, 并不适用于生产级. 为什么?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
addozhang/golang-hello-world latest 4cce1292a87a &lt;span class="m">4&lt;/span> seconds ago 813MB
&lt;/code>&lt;/pre>&lt;/div>&lt;p>整个镜像的大小有 813MB, 这还只有一个简单的 Hello world. 因为其中包含了 Golang 的编译和运行环境. 但是实际生产环境中, 我们并不需要这么多.&lt;/p>
&lt;h3 id="先看结果">先看结果&lt;/h3>
&lt;p>精简之后只有 2.07MB, 而且并不影响运行.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
addozhang/golang-hello-world latest 4cce1292a87a &lt;span class="m">3&lt;/span> minutes ago 813MB
addozhang/golang-hello-world2 latest 1da5bb994074 &lt;span class="m">7&lt;/span> minutes ago 2.07MB
$ docker run --rm addozhang/golang-hello-world2
Hello world
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解决方案">解决方案&lt;/h3>
&lt;p>如果做到的? 首先从基础镜像开始, 换成&lt;code>scratch&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. 构建时将编译好的文件复制到镜像中&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">FROM scratch
ADD golang-hello-world /
CMD [&amp;#34;/golang-hello-world&amp;#34;]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>假如你是使用&lt;code>go build&lt;/code>来编译, 在 Macos 上会遇到如下问题:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ docker run --rm addozhang/golang-hello-world2
standard_init_linux.go:211: &lt;span class="nb">exec&lt;/span> user process caused &lt;span class="s2">&amp;#34;exec format error&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>解决方案是&lt;code>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build&lt;/code>&lt;/p>
&lt;p>从头来看, 构建出一个精简的镜像, 我们需要:&lt;/p>
&lt;ol>
&lt;li>运行&lt;code>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build&lt;/code>构建 linux 环境的可执行文件. 该文件并不能在 mac 上运行&lt;/li>
&lt;li>使用&lt;code>docker build&lt;/code>进行构建&lt;/li>
&lt;/ol>
&lt;p>这样的操作步骤太麻烦, 还能不能精简一下?&lt;/p>
&lt;h3 id="进阶-使用-docker-的多步构建">进阶: 使用 Docker 的多步构建&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#build stage
FROM golang as builder
ENV GO111MODULE=on
ENV GOPROXY=https://goproxy.io
WORKDIR /app
COPY go.mod .
RUN go mod download
COPY . .
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build
#image stage
FROM scratch
COPY --from=builder /app/golang-hello-world /
CMD [&amp;#34;/golang-hello-world&amp;#34;]
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="参考">参考&lt;/h3>
&lt;p>&lt;a href="https://dev.to/plutov/docker-and-go-modules-3kkn">https://dev.to/plutov/docker-and-go-modules-3kkn&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;code>scratch&lt;/code>是一个空的镜像文件 &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>为 Go 应用创建 Docker 镜像</title><link>https://atbug.com/build-docker-image-for-go-app/</link><pubDate>Wed, 11 Mar 2020 20:41:58 +0800</pubDate><guid>https://atbug.com/build-docker-image-for-go-app/</guid><description>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/03/11/15839304511808.jpg" alt="">&lt;/p>
&lt;p>嗯嗯, 最近开始用 Golang 了.&lt;/p>
&lt;p>今天需要为 Go 应用创建对象, 看了下官方博客. 拿 hello world 做个测试.&lt;/p>
&lt;p>使用下面的命令创建个新的项目&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ mkdir -p &lt;span class="nv">$GOPATH&lt;/span>/src/github.com/addozhang/golang-hello-world &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$_&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
$ go mod init github.com/addozhang/golang-hello-world
go: creating new go.mod: module github.com/addozhang/golang-hello-world
$ cat &lt;span class="s">&amp;lt;&amp;lt; EOF &amp;gt; main.go
&lt;/span>&lt;span class="s">package main
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s">import &amp;#34;fmt&amp;#34;
&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="s">func main() {
&lt;/span>&lt;span class="s"> fmt.Println(&amp;#34;Hello world&amp;#34;)
&lt;/span>&lt;span class="s">}
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;span class="c1"># go fmt&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行检查一次&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ go run main.go
Hello world
&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序没问题, 下面就是构建镜像了. 创建一个 Dockerfile 文件, 内容如下:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">FROM golang
LABEL Author=&amp;#34;addozhang&amp;#34;
ADD . /go/src/github.com/addozhang/golang-hello-world
RUN go install github.com/addozhang/golang-hello-world
ENTRYPOINT [ &amp;#34;/go/bin/golang-hello-world&amp;#34; ]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>构建镜像:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ docker build -t addozhang/golang-hello-world .
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行镜像:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ docker run --rm addozhang/golang-hello-world:latest
Hello world
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行没问题, 收工&lt;/p></description></item><item><title>云原生CICD: Tekton Trigger 实战</title><link>https://atbug.com/tekton-trigger-practice/</link><pubDate>Wed, 12 Feb 2020 21:30:03 +0800</pubDate><guid>https://atbug.com/tekton-trigger-practice/</guid><description>
&lt;p>Trigger的介绍看 &lt;a href="https://atbug.com/tekton-trigger-glance/">这里&lt;/a>.&lt;/p>
&lt;p>接上文 &lt;a href="https://atbug.com/tekton-pipeline-practice/">Tekton Pipeline 实战&lt;/a> , 我们为某个项目创建了一个Pipeline, 但是执行时通过 PipelineRun 来完成的. 在 PipelineRun 中我们制定了 Pipepline 以及要使用的 PipelineResource. 但是日常的开发中, 我们更多希望在提交了代码之后开始 Pipeline 的执行. 这时我们就要用到 Tekton Trigger 了.&lt;/p>
&lt;p>思路是这样: 代码提交后将&lt;code>Push Event&lt;/code>发送给&lt;code>Tekton Trigger EventController&lt;/code>(以下简称 Controller), 然后 Controller 基于的&lt;code>TriggerBinding&lt;/code>的配置从 payload 中提取信息, 装载在&amp;quot;Params&amp;quot;中作为&lt;code>TriggerTemplate&lt;/code>的入参. 最后 Controller 创建&lt;code>PipelineRun&lt;/code>.&lt;/p>
&lt;h2 id="trigger-相关的资源">Trigger 相关的资源&lt;/h2>
&lt;h3 id="triggertemplate">TriggerTemplate&lt;/h3>
&lt;p>回看&lt;a href="https://atbug.com/tekton-pipeline-practice/#0x06-%E6%89%A7%E8%A1%8C%E6%B5%81%E6%B0%B4%E7%BA%BF">上回用的PipelineRun Yaml&lt;/a>, 参数有&lt;code>revision&lt;/code>, &lt;code>url&lt;/code>, &lt;code>imageUrl&lt;/code>和&lt;code>imageTag&lt;/code>. (imageUrl 与项目名一直)&lt;/p>
&lt;p>因此定义&lt;code>TriggerTemplate&lt;/code>将这 4 个元素作为入参, 然后复用之前的&lt;code>Pipeline&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TriggerTemplate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">trigger-test-triggertemplate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gitrevision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The git revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">master&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gitrepositoryurl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The git repository url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">namespace&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The namespace to create the resources&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pielines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">projectname&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The project name&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imagetag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The image tag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resourcetemplates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PipelineRun&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test-pipeline-run-$(uid)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(params.namespace)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccountName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageUrl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">addozhang/$(params.projectname)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">imageTag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(params.imagetag)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pipelineRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build-pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-source&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resourceSpec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">revision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(params.gitrevision)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(params.gitrepositoryurl)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;code>kubectl apply -f trigger/trigger-template.yaml&lt;/code>&lt;/p>
&lt;h3 id="triggerbinding">TriggerBinding&lt;/h3>
&lt;p>&lt;code>TriggerTemplate&lt;/code>的入参都可以从&lt;code>PushEvent&lt;/code>的 payload中通过 JsonPath 表达式来提取. 更多表达式的使用参考&lt;a href="https://github.com/tektoncd/triggers/blob/master/docs/triggerbindings.md#event-variable-interpolation">官方的文档&lt;/a>.&lt;/p>
&lt;p>&lt;em>注意: 这里的 payload 格式使用的是 Gitlab 的 PushEvent 定义. 为什么要用 Gitlab 后什么会解释&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TriggerBinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">trigger-test-triggerbinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gitrevision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(body.after)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">namespace&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gitrepositoryurl&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(body.project.git_http_url)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">projectname&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">$(body.project.name)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;code>kubectl apply -f trigger/trigger-binding.yaml&lt;/code>&lt;/p>
&lt;h3 id="eventlistener">EventListener&lt;/h3>
&lt;p>&lt;code>EventController&lt;/code>将&lt;code>TriggerTemplate&lt;/code>和&lt;code>TriggerBinding&lt;/code>关联在一起, 资源在创建后会自动创建对应的 pod 和 service.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">EventListener&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">trigger-test-eventlistener&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccountName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-test //需要访问 API, 用上回创建 serviceaccount&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">triggers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">bindings&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">trigger-test-triggerbinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">trigger-test-triggertemplate&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;code>kubectl apply -f trigger/event-listener.yaml&lt;/code>&lt;/p>
&lt;p>提供 WebHook 的访问入口, 为&lt;code>EventListener&lt;/code>创建&lt;code>ingress&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">el-trigger-test-eventlistener&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">trigger-test.el.nip.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">el-trigger-test-eventlistener&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>做完之后记得添加解析&lt;code>sudo echo &amp;quot;$(minikube ip) trigger-test.el.nip.io&amp;quot; &amp;gt;&amp;gt; /etc/hosts&lt;/code>&lt;/p>
&lt;h2 id="gitlab">GitLab&lt;/h2>
&lt;p>这里我们没有继续用 github 作为 CVS, minikube 运行在本地, ingress 地址无法在 github 上解析(webhook 无法工作). 因此只能本地搭建个 gitlab.&lt;/p>
&lt;p>使用 Docker Compose 的方式部署, 并制定域名&lt;code>gitlab.nip.io&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3.6&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">web&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;gitlab/gitlab-ce:latest&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;gitlab.nip.io&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">GITLAB_OMNIBUS_CONFIG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> external_url &amp;#39;http://gitlab.nip.io:8088&amp;#39;
&lt;/span>&lt;span class="sd"> gitlab_rails[&amp;#39;gitlab_shell_ssh_port&amp;#39;] = 8022
&lt;/span>&lt;span class="sd"> # Add any other gitlab.rb configuration here, each on its own line&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;8088:8088&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;8022:22&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>记得添加解析&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">sudo echo &amp;#34;$(ifconfig | grep -Eo &amp;#39;inet (addr:)?([0-9]*\.){3}[0-9]*&amp;#39; | grep -Eo &amp;#39;([0-9]*\.){3}[0-9]*&amp;#39; | grep -v &amp;#39;127.0.0.1&amp;#39; | head -n 1) gitlab.nip.io&amp;#34; &amp;gt;&amp;gt; /etc/hosts
&lt;/code>&lt;/pre>&lt;/div>&lt;p>GitLab 的默认账号是&lt;code>root&lt;/code>, 首次访问&lt;code>http://gitlab.nip.io:8088&lt;/code>的时候会提示设置密码.&lt;/p>
&lt;p>创建项目, 提交代码的操作不多说了. 添加 webhook 前, 要先去&amp;quot;Admin Area &amp;raquo; Settings &amp;raquo; Network &amp;raquo; Outbound Requests&amp;quot;勾选&lt;code>Allow requests to the local network from web hooks and services&lt;/code>.&lt;/p>
&lt;h3 id="dns-解析问题">DNS 解析问题&lt;/h3>
&lt;p>Docker 和 minikube 是在两个独立的虚拟机中运行, 并且我们添加了两个地址解析. 互相访问的时候便会出现 domain 无法解析的问题, 这里是通过部署一个 dnsmasq 作为独立的 dns 解析服务器.&lt;/p>
&lt;p>安装和配置 dnsmasq, dnsmasq 会将 &lt;code>/etc/hosts&lt;/code> 中的记录加入到记录中.&lt;/p>
&lt;p>我本地的 minikube 位于&lt;code>192.168.64.0&lt;/code>网段, 因次 dnsmasq 添加监听地址&lt;code>192.168.64.1&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">brew install dnsmasq
cat &lt;span class="s">&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; /usr/local/etc/dnsmasq.conf
&lt;/span>&lt;span class="s">strict-order
&lt;/span>&lt;span class="s">listen-address=127.0.0.1,192.168.64.1
&lt;/span>&lt;span class="s">EOF&lt;/span>
sudo brew services start dnsmasq
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查一下, &lt;code>192.168.1.136&lt;/code>是我本机 ip.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ dig gitlab.nip.io @192.168.64.1
&lt;span class="p">;&lt;/span> &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.6 &amp;lt;&amp;lt;&amp;gt;&amp;gt; gitlab.nip.io @192.168.64.1
&lt;span class="p">;;&lt;/span> global options: +cmd
&lt;span class="p">;;&lt;/span> Got answer:
&lt;span class="p">;;&lt;/span> -&amp;gt;&amp;gt;HEADER&lt;span class="s">&amp;lt;&amp;lt;- opco&lt;/span>de: QUERY, status: NOERROR, id: &lt;span class="m">63393&lt;/span>
&lt;span class="p">;;&lt;/span> flags: qr aa rd ra&lt;span class="p">;&lt;/span> QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: &lt;span class="m">1&lt;/span>
&lt;span class="p">;;&lt;/span> OPT PSEUDOSECTION:
&lt;span class="p">;&lt;/span> EDNS: version: 0, flags:&lt;span class="p">;&lt;/span> udp: &lt;span class="m">4096&lt;/span>
&lt;span class="p">;;&lt;/span> QUESTION SECTION:
&lt;span class="p">;&lt;/span>gitlab.nip.io. IN A
&lt;span class="p">;;&lt;/span> ANSWER SECTION:
gitlab.nip.io. 0 IN A 192.168.1.136
&lt;span class="p">;;&lt;/span> Query time: &lt;span class="m">0&lt;/span> msec
&lt;span class="p">;;&lt;/span> SERVER: 192.168.64.1#53&lt;span class="o">(&lt;/span>192.168.64.1&lt;span class="o">)&lt;/span>
&lt;span class="p">;;&lt;/span> WHEN: Thu Feb &lt;span class="m">13&lt;/span> 18:20:19 CST &lt;span class="m">2020&lt;/span>
&lt;span class="p">;;&lt;/span> MSG SIZE rcvd: &lt;span class="m">58&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;p>推送一个空的提交到代码仓库: &lt;code>git commit -a -m &amp;quot;trigger commit&amp;quot; --allow-empty &amp;amp;&amp;amp; git push origin master&lt;/code>&lt;/p>
&lt;p>然后就可以看到新的&lt;code>PipelineRun&lt;/code>创建并运行.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ tkn pr list
NAME STARTED DURATION STATUS
tekton-test-pipeline-run-fk2xj &lt;span class="m">42&lt;/span> seconds ago --- Running
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其他文章">其他文章&lt;/h2>
&lt;p>Tekton Pipeline 实战: &lt;a href="https://atbug.com/tekton-pipeline-practice">https://atbug.com/tekton-pipeline-practice&lt;/a>&lt;/p></description></item><item><title>Tekton Trigger 介绍</title><link>https://atbug.com/tekton-trigger-glance/</link><pubDate>Wed, 05 Feb 2020 18:03:15 +0800</pubDate><guid>https://atbug.com/tekton-trigger-glance/</guid><description>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>Tekton 的介绍请参考&lt;a href="https://atbug.com/tekton-pipeline-practice/">Tekton Pipeline 实战&lt;/a>.&lt;/p>
&lt;p>通常, CI/CD 事件应该包含如下信息:&lt;/p>
&lt;ul>
&lt;li>确定事件的类型(比如 GitHub Push, GitLab Issue, Docker Hub Webhook 等)&lt;/li>
&lt;li>可从特定管道访问并映射到特定管道 (从事件负载中获取 SHA 信息, 然后在管道中使用)&lt;/li>
&lt;li>准确地触发管道 (基于有效负载值触发管道)&lt;/li>
&lt;/ul>
&lt;p>Tekton API 的设计分离了配置(比如 PipelineRun VS Pipeline), 保证了 step 可以被重用. 但是没有提供动态封装配置的机制来生成资源(尤其是 PipelineRun 和 PipelineResource). &lt;a href="https://github.com/tektoncd/triggers">Triggers&lt;/a> 通过下面的 CRDs 在架构上对 Tekton 进行了扩展:&lt;/p>
&lt;ul>
&lt;li>&lt;code>TriggerTemplate&lt;/code>: 创建资源的模板(比如用来创建 PipelineResource 和 PipelineRun)&lt;/li>
&lt;li>&lt;code>TriggerBinding&lt;/code>: 校验事件并提取负载字段&lt;/li>
&lt;li>&lt;code>EventListener&lt;/code>: 连接&lt;code>TriggerBinding&lt;/code>和&lt;code>TriggerTemplate&lt;/code>到可寻址的端点(事件接收器). 使用从各个&lt;code> TriggerBinding&lt;/code>中提取的参数来创建&lt;code>TriggerTemplate&lt;/code>中指定的 resources. 同样通过&lt;code> interceptor&lt;/code>字段来指定外部服务来对事件负载进行预处理.&lt;/li>
&lt;li>&lt;code>ClusterTriggerBinding&lt;/code>: cluster级别的&lt;code>TriggerBinding&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/uPic/rymZ0w.jpg" alt="">&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply --filename https://storage.googleapis.com/tekton-releases/triggers/latest/release.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查新增的 CRD: &lt;code>kubectl api-resources | grep tekton&lt;/code>. Triggers 引入了 3 个 CRD: &lt;code>TriggerTemplate&lt;/code>, &lt;code>TriggerBinding&lt;/code>,&lt;code>EventListener&lt;/code>.&lt;/p>
&lt;p>检查新增的 deployment: &lt;code>tekton-triggers-webhook&lt;/code>, &lt;code>tekton-triggers-controller&lt;/code>.&lt;/p></description></item><item><title>Tekton Dashboard 安装</title><link>https://atbug.com/tekton-dashboard-installation/</link><pubDate>Sat, 01 Feb 2020 12:39:28 +0800</pubDate><guid>https://atbug.com/tekton-dashboard-installation/</guid><description>
&lt;p>Tekton 提供了&lt;a href="https://github.com/tektoncd/dashboard">dashboard&lt;/a>方便用户管理和查看 Tekton PipelineRun 和 TaskRun 以及创建, 执行和完成过程中涉及的资源. 它还允许按标签过滤 PipelineRun 和 TaskRun.&lt;/p>
&lt;h3 id="安装方法">安装方法&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply --filename https://github.com/tektoncd/dashboard/releases/download/v0.4.1/dashboard_latest_release.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查dashboard的运行情况, &lt;code>STATUS&lt;/code>为&lt;code>Running&lt;/code>的话则说明运行成功.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl get pods --namespace tekton-pipelines
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="访问">访问&lt;/h3>
&lt;p>访问Tekton的Dashboard有两种方式, 一种是通过&lt;code>port-forward&lt;/code>, 另一种是通过&lt;code>ingress&lt;/code>来访问.&lt;/p>
&lt;h4 id="port-forward">port-forward&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl port-forward svc/tekton-dashboard &lt;span class="m">9097&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="ingress">ingress&lt;/h4>
&lt;p>先检查ingress是否开启.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube addon list
...
- ingress: enabled
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果是disabled的话, 通过命令&lt;code>minikube addons enable ingress&lt;/code>.&lt;/p>
&lt;p>&lt;em>注意: 这里拉取&lt;code>quay.io/kubernetes-ingress-controller/nginx-ingress-controller&lt;/code>镜像可能比较慢, 建议使用国内的镜像, 比如&lt;code>quay.mirrors.ustc.edu.cn/kubernetes-ingress-controller/nginx-ingress-controller&lt;/code>&lt;/em>&lt;/p>
&lt;p>修改&lt;code>basic-dashboard-ingress.yaml&lt;/code>中的&lt;code>host&lt;/code>地址:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-dashboard&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-pipelines&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-dashboard.nip.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton-dashboard&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9097&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;code>kubectl apply -f basic-dashboard-ingress.yaml&lt;/code>.&lt;/p>
&lt;p>还有最后一步, 在&lt;code>/etc/hosts&lt;/code>中添加一条解析&lt;code>x.x.x.x tekton-dashboard.nip.io&lt;/code>, ip地址通过&lt;code>minikube ip&lt;/code>来获取&lt;/p>
&lt;p>浏览器中打开&lt;code> tekton-dashboard.nip.io&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/uPic/6weoXL.jpg" alt="">&lt;/p></description></item><item><title>Tekton 0.9.0 更新</title><link>https://atbug.com/tekton-0.9.0-release/</link><pubDate>Sun, 19 Jan 2020 14:33:17 +0800</pubDate><guid>https://atbug.com/tekton-0.9.0-release/</guid><description>
&lt;p>翻译整理自 &lt;a href="https://cd.foundation/blog/2019/12/12/whats-new-in-tekton-0-9/">What’s New in Tekton 0.9&lt;/a>&lt;/p>
&lt;h2 id="功能及bug修复">功能及Bug修复&lt;/h2>
&lt;h3 id="脚本模式">脚本模式&lt;/h3>
&lt;p>以前如果要在容器里运行个简单的 bash 脚本, 需要这么写:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hello&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;bash&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> set -ex
&lt;/span>&lt;span class="sd"> echo &amp;#34;hello&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 0.9 之后, 可以更加简单, 不需要再写command 和讨厌的&lt;code>-c&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hello&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> #!/bin/bash
&lt;/span>&lt;span class="sd"> echo &amp;#34;hello&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="性能">性能&lt;/h3>
&lt;p>通过一系列的工作, 每个 PipelineRun 的运行时间缩短了 5-20 秒&lt;/p>
&lt;h2 id="api-变化">API 变化&lt;/h2>
&lt;p>为了 beta 版本的发布, API 做了一些调整:&lt;/p>
&lt;h3 id="镜像摘要输出路径的标准化">镜像摘要输出路径的标准化&lt;/h3>
&lt;p>Tekton 目前提供了一个机制用于存储 task 构建出的镜像的摘要. 这个机制早于&lt;code> PipelineResource&lt;/code>子系统, 并要求 Task 编写者镜像这些摘要写到指定的位置&lt;code>/builder/image-outputs&lt;/code>. 从现在开始, 有了输出资源的标准路径&lt;code>/workspace/output/&amp;lt;resource-name&amp;gt;&lt;/code>&lt;/p>
&lt;h3 id="简化集群资源">简化集群资源&lt;/h3>
&lt;p>集群&lt;code>PipelineResource&lt;/code>使从 Tasks 内部部署和使用 Kubernetes 集群变得简单. 它为用户提供了声明集群的位置以及如何进行身份验证的机制. 然后再执行 Task 过程中, 他们会自动配置&lt;code>.kubeconfig&lt;/code>文件, 以便 Kubernetes 工具可以找到该集群.&lt;/p>
&lt;p>这个版本保函了一些更改, 使集群&lt;code> PipelineResource&lt;/code>更易于使用.&lt;/p>
&lt;p>以前用户必须两次指定名字参数: 一次在资源名称中指定, 一次作为资源参数. 现在第二个参数不需要了.&lt;/p>
&lt;h2 id="基础工作">基础工作&lt;/h2>
&lt;p>每个Tekton版本中包含的大部分工作都是针对某些功能的, 这些功能要等到以后的版本才能公开.况。&lt;/p>
&lt;h3 id="改进的-pipelineresource">改进的 PipelineResource&lt;/h3>
&lt;p>源于&lt;a href="https://github.com/tektoncd/pipeline/issues/1673">Pipeline Resource Redesign&lt;/a>&lt;/p>
&lt;h3 id="api-的版本控制">API 的版本控制&lt;/h3>
&lt;p>源于&lt;a href="https://github.com/tektoncd/pipeline/issues/1526">Create a v1alpha2 apiVersion&lt;/a>&lt;/p>
&lt;h2 id="独立的包">独立的包&lt;/h2>
&lt;p>Tekton项目发展惊人. 除了这里提到的&lt;a href="https://github.com/tektoncd/pipeline">Pipeline&lt;/a>更新, 其他比如&lt;a href="https://github.com/tektoncd/triggers">Triggers&lt;/a>, &lt;a href="https://github.com/tektoncd/cli">CLI&lt;/a>, &lt;a href="https://github.com/tektoncd/dashboard">Dashboard&lt;/a>也有显著的成果.&lt;/p>
&lt;p>Triggers 现在支持开箱即用的 Github 和 Gitlab 校验.
CLI加入了交互式创建&lt;code>PipelineResource&lt;/code>和启动 task 的支持.
Dashboard 接下来也会假如可视化特性.&lt;/p></description></item><item><title>Tekton安装及Hello world</title><link>https://atbug.com/tekton-installation-and-sample/</link><pubDate>Fri, 17 Jan 2020 19:17:14 +0800</pubDate><guid>https://atbug.com/tekton-installation-and-sample/</guid><description>
&lt;h2 id="安装">安装&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查安装的tekton相关的CRD:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl api-resources &lt;span class="p">|&lt;/span> grep tekton
clustertasks tekton.dev &lt;span class="nb">false&lt;/span> ClusterTask
conditions tekton.dev &lt;span class="nb">true&lt;/span> Condition
pipelineresources tekton.dev &lt;span class="nb">true&lt;/span> PipelineResource
pipelineruns pr,prs tekton.dev &lt;span class="nb">true&lt;/span> PipelineRun
pipelines tekton.dev &lt;span class="nb">true&lt;/span> Pipeline
taskruns tr,trs tekton.dev &lt;span class="nb">true&lt;/span> TaskRun
tasks tekton.dev &lt;span class="nb">true&lt;/span> Task
&lt;/code>&lt;/pre>&lt;/div>&lt;p>tekton的两个pod:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl get pods --namespace tekton-pipelines
NAME READY STATUS RESTARTS AGE
tekton-pipelines-controller-556d8f4494-2qthv 1/1 Running &lt;span class="m">0&lt;/span> 11m
tekton-pipelines-webhook-849cff5cf-8m5qq 1/1 Running &lt;span class="m">0&lt;/span> 11m
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装cli">安装CLI&lt;/h3>
&lt;p>cli: &lt;a href="https://github.com/tektoncd/cli#installing-tkn">https://github.com/tektoncd/cli#installing-tkn&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">brew install tektoncd-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tekton-hello-world">Tekton: hello world&lt;/h2>
&lt;p>创建一个简单的&lt;code>Task&lt;/code>, 只有一个&lt;code>step&lt;/code>就是打印出&amp;quot;hello world&amp;quot;&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">echo-hello-world&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">echo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建一个&lt;code>TaskRun&lt;/code>执行上面的&lt;code>Task&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TaskRun&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">echo-hello-world-task-run&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">echo-hello-world&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行task:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl apply -f &amp;lt;name-of-file.yaml&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查&lt;code>TaskRun&lt;/code>的输出, 执行命令:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">tkn taskrun describe echo-hello-world-task-run
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Name: echo-hello-world-task-run
Namespace: tekton-pipelines
Task Ref: echo-hello-world
Status
STARTED DURATION STATUS
21 minutes ago 1 minute Succeeded
Input Resources
No resources
Output Resources
No resources
Params
No params
Steps
NAME STATUS
echo Completed
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Succeeded&lt;/code>状态表示task执行成功.&lt;/p>
&lt;p>查看实际的输出, 执行命令:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">tkn taskrun logs echo-hello-world-task-run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">[echo] hello world
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Minikube安装istio</title><link>https://atbug.com/install-istio-on-minikube/</link><pubDate>Fri, 17 Jan 2020 08:02:42 +0800</pubDate><guid>https://atbug.com/install-istio-on-minikube/</guid><description>
&lt;h2 id="准备">准备&lt;/h2>
&lt;p>&lt;strong>注意: istioctl的安装要使用安装里的, 不要是用homebrew里的. &lt;a href="https://github.com/istio/istio/issues/19029">github issue&lt;/a>&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -L https://istio.io/downloadIstio &lt;span class="p">|&lt;/span> sh -
&lt;span class="nb">cd&lt;/span> istio-1.4.2
cp bin/istioctl /usr/local/bin/istioctl
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装前检查">安装前检查&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">istioctl verify-install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果检查没问题, 会看到&lt;code>Install Pre-Check passed! The cluster is ready for Istio installation.&lt;/code>&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>istio有5种内建的安装配置&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>: remote, sds, default, demo, minimal&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">istioctl profile list
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>minimal: 使用istio的流量管理所需组件的最小化安装&lt;/li>
&lt;li>default: 根据IstioControlPlane API的默认设置(建议用于生产部署)启用组件. 您可以通过运行命令istioctl profile dump显示默认设置.&lt;/li>
&lt;li>demo: 几乎安装所有的特性, 包括logging和tracing的比例为100%. 不适合生产环境, 负载太重&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>default&lt;/th>
&lt;th>demo&lt;/th>
&lt;th>minimal&lt;/th>
&lt;th>sds&lt;/th>
&lt;th>remote&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Core components&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-citadel&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-egressgateway&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-galley&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-ingressgateway&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-nodeagent&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-pilot&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-policy&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-sidecar-injector&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-telemetry&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Addons&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>grafana&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istio-tracing&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>kiali&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>prometheus&lt;/code>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>demo&lt;/code> profile安装&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">istioctl manifest apply --set &lt;span class="nv">profile&lt;/span>&lt;span class="o">=&lt;/span>demo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>验证安装结果&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">istioctl manifest generate --set &lt;span class="nv">profile&lt;/span>&lt;span class="o">=&lt;/span>demo &amp;gt; /tmp/generated-manifest.yaml
istioctl verify-install -f /tmp/generated-manifest.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&amp;hellip;&amp;hellip;
Checked 23 crds
Checked 9 Istio Deployments
Istio is installed successfully&lt;/p>
&lt;/blockquote>
&lt;h2 id="卸载">卸载&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">helm template install/kubernetes/helm/istio --namespace istio-system &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --values install/kubernetes/helm/istio/values-istio-demo.yaml &lt;span class="p">|&lt;/span> kubectl delete -f -
kubectl delete namespace istio-system
&lt;span class="c1">#delete all CRDs&lt;/span>
kubectl delete -f install/kubernetes/helm/istio-init/files
&lt;/code>&lt;/pre>&lt;/div>&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://istio.io/docs/setup/additional-setup/config-profiles/">这里&lt;/a>可以查看各个配置的详细说明 &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>神秘的Eureka自我保护</title><link>https://atbug.com/translation-the-mystery-of-eurekas-self-preservation/</link><pubDate>Sun, 05 Jan 2020 14:14:03 +0800</pubDate><guid>https://atbug.com/translation-the-mystery-of-eurekas-self-preservation/</guid><description>
&lt;p>本文翻译自&lt;a href="https://dzone.com/articles/the-mystery-of-eurekas-self-preservation">The Mystery of Eureka Self-Preservation&lt;/a>&lt;/p>
&lt;p>根据CAP定理, Eureka是一个AP系统, 这就导致了在网络分区期间多个注册表中的信息不一致. 自我保护功能则是为了尽可能降低这种不一致.&lt;/p>
&lt;h2 id="自我保护的定义">自我保护的定义&lt;/h2>
&lt;p>自我保护(self preservation)是Eureka的一项功能, Eureka注册表在未收到实例的心跳情况超过一定阈值时停止驱逐过期的实例.&lt;/p>
&lt;h3 id="从一个健康的系统开始">从一个健康的系统开始&lt;/h3>
&lt;p>把下面看成一个健康的系统&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/uPic/n5wZMX.jpg" alt="The healthy system — before encountering network partition">&lt;/p>
&lt;p>假设所有的微服务都处于健康的状态并成功注册到Eureka注册表中.&lt;/p>
&lt;p>多个注册表间会同步注册表记录, 所有的微服务实例都处于UP状态. 假设实例2从注册中心发现里实例4, 并调用实例4上的服务.&lt;/p>
&lt;h3 id="突发网络分区">突发网络分区&lt;/h3>
&lt;p>假设出现了网络分区, 系统变成下面的状态.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/uPic/MznWWr.jpg" alt="During network partition  -  enters self-preservation">&lt;/p>
&lt;p>由于网络分区, 实例4和5丢失了注册中心的连接, 但是实例2仍然可以连接到实例4. Eureka服务端因为没有收到实例4和5的心跳(超过一定时间后), 将他们驱逐. 然后Eureka服务端意识到突然丢失了超过15%(2/5)的心跳, 因此其进入&lt;em>自我保护&lt;/em>模式&lt;/p>
&lt;p>从此时开始, Eureka服务端不在驱逐任何实例, 即使实例真正的下线了.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/uPic/7c9eHt.jpg" alt="During self-preservation  -  stops expiring instances">&lt;/p>
&lt;p>实例3下线, 但其始终存在注册表中.&lt;/p>
&lt;p>但此时注册表还会接受新实例的注册.&lt;/p>
&lt;h2 id="自我保护的基本原理">自我保护的基本原理&lt;/h2>
&lt;p>自我保护功能在下面两种情况下是合理的:&lt;/p>
&lt;ul>
&lt;li>Eureka服务端因为弱网分区问题没有收到心跳(这并不意味着客户端下线), 但是这种问题可能会很快被修复.&lt;/li>
&lt;li>即使Eureka服务端和客户端的连接断开, 客户端间还可以继续保持连接. (比如上面实例2仍然可以连接到实例4)&lt;/li>
&lt;/ul>
&lt;h3 id="配置-默认">配置 (默认)&lt;/h3>
&lt;p>下面的配置会直接或间接影响到自我保护的行为.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">eureka.instance.lease-renewal-interval-in-seconds = 30
&lt;/code>&lt;/pre>&lt;/div>&lt;p>客户端发送心跳的频率. 服务端会以此在计算期望收到心跳数, 默认30秒&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">eureka.instance.lease-expiration-duration-in-seconds = 90
&lt;/code>&lt;/pre>&lt;/div>&lt;p>多长时间未收到心跳后, 实例才可以被驱逐, 默认90秒&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">eureka.server.eviction-interval-timer-in-ms = 60 * 1000
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Eureka服务端驱逐操作的执行频率, 默认60秒&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">eureka.server.renewal-percent-threshold = 0.85
&lt;/code>&lt;/pre>&lt;/div>&lt;p>期望心跳数达到该阈值后, 就会进入自我保护模式, 默认0.85&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">eureka.server.renewal-threshold-update-interval-ms = 15 * 60 * 1000
&lt;/code>&lt;/pre>&lt;/div>&lt;p>期望心跳数的计算间隔, 默认15分钟&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">eureka.server.enable-self-preservation = true
&lt;/code>&lt;/pre>&lt;/div>&lt;p>是否允许Eureka服务端进入自我保护模式, 默认开启&lt;/p>
&lt;h2 id="理解配置">理解配置&lt;/h2>
&lt;p>Eureka服务端在&amp;quot;上一分钟实际收到的心跳数&amp;quot;小于&amp;quot;每分钟期望的心跳数&amp;quot;时就会进入自我保护模式&lt;/p>
&lt;h3 id="期望的每分钟心跳数">期望的每分钟心跳数&lt;/h3>
&lt;p>假设&lt;code>renewal-percent-threshold&lt;/code>设置为&lt;code>0.85&lt;/code>&lt;/p>
&lt;p>计算方式:&lt;/p>
&lt;ul>
&lt;li>单个实例每分钟期望的心跳数是: 2&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>N个实例的每分钟期望的心跳数: 2 * N&lt;/li>
&lt;li>期望的上一分钟最小心跳数: 2 * N * 0.85&lt;/li>
&lt;/ul>
&lt;h3 id="实际的每分钟心跳数">实际的每分钟心跳数&lt;/h3>
&lt;p>正如上面所述, 两个定时调度器独立地运行计算&lt;em>实际&lt;/em>和&lt;em>期望&lt;/em>的心跳数. 此外还有另一个调度任务&lt;code>EvictionTask&lt;/code>进行结果比较, 并识别当前系统是否在自我保护状态.&lt;/p>
&lt;p>这个调度任务每个&lt;code>eviction-interval-timer-in-ms&lt;/code>时间执行一次, 并决定是否驱逐实例.&lt;/p>
&lt;h2 id="结论">结论&lt;/h2>
&lt;ul>
&lt;li>基于使用的经验, 大多数情况下自我保护模式都是错误的, 它错误地认为一些下线的微服务实例是不良的网络分区&lt;/li>
&lt;li>自我保护永远不会过期, 除非下线的实例重新上线&lt;/li>
&lt;li>如果启用了自我保留, 则无法对实例的心跳间隔进行微调, 因为自我保护在计算期望心跳数是按照30s间隔来计算的&lt;/li>
&lt;li>除非环境中经常出现类似的网络分区故障, 否则建议关闭&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>这个值是固定的, 源于默认的心跳间隔是30s, 故每分钟2次. 见eureka-core-1.7.2的&lt;code>AbstractInstanceRegistryL226&lt;/code> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>加速云原生的 Java 开发</title><link>https://atbug.com/speed-up-java-development-on-kubernetes/</link><pubDate>Sat, 21 Dec 2019 20:45:22 +0800</pubDate><guid>https://atbug.com/speed-up-java-development-on-kubernetes/</guid><description>
&lt;p>今天来说说日常在Kubernetes开发Java项目遇到的问题.&lt;/p>
&lt;p>当我们新建一个项目的时候, 总是面临需要新建manifest, 平时都是&lt;code>copy+paste+modify&lt;/code>. 能否以变成的方式来生成?&lt;/p>
&lt;p>开发时的步骤也比较繁琐: &lt;code>docker build&lt;/code>, &lt;code>docker push&lt;/code>, &lt;code>kubectl apple&lt;/code>, &lt;code>kubectl delete pod&lt;/code>. 对于一个Java应用来说还多了一步编译. 操作一次还ok, 但是一天十几次总会有想吐的感觉. 这些步骤能否简化成一个命令, 甚至修改了代码自动就完成上面一系列的操作?&lt;/p>
&lt;p>实现这些我们需要几个工具: &lt;a href="https://github.com/dekorateio/dekorate">dekorate&lt;/a>, &lt;a href="https://github.com/GoogleContainerTools/jib">Jib&lt;/a>, &lt;a href="https://github.com/GoogleContainerTools/skaffold">Skaffold&lt;/a>. 其中Jib也在上一篇文章&lt;a href="https://atbug.com/build-docker-or-oci-image-with-jib-for-java/">使用Jib为Java应用构建镜像&lt;/a>中介绍过.&lt;/p>
&lt;h2 id="dekorate">dekorate&lt;/h2>
&lt;blockquote>
&lt;p>Dekorate is a collection of Java compile-time generators and decorators for Kubernetes/OpenShift manifests.
Dekorate是Java编译时生成和装饰Kubernetes/OpenShift的manifests的工具&lt;/p>
&lt;/blockquote>
&lt;h3 id="快速开始">快速开始&lt;/h3>
&lt;h4 id="1-通过使用spring-initializerhttpsstartspringio生成一个项目spring-boot-222-并加入依赖">1. 通过使用&lt;a href="https://start.spring.io">Spring Initializer&lt;/a>生成一个项目(Spring Boot 2.2.2), 并加入依赖:&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>io.dekorate&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>kubernetes-spring-starter&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>0.10.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-加入一个简单的controller">2. 加入一个简单的&lt;code>Controller&lt;/code>:&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author Addo.Zhang
&lt;/span>&lt;span class="cm"> * @date 2019/12/22
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@RestController&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DekorateExampleController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">hi&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-执行命令mvn-clean-install-然后在targetclassesmeta-infdekorate目录下可以找到kubernetesjson和kubernetesyml两个文件">3. 执行命令&lt;code>mvn clean install&lt;/code>, 然后在&lt;code>target/classes/META-INF/dekorate&lt;/code>目录下可以找到&lt;code>kubernetes.json&lt;/code>和&lt;code>kubernetes.yml&lt;/code>两个文件.&lt;/h4>
&lt;p>&lt;code>kubernetes.yml&lt;/code>的内容:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;v1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Service&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;ClusterIP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;apps/v1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Deployment&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;KUBERNETES_NAMESPACE&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fieldPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;metadata.namespace&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;addo/dekorate-example:0.0.1-SNAPSHOT&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;IfNotPresent&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/info&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;dekorate-example&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;TCP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/health&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>yml中包含了&lt;code>Service&lt;/code>和&lt;code>Deployment&lt;/code>两部分, dekorate完美兼容的Spring:&lt;/p>
&lt;ul>
&lt;li>&lt;code>app: dekorate-example&lt;/code>: 项目名&lt;/li>
&lt;li>&lt;code>version: 0.0.1-SNAPSHOT&lt;/code>: 项目当前版本&lt;/li>
&lt;li>&lt;code>group: addo&lt;/code>: 是我系统当前用户名&lt;/li>
&lt;li>&lt;code>/actuator/health&lt;/code>: Spring Boot 2.2后actuator的health endpoint, 作为&lt;code>readinessProbe&lt;/code>&lt;/li>
&lt;li>&lt;code>/actuator/info&lt;/code>: Spring Boot 2.2后actuator的endpoint, 作为&lt;code>livenessProbe&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="进阶">进阶&lt;/h3>
&lt;p>&lt;strong>前面yml的内容都是自动生成的, 假如有些特殊的需求. 比如修改镜像的&lt;code>repository&lt;/code>即这里的&lt;code>group&lt;/code>, 如何操作?&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">dekorate.kubernetes.group = addozhang
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/5zgkfl.jpg" alt="Change Image Repository">&lt;/p>
&lt;p>&lt;strong>或者修改Service的类型为NodePort&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">dekorate.kubernetes.service-type = NodePort
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/vIen3M.jpg" alt="NodePort Service">&lt;/p>
&lt;h4 id="配置">配置&lt;/h4>
&lt;p>dekoration提供了&lt;a href="https://github.com/dekorateio/dekorate/blob/master/assets/config.md">丰富的配置&lt;/a>来个性化manifest.&lt;/p>
&lt;p>除了上面使用的配置文件(properties/yaml)的方式, 还提供了&lt;code>Annotation&lt;/code>注解配置方式.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">io.dekorate.kubernetes.annotation.Env&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">io.dekorate.kubernetes.annotation.KubernetesApplication&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@KubernetesApplication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">envVars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Env&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;key1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;var1&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//Your code goes here
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/exQoxy.jpg" alt="@KubernetesApplication Annotation">&lt;/p>
&lt;h2 id="jib">Jib&lt;/h2>
&lt;p>Jib的说明请看上一篇文章:&lt;a href="https://atbug.com/build-docker-or-oci-image-with-jib-for-java/">使用Jib为Java应用构建镜像&lt;/a>&lt;/p>
&lt;h3 id="插件配置">插件配置&lt;/h3>
&lt;p>下面是针对该项目添加的配置:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.google.cloud.tools&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jib-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.8.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;container&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Xmx128m&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Xms64m&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/jvmFlags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;labels&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;Author&amp;gt;&lt;/span>Addo.Zhang&lt;span class="nt">&amp;lt;/Author&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/labels&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;creationTime&amp;gt;&lt;/span>USE_CURRENT_TIMESTAMP&lt;span class="nt">&amp;lt;/creationTime&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/container&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;from&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>openjdk:8-jdk-alpine&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/from&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>addo/dekorate-example&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;tags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;tag&amp;gt;&lt;/span>latest&lt;span class="nt">&amp;lt;/tag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/tags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;allowInsecureRegistries&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/allowInsecureRegistries&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令&lt;code>mvn compile jib:dockerBuild&lt;/code>便可以编译代码, 构建镜像并推送到镜像仓库.&lt;/p>
&lt;h2 id="skaffold">Skaffold&lt;/h2>
&lt;p>&lt;a href="https://github.com/GoogleContainerTools/skaffold">Skaffold&lt;/a>也是GoogleContainerTools中的一个工具.&lt;/p>
&lt;blockquote>
&lt;p>Skaffold is a command line tool that facilitates continuous development for Kubernetes applications. You can iterate on your application source code locally then deploy to local or remote Kubernetes clusters. Skaffold handles the workflow for building, pushing and deploying your application. It also provides building blocks and describe customizations for a CI/CD pipeline.
Skaffold是一个命令行工具, 可促进Kubernetes应用程序的持续开发. 可以在本地迭代应用程序源代码, 然后部署到本地或远程Kubernetes集群. Skaffold处理构建, 推送和部署应用程序的工作流程. 它还提供了构建块并描述了CI/CD管道的自定义.&lt;/p>
&lt;/blockquote>
&lt;p>在我们这个例子中, 通过与Jib的联动, 完成编译代码, 构建镜像, 推送镜像, 部署一系列操作.&lt;/p>
&lt;p>![Run](&lt;a href="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/2019-12-23">https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/2019-12-23&lt;/a> 15.12.24.gif)&lt;/p>
&lt;p>截屏中的操作, 因为没有代码改动而不续构建镜像, Skaffold直接从cache中获取镜像并部署到Kubernetes中.&lt;/p>
&lt;h3 id="skaffold操作">Skaffold操作&lt;/h3>
&lt;h4 id="1-执行命令skaffold-init---xxenablejibinit并在提示出输入y">1. 执行命令&lt;code>skaffold init --XXenableJibInit&lt;/code>并在提示出输入&lt;code>y&lt;/code>&lt;/h4>
&lt;h4 id="2-该命令会生成一个名为skaffoldyaml的文件">2. 该命令会生成一个名为&lt;code>skaffold.yaml&lt;/code>的文件&lt;/h4>
&lt;p>由于&lt;code>dekorate&lt;/code>同时生成了&lt;code>json&lt;/code>和&lt;code>yaml&lt;/code>格式的manifest, 被&lt;code>skaffold&lt;/code>检测到. 实际操作中只需要其中一个即可.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">skaffold/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dekorate-example&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">artifacts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">addo/dekorate-example&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">jib&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kubectl&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">manifests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">target/classes/META-INF/dekorate/kubernetes.json&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">target/classes/META-INF/dekorate/kubernetes.yml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-执行skaffold-run">3. 执行&lt;code>skaffold run&lt;/code>&lt;/h4>
&lt;h4 id="4-pod启动完成后-通过kubectl-port-forward-podname-here-8081">4. pod启动完成后, 通过&lt;code>kubectl port-forward PODNAME-HERE 8081&lt;/code>&lt;/h4>
&lt;h4 id="5-请求http-httplocalhost8081">5. 请求&lt;code>http http://localhost:8081&lt;/code>&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/wt2BVU.jpg" alt="">&lt;/p>
&lt;h3 id="进阶-1">进阶&lt;/h3>
&lt;p>Skaffold的功能强大, 目前个人使用的有限, 有时间新开一篇来学习一下.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/FXu4Hy.jpg" alt="">&lt;/p>
&lt;h4 id="cli">CLI&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">➜ ~ skaffold &lt;span class="nb">help&lt;/span>
A tool that facilitates continuous development &lt;span class="k">for&lt;/span> Kubernetes applications.
Find more information at: https://skaffold.dev/docs/getting-started/
End-to-end pipelines:
run Run a pipeline
dev Run a pipeline in development mode
debug &lt;span class="o">[&lt;/span>beta&lt;span class="o">]&lt;/span> Run a pipeline in debug mode
Pipeline building blocks &lt;span class="k">for&lt;/span> CI/CD:
build Build the artifacts
deploy Deploy pre-built artifacts
delete Delete the deployed application
render &lt;span class="o">[&lt;/span>alpha&lt;span class="o">]&lt;/span> Perform all image builds, and output rendered Kubernetes manifests
Getting started with a new project:
init &lt;span class="o">[&lt;/span>alpha&lt;span class="o">]&lt;/span> Generate configuration &lt;span class="k">for&lt;/span> deploying an application
fix Update old configuration to newest schema version
Other Commands:
completion Output shell completion &lt;span class="k">for&lt;/span> the given shell &lt;span class="o">(&lt;/span>bash or zsh&lt;span class="o">)&lt;/span>
config Interact with the Skaffold configuration
credits Export third party notices to given path &lt;span class="o">(&lt;/span>./skaffold-credits by default&lt;span class="o">)&lt;/span>
diagnose Run a diagnostic on Skaffold
version Print the version information
Usage:
skaffold &lt;span class="o">[&lt;/span>flags&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span>
Use &lt;span class="s2">&amp;#34;skaffold &amp;lt;command&amp;gt; --help&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> more information about a given command.
Use &lt;span class="s2">&amp;#34;skaffold options&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> a list of global command-line options &lt;span class="o">(&lt;/span>applies to all commands&lt;span class="o">)&lt;/span>.
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="yaml配置">Yaml配置&lt;/h4>
&lt;p>参考&lt;a href="https://skaffold.dev/docs/references/yaml/">skaffold.yaml&lt;/a>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>文章的开头我们提到如何做到修改代码后自动完成一些列的操作, 通过&lt;code>skaffold dev&lt;/code>就可以实现.&lt;/p>
&lt;p>文章中使用的&lt;code>dekoration-example&lt;/code>可在&lt;a href="https://github.com/addozhang/dekorate-example">GitHub&lt;/a>上找到.&lt;/p></description></item><item><title>使用 Jib 为 Java 应用构建镜像</title><link>https://atbug.com/build-docker-or-oci-image-with-jib-for-java/</link><pubDate>Mon, 09 Dec 2019 10:05:30 +0800</pubDate><guid>https://atbug.com/build-docker-or-oci-image-with-jib-for-java/</guid><description>
&lt;p>&lt;img src="https://github.com/GoogleContainerTools/jib/raw/master/logo/jib-build-docker-java-container-image.png" alt="pic from jib github">&lt;/p>
&lt;p>&lt;a href="https://github.com/GoogleContainerTools/jib">Jib&lt;/a>是Google Container Tools中的一个工具。&lt;/p>
&lt;blockquote>
&lt;p>Jib builds optimized Docker and OCI images for your Java applications without a Docker daemon - and without deep mastery of Docker best-practices. It is available as plugins for Maven and Gradle and as a Java library.&lt;/p>
&lt;p>Jib无需Docker守护程序即可为Java应用程序构建优化的Docker和OCI映像-无需深入了解Docker最佳实践. 它可以作为Maven和Gradle的插件以及Java库使用.&lt;/p>
&lt;/blockquote>
&lt;h2 id="与docker构建流程比较">与Docker构建流程比较&lt;/h2>
&lt;p>Docker镜像构建流程:&lt;/p>
&lt;p>&lt;img src="https://4.bp.blogspot.com/-SXeItzMS_oo/WzVemqaj7CI/AAAAAAAAF_w/t5Lau7EOC84Kywct_OPiDGIomCiFTywgwCLcBGAs/s1600/docker_build_flow.png" alt="pic from Google Cloud Platform Blog">&lt;/p>
&lt;p>Jib构建流程:&lt;/p>
&lt;p>&lt;img src="https://3.bp.blogspot.com/-_qNyJdVno8E/WzVeqmuC5PI/AAAAAAAAF_0/AHaZ1_ZnJmg8eaUnTlUGyUVe06KRmvlYQCLcBGAs/s1600/jib_build_flow.png" alt="">&lt;/p>
&lt;p>&lt;em>(pic from Google Cloud Platform Blog)&lt;/em>&lt;/p>
&lt;h2 id="快速开始">快速开始&lt;/h2>
&lt;p>构建镜像, 并推送到对应的镜像仓库, 比如Docker Hub等, 或者自建仓库.&lt;/p>
&lt;p>&lt;code>mvn compile com.google.cloud.tools:jib-maven-plugin:1.8.0:build -Dimage=&amp;lt;MY IMAGE&amp;gt;&lt;/code>&lt;/p>
&lt;p>假如要构建到Docker守护进程的话:&lt;/p>
&lt;p>&lt;code>mvn compile com.google.cloud.tools:jib-maven-plugin:1.8.0:dockerBuild&lt;/code>&lt;/p>
&lt;h3 id="插件">插件&lt;/h3>
&lt;h4 id="设置">设置&lt;/h4>
&lt;p>&lt;code>pom.xml&lt;/code>中使用&lt;code>jib-maven-plugin&lt;/code>插件.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;project&amp;gt;&lt;/span>
...
&lt;span class="nt">&amp;lt;build&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;plugins&amp;gt;&lt;/span>
...
&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.google.cloud.tools&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jib-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.8.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>myimage&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
...
&lt;span class="nt">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/build&amp;gt;&lt;/span>
...
&lt;span class="nt">&amp;lt;/project&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="插件配置">插件配置&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.google.cloud.tools&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jib-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>${jib.maven-plugin-version}&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;container&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Xmx1024m&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Xms512m&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:NewRatio=1&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:+UseConcMarkSweepGC&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:CMSInitiatingOccupancyFraction=75&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:+UseCMSInitiatingOccupancyOnly&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:ReservedCodeCacheSize=128M&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:ParallelGCThreads=2&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-XX:+ExplicitGCInvokesConcurrent&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Duser.timezone=Asia/Shanghai&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jvmFlag&amp;gt;&lt;/span>-Djava.security.egd=file:/dev/./urandom&lt;span class="nt">&amp;lt;/jvmFlag&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/jvmFlags&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;labels&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;Author&amp;gt;&lt;/span>Addo.Zhang&lt;span class="nt">&amp;lt;/Author&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/labels&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;user&amp;gt;&lt;/span>apps&lt;span class="nt">&amp;lt;/user&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;appRoot&amp;gt;&lt;/span>/home/apps/local&lt;span class="nt">&amp;lt;/appRoot&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;workingDirectory&amp;gt;&lt;/span>/home/apps/local&lt;span class="nt">&amp;lt;/workingDirectory&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;creationTime&amp;gt;&lt;/span>USE_CURRENT_TIMESTAMP&lt;span class="nt">&amp;lt;/creationTime&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/container&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;from&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>PRIVATE_REGISTRY/REPOSITORY/GLOBAL_BASE:1.0.0&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;auth&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;username&amp;gt;&lt;/span>USERNAME&lt;span class="nt">&amp;lt;/username&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;password&amp;gt;&lt;/span>PASSWORD&lt;span class="nt">&amp;lt;/password&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/auth&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/from&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;image&amp;gt;&lt;/span>PRIVATE_REGISTRY/REPOSITORY/${project.artifactId}&lt;span class="nt">&amp;lt;/image&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;auth&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;username&amp;gt;&lt;/span>USERNAME&lt;span class="nt">&amp;lt;/username&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;password&amp;gt;&lt;/span>PASSWORD&lt;span class="nt">&amp;lt;/password&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/auth&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/to&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;allowInsecureRegistries&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/allowInsecureRegistries&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意: 如果你的私库是insecure的, 需要指定&lt;code>allowInsecureRegistries&lt;/code>为true. 同时命令行构建的时候添加&lt;code>-DsendCredentialsOverHttp=true&lt;/code>&lt;/p>
&lt;p>更多的配置参见&lt;a href="https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin">官方文档&lt;/a>&lt;/p></description></item><item><title>Spring Cloud Hoxton发布</title><link>https://atbug.com/spring-cloud-hoxton-release/</link><pubDate>Wed, 04 Dec 2019 11:09:07 +0800</pubDate><guid>https://atbug.com/spring-cloud-hoxton-release/</guid><description>
&lt;p>&lt;a href="https://spring.io/blog/2019/11/28/spring-cloud-hoxton-released">原文&lt;/a>&lt;/p>
&lt;p>Spring Cloud Hoxton.RELEASE基于Spring Boot 2.2.1.RELEASE&lt;/p>
&lt;h3 id="文档变化">文档变化&lt;/h3>
&lt;p>Hoxton.RELEASE使用了新的&lt;a href="https://cloud.spring.io/spring-cloud-static/Hoxton.RELEASE/reference/html/spring-cloud.html">首页&lt;/a>, 新的样式以及单页面, 多页面和PDF版本.&lt;/p>
&lt;h3 id="新的负载均衡器实现">新的负载均衡器实现&lt;/h3>
&lt;p>Hoxton.RELEASE是第一个包含阻塞和非阻塞客户端负载均衡器实现的版本, 替代进入维护状态的Netflix Ribbon.&lt;/p>
&lt;p>搭配&lt;code>BlockingLoadBalancerClient&lt;/code>使用&lt;code>RestTemplate&lt;/code>, 需要在classpath中引入&lt;code>org.springframework.cloud:spring-cloud-loadbalancer&lt;/code>. 这个依赖同样用于使用了&lt;code>@LoadBalanced WebClient.Builder&lt;/code>的响应式应用中. 唯一的区别是Spring Cloud会自动配置&lt;code>ReactorLoadBalancerExchangeFilterFunction&lt;/code>实例. 更多内容查看&lt;a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-commons/2.2.0.M2/reference/html/#_spring_resttemplate_as_a_load_balancer_client">文档&lt;/a>. 新的&lt;code>ReactorLoadBalancerExchangeFilterFunction&lt;/code>可用于自动装配并自动传递给&lt;code>WebClient.Builder&lt;/code>(&lt;a href="https://cloud.spring.io/spring-cloud-commons/reference/html/#webflux-with-reactive-loadbalancer">文档&lt;/a>).&lt;/p>
&lt;h3 id="spring-cloud-netflix">Spring Cloud Netflix&lt;/h3>
&lt;ul>
&lt;li>增加了新的&lt;code>ReactiveDiscoveryClient&lt;/code>, 同时增加了新的Spring Cloud Circuit Breaker API的Hystrix实现.&lt;/li>
&lt;li>增加&lt;a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.0.RC2/reference/html/#disabling-spring-cloud-circuit-breaker-hystrix">配置项&lt;/a>&lt;code>spring.cloud.circuitbreaker.hystrix.enabled&lt;/code>来禁用Spring Cloud CircuitBreaker Hystrix的自动配置.&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-cloudfoundry">Spring Cloud Cloudfoundry&lt;/h3>
&lt;p>支持新的&lt;code>ReactiveDiscoveryClient&lt;/code>&lt;/p>
&lt;h3 id="spring-cloud-bus">Spring Cloud Bus&lt;/h3>
&lt;p>文档更新&lt;/p>
&lt;h3 id="spring-cloud-vault">Spring Cloud Vault&lt;/h3>
&lt;ul>
&lt;li>在Pivotal应用程序服务)以前的PCF)中运行的应用程序可以利用容器的身份来使用保险柜的PCF身份验证支持进行身份验证&lt;/li>
&lt;li>使用X-Vault-Namespace标头支持Vault名称空间(Vault Enterprise功能)&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-kubernetes">Spring Cloud Kubernetes&lt;/h3>
&lt;p>支持新的&lt;code>ReactiveDiscoveryClient&lt;/code>&lt;/p>
&lt;h3 id="spring-cloud-contract">Spring Cloud Contract&lt;/h3>
&lt;ul>
&lt;li>完整的文档重写&lt;/li>
&lt;li>主要测试类生成重构&lt;/li>
&lt;li>从Groovy到Java的大量重写&lt;/li>
&lt;li>添加了对使用Kotlin和Java编写合同的支持&lt;/li>
&lt;li>在合同DSL和运行时存根生成中添加了inProgress标志&lt;/li>
&lt;li>增加了对生成测试的TestNG支持&lt;/li>
&lt;li>许多库版本增量(包括Groovy, WireMock和Pact)&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-consul">Spring Cloud Consul&lt;/h3>
&lt;p>支持新的&lt;code>ReactiveDiscoveryClient&lt;/code>以及Consul的一致性模型&lt;/p>
&lt;h3 id="spring-cloud-config">Spring Cloud Config&lt;/h3>
&lt;ul>
&lt;li>新的环境仓库支持AWS S3&lt;/li>
&lt;li>添加了解密纯文本属性的功能&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-gcp">Spring Cloud Gcp&lt;/h3>
&lt;ul>
&lt;li>添加BigQuery模块&lt;/li>
&lt;li>为Cloud Foundry创建了一个单独的启动器：&lt;code>spring-cloud-gcp-starter-cloudfoundry&lt;/code>&lt;/li>
&lt;li>可以浏览&lt;a href="https://github.com/spring-cloud/spring-cloud-gcp/blob/master/CHANGELOG.adoc#120release-2019-11-26">变更日志&lt;/a>文档以获取更多信息&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-stream">Spring Cloud Stream&lt;/h3>
&lt;p>从annotation-driven过度到了更加简单的函数式.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://spring.io/blog/2019/10/14/spring-cloud-stream-demystified-and-simplified">Spring Cloud Stream - demystified and simplified&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://spring.io/blog/2019/10/17/spring-cloud-stream-functional-and-reactive">Spring Cloud Stream - functional and reactive&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://spring.io/blog/2019/10/25/spring-cloud-stream-and-spring-integration">Spring Cloud Stream - and Spring Integration&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://spring.io/blog/2019/10/31/spring-cloud-stream-event-routing">Spring Cloud Stream - Event Routing&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-commons">Spring Cloud Commons&lt;/h3>
&lt;p>引入阻塞和非阻塞客户端负载均衡器实现, 来替代进入维护状态的Netflix Ribbon.&lt;/p>
&lt;h3 id="spring-cloud-openfeign">Spring Cloud Openfeign&lt;/h3>
&lt;ul>
&lt;li>Openfeign升级到10.4.0&lt;/li>
&lt;li>支持Spring Cloud LoadBalancer&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-task">Spring Cloud Task&lt;/h3>
&lt;ul>
&lt;li>支持Micrometer&lt;/li>
&lt;li>更新文档&lt;/li>
&lt;li>使用Spring Batch分区时启动的任务应用现在加入了external-execution-id&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-sleuth">Spring Cloud Sleuth&lt;/h3>
&lt;ul>
&lt;li>加入对最新的Brave(包括消息采样)的支持&lt;/li>
&lt;li>添加了onLastOperator Reactor跟踪选项，以提高性能&lt;/li>
&lt;li>添加了Redis跟踪&lt;/li>
&lt;li>将默认采样器设置为限速采样器&lt;/li>
&lt;li>添加了对AWS SQS跟踪的支持&lt;/li>
&lt;li>增加了对Quartz跟踪的支持&lt;/li>
&lt;li>添加了进程内传播机制&lt;/li>
&lt;li>默认为Zipkin报告的Micrometer指标&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-aws">Spring Cloud AWS&lt;/h3>
&lt;p>Bug修复&lt;/p>
&lt;h3 id="spring-cloud-zookeeper">Spring Cloud Zookeeper&lt;/h3>
&lt;p>支持新的&lt;code>ReactiveDiscoveryClient&lt;/code>&lt;/p>
&lt;h3 id="spring-cloud-security">Spring Cloud Security&lt;/h3>
&lt;p>Bug修复&lt;/p>
&lt;h3 id="spring-cloud-curcuitbreaker">Spring Cloud CurcuitBreaker&lt;/h3>
&lt;p>引入新的项目Spring Cloud CircuitBreaker, 这个项目包含的抽象的API用于在项目中使用断路器. 支持该API的实现:&lt;/p>
&lt;ul>
&lt;li>Resilience4j&lt;/li>
&lt;li>Spring Retry&lt;/li>
&lt;li>Hystrix (in &lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-hystrix/src/main/java/org/springframework/cloud/netflix/hystrix/HystrixCircuitBreaker.java">spring-cloud-netflix&lt;/a>)&lt;/li>
&lt;li>Sentinel (in &lt;a href="https://github.com/alibaba/spring-cloud-alibaba/tree/master/spring-cloud-alibaba-sentinel">spring-cloud-alibaba&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://spring.io/blog/2019/04/16/introducing-spring-cloud-circuit-breaker">更多信息&lt;/a>&lt;/p>
&lt;ul>
&lt;li>时添加了自动配置, 在使用Resilience4J收集断路器的指标数据&lt;/li>
&lt;li>升级到Resilience4J 1.1.0&lt;/li>
&lt;li>添加配置项禁用REsilience4J的自动配置&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cloud-function">Spring Cloud Function&lt;/h3>
&lt;p>添加了更多新特性:&lt;/p>
&lt;ul>
&lt;li>透明类型转换&lt;/li>
&lt;li>函数路由&lt;/li>
&lt;li>函数参数&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://spring.io/blog/2019/11/25/announcing-the-release-of-spring-cloud-function-3-0-0-release">更多详细信息&lt;/a>&lt;/p>
&lt;h3 id="spring-cloud-gateway">Spring Cloud Gateway&lt;/h3>
&lt;ul>
&lt;li>支持新的&lt;code>ReactiveDiscoveryClient&lt;/code>&lt;/li>
&lt;li>RSocket模块迁移到了自己维护的位于Spring Cloud Incubator organization项目中&lt;/li>
&lt;li>通过增加的使用了新Spring Cloud CircuitBreaker库过滤器为路由提供断路器功能&lt;/li>
&lt;/ul></description></item><item><title>Bose QC35 固件降级</title><link>https://atbug.com/bose-qc35-downgrade/</link><pubDate>Sun, 10 Nov 2019 19:50:27 +0800</pubDate><guid>https://atbug.com/bose-qc35-downgrade/</guid><description>
&lt;p>为什么要降级? 既然已经搜到了这里, 相信个中原因也都清楚.&lt;/p>
&lt;p>我的QC35一代, 之前升级到了3.0.3固件. 目前已成功降级到了1.0.6, 下面的操作步骤Mac OSX的, 作者也提供了&lt;a href="https://github.com/bosefirmware/ced/blob/master/README.md">Windows上的操作步骤&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/LaTKaT.jpg" alt="">&lt;/p>
&lt;h3 id="操作步骤">操作步骤&lt;/h3>
&lt;ol>
&lt;li>确认已经卸载Bose Updater&lt;/li>
&lt;li>GitHub上下载作者已经改好的&lt;a href="https://github.com/bosefirmware/ced/raw/master/BOSEUPDATER.EXE">6.0.0.4388&lt;/a>版本的Bose Updater&lt;/li>
&lt;li>解压后复制到&lt;code>/Applications&lt;/code>下&lt;/li>
&lt;li>运行Bose Updater确认能否正常运行&lt;/li>
&lt;li>退出 (右键&amp;gt;Exit)&lt;/li>
&lt;li>检查是否还有Bose Updater的进程&lt;/li>
&lt;li>打开&lt;code>https://btu.bose.com/&lt;/code>&lt;/li>
&lt;li>页面上选择&lt;code>Launch&lt;/code> Bose Updater&lt;/li>
&lt;li>看到下面界面(借用作者的图)时, 键盘上依次按: a, d, v, 方向上, 方向下
&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/QqtGw0.jpg" alt="">&lt;/li>
&lt;li>接下来会看到下面界面(借用作者的图)
&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/GUHIVT.jpg" alt="">&lt;/li>
&lt;li>可以从下拉列表中选择版本进行升/降级&lt;/li>
&lt;li>等待升/降级完成&lt;/li>
&lt;li>卸载手机app (我是卸载了, 防止再次手贱)&lt;/li>
&lt;/ol>
&lt;h3 id="参考">参考&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.reddit.com/r/bose/comments/cw47fx/githubcombosefirmware/">Reddit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/bosefirmware/ced">GitHub&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docker Engine API on Mac Osx</title><link>https://atbug.com/docker-engine-api-on-mac-osx/</link><pubDate>Wed, 06 Nov 2019 20:19:50 +0800</pubDate><guid>https://atbug.com/docker-engine-api-on-mac-osx/</guid><description>
&lt;p>根据官方的文档&lt;a href="https://docs.docker.com/docker-for-mac/docker-toolbox/">Docker Desktop on Mac vs. Docker Toolbox&lt;/a>, Docker Desktop on Mac只提供了UNIX socket&lt;code>/var/run/docker.sock&lt;/code>, 并未提供tcp的监听(默认2375端口).&lt;/p>
&lt;p>&lt;strong>如果使用linux的配置方式在&lt;code>Docker Desktop&lt;/code>中配置&lt;code>host&lt;/code>, &lt;code>Docker Desktop&lt;/code>将无法启动. 需要去&lt;code>~/.docker/daemon.json&lt;/code>中删除&lt;code>hosts&lt;/code>配置才能正常启动.&lt;/strong>&lt;/p>
&lt;p>通过下面的方式暴露出2375的tcp&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker run --rm -d -v /var/run/docker.sock:/var/run/docker.sock -p 127.0.0.1:2375:2375 bobrik/socat TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后通过&lt;code>docker version&lt;/code>查看当前的docker engine的版本, 比如1.40. 查看官方的Engine API文档: &lt;a href="https://docs.docker.com/engine/api/v1.40">https://docs.docker.com/engine/api/v1.40&lt;/a>&lt;/p>
&lt;p>搜索个镜像测试一下:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/15729240620185.jpg" alt="">&lt;/p></description></item><item><title>Spring Boot 2.2.0 发布</title><link>https://atbug.com/spring-boot-2-2-0-release/</link><pubDate>Tue, 22 Oct 2019 09:27:03 +0800</pubDate><guid>https://atbug.com/spring-boot-2-2-0-release/</guid><description>
&lt;p>译自: &lt;a href="https://spring.io/blog/2019/10/16/spring-boot-2-2-0">https://spring.io/blog/2019/10/16/spring-boot-2-2-0&lt;/a>&lt;/p>
&lt;h3 id="组件升级">组件升级&lt;/h3>
&lt;ul>
&lt;li>Spring AMQP 2.2&lt;/li>
&lt;li>Spring Batch 4.2&lt;/li>
&lt;li>Spring Data Moore&lt;/li>
&lt;li>Spring Framework 5.2&lt;/li>
&lt;li>Spring HATEOAS 1.0&lt;/li>
&lt;li>Spring Integration 5.2&lt;/li>
&lt;li>Spring Kafka 2.3&lt;/li>
&lt;li>Spring Security 5.2&lt;/li>
&lt;li>Spring Session Corn&lt;/li>
&lt;/ul>
&lt;h3 id="第三方库升级">第三方库升级&lt;/h3>
&lt;ul>
&lt;li>Elasticsearch 6.7&lt;/li>
&lt;li>Flyway 6.0&lt;/li>
&lt;li>Jackson 2.10&lt;/li>
&lt;li>JUnit 5.5&lt;/li>
&lt;li>Micrometer 1.3&lt;/li>
&lt;li>Reactor Dysprosium&lt;/li>
&lt;li>Solr 8.0&lt;/li>
&lt;/ul>
&lt;h3 id="性能提升">性能提升&lt;/h3>
&lt;h4 id="延迟初始化lazy-initialization">延迟初始化(Lazy initialization)&lt;/h4>
&lt;p>支持开启全局延迟加载&lt;code>spring.main.lazy-initialization&lt;/code>. 代价:&lt;/p>
&lt;ul>
&lt;li>初次处理HTTP请求耗时长&lt;/li>
&lt;li>本应在启动初始化时出现的问题, 延后出现&lt;/li>
&lt;/ul>
&lt;p>更多参考: &lt;a href="https://spring.io/blog/2019/03/14/lazy-initialization-in-spring-boot-2-2">https://spring.io/blog/2019/03/14/lazy-initialization-in-spring-boot-2-2&lt;/a>&lt;/p>
&lt;h3 id="java-13支持">Java 13支持&lt;/h3>
&lt;p>跟随Spring Framework5.2对Java 13的支持, Spring Boot 2.2现在也支持了Java13. 同时兼容Java 11和8.&lt;/p>
&lt;h3 id="不可变的configurationproperties绑定">不可变的&lt;code>@ConfigurationProperties&lt;/code>绑定&lt;/h3>
&lt;p>现在加入了基于构造器的绑定, 允许&lt;code>@ConfigurationProperties&lt;/code>标注的类不可变(属性不可变).&lt;/p>
&lt;p>可通过&lt;code>@ConfigurationProperties&lt;/code>标注类, 或者使用&lt;code>@ConstructorBinding&lt;/code>标注构造器来开启.&lt;/p>
&lt;p>额外的注解如&lt;code>@DefaultValue&lt;/code>, &lt;code>@DateTimeFormt&lt;/code>可对构造参数进行配置.&lt;/p>
&lt;p>更多参考: &lt;a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config-constructor-binding">https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config-constructor-binding&lt;/a>&lt;/p>
&lt;h3 id="rscoket支持">RScoket支持&lt;/h3>
&lt;p>使用新的starter&lt;code>spring-boot-starter-rsocket&lt;/code>自动配置.&lt;/p>
&lt;p>Spring Security的RScoket集成在classpath中存在&lt;code>spring-security-rsocket&lt;/code>时自动完成配置.&lt;/p>
&lt;p>更多参考: &lt;a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html//spring-boot-features.html#boot-features-rsocket">https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html//spring-boot-features.html#boot-features-rsocket&lt;/a>&lt;/p>
&lt;h3 id="健康指示器分组">健康指示器分组&lt;/h3>
&lt;p>支持对健康指示器(Health Indicator)进行分组. 比如将应用部署到Kubernetes时, 希望针对&amp;quot;liveness&amp;quot;和&amp;quot;readiness&amp;quot;对指示器进行分组&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">management.endpoint.health.group.custom.include=db
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查时使用&lt;code>localhost:8080/actuator/health/custom&lt;/code>&lt;/p>
&lt;p>更多参考: &lt;a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html//production-ready-features.html#health-groups">https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html//production-ready-features.html#health-groups&lt;/a>&lt;/p>
&lt;h3 id="其他变化">其他变化&lt;/h3>
&lt;p>参考: &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes&lt;/a>&lt;/p></description></item><item><title>Zipkin dependencies的坑之二: 心跳超时和Executor OOM</title><link>https://atbug.com/zipkin-dependencies-bug-two-timeout-and-oom/</link><pubDate>Sun, 22 Sep 2019 18:27:37 +0800</pubDate><guid>https://atbug.com/zipkin-dependencies-bug-two-timeout-and-oom/</guid><description>
&lt;p>上回说为了解决吞吐问题, 将&lt;a href="https://github.com/openzipkin/zipkin-dependencies">zipkin-dependencies&lt;/a>的版本升级到了2.3.0.&lt;/p>
&lt;p>好景不长, 从某一天开始作业运行报错:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Issue communicating with driver in heartbeater
org.apache.spark.rpc.RpcTimeoutException: Futures timed out after [10000 milliseconds]. This timeout is controlled by spark.executor.heartbeatInterval
...
19/09/18 08:33:20 ERROR Executor: Exception in task 1.0 in stage 1.0 (TID 4)
java.lang.OutOfMemoryError: Java heap space
...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解决方案">解决方案&lt;/h3>
&lt;p>最新版本(2.3.0)目前不支持额外的spark和elasticsearch-spark的配置, 已经提交了&lt;a href="https://github.com/openzipkin/zipkin-dependencies/pull/151">PR&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>超时的解决方案: 为spark指定配置&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">spark.executor.heartbeatInterval=600000
spark.network.timeout=600000
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>OOM解决方案: 根据实际情况通过&lt;code>es.input.max.docs.per.partition&lt;/code>配置executor的数量. 调整运行内存及&lt;code>spark.executor.memory&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Zipkin dependencies的坑之一: 耗时越来越长</title><link>https://atbug.com/zipkin-dependencies-bug-one/</link><pubDate>Sun, 22 Sep 2019 17:59:56 +0800</pubDate><guid>https://atbug.com/zipkin-dependencies-bug-one/</guid><description>
&lt;p>zipkin-dependencies是zipkin调用链的依赖分析工具.&lt;/p>
&lt;p>系统上线时使用了当时的最新版本&lt;code>2.0.1&lt;/code>, 运行一年之后随着服务的增多, 分析一天的数据耗时越来越多. 从最初的几分钟, 到最慢的几十小时(数据量18m).&lt;/p>
&lt;p>最终返现是版本的问题, 升级到&amp;gt;=&lt;code>2.3.0&lt;/code>的版本之后吞吐迅速上升.&lt;/p>
&lt;p>所以便有了issue: &lt;a href="https://github.com/openzipkin/zipkin-dependencies/issues/149">Reminder: do NOT use the version before 2.3.0&lt;/a>&lt;/p>
&lt;p>但这也引来了另一个坑: &lt;a href="https://atbug.com/zipkin-dependencies-bug-two-timeout-and-oom/">心跳超时和Executor OOM&lt;/a>&lt;/p>
&lt;h3 id="tldr">TL;DR&lt;/h3>
&lt;p>简单浏览了下zipkin-dependencies的源码, 2.0.1和2.3.2的比较大的差距是依赖的&lt;code>elasticsearch-spark&lt;/code>的版本. 前者用的是&lt;code>6.3.2&lt;/code>, 后者是&lt;code>7.3.0&lt;/code>.&lt;/p>
&lt;p>尝试在&lt;code>zipkin-dependencies-2.0.1&lt;/code>中使用&lt;code>elasticsearch-spark-7.3.0&lt;/code>, 和&lt;code>2.3.2&lt;/code>的性能一直.&lt;/p>
&lt;p>通过打开log4j debug日志, 发现到&lt;code>elasticsearch-spark&lt;/code>两个版本的运行差异:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#7.3.0
19/09/05 18:13:14 INFO DAGScheduler: Submitting 3 missing tasks from ShuffleMapStage 0 (MapPartitionsRDD[1] at groupBy at ElasticsearchDependenciesJob.java:185) (first 15 tasks are for partitions Vector(0, 1, 2))
#6.3.2
19/09/05 18:09:56 INFO DAGScheduler: Submitting 214 missing tasks from ShuffleMapStage 0 (MapPartitionsRDD[1] at groupBy at ElasticsearchDependenciesJob.java:185) (first 15 tasks are for partitions Vector(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="restservicefindpartitionsl268的源码">&lt;code>RestService#findPartitions()L268&lt;/code>的源码:&lt;/h4>
&lt;p>&lt;code>7.3.0&lt;/code>
&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/rXGrya.jpg" alt="">&lt;/p>
&lt;p>&lt;code>6.3.2&lt;/code>
&lt;img src="https://raw.githubusercontent.com/addozhang/oss/master/blog/upload/wswyzO.jpg" alt="">&lt;/p>
&lt;p>7.x &lt;code>es.input.max.docs.per.partition&lt;/code>为&lt;code>null&lt;/code> 计算出partitions=3 (实际分区数为3, 使用方法&lt;code>#findShardPartitions()&lt;/code>)
6.x &lt;code>es.input.use.sliced.partitions&lt;/code>为&lt;code>true&lt;/code>, 计算出partitions=214 (使用方法&lt;code>#findSlicePartitions()&lt;/code>)&lt;/p>
&lt;p>在7.x中, 可以通过设置&lt;code>es.input.max.docs.per.partition&lt;/code>的值来设置切片数量(对单个partition进行切分, 通过增加并行任务数量来提高吞吐)&lt;/p>
&lt;p>**该行代码的commit message: **&lt;/p>
&lt;blockquote>
&lt;p>Remove default setting for max documents per partition We added support for sliced scrolls back in 5.0, which allows subdividing scrolls into smaller input splits. there are some cases where the added subdivision of the scroll operations causes high amounts of overhead when reading very large shards. in most cases, shards should be small enough that a regular read operation over them should complete in reasonable time. In order to avoid performance degradation at higher levels, we are removing the default value of 100k from this setting, and instead, checking if it is set. Additionally, the &amp;lsquo;es.input.use.sliced.partitions&amp;rsquo; setting has been removed as it is now redundant.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/elastic/elasticsearch-hadoop/issues/1196">关联的issue#1196&lt;/a>&lt;/p></description></item><item><title>如何选择Kafka Topic的分区数</title><link>https://atbug.com/how-to-choose-topic-partition-count-number-kafka/</link><pubDate>Fri, 30 Aug 2019 11:10:46 +0800</pubDate><guid>https://atbug.com/how-to-choose-topic-partition-count-number-kafka/</guid><description>
&lt;p>在kafka中, topic的分区是并行计算的单元. 在producer端和broker端, 可以同时并发的写数据到不同的分区中.
在consumer端, Kafka总是将某个分区分配个一个consumer线程. 因此同一个消费组内的并行度与分区数息息相关.&lt;/p>
&lt;p>Partition分区数的大小, 更多直接影响到消费端的吞吐(一个分区只能同一消费组的一个消费者消费). 分区数小, 消费端的吞吐就低. 但是太大也会有其他的影响&lt;/p>
&lt;p>原则:&lt;/p>
&lt;ul>
&lt;li>更多的分区可提高吞吐量&lt;/li>
&lt;li>分区数越多打开的文件句柄越多&lt;/li>
&lt;li>分区数越多降低可用性&lt;/li>
&lt;li>更多的分区增加端到端的延迟&lt;/li>
&lt;li>客户端需要更多的内存&lt;/li>
&lt;/ul>
&lt;p>归根结底还是得有个度. 如何找出这个度?&lt;/p>
&lt;p>有个粗略的计算公式: &lt;code>max(t/p, t/c)&lt;/code>. &lt;code>t&lt;/code>就是所预期吞吐量, &lt;code>p&lt;/code>是当前生产端单个分区的吞吐, 那&lt;code>c&lt;/code>就是消费端单个分区的吞吐.&lt;/p>
&lt;p>比如单个partition的生产端吞吐是200, 消费端是100. 预期的吞吐是500, 那么partition的数量就是5.&lt;/p>
&lt;p>单个分区的吞吐通常通过修改配置来提升, 比如生产端的批处理大小, 压缩算法, acknowledgement类型, 副本数等. 而在消费端则更依赖于消息的处理速度.&lt;/p>
&lt;h3 id="参考">参考&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.confluent.io/blog/how-choose-number-topics-partitions-kafka-cluster">Confluent博客&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://engineering.linkedin.com/kafka/benchmarking-apache-kafka-2-million-writes-second-three-cheap-machines">Linkedin的benchmark&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>博客最近半年没什么产出</title><link>https://atbug.com/no-output-in-past-half-year/</link><pubDate>Tue, 27 Aug 2019 14:29:12 +0000</pubDate><guid>https://atbug.com/no-output-in-past-half-year/</guid><description>
&lt;p>上一篇日志更新还是在去年的12月, 至今有差不多10个月没有更新了.&lt;/p>
&lt;p>不是说没有东西可写, 而且想写的东西很多. 工作太忙, 不忙的时候又太懒, 归根结底还是太懒.&lt;/p>
&lt;p>过去一年多都是在做基础架构方面的工作, 围绕技术中台展开的. 有很多技术需要去学习, 也有很多问题要处理. 过程中一直有记笔记的习惯, 所以可以写的东西很多. 不过有些属于公司的部分还是不能写的, 必要的职业道德还是要有的.&lt;/p>
&lt;p>笔记记录一直在用&lt;a href="https://zh.mweb.im">MWeb&lt;/a>, 并使用iCloud同步, 最近几个月也在结合&lt;a href="https://mubu.com">幕布&lt;/a>整理思路和工作安排. 好用的软件我也比较喜欢分享, 记得最早在Workpress上的博客就分享了很多自己常用的软件. (有点扯远了~~~)&lt;/p>
&lt;p>MWeb没有统计功能, 还有使用的是sqlite. 简单sql查询了下, 从去年这份工作开始有244篇笔记. 今年到现在有109篇. 当然有些笔记的内容比较少, 不得不说这一年多收获甚多.&lt;/p>
&lt;p>为什么今天又写了这么一篇, 源于阮一峰的&lt;a href="http://www.ruanyifeng.com/blog/2019/08/weekly-issue-69.html">科技爱好者周刊：第 69 期&lt;/a>.&lt;/p>
&lt;p>刊首语是&amp;quot;一件事&amp;quot;做得好&amp;quot;比较好，还是&amp;quot;做得快&amp;quot;比较好？&amp;quot;, 直接copy他的结论.&lt;/p>
&lt;blockquote>
&lt;p>我很赞同&lt;a href="http://jsomers.net/blog/speed-matters">一篇文章&lt;/a>的结论：做得快更好。&lt;/p>
&lt;blockquote>
&lt;p>做得快不仅可以让你在单位时间内完成更多的工作，而且 &lt;strong>因为你工作得很快，所以你会觉得成本低，从而倾向于做更多。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>写一篇博客，你可能需要两天。这是很高的时间成本，你觉得太贵了，于是你很少写。但是，&lt;strong>做好一件事的唯一方法，就是多做这件事。&lt;/strong> 做得越快，这件事的时间成本就越低，你会愿意做得更多。&lt;/p>
&lt;p>人们总是倾向于，多消费时间成本低的东西。网站很快，就会多访问；搜索很快，就会多搜索；文章很容易读懂，就会多读几篇。做得快的核心，就是要让时间成本降下来，从而多做。&lt;/p>
&lt;/blockquote>
&lt;p>之前写博客的时候, 确实投入很多. 笔记记录的时候很随意, 但是发到博客中又要花不少的时间来整理语言. 总想写的大而美, 也正是因为这个原因导致大半年没有更新(其实也还是懒), 每次想写都因为要花时间而萌生退意.&lt;/p>
&lt;p>所以今后还是多写写, 小而美.&lt;/p>
&lt;p>虽然大半年没更新, 访问量居然还有提升.&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2019/08/27/XyNqw2HtTxFK6pP.jpg" alt="google analytics">&lt;/p></description></item><item><title>Spring Boot源码分析 - Configuration注解</title><link>https://atbug.com/spring-boot-configuration-annotation/</link><pubDate>Mon, 10 Dec 2018 16:24:33 +0000</pubDate><guid>https://atbug.com/spring-boot-configuration-annotation/</guid><description>
&lt;h1 id="configuration注解">@Configuration注解&lt;/h1>
&lt;p>&lt;code>@Configuration&lt;/code>注解指示一个类声明一个或多个@Bean方法, 并且可以由Spring容器处理, 以在运行时为这些bean生成bean定义和服务请求.&lt;/p>
&lt;p>使用&lt;code>ConfigurationClassParser&lt;/code>来对&lt;code>@Configuration&lt;/code>标注的类进行解析, 封装成&lt;code>ConfigurationClass&lt;/code>实例. 具体的实现通过&lt;code>ConfigurationClassPostProcessor&lt;/code>来实现的.&lt;/p>
&lt;h2 id="configurationclasspostprocessor">ConfigurationClassPostProcessor&lt;/h2>
&lt;p>实现了&lt;code>BeanDefinitionRegistryPostProcessor&lt;/code>接口, 间接实现了&lt;code>BeanFactorPostProcessor&lt;/code>接口.&lt;/p>
&lt;ul>
&lt;li>&lt;code>#postProcessBeanDefinitionRegistry()&lt;/code>: 注册所有&lt;code>ConfigurationClass&lt;/code>中的&lt;code>BeanDefinition&lt;/code>, 包括&lt;code>@Bean&lt;/code>注解的方法, &lt;code>@ImporResource&lt;/code>引入的资源中定义的bean, 和&lt;code>@Import&lt;/code>注解引入的&lt;code>ImportBeanDefinitionRegistrar&lt;/code>中注册的&lt;code>BeanDefinition&lt;/code>&lt;/li>
&lt;li>&lt;code>#postProcessBeanFactory()&lt;/code>: 在运行时以通过&lt;code>cglig&lt;/code>增强的类来替换&lt;code>ConfigurationClass&lt;/code>, 为服务bean请求做准备. 增强的实现是通过&lt;code>ConfigurationClassEnhancer&lt;/code>完成的.&lt;/li>
&lt;/ul>
&lt;p>插入一点, &lt;code>ConfigurationClassEnhancer&lt;/code>实现了直接使用bean注册方法来获取bean的操作, 提供了一个&lt;code>BeanMethodInterceptor&lt;/code>的内部类来实行.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Config&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="nf">a&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">B&lt;/span> &lt;span class="nf">b&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setA&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="full-configurationclass-vs-lite-configurationclass">Full ConfigurationClass VS Lite ConfigurationClass&lt;/h3>
&lt;p>先说区别: full的&lt;code>ConfigurationClass&lt;/code>会使用CGLIB进行增强.&lt;/p>
&lt;p>查看类&lt;code>ConfigurationClassUtils&lt;/code>, 其中有两个方法&lt;code>#isFullConfigurationClass()&lt;/code>和&lt;code>#isLiteConfigurationClass()&lt;/code>.&lt;/p>
&lt;p>方法的实现是去检查&lt;code>BeanDefinition&lt;/code>中的&lt;code>ConfigurationClassPostProcessor.configurationClass&lt;/code>属性, 是&lt;code>full&lt;/code>还是&lt;code>lite&lt;/code>.&lt;/p>
&lt;p>这个属性的值又来源于&lt;code>#checkConfigurationClassCandidate()&lt;/code>方法, 如果&lt;code>BeanDefinition&lt;/code>使用的是&lt;code>@Configuration&lt;/code>注解, 则为&lt;code>full&lt;/code>; 如果是&lt;code>@Component&lt;/code>, &lt;code>@ComponentScan&lt;/code>, &lt;code>@Import&lt;/code>或者&lt;code>@ImportResource&lt;/code>中的任何一种, 则为&lt;code>lite&lt;/code>. 如果是&lt;code>ConfigurationClass&lt;/code>, 则会继续为其添加顺序属性.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">checkConfigurationClassCandidate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BeanDefinition&lt;/span> &lt;span class="n">beanDef&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MetadataReaderFactory&lt;/span> &lt;span class="n">metadataReaderFactory&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isFullConfigurationCandidate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">beanDef&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CONFIGURATION_CLASS_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">CONFIGURATION_CLASS_FULL&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isLiteConfigurationCandidate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">beanDef&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CONFIGURATION_CLASS_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">CONFIGURATION_CLASS_LITE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// It&amp;#39;s a full or lite configuration candidate... Let&amp;#39;s determine the order value, if any.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">orderAttributes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">metadata&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAnnotationAttributes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">orderAttributes&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">beanDef&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ORDER_ATTRIBUTE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">orderAttributes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AnnotationUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">VALUE&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Nginx实现Elasticsearch的HTTP基本认证</title><link>https://atbug.com/elasticsearch-http-basic-authentication-via-nginx/</link><pubDate>Tue, 06 Nov 2018 09:24:24 +0000</pubDate><guid>https://atbug.com/elasticsearch-http-basic-authentication-via-nginx/</guid><description>
&lt;p>Elasticssearch的HTTP基本认证实现有两种方案: x-pack和nginx反向代理. 前者收费, 后者不太适合生产使用. 如果仅仅是开发测试, 第二种完全足够.&lt;/p>
&lt;h3 id="创建密码">创建密码&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">htpasswd -bc ./passwd &lt;span class="o">[&lt;/span>username&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>password&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="docker-compose">Docker compose&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">elasticsearch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">elasticsearch:5.5.2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">elasticsearch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">unless-stopped&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/tmp/elasticsearch:/usr/share/elasticsearch/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nginx&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">elasticsearch-proxy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">9200&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9200&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">links&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">elasticsearch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">./passwd:/etc/nginx/.passwd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">./default.conf:/etc/nginx/conf.d/default.conf&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="nginx配置文件">nginx配置文件&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">upstream es {
server elasticsearch:9200;
keepalive 15;
}
server {
listen 9200;
server_name localhost;
access_log /dev/stdout;
error_log /dev/stdout;
location / {
auth_basic &amp;#34;Administrator’s Area&amp;#34;;
auth_basic_user_file /etc/nginx/.passwd;
proxy_http_version 1.1;
proxy_set_header Connection &amp;#34;Keep-Alive&amp;#34;;
proxy_set_header Proxy-Connection &amp;#34;Keep-Alive&amp;#34;;
proxy_pass http://es;
}
location /health {
access_log off;
return 200 &amp;#34;healthy\n&amp;#34;;
}
#error_page 404 /404.html;
# redirect server error pages to the static page /50x.html
#
error_page 500 502 503 504 /50x.html;
location = /50x.html {
root html;
}
# proxy the PHP scripts to Apache listening on 127.0.0.1:80
#
#location ~ \.php$ {
# proxy_pass http://127.0.0.1;
#}
# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#
#location ~ \.php$ {
# root html;
# fastcgi_pass 127.0.0.1:9000;
# fastcgi_index index.php;
# fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;
# include fastcgi_params;
#}
# deny access to .htaccess files, if Apache&amp;#39;s document root
# concurs with nginx&amp;#39;s one
#
#location ~ /\.ht {
# deny all;
#}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Alpine容器安装Docker和OpenShift Client Tools</title><link>https://atbug.com/install-docker-and-openshift-client-tools-in-alpine-container/</link><pubDate>Tue, 28 Aug 2018 09:14:12 +0000</pubDate><guid>https://atbug.com/install-docker-and-openshift-client-tools-in-alpine-container/</guid><description>
&lt;h2 id="安装docker">安装Docker&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;http://dl-2.alpinelinux.org/alpine/edge/main&amp;#34;&lt;/span> &amp;gt; /etc/apk/repositories
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;http://dl-2.alpinelinux.org/alpine/edge/community&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/apk/repositories
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;http://dl-2.alpinelinux.org/alpine/edge/testing&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/apk/repositories
apk -U --no-cache &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --allow-untrusted add &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> shadow &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> py-pip &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> openrc &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> pip install docker-compose
rc-update add docker boot
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装openshift-client-tools">安装OpenShift Client Tools&lt;/h2>
&lt;p>需要先安装glibc&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">apk --no-cache add ca-certificates wget
wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk
apk add glibc-2.28-r0.apk
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>curl --retry 7 -Lo /tmp/client-tools.tar.gz &amp;quot;https://mirror.openshift.com/pub/openshift-v3/clients/3.9.1/linux/oc.tar.gz&amp;quot;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl --retry &lt;span class="m">7&lt;/span> -Lo /tmp/client-tools.tar.gz &lt;span class="s2">&amp;#34;https://mirror.openshift.com/pub/openshift-v3/clients/3.9.1/linux/oc.tar.gz&amp;#34;&lt;/span>
tar zxf /tmp/client-tools.tar.gz -C /usr/local/bin oc &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm /tmp/client-tools.tar.gz &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apk del .build-deps
&lt;span class="c1"># ADDED: Resolve issue x509 oc login issue&lt;/span>
apk add --update ca-certificates
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考: &lt;a href="https://github.com/openshift/origin/issues/11135">github issue&lt;/a>&lt;/p></description></item><item><title>Zuul网关Ribbon重试</title><link>https://atbug.com/ribbon-retry-in-zuul/</link><pubDate>Thu, 02 Aug 2018 08:55:43 +0000</pubDate><guid>https://atbug.com/ribbon-retry-in-zuul/</guid><description>
&lt;h2 id="相关配置">相关配置&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#如果路由转发请求发生超时(连接超时或处理超时), 只要超时时间的设置小于Hystrix的命令超时时间,那么它就会自动发起重试. 默认为false. 或者对指定响应状态码进行重试
zuul.retryable = true
zuul.routes.&amp;lt;route&amp;gt;.retryable = false
#同一实例上的最大重试次数, 默认值为0. 不包括首次调用
ribbon.MaxAutoRetries=0
#重试其他实例的最大重试次数, 不包括第一次选的实例. 默认为1
ribbon.MaxAutoRetriesNextServer=1
#是否所有操作执行重试, 默认值为false, 只重试`GET`请求
ribbon.OkToRetryOnAllOperations=false
#连接超时, 默认2000
ribbon.ConnectTimeout=15000
#响应超时, 默认5000
ribbon.ReadTimeout=15000
#每个host的最大连接数
ribbon.MaxHttpConnectionsPerHost=50
#最大连接数
ribbon.MaxTotalHttpConnections=200
#何种响应状态码才进行重试
ribbon.retryableStatusCodes=404,502
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现">实现&lt;/h2>
&lt;ol>
&lt;li>&lt;code>SimpleRouteLocator#getRoute&lt;/code>返回的&lt;code>route&lt;/code>对象中会带上&lt;code>retryable&lt;/code>的设置.&lt;/li>
&lt;li>&lt;code>PreDecorationFilter&lt;/code>在对&lt;code>RequestContext&lt;/code>进行装饰的时候会将&lt;code>retryable&lt;/code>的设置通过key&lt;code>FilterConstants.RETRYABLE_KEY&lt;/code>注入&lt;code>RequestContext&lt;/code>中.&lt;/li>
&lt;li>&lt;code>RibbonRoutingFilter#buildCommandContext&lt;/code>会使用&lt;code>RequestContext&lt;/code>的&lt;code>retryable&lt;/code>设置构造&lt;code>RibbonCommandContext&lt;/code>对象.&lt;/li>
&lt;li>&lt;code>RibbonCommandFactory&lt;/code>使用&lt;code>RibbonCommandContext&lt;/code>构建出&lt;code>RibbonCommand&lt;/code>对象.&lt;/li>
&lt;li>&lt;code>RibbonCommand#run&lt;/code>中, 当&lt;code>retryable&lt;/code>为&lt;code>true&lt;/code>时, 会调用&lt;code>IClient&lt;/code>的&lt;code>execute&lt;/code>方法处理请求. 为&lt;code>false&lt;/code>时, 会调用&lt;code>IClient&lt;/code>的&lt;code>executeWithLoadBalancer&lt;/code>方法执行请求.
&lt;ul>
&lt;li>&lt;code>execute&lt;/code>会在失败时进行重试(不超过超时限制)&lt;/li>
&lt;li>&lt;code>executeWithLoadBalancer&lt;/code>方法是先通过&lt;code>LoadBalancer&lt;/code>选择出一个&lt;code>Server&lt;/code>, 然后构建出请求地址.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>IClient#execute&lt;/code>执行时, 通过&lt;code>LoadBalancedRetryPolicyFactory&lt;/code>创建一个&lt;code>LoadBalancedRetryPolicy&lt;/code>对象. &lt;code>LoadBalancedRetryPolicy&lt;/code>持有上面&lt;code>ribbon.XXX&lt;/code>的设置. 当响应状态码不在&lt;code>ribbon.retryableStatusCodes&lt;/code>设置中, 则会直接返回响应. 如果属于可重试的响应状态码, 则会将响应封装为&lt;code>HttpClientStatusCodeException&lt;/code>抛出. 异常被&lt;code>RetryTemplate&lt;/code>捕获, 然后使用&lt;code>LoadBalancedRetryPolicy&lt;/code>对当前状态(MaxAutoRetries, MaxAutoRetriesNextServer)计算出能否进行一次重试. 直至成功, 或者当前状态不满足条件.&lt;/li>
&lt;/ol></description></item><item><title>Hystrix工作原理三</title><link>https://atbug.com/hystrix-exception-handling/</link><pubDate>Sun, 24 Jun 2018 16:20:16 +0000</pubDate><guid>https://atbug.com/hystrix-exception-handling/</guid><description>
&lt;h2 id="异常处理">异常处理&lt;/h2>
&lt;h3 id="hystrix异常类型">Hystrix异常类型&lt;/h3>
&lt;ul>
&lt;li>HystrixRuntimeException&lt;/li>
&lt;li>HystrixBadRequestException&lt;/li>
&lt;li>HystrixTimeoutException&lt;/li>
&lt;li>RejectedExecutionException&lt;/li>
&lt;/ul>
&lt;h4 id="hystrixruntimeexception">HystrixRuntimeException&lt;/h4>
&lt;p>&lt;code>HystrixCommand&lt;/code>失败时抛出, 不会触发fallback.&lt;/p>
&lt;h4 id="hystrixbadrequestexception">HystrixBadRequestException&lt;/h4>
&lt;p>用提供的参数或状态表示错误的异常, 而不是执行失败. 与其他&lt;code>HystrixCommand&lt;/code>抛出的异常不同, 这个异常不会触发&lt;code>fallback&lt;/code>, 也不会记录进&lt;code>failure&lt;/code>的指标, 因而也不会触发断路器,&lt;/p>
&lt;p>应该在用户输入引起的错误是抛出, 否则会它与容错和后退行为的目的相悖.&lt;/p>
&lt;p>&lt;strong>不会触发fallback, 也不会记录到错误的指标中, 也不会触发断路器&lt;/strong>.&lt;/p>
&lt;h4 id="rejectedexecutionexception">RejectedExecutionException&lt;/h4>
&lt;p>线程池发生&lt;code>reject&lt;/code>时抛出&lt;/p>
&lt;h4 id="hystrixtimeoutexception">HystrixTimeoutException&lt;/h4>
&lt;p>在&lt;code>HystrixCommand.run()&lt;/code>或者&lt;code>HystrixObservableCommand.construct()&lt;/code>时抛出, 会记录&lt;code>timeout&lt;/code>的次数. 如果希望某些类型的失败被记录为&lt;code>timeout&lt;/code>, 应该将这些类型的失败包装为&lt;code>HystrixTimeoutException&lt;/code>&lt;/p>
&lt;h3 id="异常处理-1">异常处理&lt;/h3>
&lt;p>&lt;code>ignoreExceptions&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">final&lt;/span> &lt;span class="n">Func1&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">handleFallback&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Func1&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">call&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">circuitBreaker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">markNonSuccess&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getExceptionFromThrowable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">executionResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">executionResult&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setExecutionException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">RejectedExecutionException&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">handleThreadPoolRejectionViaFallback&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">HystrixTimeoutException&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">handleTimeoutViaFallback&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">HystrixBadRequestException&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">handleBadRequestByEmittingError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * Treat HystrixBadRequestException from ExecutionHook like a plain HystrixBadRequestException.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">HystrixBadRequestException&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">eventNotifier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">markEvent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HystrixEventType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BAD_REQUEST&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">commandKey&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">handleFailureViaFallback&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="feign中响应状态码处理">Feign中响应状态码处理&lt;/h4>
&lt;p>Feign使用&lt;code>SynchronousMethodHandler&lt;/code>做请求的执行和响应的处理. 响应处理的部分, 对&lt;code>[200, 300)&lt;/code>区间的状态, 会将response返回; 如果是&lt;code>404&lt;/code>, 根据&lt;code>@FeignClient&lt;/code>中&lt;code>decode404&lt;/code>(默认为false)和方法返回值判断是否熔断, 如果响应返回&lt;code>404&lt;/code>, &lt;code>decode&lt;/code>为&lt;code>false&lt;/code>, 同时方法返回值不是&lt;code>void&lt;/code>, 会包装成&lt;code>FeignException&lt;/code>抛出; 其他的状态, 通过包装成&lt;code>FeignException&lt;/code>抛出.&lt;/p>
&lt;p>&lt;code>FeignException&lt;/code>是&lt;code>RuntimeException&lt;/code>的实现, 如果没有ignore的话, 会计入熔断器的计算中.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SynchronousMethodHandler&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MethodHandler&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="nf">executeAndDecode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RequestTemplate&lt;/span> &lt;span class="n">template&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">status&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">200&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">status&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">300&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">metadata&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">returnType&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">decode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">decode404&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">status&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">404&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="kt">void&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">metadata&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">returnType&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">decode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">errorDecoder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">decode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configKey&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="ribbon中响应状态码处理">Ribbon中响应状态码处理&lt;/h4>
&lt;p>在Zuul中, 路由使用&lt;code>Ribbon&lt;/code>做负载均衡, 同时使用&lt;code>Hystrix&lt;/code>做断路器, 使用&lt;code>RibbonCommand&lt;/code>接口的实现. &lt;code>RibbonCommand&lt;/code>的实现&lt;strong>并没有对响应编码封装异常, 因此也不会触发熔断器&lt;/strong>.&lt;/p>
&lt;p>&lt;code>AbstractRibbonCommand&lt;/code>是&lt;code>RibbonCommand&lt;/code>的抽象实现, 所有其他实现的父类. 核心&lt;code>run()&lt;/code>方法并没有针对响应编码重新封装异常.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AbstractRibbonCommand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">LBC&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AbstractLoadBalancerAwareClient&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RQ&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RS&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">RQ&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">ClientRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RS&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kd">extends&lt;/span> &lt;span class="n">HystrixCommand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ClientHttpResponse&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">RibbonCommand&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">ClientHttpResponse&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">RequestContext&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RequestContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">RQ&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createRequest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">RS&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">retryableClient&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">client&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">AbstractLoadBalancingClient&lt;/span>
&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">AbstractLoadBalancingClient&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">client&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">isClientRetryable&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">ContextAwareRequest&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">retryableClient&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executeWithLoadBalancer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ribbonResponse&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// Explicitly close the HttpResponse if the Hystrix command timed out to
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// release the underlying HTTP connection held by the response.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isResponseTimedOut&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RibbonHttpResponse&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Observable.error(ex)&lt;/code>会捕获&lt;code>run()&lt;/code>方法抛出的异常.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HystrixCommand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AbstractCommand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">HystrixExecutable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">HystrixInvokableInfo&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">HystrixObservable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="kd">protected&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getExecutionObservable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">defer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Func0&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">call&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">just&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}).&lt;/span>&lt;span class="na">doOnSubscribe&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Action0&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">call&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Save thread on which we get subscribed so that we can interrupt it later if needed
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">executionThread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="hystrix-超时处理">Hystrix 超时处理&lt;/h2>
&lt;p>在Hystrix版本1.4之前, Seamphore策略是不支持超时的. 目前&lt;code>spring-cloud-netflix&lt;/code>的1.4.4中使用的是1.5.12&lt;/p>
&lt;p>如果开启了timeout, HystrixCommand会&lt;code>lift&lt;/code>一个&lt;code>HystrixObservableTimeoutOperator&lt;/code>到&lt;code>Observable&lt;/code>中.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AbstractCommand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">HystrixInvokableInfo&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">HystrixObservable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">executeCommandAndObserve&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">AbstractCommand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">_cmd&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">Observable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">execution&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">properties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executionTimeoutEnabled&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">execution&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">executeCommandWithSpecifiedIsolation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">_cmd&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">lift&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">HystrixObservableTimeoutOperator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;(&lt;/span>&lt;span class="n">_cmd&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">execution&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">executeCommandWithSpecifiedIsolation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">_cmd&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">execution&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doOnNext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">markEmits&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">doOnCompleted&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">markOnCompleted&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">onErrorResumeNext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">handleFallback&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">doOnEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">setRequestContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个&lt;code>HystrixObservableTimeoutOperator&lt;/code>会添加注册&lt;code>TimeListener&lt;/code>. &lt;code>TimeListener&lt;/code>是以&lt;code>tick&lt;/code>的方式运行, 即启动一个线程延迟&lt;code>executionTimeoutInMilliseconds&lt;/code>运行, 然后每次在&lt;code>executionTimeoutInMilliseconds + n * executionTimeoutInMilliseconds&lt;/code>时运行.&lt;/p>
&lt;p>如果判断操作超时? 看&lt;code>tick&lt;/code>方法的实现, 线程每次运行时, 尝试修改Command的状态从&lt;code>NOT_EXECUTED&lt;/code>到&lt;code>TIMED_OUT&lt;/code>. 如果成功, 说明运行超时. 最后抛出&lt;code>HystrixTimeoutException&lt;/code>异常, 被&lt;code>handleFallback&lt;/code>处理.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// if we can go from NOT_EXECUTED to TIMED_OUT then we do the timeout codepath
&lt;/span>&lt;span class="c1">// otherwise it means we lost a race and the run() execution completed or did not start
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">originalCommand&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isCommandTimedOut&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareAndSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TimedOutStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NOT_EXECUTED&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimedOutStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TIMED_OUT&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// report timeout failure
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">originalCommand&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">eventNotifier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">markEvent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HystrixEventType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TIMEOUT&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">originalCommand&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">commandKey&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// shut down the original request
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">unsubscribe&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">HystrixContextRunnable&lt;/span> &lt;span class="n">timeoutRunnable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HystrixContextRunnable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">originalCommand&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">concurrencyStrategy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hystrixRequestContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">child&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">onError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">HystrixTimeoutException&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="n">timeoutRunnable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//if it did not start, then we need to mark a command start for concurrency metrics, and then issue the timeout
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Hystrix工作原理二</title><link>https://atbug.com/hystrix-isolation/</link><pubDate>Sun, 24 Jun 2018 16:18:52 +0000</pubDate><guid>https://atbug.com/hystrix-isolation/</guid><description>
&lt;h2 id="隔离策略">隔离策略&lt;/h2>
&lt;h3 id="线程和线程池">线程和线程池&lt;/h3>
&lt;p>客户端(库, 网络调用等)在各自的线程上运行. 这种做法将他们与调用线程隔开, 因此调用者可以从一个耗时的依赖调用&amp;quot;离开(walk away)&amp;quot;&lt;/p>
&lt;p>Hystrix使用单独的, 每个依赖的线程池作为约束任何给定依赖的一种方式, 因此潜在执行的延迟将仅在该池中使可用线程饱和.&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15280741661560.png" alt="">&lt;/p>
&lt;p>如果不试用线程池可以保护你免受故障的影响, 但是这需要客户端可信任地快速失败(网络连接/读取超时, 重试的配置)并始终表现良好.&lt;/p>
&lt;p>在Hystrix的设计中, Netflix选择试用线程和线程池来达到隔离的目的, 原因有:&lt;/p>
&lt;ul>
&lt;li>很多应用程序调用了由很多不同的团队开发的许多(有时超过1000)不同的后端服务&lt;/li>
&lt;li>每个服务都各自提供了其客户端库&lt;/li>
&lt;li>客户端库不断地在更新&lt;/li>
&lt;li>客户端库可能被添加使用新的网络调用&lt;/li>
&lt;li>客户端库的逻辑中可能包含重试, 数据解析, 缓存(内存或者跨网络)和其他类似的行为&lt;/li>
&lt;li>客户端库更类似于一个黑盒, 其实现细节, 网络访问模式, 默认配置等是对使用者不透明的&lt;/li>
&lt;li>在实际的生产问题中, 根源经常是 &amp;ldquo;有些东西改变了, 配置应该被修改&amp;rdquo; 或者 &amp;ldquo;客户端库修改了逻辑&amp;rdquo;&lt;/li>
&lt;li>即使客户端没有改变, 服务端自身发生了变会员. 这种变化会是客户端设置无效而影响性能特性&lt;/li>
&lt;li>传递依赖会引入其他客户端, 这些客户端不是可预期的, 也可能没有被正确地配置&lt;/li>
&lt;li>大多数网络访问是同步的&lt;/li>
&lt;li>失败和延迟也可能发生在客户端, 不只是网络调用&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15274259800386.png" alt="">&lt;/p>
&lt;h4 id="线程池的优势">线程池的优势&lt;/h4>
&lt;ul>
&lt;li>该应用程序完全免受失控客户端库的保护. 给定依赖库的线程池可以填满而不会影响应用程序的其余部分.&lt;/li>
&lt;li>应用程序可以接受风险低得多的新客户端库. 如果发生问题, 它会与其他依赖库隔离, 不会影响其他的依赖库&lt;/li>
&lt;li>当发生故障的客户端再次健康时, 线程池将进行清理, 应用程序会立即恢复健康的性能, 而不是整个Tomcat容器不堪重负的长时间恢复.&lt;/li>
&lt;li>如果客户端库配置错误, 线程池的运行状况将很快证明这一点(通过增加错误, 延迟, 超时, 拒绝等), 并且你可以在不影响应用程序功能的情况下处理它(通常通过动态属性进行实时修改).&lt;/li>
&lt;li>如果客户端服务改变了性能特征(经常发生会以成为一个问题), 从而导致需要调整属性(增加/减少超时, 更改重试等), 这通过线程池指标(错误, 延迟, 超时, 拒绝), 并且可以在不影响其他客户端, 请求或用户的情况下进行处理.&lt;/li>
&lt;li>除了隔离优势外, 拥有专用线程池还提供了内置并发性, 可用于在同步客户端库之上构建异步特性(类似于Netflix API在Hystrix命令之上构建反应式, 完全异步的Java API).&lt;/li>
&lt;/ul>
&lt;p>简而言之, 由线程池提供的隔离功能可以使客户端库和子系统性能特性的不断变化和动态组合得到适度处理, 而不会造成中断.&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>: 尽管单独的线程提供了隔离, 但你的底层客户端代码也应该有超时 和/或 响应线程中断, 以便它不会无限制地阻塞并使Hystrix线程池饱和.&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15274259098702.png" alt="">&lt;/p>
&lt;p>&lt;strong>线程池的缺点&lt;/strong>&lt;/p>
&lt;p>线程池的主要缺点是增加了计算开销, 每个Command的执行设计到队列, 调度和Command单独运行的线程的上下文的切换.&lt;/p>
&lt;p>在设计这个系统时, Netflix决定接受这种开销, 以换取其提供的好处, 并认为它足够小, 不会对成本或性能产生重大影响,.&lt;/p>
&lt;p>&lt;strong>线程成本&lt;/strong>&lt;/p>
&lt;p>Hystrix在子线程上执行construct()或run()方法时测量延迟, 以及父线程上的总端到端时间. 通过这种方式, 你可以看到Hystrix开销的成本(线程, 指标, 日志记录, 断路器等).&lt;/p>
&lt;p>Netflix API每天使用线程隔离处理10亿多Hystrix Command执行. 每个API实例都有40多个线程池, 每个线程池中有5-20个线程(大多数设置为10).&lt;/p>
&lt;h3 id="信号量">信号量&lt;/h3>
&lt;p>你可以使用信号量(或计数器)来限制对任何给定依赖项的并发调用数量, 而不是使用线程池/队列大小. 这允许Hystrix在不使用线程池的情况下卸载负载. 如果你信任下客户端, 而你只想要卸载, 你可以使用这种方法.&lt;/p>
&lt;p>&lt;code>HystrixCommand&lt;/code>和&lt;code>HystrixObservableCommand&lt;/code>支持2个地方的信号量:&lt;/p>
&lt;p>&lt;strong>回退:&lt;/strong> 当Hystrix执行回退时, 它总是在调用Tomcat线程上执行回退
&lt;strong>执行:&lt;/strong> 如果将属性&lt;code>execution.isolation.strategy&lt;/code>设置为&lt;code>SEMAPHORE&lt;/code>, 则Hystrix将使用信号而不是线程来限制调用该命令的并发父线程的数量.&lt;/p>
&lt;p>你可以通过动态属性来配置这两种信号量的使用, 这些动态属性定义了可以执行多少个并发线程. 在调整线程池大小时, 你应该使用类似的计算来调整它们的大小(内存调用返回的次毫秒时间可以在信号量仅为1或2的情况下执行超过5000rps, 但默认值为10).&lt;/p>
&lt;p>一旦达到限制, 信号量拒绝将开始, 但填充信号量的线程不能离开.&lt;/p>
&lt;p>翻译自&lt;a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">How it Works&lt;/a>&lt;/p></description></item><item><title>Hystrix工作原理一</title><link>https://atbug.com/how-hystrix-works/</link><pubDate>Mon, 04 Jun 2018 08:47:40 +0000</pubDate><guid>https://atbug.com/how-hystrix-works/</guid><description>
&lt;h2 id="运行时的流程图">运行时的流程图&lt;/h2>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15273755001891.png" alt="图片来自netflix hystrix">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>构建&lt;code>HystrixCommand&lt;/code>或者&lt;code>HystrixObservableCommand&lt;/code>对象&lt;/p>
&lt;p>第一步是构建一个HystrixCommand或HystrixObservableCommand对象来代表对依赖服务所做的请求。 将在请求发生时将需要的任何参数传递给构造函数。&lt;/p>
&lt;p>如果依赖的服务预期会返回单一的响应, 构造一个&lt;code>HystrixCommand&lt;/code>对象, 例如:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">HystrixCommand&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HystrixCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">arg1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">arg2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果依赖的服务预期会返回一个发出响应的Observable对象, 则构造一个&lt;code>HystrixObservableCommand&lt;/code>对象, 例如:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">HystrixObservableCommand&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HystrixObservableCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">arg1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">arg2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>执行Command&lt;/p>
&lt;/li>
&lt;li>
&lt;p>响应是否被缓存?&lt;/p>
&lt;p>如果Command的缓存请求被开启, 同时请求的响应在缓存中可用, 缓存的响应被立即以一个&lt;code>Observable&lt;/code>的方式返回.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>断路器是否开启?&lt;/p>
&lt;p>执行Command时, Hystrix会检查断路器(circuti-breaker)是否开始回路(circuit).&lt;/p>
&lt;p>如果回路开启, Hystrix将不会执行Command, 而直接去到流程&lt;strong>8&lt;/strong>: Get the Fallback
如果关闭, 则执行流程&lt;strong>5&lt;/strong>检查是否有足够的容量来运行该命令&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程池/队列/限号量是否满?&lt;/p>
&lt;p>假如与Command相关的线程池和队列(或者信号量, 不适用隔离线程的话)满了, Hystrix将不会执行Command, 而是直接去到流程&lt;strong>8&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HystrixObservableCommand.construct()&lt;/code>或&lt;code>HystrixCommand.run()&lt;/code>&lt;/p>
&lt;p>Hystrix使用下面任一的方式向依赖的服务发出请求:&lt;/p>
&lt;ul>
&lt;li>&lt;code>HystrixCommand.run()&lt;/code> 返回单个响应或抛出异常&lt;/li>
&lt;li>&lt;code>HystrixObservableCommand.construct()&lt;/code> 返回一个发出响应的Observable对象, 或者发送&lt;code>onError&lt;/code>通知&lt;/li>
&lt;/ul>
&lt;p>如果&lt;code>run()&lt;/code>或者&lt;code>construct()&lt;/code>方法执行超过Command的超时设置, 线程会抛出一个&lt;code>TimeoutException&lt;/code>(或者独立的timer线程抛出, 如果Command不是运行在它自己的线程上). 这是Hystrix直接去到流程&lt;strong>8&lt;/strong>. 获取&lt;code>Fallback&lt;/code>, 如果没有cancel/interrup, 则抛弃&lt;code>run()&lt;/code>或&lt;code>construct()&lt;/code>的最终返回值.&lt;/p>
&lt;p>请注意, 没有任何方法可以强制任务线程停止工作, 最佳的方式是Hystrix抛出一个&lt;code>InterruptException&lt;/code>. 如果Hystrix封装的任务忽略&lt;code>InterruptException&lt;/code>, 该任务线程会继续工作, 即使客户端已经收到了一个&lt;code>TimeoutException&lt;/code>. 这种行为会是Hystrix的线程池饱和, 尽管负载&lt;code>正确地流出(correctly shed)&lt;/code>. 大多数Java HTTP客户端库不解释InterruptedExceptions. 因此, 请确保在HTTP客户端上正确配置连接和读/写超时.&lt;/p>
&lt;p>如果Command执行没有超时而返回一个响应, Hystrix在执行某些日志记录和指标报告之后返回这个响应.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>计算电路健康&lt;/p>
&lt;p>Hystrix将成功, 失败, 拒绝服务和超时上报给断路器, 断路器维护着一个计算统计数据的计数器.&lt;/p>
&lt;p>它通过这些统计数据决定断路器何时应该打开, 在哪个点开始短路后续的请求知道恢复期过去, 或者决定在第一次健康检查请求结束后是否要关闭断路器.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>获取&lt;code>Fallback&lt;/code>&lt;/p>
&lt;p>在command执行失败后: 当&lt;code>run()&lt;/code>或&lt;code>construct()&lt;/code>抛出异常(6), command因为断路器开启而短路(4), command的线程池和队列或者计数器处于满负荷(6), 或者执行超时, Hystrix尝试转向你的&lt;code>Fallback&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回成功的响应&lt;/p>
&lt;p>如果Command处理成功, 它将以&lt;code>Obervable&lt;/code>的实行返回response或者responses给调用者. 取决于上面流程2中的Command的执行方式, 该&lt;code>Observable&lt;/code>可能在返回给你之前被转换:&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15279954901603.png" alt="">&lt;/p>
&lt;ul>
&lt;li>execute() - 返回一个&lt;code>Fature&lt;/code>对象, 可以通过调用&lt;code>get()&lt;/code>获取&lt;code>Obervable&lt;/code>返回的单个值&lt;/li>
&lt;li>queue() - 把&lt;code>Observable&lt;/code>转换为&lt;code>BlockingObservable&lt;/code>, 因此&lt;code>BlockingObservable&lt;/code>可以被转换成&lt;code>Future&lt;/code>, 并返回&lt;/li>
&lt;li>observe() - 理解订阅&lt;code>Observable&lt;/code>, 并开始Command的执行流程. 返回一个&lt;code>Observable&lt;/code>, 当订阅它时, 重播返回和通知(replay emissions and notifiactions).&lt;/li>
&lt;li>toObservable() - 不变地返回Observable; 必须订阅它才能真正开始导致执行命令的流程.&lt;/li>
&lt;/ul>
&lt;p>更详细的流程图&lt;a href="https://design.codelytics.io/hystrix/how-it-works">&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="断路器">断路器&lt;/h2>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15279966397767.png" alt="">&lt;/p>
&lt;ol>
&lt;li>假设通过断路器的负载达到了阈值 (HystrixCommandProperties.circuitBreakerRequestVolumeThreshold())&lt;/li>
&lt;li>假设错误百分比超过错误的阈值 (HystrixCommandProperties.circuitBreakerErrorThresholdPercentage())&lt;/li>
&lt;li>断路器状态从关闭变为打开&lt;/li>
&lt;li>打开后, 断路器会短路所有针对该断路器的请求&lt;/li>
&lt;li>过了一段时间后(HystrixCommandProperties.circuitBreakerSleepWindowInMilliseconds()), 下一条请求会被放行(半开状态). 如果请求失败, 断路器重回打开状态(OPEN)并持续一个睡眠窗口(sleep window). 如果成功, 状态变为关闭(CLOSED). 下个请求从逻辑1开始.&lt;/li>
&lt;/ol>
&lt;p>翻译自&lt;a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">Hystrix Wiki - How it works&lt;/a>&lt;/p></description></item><item><title>解决rsyslogd资源占用率高问题</title><link>https://atbug.com/rsyslogd-high-cpu-trouble-shooting/</link><pubDate>Fri, 01 Jun 2018 09:32:28 +0000</pubDate><guid>https://atbug.com/rsyslogd-high-cpu-trouble-shooting/</guid><description>
&lt;h1 id="rsyslogd资源占用高问题记录">rsyslogd资源占用高问题记录&lt;/h1>
&lt;p>问题:
&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15277280296373.jpg" alt="">&lt;/p>
&lt;p>openshift集群安装在&lt;code>esxi&lt;/code>的虚拟机上. 各个节点出现问题, 集群响应很慢.&lt;/p>
&lt;ul>
&lt;li>&lt;code>kswapd0&lt;/code>进程cpu 90%多.&lt;/li>
&lt;li>&lt;code>rsyslogd&lt;/code>进程内存 90%多.&lt;/li>
&lt;/ul>
&lt;p>**先上总结: **&lt;/p>
&lt;p>&lt;code>system-journal&lt;/code>服务监听&lt;code>/dev/log&lt;/code>socket获取日志, 保存在内存中, 并间歇性的写入&lt;code>/var/log/journal&lt;/code>目录中.&lt;/p>
&lt;p>&lt;code>rsyslog&lt;/code>服务启动后监听&lt;code>/run/systemd/journal/syslog&lt;/code>socket获取&lt;code>syslog&lt;/code>类型日志, 并写入&lt;code>/var/log/messages&lt;/code>文件中. 获取日志时需要记录日志条目的&lt;code>position&lt;/code>到&lt;code>/var/lib/rsyslog/imjournal.state&lt;/code>文件中.&lt;/p>
&lt;p>可能是虚拟机系统安装问题, 导致没有创建&lt;code>/var/lib/rsyslog&lt;/code>. &lt;code>rsyslog&lt;/code>将异常日志写入&lt;code>/dev/log&lt;/code>socket中.&lt;/p>
&lt;p>这样就导致了死循环, &lt;code>rsyslog&lt;/code>因为要打开&lt;code>/var/log/messages&lt;/code>并写入日志, 消耗cpu, 内存还有磁盘I/O.&lt;/p>
&lt;h2 id="诊断步骤">诊断步骤:&lt;/h2>
&lt;h3 id="rsyslog">rsyslog&lt;/h3>
&lt;p>重启&lt;code>rsyslog&lt;/code>服务&lt;/p>
&lt;p>重启之后内存得到释放, 但是rsyslogd进程cpu跑到90%多, 且内存在持续升高.&lt;/p>
&lt;p>检查服务状态发现进程一直在报错:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">fopen() failed: &amp;#39;Permission denied&amp;#39;, path: &amp;#39;/imjournal.state.tmp&amp;#39;
[try http://www.rsyslog.com/e/2013 ]
fopen() failed: &amp;#39;Permission denied&amp;#39;, path: &amp;#39;/imjournal.state.tmp&amp;#39;
[try http://www.rsyslog.com/e/2013 ]
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查&lt;code>/etc/rsyslog.conf&lt;/code>中的&lt;code>WorkDirectory&lt;/code>行是没有被注释的. 检查默认工作目录&lt;code>/var/lib/rsyslog&lt;/code>, 发现目录不存在.&lt;/p>
&lt;p>因此创建&lt;code>/var/lib/rsyslog&lt;/code>目录, 并赋予&lt;code>600&lt;/code>权限.&lt;/p>
&lt;p>再次重启&lt;code>rsyslog&lt;/code>服务, 观察一段时间没有错误抛出, &lt;code>/var/lib/rsyslog&lt;/code>目录下创建了&lt;code>imjournal.state&lt;/code>文件. 检查文件, 内容不断被刷新. 但是占用内存还在升高, &lt;code>/var/log/messages&lt;/code>文件中还有错误信息写入. 但是错误日志的时间是比较早的.&lt;/p>
&lt;p>再次检查&lt;code>/etc/rsyslog.conf&lt;/code>配置, 有一行配置:&lt;/p>
&lt;blockquote>
&lt;p># Include all config files in /etc/rsyslog.d/
$IncludeConfig /etc/rsyslog.d/*.conf&lt;/p>
&lt;/blockquote>
&lt;p>目录中有文件&lt;code>/etc/rsyslog.d/listen.conf&lt;/code>, 内容为&lt;code>$SystemLogSocketName /run/systemd/journal/syslog&lt;/code>.&lt;/p>
&lt;p>分析:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/run&lt;/code>是linux内存中的数据&lt;/li>
&lt;li>&lt;code>journal&lt;/code>相关服务:&lt;code>systemd-journald.service&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="systemd-journaldservice">systemd-journald.service&lt;/h3>
&lt;p>&lt;code>systemd-journald&lt;/code>是用来协助&lt;code>rsyslog&lt;/code>记录系统启动服务和服务启动失败的情况等等. &lt;code>systemd-journald&lt;/code>使用内存保存记录, 系统重启记录会丢失. 所有还要用&lt;code>rsyslog&lt;/code>来记录分类信息, 如上面&lt;code>/etc/rsyslog.d/listen.conf&lt;/code>中的&lt;code>syslog&lt;/code>分类.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">~ systemctl list-sockets
LISTEN UNIT ACTIVATES
....
/dev/log systemd-journald.socket systemd-journald.service
/run/systemd/journal/socket systemd-journald.socket systemd-journald.service
/run/systemd/journal/stdout systemd-journald.socket systemd-journald.service
....
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看journal的配置&lt;code>/etc/systemd/jounal.conf&lt;/code>, 最终还是会持久化到硬盘上的&lt;code>/var/log/journal&lt;/code>目录中. 每个文件的大小是&lt;code>10M&lt;/code>, 最多使用&lt;code>8G&lt;/code>的空间, 同步间隔&lt;code>1s&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">[Journal]
Storage=persistent
Compress=True
#Seal=yes
#SplitMode=uid
SyncIntervalSec=1s
RateLimitInterval=1s
RateLimitBurst=10000
SystemMaxUse=8G
SystemMaxFileSize=10M
#RuntimeKeepFree=
#RuntimeMaxFileSize=
MaxRetentionSec=1month
ForwardToSyslog=False
#ForwardToKMsg=no
#ForwardToConsole=no
ForwardToWall=False
#TTYPath=/dev/console
#MaxLevelStore=debug
#MaxLevelSyslog=debug
#MaxLevelKMsg=notice
#MaxLevelConsole=info
#MaxLevelWall=emerg
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查&lt;code>/var/log/journal&lt;/code>目录, 发现里面文件很多, 每个大小为&lt;code>10m&lt;/code>. 清空该目录并重启&lt;code>rsyslog&lt;/code>, 观察一段时间后一切正常.&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://access.redhat.com/solutions/2795451">Redhat&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wizardforcel.gitbooks.io/vbird-linux-basic-4e/content/160.html">systemd-journald.service 简介&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://unix.stackexchange.com/questions/362681/systemd-journal-what-is-the-relation-of-dev-log-and-syslog">StackExchange&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Kubernetes中的Nginx动态解析</title><link>https://atbug.com/nginx-dynamic-domain-parse-in-kubernetes/</link><pubDate>Wed, 30 May 2018 12:10:32 +0000</pubDate><guid>https://atbug.com/nginx-dynamic-domain-parse-in-kubernetes/</guid><description>
&lt;h3 id="背景">背景&lt;/h3>
&lt;p>Nginx运行在kubernets中, 反向代理service提供服务.&lt;/p>
&lt;p>kubernetes版本v1.9.1+a0ce1bc657.&lt;/p>
&lt;h3 id="问题">问题:&lt;/h3>
&lt;p>配置如下:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">location ^~/info {
proxy_pass: http://serviceName:port;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>删除并重建Service的时候, nginx会出现下面的问题:&lt;/p>
&lt;blockquote>
&lt;p>connect() failed (113: No route to host) &amp;hellip; upstream: &amp;ldquo;xxxxx&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h3 id="分析">分析&lt;/h3>
&lt;p>通过google发现, 是nginx的dns解析方案的问题.&lt;/p>
&lt;p>nginx官方的说明:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>If the domain name can’t be resolved, NGINX fails to start or reload its configuration.&lt;/li>
&lt;li>NGINX caches the DNS records until the next restart or configuration reload, ignoring the records’ TTL values.&lt;/li>
&lt;li>We can’t specify another load‑balancing algorithm, nor can we configure passive health checks or other features defined by parameters to the server directive, which we’ll describe in the next section.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>意思是说, nginx在启动的时候就会解析&lt;code>proxy_pass&lt;/code>后的域名, 并把&lt;code>ip&lt;/code>缓存下来, 而且没有TTL. 只有在restart或者reload的时候才会再次解析.&lt;/p>
&lt;h3 id="解决方案">解决方案&lt;/h3>
&lt;p>使用nginx pod的解析服务器作为resolver:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">#nginx conf
resolver NAME_SERVER valid=30s ipv6=off;
set $service &amp;#34;http://serviceName:port&amp;#34;;
location ^~/info {
proxy_pass: $service;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用shell获取pod中使用的解析服务器&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">NAME_SERVER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>cat /etc/resolv.conf &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;nameserver&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $2}&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> tr &lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:
&lt;a href="https://stackoverflow.com/questions/17685674/nginx-proxy-pass-with-remote-addr">Nginx proxy_pass with $remote_addr&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://tenzer.dk/nginx-with-dynamic-upstreams/">Nginx with dynamic upstreams&lt;/a>&lt;/p>
&lt;h3 id="另一个问题">另一个问题&lt;/h3>
&lt;blockquote>
&lt;p>serviceName could not be resolved (3: Host not found)&lt;/p>
&lt;/blockquote>
&lt;p>service的短名称是解析不了的, 需要使用serviceName.namespace.svc.clusterName.&lt;/p></description></item><item><title>Spring Cloud Ribbon 详解</title><link>https://atbug.com/spring-cloud-ribbon-breakdown-1/</link><pubDate>Sat, 05 May 2018 11:18:05 +0000</pubDate><guid>https://atbug.com/spring-cloud-ribbon-breakdown-1/</guid><description>
&lt;p>客户端负载均衡, Ribbon的核心概念是命名的客户端.&lt;/p>
&lt;h2 id="使用">使用&lt;/h2>
&lt;h3 id="引入ribbon依赖和配置">引入Ribbon依赖和配置&lt;/h3>
&lt;p>加入&lt;code>spring-cloud-starter-netflix-ribbon&lt;/code>依赖&lt;/p>
&lt;h3 id="代码中使用ribbonclient注解">代码中使用RibbonClient注解&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@RibbonClient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">configuration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FooConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TestConfiguration&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span> &lt;span class="kd">protected&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FooConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZonePreferenceServerListFilter&lt;/span> &lt;span class="nf">serverListFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ZonePreferenceServerListFilter&lt;/span> &lt;span class="n">filter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZonePreferenceServerListFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">filter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setZone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;myTestZone&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">filter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">IPing&lt;/span> &lt;span class="nf">ribbonPing&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">PingUrl&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ribbon客户端的配置, 如果不指定会使用默认的实现:&lt;/p>
&lt;ul>
&lt;li>IClientConfig 客户端相关配置&lt;/li>
&lt;li>IRule 定义负载均衡策略&lt;/li>
&lt;li>IPing 定义如何ping目标服务实例来判断是否存活, ribbon使用单独的线程每隔一段时间(默认10s)对本地缓存的ServerList做一次检查&lt;/li>
&lt;li>ServerList&lt;!-- raw HTML omitted --> 定义如何获取服务实例列表. 两种实现基于配置的&lt;code>ConfigurationBasedServerList&lt;/code>和基于Eureka服务发现的&lt;code>DiscoveryEnabledNIWSServerList&lt;/code>&lt;/li>
&lt;li>ServerListFilter&lt;!-- raw HTML omitted --> 用来使用期望的特征过滤静态配置动态获得的候选服务实例列表. 若未提供, 默认使用&lt;code>ZoneAffinityServerListFilter&lt;/code>&lt;/li>
&lt;li>ILoadBalancer 定义了软负载均衡器的操作的接口. 一个典型的负载均衡器至少需要一组用来做负载均衡的服务实例, 一个标记某个服务实例不在旋转中的方法, 和对应的方法调用从实例列表中选出某一个服务实例.&lt;/li>
&lt;li>ServerListUpdater DynamicServerListLoadBalancer用来更新实例列表的策略(推&lt;code>EurekaNotificationServerListUpdater&lt;/code>/拉&lt;code>PollingServerListUpdater&lt;/code>, 默认是拉)&lt;/li>
&lt;/ul>
&lt;h2 id="分析">分析&lt;/h2>
&lt;p>类结构&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/Ribbon.png" alt="Ribbon">&lt;/p>
&lt;h3 id="实现">实现&lt;/h3>
&lt;p>实际使用中, 服务调用使用RestTemplate, 请求地址为&lt;code>http://&amp;lt;serviceName&amp;gt;/&amp;lt;path&amp;gt;&lt;/code>, 如&lt;code>http://foo/&lt;/code>
通过&lt;code>@RibbonClient&lt;/code>注解为服务创建ribbon客户端, 名字为方法名. RestTemplate发送请求的时候, 请求会被&lt;code>LoadBalancerInterceptor&lt;/code>拦截到, 使用服务对应的ribbon客户端. Ribbon客户端的&lt;code>LoadBalancer&lt;/code>会从&lt;code>ServerList&lt;/code>中根据&lt;code>IRule&lt;/code>的规则选择某个服务实例作为请求对象. &lt;code>ServerList&lt;/code>有动态的实现, 更新列表时会使用&lt;code>ServerListFilter&lt;/code>进行过滤.&lt;/p>
&lt;h4 id="ribbonclient注解">RibbonClient注解&lt;/h4>
&lt;p>从注释上&lt;code>@RibbonClient&lt;/code>为一个ribbon客户端声明配置信息. 把这个注解加在任何&lt;code>@Configuration&lt;/code>标注的类上, 然后注入&lt;code>SpringClientFactory&lt;/code>来访问创建的客户端.&lt;/p>
&lt;p>从代码上看&lt;code>@RibbonClient&lt;/code>引入了&lt;code>RibbonClientConfigurationRegistrar&lt;/code>. &lt;code>RibbonClientConfigurationRegistrar&lt;/code>实现了&lt;code>ImportBeanDefinitionRegistrar&lt;/code>接口, 在&lt;code>@Configuration&lt;/code>的解析极端调用接口的&lt;code>registerBeanDefinitions&lt;/code>方法, 为ribbon客户端创建BeanDefinition
使用&lt;code>name/value&lt;/code>和&lt;code>configuration&lt;/code>创建一个&lt;code>BeanDefinition&lt;/code>. Definition的名为&lt;code>&amp;lt;name&amp;gt;.RibbonClientSpecification&lt;/code>, class为&lt;code>RibbonClientSpecification&lt;/code>.&lt;/p>
&lt;p>&lt;code>FooConfiguration.class&lt;/code>也要使用&lt;code>@Configuration&lt;/code>注解, 然后通过&lt;code>RibbonClientConfigurationRegistrar&lt;/code>关联到Ribbon客户端的BeanDefinition. 所以&lt;strong>不能把FooConfiguration放到@ComponentScan的上下文中, 同样@SpringBootApplication也不行. 必要时使用exclude排除&lt;/strong>, 否则会变成所有Ribbon客户端共享.&lt;/p>
&lt;p>&lt;code>RibbonAutoConfiguration&lt;/code>中在创建&lt;code>SpringClientFactory&lt;/code>bean时, 会注入这些&lt;code>RibbonClientSpecification&lt;/code>. &lt;code>SpringClientFactory&lt;/code>继承了类&lt;code>NamedContextFactory&lt;/code>. 从注释看&lt;code>NamedContextFactory&lt;/code>可以创建一组子上下文, 每个子上下文中可以使用一组的Specification来定义bean. 对于Ribbon来说, 每个ribbon客户端各自为一个子上下文, &lt;code>@RibbonClient&lt;/code>的&lt;code>configuration&lt;/code>指定的配置, 就是用来构建该子上下文的配置, 最终被用来构建ribbon客户端. 这些上下文有共同的父上下文, 即&lt;code>ApplicationContext&lt;/code>. 这就是为什么上面提到的&lt;code>FooConfiguration&lt;/code>不能置于&lt;code>ApplicationContext&lt;/code>中, 否则会被所有的Ribbon客户端共享配置.&lt;/p>
&lt;h4 id="loadbalancerautoconfiguration配置类">LoadBalancerAutoConfiguration配置类&lt;/h4>
&lt;p>通过&lt;code>RibbonAutoConfiguration&lt;/code>引入, 定义了几个重要的bean:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>LoadBalancerRequestFactory&lt;/code>: 1) 将Http请求封装成&lt;code>ServiceRequestWrapper&lt;/code>. &lt;code>ServiceRequestWrapper&lt;/code>继承并重写了&lt;code>HttpRquestWrapper&lt;/code>的&lt;code>getURI&lt;/code>方法: 调用&lt;code>LoadBalancerClient&lt;/code>的&lt;code>reconstructURI&lt;/code>方法,创建实际请求的地址. 2) 如果有提供&lt;code>LoadBalancerRequestTransformer&lt;/code>的实例, 则使用这些实例对相求进行响应的转换.
&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15254831654150.jpg" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>LoadBalancerInterceptor&lt;/code>: Http请求拦截器, 将请求的&lt;code>host&lt;/code>作为&lt;code>serviceName&lt;/code>并使用&lt;code>LoadBalancerRequestFactory&lt;/code>封装请求, 调用&lt;code>LoadBalancerClient&lt;/code>的&lt;code>execute&lt;/code>方法, 发送请求到真实的服务实例地址, 返回响应&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>RestTemplateCustomizer&lt;/code>: 提供一个&lt;code>RestTemplateCustomizer&lt;/code>的匿名类实现, 为所有的RestTemplate实例添加一个&lt;code>LoadBalancerInterceptor&lt;/code>拦截器&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="ribbonautoconfiguration配置类">RibbonAutoConfiguration配置类&lt;/h4>
&lt;p>通过spring.factories引入, &lt;code>RibbonAutoConfiguration&lt;/code>定义了几个重要的bean:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>SpringClientFactory&lt;/code>: 使用&lt;code>@RibbonClient&lt;/code>注解引入的ribbon客户端的配置, 构建ribbon客户端的子上下文, 初始化ribbon客户端bean. 四个get方法, 分别返回对应&lt;strong>service&lt;/strong>的&lt;code>IClient&lt;/code>, &lt;code>ILoadBalancer&lt;/code>, &lt;code>IClientConfig&lt;/code>, &lt;code>RibbonLoadBalancerContext&lt;/code>实例.
&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15254844516099.jpg" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>LoadBalancerClient&lt;/code>: 使用Spring Cloud提供的实现&lt;code>RibbonLoadBalancerClient&lt;/code>. 通过&lt;code>SpringClientFactory&lt;/code>创建一个&lt;code>ILoadBalancer&lt;/code>实例, 通过&lt;code>ILoadBalancer&lt;/code>返回一个&lt;code>Server&lt;/code>实例. 使用&lt;code>Server&lt;/code>实例.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>reconstructURI(): 通过&lt;code>SpringClientFactory&lt;/code>获取该服务ribbon客户端子上下文&lt;code>RibbonLoadBalancerContext&lt;/code>对象, 调用&lt;code>RibbonLoadBalancerContext&lt;/code>的&lt;code>reconstructURIWithServer&lt;/code>方法构建最终的请求地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>choose(): 通过&lt;code>SpringClientFactory&lt;/code>获取该服务的服务均衡器, 使用负载均衡器的&lt;code>IRule&lt;/code>返回服务实例.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>execute(): 执行最终的请求, 并记录状态: &lt;code>ServerStats&lt;/code>和&lt;code>Stopwatch&lt;/code>&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15254847309993.jpg" alt="">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Jenkins CI/CD (一) 基于角色的授权策略</title><link>https://atbug.com/using-role-based-authorization-strategy-in-jenkins/</link><pubDate>Fri, 20 Apr 2018 12:18:46 +0000</pubDate><guid>https://atbug.com/using-role-based-authorization-strategy-in-jenkins/</guid><description>
&lt;p>最近开始客串运维做CI/CD的规划设计, 主要是基于&amp;rsquo;Pipeline as Code in Jenkins'. 整理了下思路和技术点, 慢慢的写.&lt;/p>
&lt;p>这一篇是关于基于角色的授权策略, 用的是&lt;code>Role-Based Authorization Strategy Plugin&lt;/code>.&lt;/p>
&lt;p>授权在CI/CD流程中比较常见, 比如我们只让某些特定用户才可以构建Pre-Release的Job. 而更高级的Release发布, 又会需要某些用户的审批才可以进行. 需要授权时, 可能还需要发邮件提醒用户.&lt;/p>
&lt;p>UI上如何使用就不提了, 这里只说Pipeline as Code. 后面的几篇也会是这个背景.&lt;/p>
&lt;p>参考的这篇&lt;a href="https://www.avioconsulting.com/blog/using-role-based-authorization-strategy-jenkins">文章&lt;/a>, 文章里的代码运行失败, 做了修复.&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;p>安装完插件, 需要开始&lt;code>基于角色的授权策略&lt;/code>. 同时添加角色和为用户分配角色.&lt;/p>
&lt;h3 id="使用role-based-strategy作为验证方式">使用&lt;code>Role-Based Strategy&lt;/code>作为验证方式&lt;/h3>
&lt;p>&lt;code>Manage Jenkins / Configure Global Security / Configure Global Security&lt;/code>&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15241955282214.jpg" alt="">&lt;/p>
&lt;h3 id="添加角色">添加角色&lt;/h3>
&lt;p>&lt;code>Manage Jenkins / Manage and Assign Roles / Manage Roles / Global roles &lt;/code>&lt;/p>
&lt;p>输入要添加的角色名&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15241956860233.jpg" alt="">&lt;/p>
&lt;h4 id="为新加的角色配置权限">为新加的角色配置权限&lt;/h4>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15241957585851.jpg" alt="">&lt;/p>
&lt;h3 id="为用户指定角色">为用户指定角色&lt;/h3>
&lt;p>`Manage Jenkins / Manage and Assign Roles / Assign Roles / Global roles'&lt;/p>
&lt;p>输入已有的用户名&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15241960130076.jpg" alt="">&lt;/p>
&lt;p>分配角色&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15241960527215.jpg" alt="">&lt;/p>
&lt;h2 id="编码">编码&lt;/h2>
&lt;p>授权会在很多job里使用, 所以我们使用&lt;code>shared library&lt;/code>来定义.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="n">timeout&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nl">time:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nl">unit:&lt;/span> &lt;span class="s1">&amp;#39;MINUTES&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">notifyAwaitApproval&lt;/span> &lt;span class="nl">approvers:&lt;/span> &lt;span class="n">getApprovers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;pre-release&amp;#39;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="nl">emailPrompt:&lt;/span> &lt;span class="s1">&amp;#39;Build is ready to prepare release&amp;#39;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>给用户发送待审批邮件, 使用&lt;code>input&lt;/code>等待用户的交互, 同时使用&lt;code>milestone&lt;/code>阻塞后续的构建请求.
&lt;code>notifyAwaitApproval.groovy&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="kt">def&lt;/span> &lt;span class="nf">call&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">def&lt;/span> &lt;span class="n">jobName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">JOB_NAME&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Action Required For Build $jobName&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kt">def&lt;/span> &lt;span class="n">csvApproverUsernames&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">approvers&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">String:&lt;/span>
&lt;span class="c1">// already csv
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">approvers&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">Map:&lt;/span>
&lt;span class="c1">// keys are usernames and values are names
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">approvers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">keySet&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">join&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">ArrayList:&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nl">HashSet:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">approvers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">join&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nf">Exception&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;Unexpeced approver type ${options.approvers.class}!&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}()&lt;/span>
&lt;span class="n">echo&lt;/span> &lt;span class="s2">&amp;#34;Notify approvers: $csvApproverUsernames for approval&amp;#34;&lt;/span>
&lt;span class="c1">// emailext needs to be inside a node block but don&amp;#39;t want to take up a node while waiting for approval
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">emailext&lt;/span> &lt;span class="nl">body:&lt;/span> &lt;span class="s2">&amp;#34;Action Required For Build \${jobName} (#\${env.BUILD_NUMBER})&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="nl">to:&lt;/span> &lt;span class="n">csvApproverUsernames&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="nl">subject:&lt;/span> &lt;span class="s2">&amp;#34;Action Required For Build \${jobName} (#\${env.BUILD_NUMBER})&amp;#34;&lt;/span>
&lt;span class="n">milestone&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="n">input&lt;/span> &lt;span class="nl">id:&lt;/span> &lt;span class="s1">&amp;#39;Approval&amp;#39;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="nl">message:&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="nl">submitter:&lt;/span> &lt;span class="n">csvApproverUsernames&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="nl">submitterParameter:&lt;/span> &lt;span class="s1">&amp;#39;submitter&amp;#39;&lt;/span>
&lt;span class="n">milestone&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查并获取Jenkins当前配置的授权策略, 如果是&lt;code>Role-Based Authorization&lt;/code>, 返回拥有指定角色的用户列表.
&lt;code>getApprovers.groovy&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.cloudbees.groovy.cps.NonCPS&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy&lt;/span>
&lt;span class="nd">@NonCPS&lt;/span>
&lt;span class="kt">def&lt;/span> &lt;span class="nf">call&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">role&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">echo&lt;/span> &lt;span class="s2">&amp;#34;Retrieving users for $role&amp;#34;&lt;/span>
&lt;span class="kt">def&lt;/span> &lt;span class="n">strategy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RoleBasedAuthorizationStrategy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">strategy&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">strategy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getGrantedRoles&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RoleBasedAuthorizationStrategy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GLOBAL&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">entrySet&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">find&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">role&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">}.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nf">Exception&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;Role Strategy Plugin not in use. Please enable to retrieve users for a role&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>KVM安装手册</title><link>https://atbug.com/kvm-installation-note/</link><pubDate>Thu, 12 Apr 2018 12:45:15 +0000</pubDate><guid>https://atbug.com/kvm-installation-note/</guid><description>
&lt;h2 id="添加虚拟机流程">添加虚拟机流程：&lt;/h2>
&lt;pre>&lt;code>1. 配置网络
2. 配置存储池
3. 上传镜像
4. 安装虚拟机，指定配置
&lt;/code>&lt;/pre>
&lt;h3 id="安装kvm虚拟机">安装KVM虚拟机&lt;/h3>
&lt;h4 id="1-关闭防火墙selinux">1. 关闭防火墙，selinux&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># service iptables stop&lt;/span>
&lt;span class="c1"># setenforce 0 临时关闭&lt;/span>
&lt;span class="c1"># chkconfig NetworkManager off&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-安装kvm虚拟机">2. 安装kvm虚拟机&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># yum install kvm libvirt libvirt-devel python-virtinst python-virtinst qemu-kvm virt-viewer bridge-utils virt-top libguestfs-tools ca-certificates audit-libs-python device-mapper-libs virt-install&lt;/span>
&lt;span class="c1"># 启动服务&lt;/span>
&lt;span class="c1"># service libvirtd restart&lt;/span>
下载virtio-win-1.5.2-1.el6.noarch.rpm 如果不安装window虚拟机或者使用带virtio驱动的镜像可以不用安装
&lt;span class="c1"># rpm -ivh virtio-win-1.5.2-1.el6.noarch.rpm&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-libvirt在管理本地或远程hypervisor时的表现形式如下">3. Libvirt在管理本地或远程Hypervisor时的表现形式如下。&lt;/h4>
&lt;p>在libvirt内部管理了五部分：&lt;/p>
&lt;ul>
&lt;li>节点：所谓的节点就是我们的物理服务器，一个服务器代表一个节点，上边存放着Hyper和Domain&lt;/li>
&lt;li>Hypervisor：即VMM，指虚拟机的监控程序，在KVM中是一个加载了kvm.ko的标准Linux系统。&lt;/li>
&lt;li>域（Domain）：指虚拟机，一个域代表一个虚拟机（估计思路来源于Xen的Domain0）&lt;/li>
&lt;li>存储池（Storage Pool）：存储空间，支持多种协议和网络存储。作为虚拟机磁盘的存储源。&lt;/li>
&lt;li>卷组（Volume）：虚拟机磁盘在Host上的表现形式。
上边的五部分，我们必须使用的是前三个，因为很多时候根据业务规则或应用的灵活性并没有使用卷组（其实就是有了编制的虚拟磁盘文件），也就没有必要使用存储池。&lt;/li>
&lt;/ul>
&lt;h3 id="配置">配置&lt;/h3>
&lt;h4 id="1-修改网络配置">1. 修改网络配置&lt;/h4>
&lt;p>方案一 (推荐)&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">brctl addbr br0 &amp;amp;&amp;amp; brctl addif br0 em1 &amp;amp;&amp;amp; brctl stp br0 on &amp;amp;&amp;amp; ifconfig em1 0.0.0.0 &amp;amp;&amp;amp; ifconfig br0 192.168.1.31 netmask 255.255.255.0 &amp;amp;&amp;amp; route add default gw 192.168.1.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>方案二&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/wh211212/article/details/54141412">参考&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># vim /etc/sysconfig/network-scripts/ifcfg-br0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>DEVICE=br0
TYPE=Bridge
BOOTPROTO=static
BROADCAST=192.168.1.255
IPADDR=192.168.1.10
NETMASK=255.255.255.0
NETWORK=192.168.1.0
GATEWAY=192.168.1.1
DNS1=119.29.29.29
ONBOOT=yes&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># vim /etc/sysconfig/network-scripts/ifcfg-em1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>DEVICE=em1
BOOTPROTO=none
ONBOOT=yes
BRIDGE=br0&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># vim /etc/sysconfig/network-scripts/ifcfg-bond0 &lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>DEVICE=bond0
TYPE=Ethernet
NAME=bond0
BONDING_MASTER=yes
BOOTPROTO=none
BRIDGE=br0
ONBOOT=yes
BONDING_OPTS=&amp;ldquo;mode=5 miimon=100&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://www.jianshu.com/p/110b60c14a8b">方案三&lt;/a>&lt;/p>
&lt;h4 id="3-关闭宿主机的gso与tso功能">3. 关闭宿主机的GSO与TSO功能&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># ethtool -K em1 gso off&lt;/span>
&lt;span class="c1"># ethtool -K em1 tso off&lt;/span>
&lt;span class="c1"># systemctl restart network&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-创建基于文件夹的存储池目录">4. 创建基于文件夹的存储池（目录）&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># mkdir -p /home/vmdisk&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>定义存储池与其目录&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-define-as vmDiskPool --type dir --target /home/vmdisk&lt;/span>
Pool vmDiskPool defined
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建已定义的存储池&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-build vmDiskPool&lt;/span>
Pool vmDiskPool built
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看已定义的存储池，存储池不激活无法使用&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-list --all&lt;/span>
Name State Autostart
-----------------------------------------
vmDiskPool inactive no
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看存储卷信息&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-info vmDiskPool&lt;/span>
Name: vmDiskPool
UUID: 3fc996c4-9bfa-7fdc-2960-445e4c551855
State: inactive
Persistent: yes
Autostart: no
&lt;/code>&lt;/pre>&lt;/div>&lt;p>激活并自动启动已定义的存储池&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-autostart vmDiskPool&lt;/span>
Pool vmDiskPool marked as autostarted
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动存储卷&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-start vmDiskPool&lt;/span>
Pool vmDiskPool started
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再次查看存储卷信息&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-info vmDiskPool&lt;/span>
Name: vmDiskPool
UUID: 3fc996c4-9bfa-7fdc-2960-445e4c551855
State: running
Persistent: yes
Autostart: yes
Capacity: 39.25 GiB
Allocation: 47.89 MiB
Available: 39.20 GiB
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-在存储池中创建虚拟机存储卷创建卷">3. 在存储池中创建虚拟机存储卷（创建卷）&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh vol-create-as vmDiskPool linux_vm0.qcow2 300G --format qcow2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看存储卷&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ll /home/vmdisk/
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="存储池相关管理命令">存储池相关管理命令&lt;/h5>
&lt;p>删除存储池中的存储卷&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh vol-delete --pool vmDiskPool linux_vm1.qcow2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>取消激活存储池&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-destroy vmDiskPool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>取消定义存储池&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-undefine vmDiskPool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>删除存储池&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh pool-delete vmDiskPool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-安装虚拟机">4. 安装虚拟机&lt;/h4>
&lt;p>bridge网络模式&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virt-install \&lt;/span>
--virt-type kvm &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--os-type&lt;span class="o">=&lt;/span>linux &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--os-variant&lt;span class="o">=&lt;/span>RHEL7 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--name&lt;span class="o">=&lt;/span>vm0 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--memory &lt;span class="m">16384&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--vcpus &lt;span class="m">6&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--disk &lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>/home/vmdisk/linux_vm0.qcow2,format&lt;span class="o">=&lt;/span>qcow2,bus&lt;span class="o">=&lt;/span>virtio &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--location /root/CentOS-7-x86_64-Minimal-1708.iso &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--graphics none &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--network &lt;span class="nv">bridge&lt;/span>&lt;span class="o">=&lt;/span>br0,model&lt;span class="o">=&lt;/span>virtio &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--autostart &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--boot cdrom,hd,menu&lt;span class="o">=&lt;/span>on &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--console pty,target_type&lt;span class="o">=&lt;/span>serial &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--extra-args &lt;span class="s1">&amp;#39;console=ttyS0,115200n8 serial&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>--debug
&lt;/code>&lt;/pre>&lt;/div>&lt;p>NAT网络模式&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virt-install --name=test --ram 512 --vcpus=1 -f /data/kvm/vm/test.qcow2 --cdrom /data/iso/CentOS-6.5-x86_64-bin-DVD1.iso --graphics vnc,listen=0.0.0.0,port=5988, --network network=default,model=virtio --force --accelerate --autostart --boot cdrom,hd,menu=on&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装window主机&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virt-install --name=window_24 --ram 12288 --vcpus 4 -c /data/iso/windows2008.iso --disk path=/usr/share/virtio-win/virtio-win-1.5.2.iso,device=cdrom --disk path=/data/kvm/vm/window_24.img,format=qcow2,bus=virtio --network bridge=br0,model=virtio --vnc --vncport=5924 --vnclisten=0.0.0.0 --force --autostart --os-type=windows --accelerate --boot cdrom,hd,menu=on&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置虚拟机网络&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># vi /etc/sysconfig/network-scripts/ifcfg-eth0
TYPE=Ethernet
BOOTPROTO=static
DEFROUTE=yes
PEERDNS=yes
PEERROUTES=yes
IPV4_FAILURE_FATAL=no
NAME=eth0
DEVICE=eth0
ONBOOT=yes
IPADDR=192.168.1.16
PREFIX=24
GATEWAY=192.168.1.1
DNS1=119.29.29.29
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="5-启动">5. 启动&lt;/h4>
&lt;p>使用virsh list &amp;ndash;all查看已安装的kvm&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># virsh list --all&lt;/span>
Id Name State
----------------------------------------------------
&lt;span class="m">5&lt;/span> &lt;span class="nb">test&lt;/span> running
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="6-动态调整cpu个数">6. 动态调整cpu个数&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh setvcpus test --maximum 4 --config #设置test的最大cpu颗数&lt;/span>
&lt;span class="c1"># virsh setvcpus test 3 #增加到3个CPU&lt;/span>
注：使用上面命令修改，虚拟机重启修改的配置会丢失
&lt;span class="c1"># virsh edit test #修改CPU个数再保存配置，这样重启之后也会生效&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="7-动态调整mem容量">7. 动态调整mem容量&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh setmaxmem test 2G --config #设置最大内存&lt;/span>
&lt;span class="c1"># virsh setmem test 800M --config #重启后生效&lt;/span>
&lt;span class="c1"># virsh setmem test 800M --config --live #马上生效&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="8-查看虚拟化客户机的资源使用情况">8. 查看虚拟化客户机的资源使用情况&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virt-top&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="9-一些扩展命令">9. 一些扩展命令&lt;/h4>
&lt;p>virsh命令行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># virsh list #显示本地活动虚拟机&lt;/span>
&lt;span class="c1"># virsh list --all #显示本地所有的虚拟机（活动的+不活动的）&lt;/span>
&lt;span class="c1"># virsh define test.xml #通过配置文件定义一个虚拟机（这个虚拟机还不是活动的）&lt;/span>
&lt;span class="c1"># virsh start test #启动名字为test的非活动虚拟机&lt;/span>
&lt;span class="c1"># virsh create test.xml #创建虚拟机（创建后，虚拟机立即执行，成为活动主机）&lt;/span>
&lt;span class="c1"># virsh suspend test #暂停虚拟机&lt;/span>
&lt;span class="c1"># virsh resume test #启动暂停的虚拟机&lt;/span>
&lt;span class="c1"># virsh shutdown test #正常关闭虚拟机&lt;/span>
&lt;span class="c1"># virsh destroy test #强制关闭虚拟机&lt;/span>
&lt;span class="c1"># virsh undefine test #清除虚拟机&lt;/span>
&lt;span class="c1"># virsh dominfo test #显示虚拟机的基本信息&lt;/span>
&lt;span class="c1"># virsh domname 2 #显示id号为2的虚拟机名&lt;/span>
&lt;span class="c1"># virsh domid test #显示虚拟机id号&lt;/span>
&lt;span class="c1"># virsh domuuid test #显示虚拟机的uuid&lt;/span>
&lt;span class="c1"># virsh domstate test #显示虚拟机的当前状态&lt;/span>
&lt;span class="c1"># virsh dumpxml test #显示虚拟机的当前配置文件（可能和定义虚拟机时的配置不同，因为当虚拟机启动时，需要给虚拟机分配id号、uuid、vnc端口号等等）&lt;/span>
&lt;span class="c1"># virsh setmem test 512000 #给不活动虚拟机设置内存大小&lt;/span>
&lt;span class="c1"># virsh setmaxmem test 1024000 #设定内存上限&lt;/span>
&lt;span class="c1"># virsh setvcpus test 4 #给不活动虚拟机设置cpu个数&lt;/span>
&lt;span class="c1"># virsh edit test #编辑配置文件（一般是在刚定义完虚拟机之后）&lt;/span>
&lt;span class="c1"># virsh vcpuinfo test #显示客户端的虚拟 CPU 信息。&lt;/span>
&lt;span class="c1"># virsh vcpupin test #控制客户端的虚拟 CPU 亲和性。&lt;/span>
&lt;span class="c1"># virsh domblkstat test #显示正在运行的客户端的块设备统计。&lt;/span>
&lt;span class="c1"># virsh domifstat test #显示正在运行的客户端的网络接口统计。&lt;/span>
&lt;span class="c1"># virsh attach-device test #使用 XML 文件中的设备定义在客户端中添加设备。&lt;/span>
&lt;span class="c1"># virsh attach-disk test #在客户端中附加新磁盘设备。&lt;/span>
&lt;span class="c1"># virsh attach-interface test #在客户端中附加新网络接口。&lt;/span>
&lt;span class="c1"># virsh detach-device test #从客户端中分离设备，使用同样的 XML 描述作为命令attach-device&lt;/span>
&lt;span class="c1"># virsh detach-disk test #从客户端中分离磁盘设备。&lt;/span>
&lt;span class="c1"># virsh detach-interface #从客户端中分离网络接口。&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="问题">问题&lt;/h2>
&lt;blockquote>
&lt;p>Could not open &amp;lsquo;/root/CentOS-7-x86_64-Minimal-1708.iso&amp;rsquo;: Permission denied&lt;/p>
&lt;/blockquote>
&lt;p>修改&lt;code>/etc/libvirt/qemu.conf&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#取消注释&lt;/span>
&lt;span class="nv">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;root&amp;#34;&lt;/span>
&lt;span class="nv">group&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;root&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>重启libvirtd&lt;/p>
&lt;p>&lt;code>service libvirtd restart&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>error: 操作失败: 这个域有活跃控制台会话&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ps -ef&lt;span class="p">|&lt;/span>grep &lt;span class="s1">&amp;#39;console VMNAME|grep -v &amp;#39;&lt;/span>grep&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="c1">#然后kill掉相应的进行&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>启用Jenkins CLI</title><link>https://atbug.com/jenkins-cli-enable/</link><pubDate>Mon, 09 Apr 2018 11:16:38 +0000</pubDate><guid>https://atbug.com/jenkins-cli-enable/</guid><description>
&lt;p>Jenkins CLI提供了SSH和Client模式.&lt;/p>
&lt;p>Docker运行Jenkins&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">jenkins&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jenkins/jenkins:alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">8080&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">50000&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">50000&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">46059&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">46059&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/Users/addo/DevApps/Docker/data/jenkins:/var/jenkins_home&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>note: 以为是docker运行, ssh端口设置选用了固定端口.&lt;/p>
&lt;h3 id="client">Client&lt;/h3>
&lt;p>从&lt;code>http://JENKINS_URL/cli&lt;/code>页面下载client jar&lt;/p>
&lt;p>使用方法:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">java -jar jenkins-cli.jar -s http://localhost:8080/ &lt;span class="nb">help&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>构建:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">java -jar jenkins-cli.jar -s http://localhost:8080/ build JOB &lt;span class="o">[&lt;/span>-c&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-f&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-p&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-r N&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-s&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-v&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-w&lt;span class="o">]&lt;/span>
Starts a build, and optionally waits &lt;span class="k">for&lt;/span> a completion.
Aside from general scripting use, this &lt;span class="nb">command&lt;/span> can be
used to invoke another job from within a build of one job.
With the -s option, this &lt;span class="nb">command&lt;/span> changes the &lt;span class="nb">exit&lt;/span> code based on
the outcome of the build &lt;span class="o">(&lt;/span>&lt;span class="nb">exit&lt;/span> code &lt;span class="m">0&lt;/span> indicates a success&lt;span class="o">)&lt;/span>
and interrupting the &lt;span class="nb">command&lt;/span> will interrupt the job.
With the -f option, this &lt;span class="nb">command&lt;/span> changes the &lt;span class="nb">exit&lt;/span> code based on
the outcome of the build &lt;span class="o">(&lt;/span>&lt;span class="nb">exit&lt;/span> code &lt;span class="m">0&lt;/span> indicates a success&lt;span class="o">)&lt;/span>
however, unlike -s, interrupting the &lt;span class="nb">command&lt;/span> will not interrupt
the job &lt;span class="o">(&lt;/span>&lt;span class="nb">exit&lt;/span> code &lt;span class="m">125&lt;/span> indicates the &lt;span class="nb">command&lt;/span> was interrupted&lt;span class="o">)&lt;/span>.
With the -c option, a build will only run &lt;span class="k">if&lt;/span> there has been
an SCM change.
JOB : Name of the job to build
-c : Check &lt;span class="k">for&lt;/span> SCM changes before starting the build, and &lt;span class="k">if&lt;/span> there&lt;span class="err">&amp;#39;&lt;/span>s no
change, &lt;span class="nb">exit&lt;/span> without doing a build
-f : Follow the build progress. Like -s only interrupts are not passed
through to the build.
-p : Specify the build parameters in the &lt;span class="nv">key&lt;/span>&lt;span class="o">=&lt;/span>value format.
-s : Wait &lt;span class="k">until&lt;/span> the completion/abortion of the command. Interrupts are passed
through to the build.
-v : Prints out the console output of the build. Use with -s
-w : Wait &lt;span class="k">until&lt;/span> the start of the &lt;span class="nb">command&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ssh">SSH&lt;/h3>
&lt;p>启用SSH, 使用随机端口. 也可以使用固定端口:&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15232377732862.jpg" alt="">&lt;/p>
&lt;p>获取SSH端口号:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -Lv http://localhost:8080/login 2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;X-SSH-Endpoint&amp;#39;&lt;/span>
&lt;span class="c1">#&amp;lt; X-SSH-Endpoint: localhost:46059&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成ssh key:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ssh-keygen -t rsa -b &lt;span class="m">4096&lt;/span> -C &lt;span class="s2">&amp;#34;admin&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加ssh公钥:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">http://localhost:8080/user/admin/configure
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改ssh config, 添加如下配置:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">Host localhost
IdentityFile ~/.ssh/id_rsa_jenkins_cli
Port &lt;span class="m">46059&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>验证:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ssh admin@localhost &lt;span class="nb">help&lt;/span>
add-job-to-view
Adds &lt;span class="nb">jobs&lt;/span> to view.
build
Builds a job, and optionally waits &lt;span class="k">until&lt;/span> its completion.
cancel-quiet-down
Cancel the effect of the &lt;span class="s2">&amp;#34;quiet-down&amp;#34;&lt;/span> command.
clear-queue
Clears the build queue.
connect-node
Reconnect to a node&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span>
console
Retrieves console output of a build.
copy-job
Copies a job.
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15232435960672.jpg" alt="">&lt;/p></description></item><item><title>Jenkins - 解决execute shell中启动的进程被在Job退出时被杀死问题</title><link>https://atbug.com/resolve-process-be-killed-after-jenkins-job-done/</link><pubDate>Thu, 15 Mar 2018 17:00:25 +0000</pubDate><guid>https://atbug.com/resolve-process-be-killed-after-jenkins-job-done/</guid><description>
&lt;p>因为&lt;a href="https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller">ProcessTreeKiller&lt;/a>的存在, 构建过程中使用shell启动的进程在Job完成时都会被kill掉.&lt;/p>
&lt;p>各种搜索以及&lt;a href="https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller">ProcessTreeKiller&lt;/a>提供的解决方式是修改&lt;code>BUILD_ID&lt;/code>和添加&lt;code> -Dhudson.util.ProcessTree.disable=true&lt;/code>都无法解决.&lt;/p>
&lt;p>最后参考&lt;a href="https://issues.jenkins-ci.org/browse/JENKINS-28182">StackOverflow&lt;/a>和&lt;a href="https://issues.jenkins-ci.org/browse/JENKINS-28182">Jenkins JIRA&lt;/a>, 修改&lt;code>JENKINS_NODE_COOKIE&lt;/code>为任何值, 如&lt;code>dontKillMe&lt;/code>. 这种方法可以解决, 记录一下. (搜索排名靠前的结果都不对).&lt;/p></description></item><item><title>MacOS安装minishift</title><link>https://atbug.com/install-minishift-on-mac/</link><pubDate>Fri, 23 Feb 2018 15:32:26 +0000</pubDate><guid>https://atbug.com/install-minishift-on-mac/</guid><description>
&lt;p>MacOS环境安装minishift&lt;/p>
&lt;h4 id="安装minishift-cli">安装minishift cli&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">brew cask install minishift
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用virtualbox安装">使用virtualbox安装&lt;/h4>
&lt;p>安装的时候可以指定HTTP代理, 拉取墙外镜像时需要; 还可以指定insecure的镜像库.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minishift start --docker-env &lt;span class="nv">HTTP_PROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.99.1:1087&amp;#34;&lt;/span> --docker-env &lt;span class="nv">HTTPS_PROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.99.1:1087&amp;#34;&lt;/span> --docker-env &lt;span class="nv">NO_PROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.0.0/16,172.30.0.0/16&amp;#34;&lt;/span> --insecure-registry&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.1.34&amp;#34;&lt;/span> --vm-driver&lt;span class="o">=&lt;/span>virtualbox
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="启动">启动&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minishift start --vm-driver&lt;span class="o">=&lt;/span>virtualbox
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="删除">删除&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minishift delete
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="打开openshift控制面板">打开Openshift控制面板&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minishift dashboard
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="获取集群ip地址">获取集群ip地址&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minishift ip
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="安装openshift-cli">安装Openshift Cli&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">brew install openshift-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以使用openshift cli进行操作. minishift安装完成后会将配置信息写入到主机的用户目录下, &lt;code>$HOME/.kube&lt;/code>目录下除了&lt;code>config&lt;/code>信息, 还有openshift的集群信息及支持的api.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">oc login -u system:admin
oc get pods --all-namespaces
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Spring Cloud Zuul详解</title><link>https://atbug.com/spring-cloud-zuul-breakdown/</link><pubDate>Thu, 22 Feb 2018 17:02:26 +0000</pubDate><guid>https://atbug.com/spring-cloud-zuul-breakdown/</guid><description>
&lt;p>Spring Cloud对Netflix Zuul做了封装集成, 使得在Spring Cloud环境中使用Zuul更方便. Netflix Zuul相关分析请看&lt;a href="http://atbug.com/learn-netflix-zuul/">上一篇&lt;/a>.&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>@EnableZuulProxy 与 @EnableZuulServer
二者的区别在于前者使用了服务发现作为路由寻址, 并使用Ribbon做客户端的负载均衡; 后者没有使用.
Zuul server的路由都通过&lt;code>ZuulProperties&lt;/code>进行配置.&lt;/p>
&lt;h3 id="具体实现">具体实现:&lt;/h3>
&lt;ol>
&lt;li>使用&lt;code>ZuulController&lt;/code>(&lt;code>ServletWrappingController&lt;/code>的子类)封装&lt;code>ZuulServlet&lt;/code>实例, 处理从&lt;code>DispatcherServlet&lt;/code>进来的请求.&lt;/li>
&lt;li>&lt;code>ZuulHandlerMapping&lt;/code>负责注册handler mapping, 将&lt;code>Route&lt;/code>的&lt;code>fullPath&lt;/code>的请求交由&lt;code>ZuulController&lt;/code>处理.&lt;/li>
&lt;li>同时使用&lt;code>ServletRegistrationBean&lt;/code>注册&lt;code>ZuulServlet&lt;/code>, 默认使用&lt;code>/zuul&lt;/code>作为urlMapping. 所有来自以&lt;code>/zuul&lt;/code>开头的path的请求都会直接进入&lt;code>ZuulServlet&lt;/code>, 不会进入&lt;code>DispatcherServlet&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h4 id="使用注解">使用注解&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;code>@EnableZuulProxy&lt;/code>引入了&lt;code>ZuulProxyMarkerConfiguration&lt;/code>, &lt;code>ZuulProxyMarkerConfiguration&lt;/code>只做了一件事, 实例化了内部类&lt;code>Marker&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulProxyMarkerConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Marker&lt;/span> &lt;span class="nf">zuulProxyMarkerBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Marker&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">Marker&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>@EnableZuulServer&lt;/code>引入了&lt;code>ZuulServerMarkerConfiguration&lt;/code>, &lt;code>ZuulServerMarkerConfiguration&lt;/code>也只做了一件事: 实例化了内部类&lt;code>Marker&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulServerMarkerConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Marker&lt;/span> &lt;span class="nf">zuulServerMarkerBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Marker&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">Marker&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="enableautoconfiguration">EnableAutoConfiguration&lt;/h4>
&lt;p>项目中使用&lt;code>@EnableAutoConfiguration&lt;/code>注解, 开启Spring上下文对象的自动配置功能, 尝试去猜测和实例化你&lt;strong>可能需要的&lt;/strong>bean.&lt;/p>
&lt;p>这个功能是基于classPath来完成的. 比如: 项目中引用了&lt;code>tomcat-embedded.jar&lt;/code>, 你可能需要一个&lt;code>TomcatEmbeddedServletContainerFactory&lt;/code>实例, 除非定义了自己的&lt;code>EmbeddedServletContainerFactory&lt;/code>实例.&lt;/p>
&lt;p>我们来接着看, 在&lt;code>spring-cloud-netflix-core&lt;/code>的&lt;code>spring.factories&lt;/code>中的&lt;code>org.springframework.boot.autoconfigure.EnableAutoConfiguration&lt;/code>实现中我们可以找到&lt;code>org.springframework.cloud.netflix.zuul.ZuulProxyAutoConfiguration&lt;/code>和&lt;code>org.springframework.cloud.netflix.zuul.ZuulServerAutoConfiguration&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ZuulServerAutoConfiguration
它的初始化条件有两个:&lt;/p>
&lt;ul>
&lt;li>&lt;code>@ConditionalOnClass(ZuulServlet.class)&lt;/code>指定classpath中需要有&lt;code>ZuulServlet.class&lt;/code>. 这个servlet负责对所有进入Zuul server的请求以及配置应用指定的&lt;code>preRoute&lt;/code>, &lt;code>route&lt;/code>, &lt;code>postRoute&lt;/code>和&lt;code>error&lt;/code>.&lt;/li>
&lt;li>&lt;code>@ConditionalOnBean(ZuulServerMarkerConfiguration.Marker.class)&lt;/code> 与&lt;code>@EnableZuulServer&lt;/code>注解呼应.&lt;/li>
&lt;/ul>
&lt;p>​&lt;code>java @Configuration @EnableConfigurationProperties({ ZuulProperties.class }) @ConditionalOnClass(ZuulServlet.class) @ConditionalOnBean(ZuulServerMarkerConfiguration.Marker.class) // Make sure to get the ServerProperties from the same place as a normal web app would @Import(ServerPropertiesAutoConfiguration.class) public class ZuulServerAutoConfiguration { ... } ​&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ZuulProxyAutoConfiguration
它有一个初始化的条件&lt;code>@ConditionalOnBean(ZuulProxyMarkerConfiguration.Marker.class)&lt;/code>, 就是上下文中需要有&lt;code>ZuulProxyMarkerConfiguration.Marker&lt;/code>这个内部类的bean. 与&lt;code>@EnableZuulProxy&lt;/code>注解呼应.&lt;/p>
&lt;p>初始化包括内置的filter, 以及Discovery, Ribbon等的初始化.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@Import&lt;/span>&lt;span class="o">({&lt;/span> &lt;span class="n">RibbonCommandFactoryConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RestClientRibbonConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">RibbonCommandFactoryConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OkHttpRibbonConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">RibbonCommandFactoryConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">HttpClientRibbonConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">})&lt;/span>
&lt;span class="nd">@ConditionalOnBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ZuulProxyMarkerConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Marker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulProxyAutoConfiguration&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">ZuulServerAutoConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>​&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h5 id="zuulserverautoconfiguration-详解">ZuulServerAutoConfiguration 详解&lt;/h5>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//声明配置
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="c1">//配置ZuulProperties实例
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@EnableConfigurationProperties&lt;/span>&lt;span class="o">({&lt;/span> &lt;span class="n">ZuulProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">})&lt;/span>
&lt;span class="c1">//条件1 存在ZuulServlet.class
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@ConditionalOnClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ZuulServlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//条件2 存在ZuulServerMarkerConfiguration.Marker.class bean, 即应用使用@EnableZuulServer注解
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@ConditionalOnBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ZuulServerMarkerConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Marker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//配置ServerProperties实例
&lt;/span>&lt;span class="c1">// Make sure to get the ServerProperties from the same place as a normal web app would
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@Import&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServerPropertiesAutoConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulServerAutoConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">ZuulProperties&lt;/span> &lt;span class="n">zuulProperties&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">ServerProperties&lt;/span> &lt;span class="n">server&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">required&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ErrorController&lt;/span> &lt;span class="n">errorController&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">HasFeatures&lt;/span> &lt;span class="nf">zuulFeature&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">HasFeatures&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">namedFeature&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Zuul (Simple)&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ZuulServerAutoConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//复合结构的RouteLocator
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@Primary&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">CompositeRouteLocator&lt;/span> &lt;span class="nf">primaryRouteLocator&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RouteLocator&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">routeLocators&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CompositeRouteLocator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routeLocators&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//没有SimpleRouteLocator.class的bean时, 使用zuulProperties实例化一个SimpleRouteLocator实例.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnMissingBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SimpleRouteLocator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">SimpleRouteLocator&lt;/span> &lt;span class="nf">simpleRouteLocator&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SimpleRouteLocator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">server&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServletPrefix&lt;/span>&lt;span class="o">(),&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zuulProperties&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//zuulController, 包装了一个ZuulServlet类型的servlet, 实现对ZuulServlet类型的servlet的初始化.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulController&lt;/span> &lt;span class="nf">zuulController&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulController&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulHandlerMapping&lt;/span> &lt;span class="nf">zuulHandlerMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RouteLocator&lt;/span> &lt;span class="n">routes&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ZuulHandlerMapping&lt;/span> &lt;span class="n">mapping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulHandlerMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routes&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">zuulController&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">mapping&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setErrorController&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">errorController&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">mapping&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ApplicationListener&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ApplicationEvent&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">zuulRefreshRoutesListener&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulRefreshListener&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnMissingBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;zuulServlet&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ServletRegistrationBean&lt;/span> &lt;span class="nf">zuulServlet&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ServletRegistrationBean&lt;/span> &lt;span class="n">servlet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ServletRegistrationBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ZuulServlet&lt;/span>&lt;span class="o">(),&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zuulProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServletPattern&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">// The whole point of exposing this servlet is to provide a route that doesn&amp;#39;t
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// buffer requests.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">servlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addInitParameter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;buffer-requests&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">servlet&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// pre filters
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ServletDetectionFilter&lt;/span> &lt;span class="nf">servletDetectionFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ServletDetectionFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FormBodyWrapperFilter&lt;/span> &lt;span class="nf">formBodyWrapperFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FormBodyWrapperFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">DebugFilter&lt;/span> &lt;span class="nf">debugFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DebugFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Servlet30WrapperFilter&lt;/span> &lt;span class="nf">servlet30WrapperFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Servlet30WrapperFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// post filters
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">SendResponseFilter&lt;/span> &lt;span class="nf">sendResponseFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SendResponseFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">SendErrorFilter&lt;/span> &lt;span class="nf">sendErrorFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SendErrorFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">SendForwardFilter&lt;/span> &lt;span class="nf">sendForwardFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SendForwardFilter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;zuul.ribbon.eager-load.enabled&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">matchIfMissing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulRouteApplicationContextInitializer&lt;/span> &lt;span class="nf">zuulRoutesApplicationContextInitiazer&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">SpringClientFactory&lt;/span> &lt;span class="n">springClientFactory&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulRouteApplicationContextInitializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">springClientFactory&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">zuulProperties&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulFilterConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ZuulFilter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">filters&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulFilterInitializer&lt;/span> &lt;span class="nf">zuulFilterInitializer&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">CounterFactory&lt;/span> &lt;span class="n">counterFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TracerFactory&lt;/span> &lt;span class="n">tracerFactory&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterLoader&lt;/span> &lt;span class="n">filterLoader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FilterLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">FilterRegistry&lt;/span> &lt;span class="n">filterRegistry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FilterRegistry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterInitializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">filters&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">counterFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">tracerFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">filterLoader&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">filterRegistry&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@ConditionalOnClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CounterService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulCounterFactoryConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CounterService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">CounterFactory&lt;/span> &lt;span class="nf">counterFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CounterService&lt;/span> &lt;span class="n">counterService&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultCounterFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">counterService&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulMetricsConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@ConditionalOnMissingBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CounterFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">CounterFactory&lt;/span> &lt;span class="nf">counterFactory&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EmptyCounterFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@ConditionalOnMissingBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TracerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">TracerFactory&lt;/span> &lt;span class="nf">tracerFactory&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EmptyTracerFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ZuulRefreshListener&lt;/span>
&lt;span class="kd">implements&lt;/span> &lt;span class="n">ApplicationListener&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ApplicationEvent&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ZuulHandlerMapping&lt;/span> &lt;span class="n">zuulHandlerMapping&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">HeartbeatMonitor&lt;/span> &lt;span class="n">heartbeatMonitor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HeartbeatMonitor&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">onApplicationEvent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ApplicationEvent&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">event&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">ContextRefreshedEvent&lt;/span>
&lt;span class="o">||&lt;/span> &lt;span class="n">event&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">RefreshScopeRefreshedEvent&lt;/span>
&lt;span class="o">||&lt;/span> &lt;span class="n">event&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">RoutesRefreshedEvent&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zuulHandlerMapping&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDirty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">event&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">HeartbeatEvent&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">heartbeatMonitor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">update&lt;/span>&lt;span class="o">(((&lt;/span>&lt;span class="n">HeartbeatEvent&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">()))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">zuulHandlerMapping&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDirty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="zuulproxyautoconfiguration-详解">ZuulProxyAutoConfiguration 详解&lt;/h5>
&lt;pre>&lt;code>​```java
//声明配置
@Configuration
//引入RibbonCommandFactory配置
@Import({ RibbonCommandFactoryConfiguration.RestClientRibbonConfiguration.class,
RibbonCommandFactoryConfiguration.OkHttpRibbonConfiguration.class,
RibbonCommandFactoryConfiguration.HttpClientRibbonConfiguration.class,
HttpClientConfiguration.class })
//配置生效条件
@ConditionalOnBean(ZuulProxyMarkerConfiguration.Marker.class)
public class ZuulProxyAutoConfiguration extends ZuulServerAutoConfiguration {
@SuppressWarnings(&amp;quot;rawtypes&amp;quot;)
@Autowired(required = false)
private List&amp;lt;RibbonRequestCustomizer&amp;gt; requestCustomizers = Collections.emptyList();
//网关服务注册实例信息
@Autowired(required = false)
private Registration registration;
//服务发现客户端
@Autowired
private DiscoveryClient discovery;
//serviceId和路由的映射逻辑, 默认为相同
@Autowired
private ServiceRouteMapper serviceRouteMapper;
@Override
public HasFeatures zuulFeature() {
return HasFeatures.namedFeature(&amp;quot;Zuul (Discovery)&amp;quot;,
ZuulProxyAutoConfiguration.class);
}
//静态和动态路由寻址: 静态从配置文件获取, 动态通过服务发现客户端完成. 后者优先级更高
@Bean
@ConditionalOnMissingBean(DiscoveryClientRouteLocator.class)
public DiscoveryClientRouteLocator discoveryRouteLocator() {
return new DiscoveryClientRouteLocator(this.server.getServletPrefix(),
this.discovery, this.zuulProperties, this.serviceRouteMapper, this.registration);
}
//装饰过滤器
// pre filters
@Bean
public PreDecorationFilter preDecorationFilter(RouteLocator routeLocator,
ProxyRequestHelper proxyRequestHelper) {
return new PreDecorationFilter(routeLocator, this.server.getServletPrefix(),
this.zuulProperties, proxyRequestHelper);
}
//基于Ribbon路由过滤器
// route filters
@Bean
public RibbonRoutingFilter ribbonRoutingFilter(ProxyRequestHelper helper,
RibbonCommandFactory&amp;lt;?&amp;gt; ribbonCommandFactory) {
RibbonRoutingFilter filter = new RibbonRoutingFilter(helper, ribbonCommandFactory,
this.requestCustomizers);
return filter;
}
//基于host的路由过滤器
@Bean
@ConditionalOnMissingBean({SimpleHostRoutingFilter.class, CloseableHttpClient.class})
public SimpleHostRoutingFilter simpleHostRoutingFilter(ProxyRequestHelper helper,
ZuulProperties zuulProperties,
ApacheHttpClientConnectionManagerFactory connectionManagerFactory,
ApacheHttpClientFactory httpClientFactory) {
return new SimpleHostRoutingFilter(helper, zuulProperties,
connectionManagerFactory, httpClientFactory);
}
@Bean
@ConditionalOnMissingBean({SimpleHostRoutingFilter.class})
public SimpleHostRoutingFilter simpleHostRoutingFilter2(ProxyRequestHelper helper,
ZuulProperties zuulProperties,
CloseableHttpClient httpClient) {
return new SimpleHostRoutingFilter(helper, zuulProperties,
httpClient);
}
//服务发现寻址刷新监听器
@Bean
public ApplicationListener&amp;lt;ApplicationEvent&amp;gt; zuulDiscoveryRefreshRoutesListener() {
return new ZuulDiscoveryRefreshListener();
}
@Bean
@ConditionalOnMissingBean(ServiceRouteMapper.class)
public ServiceRouteMapper serviceRouteMapper() {
return new SimpleServiceRouteMapper();
}
@Configuration
@ConditionalOnMissingClass(&amp;quot;org.springframework.boot.actuate.endpoint.Endpoint&amp;quot;)
protected static class NoActuatorConfiguration {
@Bean
public ProxyRequestHelper proxyRequestHelper(ZuulProperties zuulProperties) {
ProxyRequestHelper helper = new ProxyRequestHelper();
helper.setIgnoredHeaders(zuulProperties.getIgnoredHeaders());
helper.setTraceRequestBody(zuulProperties.isTraceRequestBody());
return helper;
}
}
@Configuration
@ConditionalOnClass(Endpoint.class)
protected static class EndpointConfiguration {
@Autowired(required = false)
private TraceRepository traces;
@ConditionalOnEnabledEndpoint(&amp;quot;routes&amp;quot;)
@Bean
public RoutesEndpoint routesEndpoint(RouteLocator routeLocator) {
return new RoutesEndpoint(routeLocator);
}
@ConditionalOnEnabledEndpoint(&amp;quot;routes&amp;quot;)
@Bean
public RoutesMvcEndpoint routesMvcEndpoint(RouteLocator routeLocator,
RoutesEndpoint endpoint) {
return new RoutesMvcEndpoint(endpoint, routeLocator);
}
@ConditionalOnEnabledEndpoint(&amp;quot;filters&amp;quot;)
@Bean
public FiltersEndpoint filtersEndpoint() {
FilterRegistry filterRegistry = FilterRegistry.instance();
return new FiltersEndpoint(filterRegistry);
}
@Bean
public ProxyRequestHelper proxyRequestHelper(ZuulProperties zuulProperties) {
TraceProxyRequestHelper helper = new TraceProxyRequestHelper();
if (this.traces != null) {
helper.setTraces(this.traces);
}
helper.setIgnoredHeaders(zuulProperties.getIgnoredHeaders());
helper.setTraceRequestBody(zuulProperties.isTraceRequestBody());
return helper;
}
}
private static class ZuulDiscoveryRefreshListener
implements ApplicationListener&amp;lt;ApplicationEvent&amp;gt; {
private HeartbeatMonitor monitor = new HeartbeatMonitor();
@Autowired
private ZuulHandlerMapping zuulHandlerMapping;
@Override
public void onApplicationEvent(ApplicationEvent event) {
if (event instanceof InstanceRegisteredEvent) {
reset();
}
else if (event instanceof ParentHeartbeatEvent) {
ParentHeartbeatEvent e = (ParentHeartbeatEvent) event;
resetIfNeeded(e.getValue());
}
else if (event instanceof HeartbeatEvent) {
HeartbeatEvent e = (HeartbeatEvent) event;
resetIfNeeded(e.getValue());
}
}
private void resetIfNeeded(Object value) {
if (this.monitor.update(value)) {
reset();
}
}
private void reset() {
this.zuulHandlerMapping.setDirty(true);
}
}
}
​```
&lt;/code>&lt;/pre>
&lt;h2 id="配置项">配置项&lt;/h2>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15192869619623.jpg" alt="">&lt;/p>
&lt;h4 id="zuulservletpath">zuul.servletPath&lt;/h4>
&lt;p>默认为*/zuul*, 注册ZuulServlet的时候作为urlMapping使用. 即所有来自以*/zuul*开头的path都会由ZuulServlet处理.&lt;/p>
&lt;h4 id="zuulignoredpatterns">zuul.ignoredPatterns&lt;/h4>
&lt;p>Zuul使用&lt;code>ZuulController&lt;/code>封装了&lt;code>ZuulServlet&lt;/code>. 所有进入Zuul的请求的入口都是&lt;code>ZuulController&lt;/code>.
&lt;code>ZuulController&lt;/code>的&lt;code>ZuulHandlerMapping&lt;/code>默认把&lt;code>zuul.routes.[ITEM].path&lt;/code>的请求交给&lt;code>ZuulServlet&lt;/code>处理. 如果找不到对应的path的route, 则会走其他的&lt;code>DispatcherServlet&lt;/code>&lt;/p>
&lt;p>&lt;code>zuul.ignoredPatterns&lt;/code>作用就是进入Zuul的请求, 只要match都会直接交由其他的&lt;code>DispatcherServlet&lt;/code>处理, 而不需要先检查是否有对应path的route.&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;h2 id="过滤器">过滤器&lt;/h2>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15192707341614.jpg" alt="">&lt;/p>
&lt;h3 id="zuulserverautoconfiguration">ZuulServerAutoConfiguration&lt;/h3>
&lt;h4 id="servletdetectionfilter">ServletDetectionFilter&lt;/h4>
&lt;p>检查请求的入口是&lt;code>DispatcherServlet&lt;/code>还是&lt;code>ZuulServlet&lt;/code>
如果是&lt;code>DispatcherServlet&lt;/code>进来的请求, 将&lt;code>RequestContext&lt;/code>中的属性&lt;code>isDispatcherServletRequest&lt;/code>设置为ture.&lt;/p>
&lt;p>检查的方法是判断&lt;code>RequestContext&lt;/code>中的请求类型是否为&lt;code>HttpServletRequestWrapper&lt;/code>类型, 因为&lt;code>ZuulServlet&lt;/code>进来的请求会使用&lt;code>HttpServletRequestWrapper&lt;/code>进行再次封装; 同时检查请求中中是否有&lt;code>DispatcherServlet.CONTEXT&lt;/code>属性, 因为&lt;code>DispatcherServlet&lt;/code>进来的请求会带有该属性.&lt;/p>
&lt;h4 id="formbodywrapperfilter">FormBodyWrapperFilter&lt;/h4>
&lt;p>为下游的服务解析表单数据, 并重新编码. 只针对multipart/form-data和application/x-www-form-urlencoded类型的请求.&lt;/p>
&lt;h4 id="debugfilter">DebugFilter&lt;/h4>
&lt;p>通过设置&lt;code>zuul.debug.parameter&lt;/code>属性控制, 默认启用.
执行时将上下文中的&lt;code>debugRouting&lt;/code>和&lt;code>debugRequest&lt;/code>设置为&lt;code>true&lt;/code>&lt;/p>
&lt;h4 id="servlet30wrapperfilter">Servlet30WrapperFilter&lt;/h4>
&lt;p>使用&lt;code>Servlet30RequestWrapper&lt;/code>封装请求, 强制启用.&lt;/p>
&lt;h4 id="sendresponsefilter">SendResponseFilter&lt;/h4>
&lt;p>后执行的过滤器, 负责将代理请求的响应写入当前的请求的响应中.&lt;/p>
&lt;h3 id="zuulproxyautoconfiguration">ZuulProxyAutoConfiguration&lt;/h3>
&lt;h4 id="predecorationfilter">PreDecorationFilter&lt;/h4>
&lt;p>Pre类型的过滤器, 通过提供的RouteLocator决定将如何请求路由到哪里和如何路由. 同时为下游请求添加多个与代理相关的头信息. 当&lt;code>RequestContext&lt;/code>中不存在&lt;code>FORWARD_TO_KEY&lt;/code>和&lt;code>SERVICE_ID_KEY&lt;/code>信息时生效.&lt;/p>
&lt;p>将路由判断结果写入&lt;code>routeHost&lt;/code>, &lt;code>FORWARD_TO_KEY&lt;/code>或者&lt;code>SERVICE_ID_KEY&lt;/code>.&lt;/p>
&lt;h4 id="ribbonroutingfilter">RibbonRoutingFilter&lt;/h4>
&lt;p>Route类型的过滤器, 当&lt;code>RequestContext&lt;/code>中&lt;code>routeHost&lt;/code>为空, 且有&lt;code>serviceId&lt;/code>值时生效.&lt;/p>
&lt;p>使用&lt;code>RequestContext&lt;/code>构建&lt;code>RibbonCommandContext&lt;/code>, 通过&lt;code>RibbonCommandFactory&lt;/code>进而创建&lt;code>RibbonCommand&lt;/code>并执行. 最后通过&lt;code>ProxyRequestHelper&lt;/code>将响应结果记录到&lt;code>RequestContext&lt;/code>中.&lt;/p>
&lt;h4 id="simplehostroutingfilter">SimpleHostRoutingFilter&lt;/h4>
&lt;p>Route类型的过滤器, 当&lt;code>RequestContext&lt;/code>中的&lt;code>routeHost&lt;/code>不为空时生效. 使用Apache的HttpClient发送请求&lt;/p>
&lt;h2 id="监听器">监听器&lt;/h2>
&lt;h4 id="zuulrefreshlistener">ZuulRefreshListener&lt;/h4>
&lt;p>通过监听应用程序事件(&lt;code>ContextRefreshedEvent&lt;/code>, &lt;code>RefreshScopeRefreshedEvent&lt;/code>, &lt;code>RoutesRefreshedEvent&lt;/code>和&lt;code>RoutesRefreshedEvent&lt;/code>)更新handler mapping的注册信息. 前两个事件在&lt;code>ContextRefresh&lt;/code>时发出; 第三个是通过JMX重置路由时发出(参考&lt;code>RoutesMvcEndpoint&lt;/code>); 最后一个是&lt;code>DiscoveryClient&lt;/code>每次拉取服务注册信息后发出.&lt;/p>
&lt;p>收到事件后, 将&lt;code>ZuulHandlerMapping&lt;/code>的&lt;code>dirty&lt;/code>变量置为&lt;code>true&lt;/code>, 当下次请求进来时, 检查到&lt;code>dirty&lt;/code>为&lt;code>true&lt;/code>, 就会重新注册url mapping.&lt;/p>
&lt;h4 id="zuuldiscoveryrefreshlistener">ZuulDiscoveryRefreshListener&lt;/h4>
&lt;p>监听应用程序事件(&lt;code>InstanceRegisteredEvent&lt;/code>, &lt;code>ParentHeartbeatEvent&lt;/code>和&lt;code>HeartbeatEvent&lt;/code>)更新handler mapping的注册信息.&lt;/p>
&lt;p>&lt;code>InstanceRegisteredEvent&lt;/code>当前路由服务实例完成服务注册后发出的事件.
&lt;code>ParentHeartbeatEvent&lt;/code>当&lt;code>DiscoveryClient&lt;/code>定位到&lt;em>Config Server&lt;/em>服务的时候有&lt;code>bootstrapContext&lt;/code>发给应用程序上下文的事件.
&lt;code>HeartbeatEvent&lt;/code>由&lt;code>DiscoveryClient&lt;/code>每次拉取服务注册信息后发出.&lt;/p></description></item><item><title>Spring Cloud - Eureka服务注册</title><link>https://atbug.com/spring-cloud-service-registry-via-eureka/</link><pubDate>Wed, 14 Feb 2018 07:32:43 +0000</pubDate><guid>https://atbug.com/spring-cloud-service-registry-via-eureka/</guid><description>
&lt;p>之前分析过&lt;a href="http://atbug.com/spring-cloud-eureka-client-source-code-analysis/">Spring Cloud的Eureka服务发现&lt;/a>, 今天分析一下服务注册.&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;h3 id="bootstrapconfiguration">BootstrapConfiguration&lt;/h3>
&lt;h4 id="eurekadiscoveryclientconfigservicebootstrapconfiguration">EurekaDiscoveryClientConfigServiceBootstrapConfiguration&lt;/h4>
&lt;p>spring-cloud-config环境中使用的配置&lt;/p>
&lt;p>引入&lt;code>EurekaDiscoveryClientConfiguration&lt;/code>和&lt;code>EurekaClientAutoConfiguration&lt;/code>&lt;/p>
&lt;h5 id="eurekadiscoveryclientconfiguration">EurekaDiscoveryClientConfiguration&lt;/h5>
&lt;ol>
&lt;li>在spring-cloud中(通过是否存在RefreshScopeRefreshedEvent.class判断), 添加&lt;code>RefreshScopeRefreshedEvent&lt;/code>的listener. 收到事件后重新注册实例.&lt;/li>
&lt;li>在&lt;code>eureka.client.healthcheck.enabled&lt;/code>设置为true时, 注册&lt;code>EurekaHealthCheckHandler&lt;/code>bean. &lt;code>EurekaHealthCheckHandler&lt;/code>负责将应用状态映射为实例状态&lt;code>InstanceStatus&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h5 id="eurekaclientautoconfiguration">EurekaClientAutoConfiguration&lt;/h5>
&lt;p>支持spring-cloud和非spring-cloud环境, 在spring-cloud环境中, 下面两个bean要使用&lt;code>@RefreshScope&lt;/code>标注&lt;/p>
&lt;ol>
&lt;li>实例化&lt;code>EurekaClient&lt;/code>bean, 在spring-cloud中使用实现类&lt;code>CloudEurekaClient&lt;/code>.&lt;/li>
&lt;li>使用&lt;code>EurekaInstanceConfig&lt;/code>实例, 实例化&lt;code>ApplicationInfoManager&lt;/code>bean&lt;/li>
&lt;/ol>
&lt;h3 id="enableautoconfiguration">EnableAutoConfiguration&lt;/h3>
&lt;h4 id="eurekaclientconfigserverautoconfiguration">EurekaClientConfigServerAutoConfiguration&lt;/h4>
&lt;p>在spring-cloud-config的环境中, 将&lt;code>configPath&lt;/code>加入到实例的metadata map中.&lt;/p>
&lt;h4 id="eurekadiscoveryclientconfigserviceautoconfiguration">EurekaDiscoveryClientConfigServiceAutoConfiguration&lt;/h4>
&lt;p>当config客户端希望通过服务发现寻找config服务的时候使用的引导配置&lt;/p>
&lt;p>在&lt;code>spring.cloud.config.discovery.enabled&lt;/code>为&lt;code>true&lt;/code>时, 关闭父application context里实例化的&lt;code>EurekaClient&lt;/code>实例. 只使用当前上下文里的实例.&lt;/p>
&lt;h4 id="eurekaclientautoconfiguration-1">EurekaClientAutoConfiguration&lt;/h4>
&lt;p>&lt;strong>核心配置&lt;/strong>
支持spring-cloud(支持动态配置)和非spring-cloud环境, &lt;code>EurekaClient&lt;/code>和&lt;code>EurekaInstanceConfig&lt;/code>两个bean要使用&lt;code>@RefreshScope&lt;/code>标注&lt;/p>
&lt;ol>
&lt;li>实例化当前服务实例信息&lt;code>EurekaInstanceConfigBean&lt;/code>的实例&lt;/li>
&lt;li>实例化&lt;code>DiscoveryClient&lt;/code>的实现, 在这里是&lt;code>EurekaDiscoveryClient&lt;/code>&lt;/li>
&lt;li>实例化&lt;code>EurekaServiceRegistry&lt;/code>&lt;/li>
&lt;li>实例化&lt;code>EurekaRegistration&lt;/code>&lt;/li>
&lt;li>实例化&lt;code>EurekaAutoServiceRegistration&lt;/code>, 这个类实现了StartLifecycle接口. 在ApplicationContext refresh或者shutdown之后注册或者注销当前实例&lt;/li>
&lt;li>实例化&lt;code>EurekaClient&lt;/code>bean, 在spring-cloud中使用实现类&lt;code>CloudEurekaClient&lt;/code>&lt;/li>
&lt;li>使用&lt;code>EurekaInstanceConfig&lt;/code>实例, 实例化&lt;code>ApplicationInfoManager&lt;/code>bean&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15185619590053.jpg" alt="EurekaClientAutoConfiguration">&lt;/p>
&lt;h4 id="ribboneurekaautoconfiguration">RibbonEurekaAutoConfiguration&lt;/h4>
&lt;p>当启用Eureka client(eureka.client.enable为true和ribbon.eureka.enabled为true时, 默认为true)时配置默认基于eureka的ribbon.
使用&lt;code>EurekaRibbonClientConfiguration&lt;/code>提供的配置: RibbonPing, ServerList, ServerIntrospector.&lt;/p>
&lt;h4 id="eurekadiscoveryclientconfiguration-1">EurekaDiscoveryClientConfiguration&lt;/h4>
&lt;p>提供监听&lt;code>RefreshScopeRefreshedEvent&lt;/code>的监听器, 当事件发生时注销并重新注册(防止metadata发生改变)
提供一个默认的EurekaHealthCheckHandler实例, 当bean不存在的且&lt;code>eureka.client.healthcheck.enabled&lt;/code>为true时.&lt;/p>
&lt;h2 id="主要类">主要类&lt;/h2>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15185644052296.jpg" alt="">&lt;/p>
&lt;h3 id="serviceregistry">ServiceRegistry&lt;/h3>
&lt;p>spring提供的服务实例注册和注销的接口.&lt;/p>
&lt;h3 id="eurekaserviceregistry">EurekaServiceRegistry&lt;/h3>
&lt;p>ServiceRegistry的Eureka实现. 注册和注销的实现是通过&lt;code>EurekaRegistration&lt;/code>的&lt;code>ApplicationInfoManager&lt;/code>修改实例状态实现的.&lt;/p>
&lt;h3 id="eurekaregistration">EurekaRegistration&lt;/h3>
&lt;p>通过实现&lt;code>ServiceInstance&lt;/code>提供访问实例信息的接口,&lt;/p>
&lt;h3 id="applicationinfomanager">ApplicationInfoManager&lt;/h3>
&lt;p>提供修改实例状态的接口, 并通知状态变化的监听器.
提供内部类&lt;code>StatusChangeListener&lt;/code>.
提供注册和注销状态变化监听器的接口, Eureka的&lt;code>DiscoveryClient&lt;/code>中通过匿名类的方式实现了该接口, 当实例状态发生变化时, 刷新实例状态.&lt;/p></description></item><item><title>初识Netflix Zuul</title><link>https://atbug.com/learn-netflix-zuul/</link><pubDate>Sun, 11 Feb 2018 10:07:18 +0000</pubDate><guid>https://atbug.com/learn-netflix-zuul/</guid><description>
&lt;p>嵌入式的zuul代理&lt;/p>
&lt;p>使用了Netfilx OSS的其他组件:&lt;/p>
&lt;ul>
&lt;li>Hystrix 熔断&lt;/li>
&lt;li>Ribbon 负责发送外出请求的客户端, 提供软件负载均衡功能&lt;/li>
&lt;li>Trubine 实时地聚合细粒度的metrics数据&lt;/li>
&lt;li>Archaius 动态配置&lt;/li>
&lt;/ul>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>由于2.0停止开发且会有bug, 故下面的分析基于1.x版本.&lt;/p>
&lt;h3 id="特性">特性&lt;/h3>
&lt;ul>
&lt;li>Authentication 认证&lt;/li>
&lt;li>Insights 洞察&lt;/li>
&lt;li>Stress Testing 压力测试&lt;/li>
&lt;li>Canary Testing 金丝雀测试&lt;/li>
&lt;li>Dynamic Routing 动态路由&lt;/li>
&lt;li>Multi-Region Resiliency 多区域弹性&lt;/li>
&lt;li>Load Shedding 负载脱落&lt;/li>
&lt;li>Security 安全&lt;/li>
&lt;li>Static Response handling 静态响应处理&lt;/li>
&lt;li>Multi-Region Resiliency 主动/主动流量管理&lt;/li>
&lt;/ul>
&lt;h3 id="zuul核心架构">Zuul核心架构&lt;/h3>
&lt;h4 id="过滤器加载器">过滤器加载器&lt;/h4>
&lt;p>从文件目录定时的监控文件, 编译成Class并加载到过滤器链中.&lt;/p>
&lt;h4 id="贯穿整个请求的requestcontext">贯穿整个请求的RequestContext&lt;/h4>
&lt;p>将Servlet的请求和响应初始化成&lt;code>RequestContext&lt;/code>, 保存在ThreadLocal中贯穿整个请求.&lt;/p>
&lt;p>以及添加Netfix库的指定概念和数据的扩展对象&lt;code>NFRequestContext&lt;/code>, 如&lt;code>Eureka&lt;/code>&lt;/p>
&lt;h4 id="四种过滤器">四种过滤器:&lt;/h4>
&lt;ul>
&lt;li>preRoute&lt;/li>
&lt;li>route&lt;/li>
&lt;li>postRoute&lt;/li>
&lt;li>error&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/1000/1*j9iGkeQ7bPK2nC1a7BgFOw.png" alt="Zuul Core Architecture">&lt;/p>
&lt;h3 id="zuul请求生命周期">Zuul请求生命周期&lt;/h3>
&lt;p>&lt;img src="https://camo.githubusercontent.com/4eb7754152028cdebd5c09d1c6f5acc7683f0094/687474703a2f2f6e6574666c69782e6769746875622e696f2f7a75756c2f696d616765732f7a75756c2d726571756573742d6c6966656379636c652e706e67" alt="Request Lifecycle">&lt;/p>
&lt;h3 id="zuul-netflix">Zuul Netflix&lt;/h3>
&lt;p>使用Netflix的其他组件&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/1*pz6sv69la9ek6yWNTPqymQ.png" alt="Netflix OSS libraries in Zuul">&lt;/p>
&lt;h3 id="zull在netfilx的应用">zull在Netfilx的应用&lt;/h3>
&lt;h4 id="精确路由">精确路由&lt;/h4>
&lt;p>创建一个过滤器是特定的用户或者设备的请求重定向到独立的API集群达到调试的目的.&lt;/p>
&lt;h4 id="多区域弹">多区域弹&lt;/h4>
&lt;p>Zuul是我们称为地峡(Isthmus)的多地区ELB弹性项目的核心. 作为Isthmus的一部分, Zuul被用来将请求从西海岸数据中心传送到东海岸, 以帮助我们在我们的关键领域的ELB中实现多区域冗余.&lt;/p>
&lt;h4 id="压力测试">压力测试&lt;/h4>
&lt;p>在&lt;code>Zuul&lt;/code>过滤器中使用动态&lt;code>Archaius&lt;/code>配置逐步提升进入一部分服务器的流量, 自动实现压力测试.&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;h3 id="如何工作">如何工作&lt;/h3>
&lt;h4 id="startserver初始化">StartServer初始化&lt;/h4>
&lt;p>实现了ServletContextListener接口, 如果需要与netflix oss其他组件集成(如Eureka, Archaius)实例化的时候启动一个Karyon服务器.&lt;/p>
&lt;p>在ServletContext初始化完成后调用&lt;code>initGroovyFilterManager&lt;/code>和&lt;code>initJavaFilters&lt;/code>.&lt;/p>
&lt;h5 id="initgroovyfiltermanager">initGroovyFilterManager&lt;/h5>
&lt;p>向过滤器注册表中添加Groovy过滤器.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">initGroovyFilterManager&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//设置GroovyCompiler
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//GroovyCompiler是DynamicCompiler的实现类
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">FilterLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">setCompiler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">GroovyCompiler&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//从配置中是获取过滤器源文件的根目录
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;zuul.filter.root&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">scriptRoot&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">separator&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//设置文件名过滤器, 这里只过滤`.groovy`类型文件.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">FilterFileManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilenameFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">GroovyFileFilter&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//初始化过滤器文件管理器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//第一个参数是扫描目录的间隔时间, 单位为秒
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//后面跟要扫描的子目录
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//1. 初始化的时候会扫描各个子目录, 使用文件名过滤器获取到所有的过滤器源文件.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//2. 遍历这些文件, 使用`FilterLoader.getInstance().putFilter(file)`, compiler编译之后使用FilterFactory进行实例化, 并添加到过滤器注册表中. 是否实例化的逻辑判断是否在上次修改且文件最后修改时间是否相同. 如果是上次修改之后又有改动, 要重建改类型过滤器的列表. 如果没有修改, 对改文件不做任何处理.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//3. 启动线程, 每个5秒执行一个1和2的操作.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">FilterFileManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">init&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;pre&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;route&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">scriptRoot&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;post&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="initjavafilters">initJavaFilters&lt;/h5>
&lt;p>向过滤器注册表中添加Java过滤器.&lt;/p>
&lt;p>*官方没有提供从java源代码到classs的编译器.&lt;/p>
&lt;h4 id="zuulservlet">ZuulServlet&lt;/h4>
&lt;p>核心zuul servlet, 初始化和卸掉zullFilter的运行.
使用ZuulRunner将Servlet的请求和响应初始化成&lt;code>RequestContext&lt;/code>, 并将&lt;code>FilterProcessor&lt;/code>的调用包装成&lt;code>preRoute()&lt;/code>, &lt;code>route()&lt;/code>, &lt;code>postRoute()&lt;/code>和&lt;code>error()&lt;/code>方法. 初始化时可以选择将请求包装成&lt;code>HttpServletRequestWrapper&lt;/code>并缓冲请求消息体.&lt;/p>
&lt;p>初始化后的&lt;code>RequestContext&lt;/code>会放在&lt;code>ThreadLocal&lt;/code>中, 供后续的filter访问.&lt;/p>
&lt;p>&lt;strong>Service方法&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">service&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">javax&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">servlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ServletRequest&lt;/span> &lt;span class="n">servletRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">javax&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">servlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ServletResponse&lt;/span> &lt;span class="n">servletResponse&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">init&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">servletRequest&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletResponse&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">servletResponse&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// Marks this request as having passed through the &amp;#34;Zuul engine&amp;#34;, as opposed to servlets
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// explicitly bound in web.xml, for which requests will not have the same data attached
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">RequestContext&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RequestContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setZuulEngineRan&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">preRoute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ZuulException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">postRoute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">route&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ZuulException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">postRoute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">postRoute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ZuulException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ZuulException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">500&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;UNHANDLED_EXCEPTION_&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">RequestContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">unset&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过&lt;code>FilterProcessor.getInstnace()&lt;/code>调用&lt;code>FilterProcessor&lt;/code>的&lt;code>preRoute()&lt;/code>, &lt;code>route()&lt;/code>, &lt;code>postRoute()&lt;/code>和&lt;code>error()&lt;/code>方法.&lt;/p>
&lt;p>四个方法都是通过&lt;code>FilterLoader.getInstance()&lt;/code>获取对应类型的filter列表.&lt;/p>
&lt;p>遍历filter列表, 调用filter的&lt;code>runFilter()&lt;/code>方法.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * runFilter checks !isFilterDisabled() and shouldFilter(). The run() method is invoked if both are true.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @return the return from ZuulFilterResult
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span> &lt;span class="nf">runFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ZuulFilterResult&lt;/span> &lt;span class="n">zr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//动态获取`zuul.filerClassName.filterType.disable`的值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//动态获取使用Archaius的DynamicPropertyFactory获取*, 通过这个可实现动态配置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">isFilterDisabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//调用filter类的校验逻辑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">shouldFilter&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Tracer&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TracerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">startMicroTracer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ZUUL::&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getSimpleName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//执行filter的逻辑处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//执行成功
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">zr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ExecutionStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SUCCESS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ZUUL::&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getSimpleName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; failed&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//执行失败
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">zr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ExecutionStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">FAILED&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">zr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stopAndLog&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//filter不适用, 直接跳过
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">zr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZuulFilterResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ExecutionStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SKIPPED&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">zr&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="contextlifecyclefilter">ContextLifecycleFilter&lt;/h4>
&lt;p>清空&lt;code>ThreadLocal&lt;/code>中的&lt;code>RequestContext&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServletRequest&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletResponse&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">chain&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">chain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">RequestContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">unset&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="调试">调试&lt;/h3>
&lt;p>调试信息中的名词&lt;/p>
&lt;ul>
&lt;li>ZUUL_DEBUG 输出zuul的诊断信息&lt;/li>
&lt;li>REQUEST_DUBG 输出Http请求的信息. REQUEST -&amp;gt; ZUUL -&amp;gt; ORIGIN_RESPONSE -&amp;gt; OUTBOUND
&lt;ul>
&lt;li>REQUEST 进入zuul的请求&lt;/li>
&lt;li>ZUUL zuul转发给原目标的请求&lt;/li>
&lt;li>ORIGIN_RESPONSE 原目标返回的原始响应&lt;/li>
&lt;li>OUTBOND zuul返回给客户端的响应&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="接口和类">接口和类&lt;/h2>
&lt;h3 id="接口">接口&lt;/h3>
&lt;h4 id="dynamiccodecompiler">DynamicCodeCompiler&lt;/h4>
&lt;p>从源代码编译成Classes的接口, 目前只有一个&lt;code>GroovyCompiler&lt;/code>实现类&lt;/p>
&lt;h4 id="filterfactory">FilterFactory&lt;/h4>
&lt;p>生成给定的过滤器类实例的接口, 实现类&lt;code>DefaultFilterFactory&lt;/code>&lt;/p>
&lt;h4 id="filterusagenotifier">FilterUsageNotifier&lt;/h4>
&lt;p>注册过滤器使用时的回调的接口&lt;/p>
&lt;h3 id="类">类&lt;/h3>
&lt;h4 id="defaultfilterfactory">DefaultFilterFactory&lt;/h4>
&lt;p>使用反射实现&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">ZuulFilter&lt;/span> &lt;span class="nf">newInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InstantiationException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IllegalAccessException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ZuulFilter&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="filterfilemanager">FilterFileManager&lt;/h4>
&lt;p>从过滤器目录中获取修改和新增的Groovy过滤器文件.&lt;/p>
&lt;h4 id="filterloader">FilterLoader&lt;/h4>
&lt;p>持有过滤器注册表, 加载过滤器.&lt;/p></description></item><item><title>ConfigurationProperties到底需不需要getter</title><link>https://atbug.com/configurationproperties-requires-getter-or-not/</link><pubDate>Wed, 07 Feb 2018 15:53:21 +0000</pubDate><guid>https://atbug.com/configurationproperties-requires-getter-or-not/</guid><description>
&lt;p>为什么要讨论这个问题, 工作中一个同事写的类使用了&lt;code>ConfigurationProperties&lt;/code>, 只提供了标准的setter方法. 属性的访问, 提供了定制的方法. 可以参考&lt;code>EurekaClientConfigBean&lt;/code>.&lt;/p>
&lt;p>他使用的是spring boot 2.0.0.M5版本, 可以正常获取配置文件中的属性值, 但是在1.5.8.RELEASE获取不到.&lt;/p>
&lt;p>看下文档和源码:&lt;/p>
&lt;blockquote>
&lt;p>Annotation for externalized configuration. Add this to a class definition or a @Bean method in a @Configuration class if you want to bind and validate some external Properties (e.g. from a .properties file).&lt;/p>
&lt;/blockquote>
&lt;p>外置配置的注解. 当需要绑定外置配置(如properties或者yaml配置)的时候, 将其加到使用了&lt;code>@Configuration&lt;/code>注解的类声明处或者&lt;code>@Bean&lt;/code>标注的方法上.&lt;/p>
&lt;p>值的绑定是通过&lt;code>ConfigurationPropertiesBindingPostProcessor&lt;/code>在bean实例创建后, 初始化回调(如&lt;code>InitializingBean&lt;/code>的&lt;code>afterPropertiesSet&lt;/code>方法)或者&lt;code>init-method&lt;/code>之前之前完成的.&lt;/p>
&lt;h3 id="15x">1.5.x&lt;/h3>
&lt;p>执行绑定的时候如果找不到getter方法, 会抛出&lt;code>RelaxedBindingNotWritablePropertyException&lt;/code>异常. debug模式下, 会打印&lt;strong>Ignoring benign property binding failure&lt;/strong>.&lt;/p>
&lt;h3 id="2x">2.x&lt;/h3>
&lt;p>2.x版本中, 如果找不到getter方法, 会将原值默认为null, 并继续执行绑定.&lt;/p></description></item><item><title>Go In Action 读书笔记 四</title><link>https://atbug.com/go-in-action-four/</link><pubDate>Mon, 01 Jan 2018 12:30:55 +0000</pubDate><guid>https://atbug.com/go-in-action-four/</guid><description>
&lt;p>&lt;img src="https://talks.golang.org/2013/go4python/img/fib-go.png" alt="">&lt;/p>
&lt;h2 id="并发模式">并发模式&lt;/h2>
&lt;h3 id="runner">runner&lt;/h3>
&lt;p>runner展示了如何使用通道来监视程序的执行时间, 如果程序执行时间太长, 也可以用终止程序.
这个程序可用作corn作业执行&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">runner&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;errors&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;os/signal&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Runner&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//系统信号通道
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">interrupt&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Signal&lt;/span>
&lt;span class="c1">//任务执行结果通道
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">complete&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">error&lt;/span>
&lt;span class="c1">//报告任务处理已经超时
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">timeout&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Time&lt;/span>
&lt;span class="nx">tasks&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//超时错误
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">ErrTimeout&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;received timeout&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//系统终端错误
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">ErrInterrupt&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;received interrupt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//返回一个新的准备使用的Runner
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Runner&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Runner&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">interrupt&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Signal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">complete&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">timeout&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">After&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">//After函数会使用goroutine启动一个timer, timer时间到后向channel写入Time
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//向Runner中添加task
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Runner&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">AddTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tasks&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tasks&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tasks&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tasks&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Runner&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Start&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//希望接收所有终端信号
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">signal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Notify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">interrupt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Interrupt&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//使用goroutine执行任务
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">complete&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="k">select&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//main线程在select处阻塞, 要么等待任务执行结果结束, 要么等待计时器报告超时
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">complete&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//阻塞等待任务执行结果
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">timeout&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">//阻塞等待超时报告
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">ErrTimeout&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Runner&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">task&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tasks&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//检测是否有来自操作系统的终端信号
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">getInterrupted&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">ErrInterrupt&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//执行任务
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nf">task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Runner&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">getInterrupted&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//使用default将select的阻塞变成非阻塞. 每次方法调用只是检查通道中是否有数据, 不阻塞
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">select&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">interrupt&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;github.com/addozhang/learning-go-lang/runner&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Starting working.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="nx">timeout&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>
&lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">runner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">timeout&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AddTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">createTask&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nf">createTask&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nf">createTask&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Start&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">runner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ErrTimeout&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Terminating due to timeout.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">runner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ErrInterrupt&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Terminating due to interrupt.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Process ended.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//创建任务, 返回接受int类型参数的函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">createTask&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Processor - Task #%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Duration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//创建任务, 返回接受int类型参数的函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">createTask&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Processor - Task #%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Duration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//结果输出
&lt;/span>&lt;span class="c1">//2018/01/01 09:45:57 Starting working.
&lt;/span>&lt;span class="c1">//2018/01/01 09:45:57 Processor - Task #0
&lt;/span>&lt;span class="c1">//2018/01/01 09:45:57 Processor - Task #1
&lt;/span>&lt;span class="c1">//2018/01/01 09:45:58 Processor - Task #2
&lt;/span>&lt;span class="c1">//2018/01/01 09:46:00 Terminating due to timeout.
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pool">pool&lt;/h3>
&lt;p>下面的代码展示如何使用有缓冲通道实现资源池, 以1.5版本为基础写的. 1.6之后的版本, 标准库中自带了资源池的实现&lt;code>sycn.Pool&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">pool&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;io&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;errors&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Pool&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">m&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Mutex&lt;/span> &lt;span class="c1">//互斥锁用于安全地方访问资源池
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">resources&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Closer&lt;/span> &lt;span class="c1">//资源池通道, 需要实现io.Closer接口
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">factory&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Closer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//创建资源的工厂方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">closed&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="c1">//资源池是否关闭
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//资源池关闭错误
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">ErrPoolClosed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Pool has ben closed.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fn&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Closer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">size&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Pool&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">size&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Size value too small.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Pool&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">resources&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Closer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">size&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">//使用有缓冲资源池
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">factory&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//从池中获取资源
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Pool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Acquire&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Closer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">select&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resources&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">//从资源池通道获取一个资源, 因为有default, 不阻塞
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Acqure: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Shared Resources&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrPoolClosed&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">//资源池通道没有数据时, 新建一个
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Acquire: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;New Resource&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">factory&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//释放资源
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Pool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Closer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//需要使用互斥锁操作资源池
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">defer&lt;/span> &lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">closed&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">select&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resources&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">//将资源放回通道. 如果通道满不会阻塞, 因为有default
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Release: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;In Queue&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">//如果通道已满, 直接关闭资源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Release: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Closing&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//关闭资源池
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Pool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//加互斥锁
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">defer&lt;/span> &lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">closed&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//将池关闭
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">closed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="c1">//在清空通道资源之前关闭通道, 如果不关闭会发声死锁
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resources&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resources&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//关闭通道中的资源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;github.com/addozhang/learning-go-lang/pool&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;io&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;sync/atomic&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;math/rand&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">maxGoRoutines&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">25&lt;/span>
&lt;span class="nx">pooledResources&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">dbConnection&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ID&lt;/span> &lt;span class="kt">int32&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">idCounter&lt;/span> &lt;span class="kt">int32&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">dbConn&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">dbConnection&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Close: Connection, &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dbConn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">createConnection&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Closer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">id&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AddInt32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">idCounter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Create: New Connection&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">dbConnection&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">maxGoRoutines&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">pool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">createConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pooledResources&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">query&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">query&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">maxGoRoutines&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">query&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">q&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">performQuery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">q&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}(&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Shutdown Program.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">performQuery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">query&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pool&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">pool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">dbConn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">pool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Acquire&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">dbConn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Duration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rand&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Intn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Millisecond&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;QID[%d] CID[%d]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">query&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dbConn&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">dbConnection&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="work">work&lt;/h3>
&lt;p>下面的代码展示了如何使用无缓冲通道来创建一个goroutine池. 这个goroutine执行并控制一组工作, 让其并发执行.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">worker&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Worker&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">Task&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Pool&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">worker&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="nx">Worker&lt;/span>
&lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">maxRoutines&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Pool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">p&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">Pool&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">worker&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="nx">Worker&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">maxRoutines&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">maxRoutines&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">w&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">worker&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">w&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Task&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Pool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">Worker&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">worker&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">w&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Pool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Shutdown&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">worker&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;span class="nx">worker2&lt;/span> &lt;span class="s">&amp;#34;github.com/addozhang/learning-go-lang/worker&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">names&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;steve&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;mary&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;therese&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;json&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">namePrinter&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">np&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">namePrinter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Task&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">np&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">p&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">worker2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">names&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">names&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">np&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">namePrinter&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">np&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Shutdown&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go In Action 读书笔记 三</title><link>https://atbug.com/go-in-action-three/</link><pubDate>Mon, 01 Jan 2018 12:30:31 +0000</pubDate><guid>https://atbug.com/go-in-action-three/</guid><description>
&lt;h2 id="并发">并发&lt;/h2>
&lt;p>Go语言里的并发是指让某个函数可以独立于其他函数运行的能力. 当一个函数创建为goroutine时, Go会将其视为一个独立的工作单元. 这个工作单元会被调度到可用的&lt;strong>逻辑处理器&lt;/strong>上执行.&lt;/p>
&lt;p>Go的运行时调度器可以管理所有创建的goroutine, 并为其分配执行时间.
这个调度器在操作系统之上, 将操作系统的线程与逻辑处理器绑定, 并在逻辑处理器执行goroutine. &lt;strong>调度器可以在任何给定的时间, 全面控制哪个goroutine在哪个逻辑处理器上运行&lt;/strong>.&lt;/p>
&lt;p>Go的并发同步模型来自一个叫做通信顺序进程(Communicating Sequential Processes, &lt;a href="http://www.usingcsp.com">CSP&lt;/a>). CSP是一个消息传递模型, 通过在goroutine之前传递数据来传递消息, 不需要通过加锁实现同步访问. 用于在goroutine间传递消息的数据结构叫做通道(channel).&lt;/p>
&lt;h3 id="并发与并行">并发与并行&lt;/h3>
&lt;p>操作系统的线程(thread)和进程(process).&lt;/p>
&lt;p>进程类似应用程序在运行中需要用到和维护的各种资源的容器.
资源包括但不限于: 内存(来自文件系统的代码和数据), 句柄(文件, 设备, 操作系统), 线程.&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15144419454015.jpg" alt="">&lt;/p>
&lt;p>每个进程至少有一个线程, 一个线程是一个执行空间. 这个空间会被操作系统调度来运行函数中所写的代码. 每个线程的初始线程被称为主线程. 主线程终止时, 应用程序也会终止.操作系统将线程调度到某个处理器上运行, 这个处理器不一定是进程所在的处理器.&lt;/p>
&lt;p>Go语言的运行时会在&lt;strong>逻辑处理器&lt;/strong>上调度goroutine运行. 每个逻辑处理器都分别绑定到单个操作系统线程. Go语言的运行时默认会为每个可用的物理处理器分配一个逻辑处理器.&lt;/p>
&lt;p>创建一个gorouine并准备运行, 这个goroutine就会被放到调度器的&lt;strong>全局运行队列&lt;/strong>中. 之后, 调度器就将这些队列中的goroutine分配给一个逻辑处理器, 并放到该逻辑处理器对应的&lt;strong>本地运行队列&lt;/strong>, 然后在队列中等待被逻辑处理器执行.&lt;/p>
&lt;p>如果goroutine执行了阻塞线程的调用, 调度器会将这个操作系统线程与逻辑处理器分离, 并创建一个新的线程与逻辑处理器绑定, 然后. 一旦阻塞的调用完成, 该goroutine会回到本地运行队列.&lt;/p>
&lt;p>如果阻塞调用是网络I/O, goroutine会与逻辑处理器分离, 移到集成了网络轮询器的运行时. 一旦轮询器指示某个网络的读或写操作已经就绪, 对应的goroutine就会重新分配到逻辑处理器上完成操作.&lt;/p>
&lt;p>调度器对可以创建的逻辑处理器的数量没有限制, 但是语言运行时默认限制每个程序最多创建10000个线程. 可以通过调用&lt;code>runtime/debug&lt;/code>包的&lt;code>SetMaxThreads&lt;/code>方法来更改.&lt;/p>
&lt;h4 id="并发concurrency不是并行parallelism">并发(concurrency)不是并行(parallelism)&lt;/h4>
&lt;p>并行是让不同的代码同时在不同的物理处理器上执行. 并行的关键是同时做很多事. 并发是指同时管理很多事情, 这些事情可能只做一般就再暂停去做别的事情了.&lt;/p>
&lt;p>&lt;strong>使用较少的资源做更多的事情&lt;/strong>&lt;/p>
&lt;p>多个逻辑处理器时, goroutine会被平均分配到每个逻辑处理器上, 让goroutine在不同的线程上运行.&lt;/p>
&lt;h3 id="goroutine">goroutine&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;runtime&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//分配一个逻辑处理器给调度器使用
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GOMAXPROCS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Start&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">ch&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">ch&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">26&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">ch&lt;/span> &lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ch&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">ch&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">ch&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">26&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">ch&lt;/span> &lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ch&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Wait&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;\nEnd&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//结果
&lt;/span>&lt;span class="c1">//Start
&lt;/span>&lt;span class="c1">//Wait
&lt;/span>&lt;span class="c1">//A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z
&lt;/span>&lt;span class="c1">//End
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//第一个goroutine完成所有显示需要的时间太短, 以至于在调度器切换到第二个goroutine之前就完成了所有任务.
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序可以使用&lt;code>runtime.GOMAXPROCS&lt;/code>来更改调度器可以下使用的逻辑处理器的数量. 如果不想代码里使用, 可以使用跟函数同名的环境变量(&lt;code>GOMAXPROCS&lt;/code>)来设置. 使用&lt;code>runtime.NumCPU()&lt;/code>可以获取物理处理器的个数.&lt;/p>
&lt;p>&lt;code>WaitGroup&lt;/code>是一个计数信号量, 可以用来记录并维护运行的goroutine. 使用&lt;code>defer&lt;/code>在goroutine函数调用完成后调用&lt;code>Done&lt;/code>方法.&lt;/p>
&lt;p>一个正在运行的goroutine在工作结束前, 可以被停止(回到本地队列)并重新调度. 防止某个goroutine长时间占用逻辑处理器.&lt;/p>
&lt;h3 id="竞争状态">竞争状态&lt;/h3>
&lt;p>race condition: 多个goroutine在没有互相同步的情况系啊, 访问某个共享的资源, 并试图同时读和写这个资源, 存在竞争的状态.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;runtime&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">counter&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">incCounter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">incCounter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Final counter: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">counter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">incCounter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">val&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">counter&lt;/span>
&lt;span class="c1">//当前goroutine从线程退出, 并回到队列
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Gosched&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">val&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="nx">counter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">val&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//结果
&lt;/span>&lt;span class="c1">//Final counter: 2
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>非原子操作导致最后结果为2&lt;/p>
&lt;h3 id="锁住共享资源">锁住共享资源&lt;/h3>
&lt;p>使用&lt;code>atomic&lt;/code>和&lt;code>sync&lt;/code>包的函数&lt;/p>
&lt;h4 id="原子函数">原子函数&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;sync/atomic&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;runtime&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">counter&lt;/span> &lt;span class="kt">int64&lt;/span>
&lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">incCounter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">incCounter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Final counter: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">counter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">incCounter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//安全地对counter加1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AddInt64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">counter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//当前goroutine从线程退出, 并回到队列
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Gosched&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>atomic&lt;/code>包的&lt;code>AddInt64&lt;/code>函数, 会同步整型值的加法, 方法是强制同一时刻只能有一个goroutine运行并完成这个加法操作. 还有&lt;code>LoadInt64&lt;/code>和&lt;code>StoreInt64&lt;/code>函数, 提供安全的读写整型值的方式.&lt;/p>
&lt;h4 id="互斥锁">互斥锁&lt;/h4>
&lt;p>使用互斥锁&lt;code>mutex&lt;/code>, 名字来自互斥&lt;code>mutual exclusion&lt;/code>的概念. 在代码上创建一个链接去, 保证同一时间只有一个goroutine可以执行这个临界区的代码.&lt;/p>
&lt;p>临界区的代码可以使用大括号&lt;code>{}&lt;/code>包围, 提升可读性.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;runtime&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">counter&lt;/span> &lt;span class="kt">int64&lt;/span>
&lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;span class="nx">mutex&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Mutex&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">incCounter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">incCounter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Final counter: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">counter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">incCounter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//创建临界区
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nx">val&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">counter&lt;/span>
&lt;span class="c1">//当前goroutine从线程退出, 并回到队列
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Gosched&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">val&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="nx">counter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">val&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="通道">通道&lt;/h4>
&lt;p>当一个资源需要在goroutine之间共享时, 通道在goroutine之前架起了一个管道, 并提供了确保同步交换数据的机制.&lt;/p>
&lt;p>声明通道时需要指定要共享的数据类型, 包括共享内置类型, 命名类型, 结构类型和引用类型的值或者指针.&lt;/p>
&lt;p>需要使用关键字&lt;code>make&lt;/code>创建通道. &lt;code>make&lt;/code>的第一个参数需要关键字&lt;code>chan&lt;/code>, 之后跟着交换的数据的类型. 如果是创建的有缓冲的通道, 第二个参数要指定通道的缓冲区的大小.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//无缓冲的整形通道
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">unbuffered&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//有缓冲的字符串通道
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">buffered&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通道操作&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//写字符串到通道
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">buffered&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="s">&amp;#34;Gopher&amp;#34;&lt;/span>
&lt;span class="c1">//从通道接收一个字符串
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">buffered&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="无缓冲通道">无缓冲通道&lt;/h5>
&lt;p>unbuffered channel是指在接收前没有能力保存任何值的通道. 这种通道要求发送goroutine和接收goroutine同时准备好, 才能完成发送和接收操作. 如果没有同时准备好, 会导致先执行发送或接收操作的goroutine阻塞等待.&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15145142937691.jpg" alt="无缓冲t通道">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;math/rand&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="nx">rand&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Now&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">UnixNano&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">court&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Lisa&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">court&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Bill&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">court&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">court&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">player&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">court&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ball&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">court&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Player %s Won\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">n&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">rand&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Intn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">13&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Player %s missed\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">court&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Player %s Hit %d\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ball&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">ball&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="nx">court&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">ball&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="有缓冲通道">有缓冲通道&lt;/h5>
&lt;p>buffered channel是一种在被接收前能存储一个或者多个值的通道. 并不要求goroutine之间必须同时完成发送和接收.&lt;/p>
&lt;p>只有在缓冲区里没有数据的时候接收才会阻塞; 同样只有缓冲区满的时候发送才会阻塞.&lt;/p>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15145248018025.jpg" alt="有缓冲t通道">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;math/rand&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">workers&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="nx">taskLoad&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">rand&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Now&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">UnixNano&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">tasks&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">taskLoad&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">workers&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">workers&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="nf">worker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tasks&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">taskLoad&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">tasks&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Task : %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">worker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tasks&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">task&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">tasks&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Work %d shutting down\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Worker: %d : Started %s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">sleep&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">rand&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Int63n&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Duration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sleep&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Millisecond&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Worker : %d : Completed %s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go In Action 读书笔记 二</title><link>https://atbug.com/go-in-action-two/</link><pubDate>Mon, 01 Jan 2018 12:28:04 +0000</pubDate><guid>https://atbug.com/go-in-action-two/</guid><description>
&lt;h2 id="go语言的类型系统">Go语言的类型系统&lt;/h2>
&lt;p>Go语言是静态类型的变成语言. 编译的时候需要确定类型.&lt;/p>
&lt;h3 id="用户定义的类型">用户定义的类型&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="nx">email&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="nx">ext&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="nx">privileged&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>使用&lt;/strong>
零值和&lt;strong>结构字面量&lt;/strong>初始化&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//引用类型, 各个字段初始化为对应的零值
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">bill&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//创建并初始化, 使用结构字面量
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">lisa&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="c1">//{Lisa lisa@email.com 123 true}
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Lisa&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">email&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;lisa@email.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">ext&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">privileged&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>结构字面量的赋值方式:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>不同行声明每一个字段和对应的值, 字段名和字段以&lt;code>:&lt;/code>分隔, 末尾以&lt;code>,&lt;/code>结尾&lt;/li>
&lt;li>不适用字段名, 只声明对应的值. 写在一行里, 以&lt;code>,&lt;/code>分隔, 结尾不需要&lt;code>,&lt;/code>. &lt;strong>要保证顺序&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">lisa&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Lisa&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;lisa@email.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>使用其他类型结构声明字段&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">admin&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">person&lt;/span> &lt;span class="nx">user&lt;/span>
&lt;span class="nx">level&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fred&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">admin&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="c1">//{{Fred fred@email.com 123 true} super}
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">person&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Fred&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">email&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;fred@email.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">ext&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">privileged&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">level&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;super&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>另一种声明用户定义的类型的方法是, 基于一个已有的类型, 将其作为新类型的类型说明&lt;/strong>
新的类型是独立的类型, &lt;em>值互相兼容, 但不能互相赋值&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Duration&lt;/span> &lt;span class="kt">int64&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">d&lt;/span> &lt;span class="nx">Duration&lt;/span>
&lt;span class="c1">//d = int64(1000) #编译错误cannot use int64(1000) (type int64) as type Duration in assignment
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">d&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">Duration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="方法">方法&lt;/h3>
&lt;p>描述用户自定义类型的行为, 实际为函数. 只是在声明的时候在&lt;code>func&lt;/code>和方法名之间增加了一个参数(接收者), 将函数和接收者的类型绑定到一起.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="nx">email&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">u&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Sending User Email To %s&amp;lt;%s&amp;gt;\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">email&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">u&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">changeEmail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">email&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">email&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">email&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">bill&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Bill&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bill@email.com&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">bill&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">lisa&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Lisa&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;lisa@email.com&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">lisa&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//实际执行 (*lisa).notify()
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">bill&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">changeEmail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;bill@newDomain.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//实际执行 (&amp;amp;bill).changeEmail(&amp;#34;bill@newDomain.com&amp;#34;)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">bill&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">lisa&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">changeEmail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;lisa@newDomain.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">lisa&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//实际执行 (*lisa).notify()
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//Sending User Email To Bill&amp;lt;bill@email.com&amp;gt;
&lt;/span>&lt;span class="c1">//Sending User Email To Lisa&amp;lt;lisa@email.com&amp;gt;
&lt;/span>&lt;span class="c1">//Sending User Email To Bill&amp;lt;bill@newDomain.com&amp;gt;
&lt;/span>&lt;span class="c1">//Sending User Email To Lisa&amp;lt;lisa@newDomain.com&amp;gt;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Go语言里有两种类型的接收者: 值接收者和指针接收者.&lt;/p>
&lt;ul>
&lt;li>如果使用值接收者, 调用的时候会使用&lt;strong>值的副本&lt;/strong>来执行&lt;/li>
&lt;li>如果使用指针接收者, 调用的时候这个方法会共享调用方法时接收者所指向的值&lt;/li>
&lt;/ul>
&lt;h3 id="类型的本质">类型的本质&lt;/h3>
&lt;p>声明类型的方法前要确定该方法是创建一个新值(使用值接收者), 还是修改当前值(使用指针接收者)&lt;/p>
&lt;h4 id="内置类型">内置类型&lt;/h4>
&lt;p>由语言提供: 数值类型, 布尔类型, 字符串类型. 本质上是原始类型.
对这些值增加或删除操作的死后, 都会创建新的值.&lt;/p>
&lt;p>如 &lt;code>golang.org/src/strings/strings.go&lt;/code>的&lt;code>Trim&lt;/code>函数传入字符串值, 返回新的字符串.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Trim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cutset&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">cutset&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">s&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">TrimFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">makeCutsetFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cutset&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="引用类型">引用类型&lt;/h4>
&lt;p>Go语言里有几种: 切片, 映射, 通道, 接口和函数类型.&lt;/p>
&lt;p>声明上述类型的变量时, 创建的变量被称作标头(header)值. 每个引用类型创建的标头值是包含一个指向底层数据结构的指针.
标头值里包含一个指针, 通过复制来传递一个引用类型的值得副本, 本质是就是在共享底层数据结构.&lt;/p>
&lt;p>&lt;code>golang.org/src/net/ip.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">IP&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="结构类型">结构类型&lt;/h4>
&lt;p>描述一组数据值, 这组值可以是原始类型, 也可以是非原始的.
结构类型的本质是非原始的. 对这个类型的值做增加或者删除的操作应该更改值本身. 当需要修改值本身时, 在程序中其他地方, 需要使用指针来共享这个值.&lt;/p>
&lt;p>&lt;code>golang.org/time/time.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Time&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">wall&lt;/span> &lt;span class="kt">uint64&lt;/span>
&lt;span class="nx">ext&lt;/span> &lt;span class="kt">int64&lt;/span>
&lt;span class="nx">loc&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Location&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">Now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">Time&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//值接收者, 返回新的Time
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span> &lt;span class="nx">Time&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span> &lt;span class="nx">Duration&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Time&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span> &lt;span class="nx">Time&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">String&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//指针接收者
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Time&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">UnmarshalBinary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果一个创建用的工厂函数返回了一个指针, 就表示这个被返回的值的本质是非原始的.
&lt;code>golang.org/src/os/file.go&lt;/code>的&lt;code>open&lt;/code>函数.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">File&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="nx">file&lt;/span> &lt;span class="c1">//内嵌类型: 嵌入的指针, 指向一个未公开的类型
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//一种保护的方式
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">file&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">pfd&lt;/span> &lt;span class="nx">poll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FD&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="nx">dirinfo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">dirInfo&lt;/span> &lt;span class="c1">// nil unless directory being read
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">nonblock&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="c1">// whether we set nonblocking mode
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">OpenFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">flag&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">perm&lt;/span> &lt;span class="nx">FileMode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">File&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="接口">接口&lt;/h3>
&lt;p>多态是指代码可以根据类型的具体实现采取不同行为的能力.
如果一个类型实现了某个接口, 所有使用这个接口的地方, 都可以支持这种类型的值.&lt;/p>
&lt;h4 id="标准库">标准库&lt;/h4>
&lt;p>&lt;code>golang.org/src/io/io.go&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Reader&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Writer&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">Write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">WriterTo&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">WriteTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">Writer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//bytes.Buffer实现了io.Reader, io.WriteTo接口
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="nx">bytes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Buffer&lt;/span>
&lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;World!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//os.Stdout实现了io.Writer接口
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdout&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="实现">实现&lt;/h4>
&lt;p>接口是定义行为的类型, 具体的实现由用户定义的类型完成. 用户定义的类型通常称作实体类型.
如果用户定义的类型实现了某个接口类型声明的一组方法, 那么这个用户定义的类型的&lt;strong>值&lt;/strong>就可以赋给这个接口类型的&lt;strong>值&lt;/strong>. 这个赋值会把用户定义的类型的&lt;strong>值&lt;/strong>存入接口类型的&lt;strong>值&lt;/strong>.&lt;/p>
&lt;p>接口的值是一个两个字长度的数据结构:&lt;/p>
&lt;ul>
&lt;li>第一个字包含一个指向内部表(iTable)的指针. 内部表包含了所存储的值的类型信息, 还包含了与这个值相关联的一组方法.&lt;/li>
&lt;li>第二个字是一个指向所存储的值的指针.&lt;/li>
&lt;/ul>
&lt;p>这部分可以参考&lt;a href="https://blog.golang.org/laws-of-reflection">Laws of Reflecation&lt;/a>&lt;/p>
&lt;h4 id="方法集">方法集&lt;/h4>
&lt;p>方法集定义了接口的接受规则.
方法集定义了一组关联到给定类型的值或者指针的方法. 定义方法的时使用的接收者的类型决定了这个方法是关联到值还是关联到指针, 还是两个都关联.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">notifier&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="nx">email&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//notify是使用指针接收者实现的方法
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">u&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Send email to %s&amp;lt;%s&amp;gt;\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">email&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">u&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Bill&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bill@email.com&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//sendNotificationTo(u) //用这一行会有编译错误. user没有实现notifier接口, 赋值给notifier会发生错误
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nf">sendNotificationTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">u&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//上面notify方法的实现的接收者为 user指针, 因此在赋值的时候只能接受user指针
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//或者上面方法实现的接收者改为user
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//接受一个实现了notifier的值作为参数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">sendNotificationTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="nx">notifier&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">n&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Go语言规范里定义的方法集的规则:&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Values&lt;/th>
&lt;th>Methods Receiver&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>T&lt;/td>
&lt;td>(t T)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>*T&lt;/td>
&lt;td>(t T) and (t *T)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>T类型的值的方法集只包含值接收者声明的方法. 而指向T类型的指针的方法集既包括指针接收者声明的方法, 也包含值接收者声明的方法.&lt;/p>
&lt;p>上面的代码稍微做下修改, 更加清晰一些.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">notifier&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="nx">email&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//notify是使用值接收者实现的方法
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">u&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Send email to %s&amp;lt;%s&amp;gt;\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">email&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">u&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Bill&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bill@email.com&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nf">sendNotificationTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">u&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">sendNotificationTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">u&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//&amp;amp;u赋值给notifier的变量n时, n的方法集包含了值接收者实现的方法.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">sendNotificationTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="nx">notifier&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">n&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者换个角度, 从接收者来看.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Method Receiver&lt;/th>
&lt;th>Value&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>(t T)&lt;/td>
&lt;td>T and *T&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(t *T)&lt;/td>
&lt;td>*T&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>使用指针接收者实现的接口, 那只有指向那个类型的指针才能实现对应的接口. 使用值接收者实现的接口, 那么那个类型的值和指针都能够实现对应的接口.&lt;/p>
&lt;h4 id="多态">多态&lt;/h4>
&lt;p>上面的函数&lt;code>sendNotificationTo&lt;/code>其实就是一个多态函数.&lt;/p>
&lt;h3 id="嵌入类型">嵌入类型&lt;/h3>
&lt;p>type embedding, Go语言允许用户扩展或者修改已有类型的行为. 可用于代码复用, 或修改已有类型以符合新类型.
嵌入类型是将已有类型直接声明在新的结构类型里. 被嵌入的类型称为新的外部类型的内部类型.&lt;/p>
&lt;p>通过嵌入类型, 与内部类型相关的标识符会提升到外部类型上, 也成为外部类型的一部分. 外部类型也可以通过声明相同名称的标识符来覆盖内部类型的标识符的字段或者方法, 这就是修改内部类型的属性或者行为实现. 也可以添加新的字段和方法.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">notifier&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="nx">email&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">admin&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//外部类型
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="c1">//内部类型
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">level&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">u&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Send email to %s&amp;lt;%s&amp;gt;\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">email&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ad&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">admin&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">user&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">email&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;john@email.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">level&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;super&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">ad&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//可以直接访问内部类型的方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ad&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//内部类型的方法也被提升到外部类型
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nf">endNotificationTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">ad&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//由于内部类型的提升, 内部类型实现的接口也被提升到外部类型. 外部类型也可以提供同名的方法实现, 以达到覆盖的效果.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">sendNotificationTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="nx">notifier&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">n&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果外部类型做了方法覆盖, 对内部类型方法的访问也还是会继续执行内部类型的方法&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ad&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">admin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">ad&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//执行内部类型的方法
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">ad&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//执行外部类型的方法
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="公开或未公开的标识符">公开或未公开的标识符&lt;/h3>
&lt;p>使用规则来控制声明后的标识符的可见性. Go语言支持从包里公开或者隐藏表示. 这里的标识符包括类型, 变量, 方法.
当一个标识符的名字是小写开头的时候, 这个标识符就是未公开的. 如果是大写字母开头就是公开的, 包外的代码可见.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">user&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Name&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="c1">//公开字段
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">email&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="c1">//未公开字段
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//构造器
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">email&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">email&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">---------------&lt;/span>
&lt;span class="kn">package&lt;/span> &lt;span class="nx">another&lt;/span>
&lt;span class="c1">//在另一个包里使用User类型
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">u&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Bill&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">email&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;bill@email.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//编译器报错, 找不到email字段. 因为email字段未公开
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//使用构造器
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">ur&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Bill&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bill@email.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>公开或者未公开的标识符, 不是一个值&lt;/li>
&lt;li>短变量声明操作符(:=), 有能力捕获引用的类型, 并创建一个未公开的类型的变量.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">counter&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">alertCounter&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//未公开类型
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">---------------&lt;/span>
&lt;span class="kn">package&lt;/span> &lt;span class="nx">another&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//c = counter.alertCounter 编译会报错, 无法访问未公开标识符
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">counter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">alertCounter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">counter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 20
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go In Action 读书笔记 一</title><link>https://atbug.com/go-in-action-one/</link><pubDate>Mon, 01 Jan 2018 12:27:10 +0000</pubDate><guid>https://atbug.com/go-in-action-one/</guid><description>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15142714785285.jpg" alt="架构流程图">&lt;/p>
&lt;h2 id="关键字">关键字&lt;/h2>
&lt;h3 id="var">var&lt;/h3>
&lt;p>变量使用&lt;code>var&lt;/code>声明, 如果变量不是定义在任何一个函数作用域内, 这个变量就是包级变量.&lt;/p>
&lt;blockquote>
&lt;p>Go语言中, 所有变量都被初始化为其&lt;strong>零值&lt;/strong>. 对于数值类型, 其零值是&lt;strong>0&lt;/strong>; 对于字符串类型, 其零值是&lt;strong>空字符串&amp;quot;&amp;quot;&lt;/strong>; 对于布尔类型, 其零值是&lt;strong>false&lt;/strong>. 对于引用类型来说, 底层数据结构会被初始化对应的零值. 但是被生命被起零值的引用类型的变量, 会返回&lt;strong>nil&lt;/strong>作为其值.&lt;/p>
&lt;/blockquote>
&lt;h3 id="const">const&lt;/h3>
&lt;p>定义常量&lt;/p>
&lt;h3 id="interface">interface&lt;/h3>
&lt;p>声明接口&lt;/p>
&lt;h3 id="func">func&lt;/h3>
&lt;p>声明函数&lt;/p>
&lt;h3 id="defer">defer&lt;/h3>
&lt;p>安排后面的函数调用在当前函数返回时才执行.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;filePath&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nb">close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="err">#&lt;/span> &lt;span class="nx">more&lt;/span> &lt;span class="nx">file&lt;/span> &lt;span class="nx">operation&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="go">go&lt;/h3>
&lt;p>启动后面的函数作为&lt;code>goroutine&lt;/code>, 如下面启动匿名函数作为&lt;code>goroutine&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(){}()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="import">import&lt;/h3>
&lt;p>导入包, 让使用者可以访问其中的标识符, 如类型, 函数, 常量和接口.
编译器查找包时会从&lt;code>GOROOT&lt;/code>和&lt;code>GOPATH&lt;/code>环境变量引用的位置去查找.
如果引用的包名前使用下划线&lt;code>_&lt;/code>, 表明不直接使用包里的标识符, 只是调用其&lt;code>init&lt;/code>函数执行初始化操作&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="nx">_&lt;/span> &lt;span class="kn">package&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">hasNoPublicIdentifier&lt;/span>
&lt;span class="kn">package&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">hasPublicIdentifier&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="range">range&lt;/h3>
&lt;p>用于迭代数组, 字符串, 切片, 映射和通道&lt;/p>
&lt;p>迭代通道时, 如果通道中没有数据时会阻塞; 有数据写入时会触发执行后面的代码. 如果通道关闭, 迭代退出.&lt;/p>
&lt;h3 id="type">type&lt;/h3>
&lt;p>声明结构类型&lt;/p>
&lt;h3 id="struct">struct&lt;/h3>
&lt;p>结构类型&lt;/p>
&lt;h2 id="语法">语法&lt;/h2>
&lt;h3 id="标识符">标识符&lt;/h3>
&lt;p>小写字母开头的标识符不会暴露, 只会暴露大写字母开头的标识符&lt;/p>
&lt;h3 id="main包">main包&lt;/h3>
&lt;p>程序的入口可以在main.go文件里找到. 每个可执行的Go程序有2个特征: 有&lt;code>main&lt;/code>函数, 程序的第01行包名为&lt;code>main&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">()&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="init函数">init函数&lt;/h3>
&lt;p>&lt;code>init&lt;/code>函数总是在&lt;code>main&lt;/code>函数调用之前被调用. 常见&lt;code>import&lt;/code>中使用下划线&lt;code>_&lt;/code>引入没有暴露任何标识符的包, 调用其&lt;code>init&lt;/code>函数&lt;/p>
&lt;h3 id="包">包&lt;/h3>
&lt;p>所有处于同一个文件夹下的代码文件, 必须使用同样的包名&lt;/p>
&lt;h3 id="一个函数多个返回值">一个函数多个返回值&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">RetriveValue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="简化声明变量运算符-">简化声明变量运算符 (:=)&lt;/h3>
&lt;p>声明变量同时赋值, 根据后面的类型确定变量的类型.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">val&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="函数间的变量传递">函数间的变量传递&lt;/h3>
&lt;p>都是&lt;strong>值传递&lt;/strong>&lt;/p>
&lt;h2 id="数组-切片和映射">数组, 切片和映射&lt;/h2>
&lt;h3 id="数据">数据&lt;/h3>
&lt;p>长度固定的数据类型. 在内存中的占用是连续的.&lt;/p>
&lt;h4 id="声明和初始化">声明和初始化&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">var&lt;/span> &lt;span class="nx">array&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="nx">array&lt;/span> &lt;span class="o">:=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">array&lt;/span> &lt;span class="o">:=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">array&lt;/span> &lt;span class="o">:=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="nx">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">为0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用">使用&lt;/h4>
&lt;p>使用索引访问&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nx">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]=&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="nx">修改&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="指针数组">指针数组&lt;/h5>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">array&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;span class="c1">//复制
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="nx">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]=&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="多维数组">多维数组&lt;/h5>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">array&lt;/span> &lt;span class="o">:=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="函数间传递数组">函数间传递数组&lt;/h4>
&lt;p>值传递&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//声明一个需要8MB的数组
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">array&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mf">1e6&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="c1">//传递数组
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">array&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//接受一个100w个整形值的数组
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">array&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mf">1e6&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">){}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用指针传递&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//声明一个需要8MB的数组
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">array&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mf">1e6&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="c1">//传递数组
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">array&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">array&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mf">1e6&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">){}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="切片">切片&lt;/h3>
&lt;p>一种数据结构, 便于使用和管理数据集合. 是围绕&lt;strong>动态数组&lt;/strong>的概念创建的, 就是可变(增长或缩小)数组.
&lt;strong>切面的底层内存也是在连续快中分配的&lt;/strong>, 也能获得索引,迭代.
切片的动态增长是通过内置函数&lt;code>append&lt;/code>实现的.&lt;/p>
&lt;p>切片是一个很小的对象, 对底层数组进行了抽象, 并提供操作方法.
包含三个字段: 指向底层数组的指针, 元素个数(长度)和容量.&lt;/p>
&lt;h4 id="创建和初始化">创建和初始化&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//指定长度, 长度等于容量
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">slice&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//指定长度和容量, 只能访问3个, 其余2个通过后期操作合并
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">slice&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">slice&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h6 id="nil和空切片">nil和空切片&lt;/h6>
&lt;p>nil切片&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">var&lt;/span> &lt;span class="nx">slice&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>空切片, 长度为0, 容量为0&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">slice&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">slice&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="使用切片">使用切片&lt;/h5>
&lt;h6 id="使用一个索引访问数组元素">使用一个索引访问数组元素&lt;/h6>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">slice&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]=&lt;/span>&lt;span class="mi">10&lt;/span>
&lt;span class="nx">slice&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mi">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用切片创建切片, &lt;strong>新旧切片共享底层数组&lt;/strong>&lt;/p>
&lt;h6 id="使用两个索引创建新的索引共用底层数组">使用两个索引创建新的索引(共用底层数组)&lt;/h6>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//底层数组长度为5
&lt;/span>&lt;span class="c1">//长度为2 = 3 - 1
&lt;/span>&lt;span class="c1">//容量为4 = 5 - 1
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">newSlice&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">slice&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="增长">增长&lt;/h4>
&lt;p>使用内置的&lt;code>append&lt;/code>方法追加, 返回一个新的切片(&lt;strong>新的底层数组, 数组指针改变, 长度改变, 容器可能改变&lt;/strong>)&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">newSlice&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">appen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="三个索引">三个索引&lt;/h5>
&lt;p>使用三个索引, 第一个索引表示起始位置, 第二个元素表示起始索引加上希望包括的元素个数 2 + 1 = 3. 第三个索引是起始索引加上容量 2 + 2 = 4.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//从第3个元素开始截取
&lt;/span>&lt;span class="c1">//长度为1 = 3 - 2
&lt;/span>&lt;span class="c1">//容量为2 = 4 - 2
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">newSlice&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">slice&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="迭代切片">迭代切片&lt;/h4>
&lt;p>使用关键字range&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">slice&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">idx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">slice&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Index: %d Values: %d\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">idx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//返回长度
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//返回容量
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">cap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="多维切片">多维切片&lt;/h4>
&lt;h4 id="函数间的切片传递">函数间的切片传递&lt;/h4>
&lt;h3 id="映射">映射&lt;/h3>
&lt;p>存储一系列无序键值对的数据结构, 可以基于键快速检索.&lt;/p>
&lt;p>是一个集合, 可以使用类似数组或切片的方式迭代数组. 但是是无序的, 无法预测键值对被返回的顺序.&lt;/p>
&lt;p>无序的原因是映射使用了散列表.&lt;/p>
&lt;h4 id="实现方式">实现方式&lt;/h4>
&lt;p>桶的数据结构: 两个数组. 一个存储散列键的高八位值, 用来做桶定位. 另一个是字节数组, 用于存储键值对. 先一次存储所有的键, 再一次存储所有的值.&lt;/p>
&lt;p>将键通过散列函数计算出散列值, 然后通过散列值的高八位定位出桶, 然后在桶的数组里进行存储, 删除或者查找.&lt;/p>
&lt;p>键可以是任何类型, 只要这个值可以使用&lt;code>==&lt;/code>运算符做比较. &lt;strong>切片, 函数以及包含切片的机构类型由于具有引用语义, 不能作为映射的键.&lt;/strong>&lt;/p>
&lt;h4 id="创建和初始化-1">创建和初始化&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">dict&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">dict&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;red&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">&amp;#34;#da1337&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;orange&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">&amp;#34;#e95a22&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//空映射
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">dict&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="c1">//使用切片作为键
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">dict&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="nx">编译错误&lt;/span> &lt;span class="nx">invalid&lt;/span> &lt;span class="kd">map&lt;/span> &lt;span class="nx">key&lt;/span> &lt;span class="kd">type&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用-1">使用&lt;/h4>
&lt;p>空映射&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="err">#&lt;/span>&lt;span class="nx">声明一个空映射&lt;/span>
&lt;span class="nx">colors&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">[]{}&lt;/span>
&lt;span class="nx">colors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;red&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;#da1337&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>nil映射&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//声明为nil映射
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">colors&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;span class="nx">colors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;red&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;#da1337&amp;#34;&lt;/span> &lt;span class="c1">//运行时出错 assignment to entry in nil map
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>判断是否存在键. 如果不存在exist为false, value为零值. 如果存在exist为true, value为对应的值.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">exists&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">colors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;blue&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">exists&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>遍历映射&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">for&lt;/span> &lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">colors&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Key: %s, Value %s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>删除键值对&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nb">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">colors&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;red&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>自定义GOPATH下安装godep失败</title><link>https://atbug.com/install-godep-issue-in-custom-gopath/</link><pubDate>Fri, 22 Dec 2017 13:02:38 +0000</pubDate><guid>https://atbug.com/install-godep-issue-in-custom-gopath/</guid><description>
&lt;p>我的环境变量是这样的:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">export&lt;/span> &lt;span class="nv">GOROOT&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/go
&lt;span class="nb">export&lt;/span> &lt;span class="nv">GOPATH&lt;/span>&lt;span class="o">=&lt;/span>/Users/addo/Workspaces/go_w
&lt;span class="nb">export&lt;/span> &lt;span class="nv">GOBIN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$GOROOT&lt;/span>/bin
&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$PATH&lt;/span>:&lt;span class="nv">$GOBIN&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用下面的命令安装报错:&lt;/p>
&lt;p>&lt;code>go get -v github.com/tools/godep&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>github.com/tools/godep (download)
github.com/tools/godep/vendor/github.com/pmezard/go-difflib/difflib
github.com/tools/godep/vendor/github.com/kr/fs
github.com/tools/godep/vendor/github.com/kr/text
github.com/tools/godep/vendor/golang.org/x/tools/go/vcs
github.com/tools/godep/vendor/github.com/kr/pretty
github.com/tools/godep
go install github.com/tools/godep: open /usr/local/go/bin/godep: permission denied&lt;/p>
&lt;/blockquote>
&lt;p>默认是安装到&lt;code>$GOBIN&lt;/code>目录下, 权限不够.&lt;/p>
&lt;p>使用:&lt;/p>
&lt;p>&lt;code>sudo go get -v github.com/tools/godep&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>sudo go get -v github.com/tools/godep
github.com/tools/godep (download)
created GOPATH=/Users/addo/go; see &amp;lsquo;go help gopath&amp;rsquo;
github.com/tools/godep/vendor/github.com/kr/fs
github.com/tools/godep/vendor/github.com/kr/text
github.com/tools/godep/vendor/github.com/pmezard/go-difflib/difflib
github.com/tools/godep/vendor/golang.org/x/tools/go/vcs
github.com/tools/godep/vendor/github.com/kr/pretty
github.com/tools/godep&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>$GOBIN&lt;/code>并没有找到&lt;code>godef&lt;/code>. 输出提示&lt;code>created GOPATH=/Users/addo/go; &lt;/code>. 因为sudo的时候找不到&lt;code>GOPATH&lt;/code>变量, 便重新创建了目录.&lt;/p>
&lt;p>解决方案一:&lt;/p>
&lt;ol>
&lt;li>临时修改&lt;code>GOBIN&lt;/code>: &lt;code>export GOBIN=$GOPATH/bin&lt;/code>&lt;/li>
&lt;li>运行&lt;code>go get github.com/tools/godep&lt;/code>&lt;/li>
&lt;li>将生成的godef复制到&lt;code>GOROOT/bin&lt;/code>下&lt;/li>
&lt;li>回滚修改&lt;code>export GOBIN=$GOROOT/bin; export PATH=$PATH:$GOBIN&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>解决方案二:&lt;/p>
&lt;p>修改&lt;code>GOROOT/bin&lt;/code>的属组属主, 安全性问题, 不推荐.&lt;/p></description></item><item><title>SpringBoot源码 - 启动</title><link>https://atbug.com/glance-over-spring-boot-source/</link><pubDate>Fri, 08 Dec 2017 17:48:43 +0000</pubDate><guid>https://atbug.com/glance-over-spring-boot-source/</guid><description>
&lt;p>SpringBoot Application启动部分的源码阅读.&lt;/p>
&lt;h2 id="springapplication">SpringApplication&lt;/h2>
&lt;p>常用的&lt;code>SpringApplication.run(Class, Args)&lt;/code>启动Spring应用, 创建或者更新&lt;code>ApplicationContext&lt;/code>&lt;/p>
&lt;h3 id="静态方法run">静态方法run&lt;/h3>
&lt;p>使用source类实例化一个&lt;code>SpringApplication&lt;/code>实例, 并调用实例方法&lt;code>run&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">sources&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="初始化initialize">初始化initialize&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>实例化的时候首先通过尝试加载&lt;code>javax.servlet.Servlet&lt;/code>和&lt;code>org.springframework.web.context.ConfigurableWebApplicationContext&lt;/code>推断当前是否是&lt;strong>web&lt;/strong>环境.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后从&lt;code>spring.factories&lt;/code>获取&lt;code>ApplicationContextInitializer&lt;/code>的实现类.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从&lt;code>spring.factories&lt;/code>获取&lt;code>ApplicationListener&lt;/code>的实现类&lt;/p>
&lt;/li>
&lt;li>
&lt;p>推断出应用的启动类(包含main方法的类): 检查线程栈中元素的方法名是否是&lt;code>main&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">deduceMainApplicationClass&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//获取线程栈数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">StackTraceElement&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">stackTrace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">StackTraceElement&lt;/span> &lt;span class="n">stackTraceElement&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">stackTrace&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;main&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stackTraceElement&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMethodName&lt;/span>&lt;span class="o">()))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stackTraceElement&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClassName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ClassNotFoundException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Swallow and continue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>到此实例化就完成了.&lt;/p>
&lt;h3 id="实例方法run">实例方法run&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">StopWatch&lt;/span> &lt;span class="n">stopWatch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StopWatch&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">stopWatch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//默认设置java.awt.headless为true
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">configureHeadlessProperty&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//从spring.factories中获取org.springframework.boot.SpringApplicationRunListener的实现类
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SpringApplicationRunListeners&lt;/span> &lt;span class="n">listeners&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getRunListeners&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//通过EventPublishingRunListener发布started事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">started&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ApplicationArguments&lt;/span> &lt;span class="n">applicationArguments&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultApplicationArguments&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//重点: 创建更新上下文对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createAndRefreshContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">listeners&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">applicationArguments&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//上下文对象更新完调用
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">afterRefresh&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">applicationArguments&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//通过EventPublishingRunListener发布finished事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">finished&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">stopWatch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stop&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logStartupInfo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">StartupInfoLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mainApplicationClass&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">logStarted&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getApplicationLog&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">stopWatch&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">handleRunFailure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="springapplicationrunlistener">SpringApplicationRunListener&lt;/h3>
&lt;p>监听&lt;code>SpringApplication&lt;/code>的&lt;code>run&lt;/code>方法. 通过&lt;code>SpringFactoriesLoader&lt;/code>加载, 实现时需要提供public的构造方法接受&lt;code>SpringApplication&lt;/code>和&lt;code>String[]&lt;/code>为参数.
事件的发生顺序为&lt;code>started -&amp;gt; environmentPrepared -&amp;gt; contextPrepared -&amp;gt; contextLoaded -&amp;gt; finished&lt;/code>.&lt;/p>
&lt;p>SpringBoot默认使用&lt;code>EventPublishingRunListener&lt;/code>这个实现类, 将各个事件封装并发布出去, 最终被&lt;code>ApplicationListener&lt;/code>捕获.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">SpringApplicationRunListener&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">started&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">environmentPrepared&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConfigurableEnvironment&lt;/span> &lt;span class="n">environment&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">contextPrepared&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">contextLoaded&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">finished&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="n">exception&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建并更新上下文对象createandrefreshcontext">创建并更新上下文对象createAndRefreshContext&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="nf">createAndRefreshContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SpringApplicationRunListeners&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ApplicationArguments&lt;/span> &lt;span class="n">applicationArguments&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// Create and configure the environment
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//获取或创建环境实例, web环境使用StandardServletEnvironment, 非web环境使用StandardEnvironment
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ConfigurableEnvironment&lt;/span> &lt;span class="n">environment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getOrCreateEnvironment&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//配置环境数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//1. **commandLineArgs**属性从启动参数中解析, 格式&amp;#34;--name=value&amp;#34;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//2. 配置profiles. 有效的profile(通过**spring.profiles.active**配置) 和 通过SpringApplication.profiles()指定的额外profile
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">configureEnvironment&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">environment&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">applicationArguments&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSourceArgs&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//通过EventPublishingRunListener发布environmentPrepared事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">environmentPrepared&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">environment&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//如果是web环境, 将非web环境实例转换成web环境实例:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//使用有效的profile配置和jndiProperties, servletConfigInitParams, servletContextInitParams的配置.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isWebEnvironment&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">environment&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">webEnvironment&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">environment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">convertToStandardEnvironment&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">environment&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//输出banner
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bannerMode&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">Banner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Mode&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OFF&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">printBanner&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">environment&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//创建上下文对象, 没有指定实现类的话(使用SpringApplicationBuilder.contextClass), 使用默认context类. 然后通过反射实例化上下文对象.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//1. web环境使用org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//2. org.springframework.context.annotation.AnnotationConfigApplicationContext
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//初始化实例的时候会做很多事,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//1. 创建AnnotatedBeanDefinitionReader. 注册相关的Annotation Post Processor, 包括: ConfigurationClassPostProcessor(处理@Configuration标注的类), AutowiredAnnotationBeanPostProcessor, RequiredAnnotationBeanPostProcessor, CommonAnnotationBeanPostProcessor, PersistenceAnnotationBeanPostProcessor, EventListenerMethodProcessor, DefaultEventListenerFactory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//2. 创建ClassPathBeanDefinitionScanner. 扫描器, 扫描默认的过滤器@Service, @Component, @Registry, @Controller. 同时支持J2EE6的@ManagedBean和@Named
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Create, load, refresh and run the ApplicationContext
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createApplicationContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//设置环境
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setEnvironment&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">environment&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//后续的处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">postProcessApplicationContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//应用初始化器(ApplicationContextInitializer的实现类), 对上下文对象做更多初始化的操作, 比如:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//1. 添加BeanFactoryPostProcessor
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//2 .设置上下文对象id
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//3 .代理配置中context.initializer.classes指定的初始化类
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//4. 添加listener, 在web容器启动后更新环境变量中的端口号(server.ports中的local.server.port)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">applyInitializers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//通过EventPublishingRunListener发布contextPrepared事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contextPrepared&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//打印启动信息和有效的profile信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logStartupInfo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logStartupInfo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getParent&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">logStartupProfileInfo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//将ApplicationArguments实例注册到BeanFactory中, 名字为springApplicationArguments
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Add boot specific singleton beans
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBeanFactory&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">registerSingleton&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;springApplicationArguments&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">applicationArguments&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//从source(可以是Resource, Package, CharSequence或者Class. 从run方法进来的为Class)类加载Bean到上下文对象中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Load the sources
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sources&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getSources&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">notEmpty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Sources must not be empty&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">load&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toArray&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">sources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()]));&lt;/span>
&lt;span class="c1">//通过EventPublishingRunListener发布contextLoaded事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">listeners&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contextLoaded&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//更新上下文对象, 调用ApplicationContext.refresh()方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Refresh the context
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">refresh&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registerShutdownHook&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registerShutdownHook&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">AccessControlException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Not allowed in some environments.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="更新上下文-applicationcontextrefresh">更新上下文 ApplicationContext.refresh()&lt;/h3>
&lt;ol>
&lt;li>prepareRefresh
记录启动时间, 初始化上下文环境信息中的占位符, 检查必须的属性&lt;/li>
&lt;li>obtainFreshBeanFactory
重建内置的BeanFactory, 并加载bean定义&lt;/li>
&lt;li>prepareBeanFactory
初始化BeanFactory的标准上下文属性, 如BeanClassLoader, ExpressionResolver, PropertyEditorRegistrar, BeanPostProcessor, LoadTimeWeaverAwarePostProcessor等等.&lt;/li>
&lt;li>postProcessBeanFactory
标准初始化后修改上下文内置的BeanFactory&lt;/li>
&lt;li>invokeBeanFactoryPostProcessors
实例化并调用注册的&lt;code>BeanFactoryPostProcessor&lt;/code>, 基于精确的顺序如果指定了顺序的话.
有些processor是操作Bean定义注册表的(如&lt;code>@Configuration&lt;/code>标注的类bean包含其他的bean定义), 会在常规的&lt;code>BeanFactoryPostProcessor&lt;/code>的检查发生之前.
在上下文对象的bean定义注册器进行了标准初始化之后进, 所有的常规bean定义都已经被加载了, 但是还没有bean被实例化. 在post-processiong之前可以添加更多的bean定义. &lt;strong>&lt;code>@Configuration&lt;/code>标注的类中的bean定义会在此时假如到注册器中&lt;/strong>.&lt;/li>
&lt;li>registerBeanPostProcessors
实例化并调用注册的&lt;code>BeanPostProcessor&lt;/code>, 如果有顺序的话, 按照顺序来调用.&lt;/li>
&lt;li>initMessageSource
初始化名为&lt;strong>messageSource&lt;/strong>的&lt;code>MessageSource&lt;/code>实例.&lt;/li>
&lt;li>initApplicationEventMulticaster
初始化名为&lt;strong>applicationEventMulticaster&lt;/strong>的&lt;code>ApplicationEventMulticaster&lt;/code>实例, 应用可以用来注册应用事件的监听.&lt;/li>
&lt;li>onRefresh
供子类实现添加更多的更新操作.&lt;/li>
&lt;li>registerListeners
通过&lt;strong>applicationEventMulticaster&lt;/strong>注册&lt;code>ApplicationListener&lt;/code>实现类的监听器.&lt;/li>
&lt;li>finishBeanFactoryInitialization
进行上下文的BeanFactory初始化的收尾. 如提前初始化&lt;code>LoadTimeWeaverAware&lt;/code>的bean, 冻结配置禁止修改bean定义, 实例化non-lazy-init的bean.&lt;/li>
&lt;li>finishRefresh
完成更新, 调用&lt;code>LifecycleProcessor.onRefresh()&lt;/code>, 发布&lt;code>ContextRefreshedEvent&lt;/code>事件, 将上下文实例暴露在MBean中.&lt;/li>
&lt;/ol>
&lt;h4 id="configurationclasspostprocessor">ConfigurationClassPostProcessor&lt;/h4>
&lt;p>&lt;code>BeanFactoryPostProcessor&lt;/code>的实现类, 用于引导&lt;code>@Configuration&lt;/code>类.
默认情况下通过使用&lt;code>&amp;lt;context:annotation-config/&amp;gt;&lt;/code>或者&lt;code>&amp;lt;context:component-scan/&amp;gt;&lt;/code>注册.&lt;/p>
&lt;h2 id="注解">注解&lt;/h2>
&lt;h2 id="springbootapplication">@SpringBootApplication&lt;/h2>
&lt;p>集合了&lt;code>@Configuration&lt;/code>, &lt;code>@EnableAutoConfiguration&lt;/code>和&lt;code>@ComponentScan&lt;/code>
属性: &lt;code>exclude&lt;/code>, &lt;code>excludeName&lt;/code>, &lt;code>scanBasePackage&lt;/code> , &lt;code>scanBasePackageClass&lt;/code>&lt;/p>
&lt;h3 id="configuration">@Configuration&lt;/h3>
&lt;p>类似旧版配置中的xml配置文件, 提供Bean的定义和引入其他xml配置. 分别通过&lt;code>@Bean&lt;/code>和&lt;code>@Import&lt;/code>实现.
在ApplicationContext.refresh()时是用&lt;code>ConfigurationClassPostProcessor&lt;/code>进行bean的实例化.&lt;/p>
&lt;p>可以与&lt;code>@PropertySource&lt;/code>, &lt;code>@Autowired&lt;/code>, &lt;code> @Value&lt;/code>, &lt;code>@Profile&lt;/code>搭配使用.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@PropertySource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;classpath:/com/acme/app.properties&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AppConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Value&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;${bean.name}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span> &lt;span class="n">DataSource&lt;/span> &lt;span class="n">dataSource&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">MyBean&lt;/span> &lt;span class="nf">myBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MyBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@Profile&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DatabaseConfigTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="n">DataSource&lt;/span> &lt;span class="nf">dataSource&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EmbeddedDatabaseBuilder&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@Profile&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;production&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DatabaseConfigProduction&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="n">DataSource&lt;/span> &lt;span class="nf">dataSource&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EmbeddedDatabaseBuilder&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="enableautoconfiguration">@EnableAutoConfiguration&lt;/h3>
&lt;p>开启Spring上下文对象的自动配置功能, 尝试去猜测和实例化你&lt;strong>可能需要的&lt;/strong>bean.
这个功能是基于classPath来完成的. 比如: 项目中引用了&lt;code>tomcat-embedded.jar&lt;/code>, 你可能需要一个&lt;code>TomcatEmbeddedServletContainerFactory&lt;/code>实例, 除非定义了自己的&lt;code>EmbeddedServletContainerFactory&lt;/code>实例.&lt;/p>
&lt;h3 id="componentscan">@ComponentScan&lt;/h3>
&lt;p>扫描使用&lt;code>@Configuration&lt;/code>标注的类, 类似于Spring XML的&lt;code>&amp;lt;context:component-scan&amp;gt;&lt;/code>元素.
使用&lt;code>basePackages&lt;/code>和&lt;code>basePackageClasses&lt;/code>属性来指定要扫描的包, 如果没有指定, 则默认从使用了该注解的类的包开始扫描.&lt;/p>
&lt;h3 id="import">@Import&lt;/h3>
&lt;p>提示&lt;code>@Configuration&lt;/code>有更多的类需要引入, 类似xml中的&lt;code>&amp;lt;import&amp;gt;&lt;/code>标签.
可以引入&lt;code>@Configuration&lt;/code>类, &lt;code>ImportSelector&lt;/code>的实现类和&lt;code>ImportBeanDefinitionRegistrar&lt;/code>的实现类, 还有常规的&lt;code>Component&lt;/code>类.&lt;/p>
&lt;p>三者的处理方式不一样:&lt;/p>
&lt;ul>
&lt;li>&lt;code>@Configuration&lt;/code>常规方式&lt;/li>
&lt;li>&lt;code>ImportSelector&lt;/code>会根据泛型类型从&lt;strong>spring.factories&lt;/strong>找到对应的配置类.&lt;/li>
&lt;li>&lt;code>ImportBeanDefinitionRegistrar&lt;/code> 可以实现在bean definition级别的处理 (&lt;code>@Bean&lt;/code>实例级别)&lt;/li>
&lt;/ul>
&lt;p>在&lt;strong>引入&lt;/strong>&lt;code>@Configuration&lt;/code>类中使用&lt;code>@Bean&lt;/code>标注的实例, 可以通过&lt;code>@Autowired&lt;/code>注入. Bean和声明Bean的Configuration类本身都可以通过&lt;code>@Autowired&lt;/code>注入.&lt;/p>
&lt;p>引入XML或者非Configuration, 使用&lt;code>@ImportResource&lt;/code>.&lt;/p></description></item><item><title>Java序列化工具性能对比</title><link>https://atbug.com/java-serval-serializer-benchmark/</link><pubDate>Sat, 02 Dec 2017 07:35:43 +0000</pubDate><guid>https://atbug.com/java-serval-serializer-benchmark/</guid><description>
&lt;p>最近在调整系统的性能, 系统中正使用Jackson作为序列化工具. 做了下与fastJson, Avro, ProtoStuff的序列化吞吐对比.&lt;/p>
&lt;p>由于只是做横向对比, 没有优化系统或者JVM任何参数. 服务器一般都用Linux, 在Docker里做了Linux系统的测试.&lt;/p>
&lt;p>Mac:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Benchmark Mode Cnt Score Error Units
JMHTest.avroSerializer thrpt 2 3124799.325 ops/s
JMHTest.fastJsonSerializer thrpt 2 3122720.917 ops/s
JMHTest.jacksonSerializer thrpt 2 2373347.208 ops/s
JMHTest.protostuffSerializer thrpt 2 4196009.673 ops/s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Docker:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Benchmark Mode Cnt Score Error Units
JMHTest.avroSerializer thrpt 2 3293260.676 ops/s
JMHTest.fastJsonSerializer thrpt 2 2996908.084 ops/s
JMHTest.jacksonSerializer thrpt 2 2189518.443 ops/s
JMHTest.protostuffSerializer thrpt 2 3998265.173 ops/s
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Kafka的消息可靠传递</title><link>https://atbug.com/kafka-reliable-data-delivery/</link><pubDate>Sat, 18 Nov 2017 14:01:46 +0000</pubDate><guid>https://atbug.com/kafka-reliable-data-delivery/</guid><description>
&lt;p>Kafka提供的基础保障可以用来构建可靠的系统, 却无法保证完全可靠. 需要在可靠性和吞吐之间做取舍.&lt;/p>
&lt;ul>
&lt;li>Kafka在分区上提供了消息的顺序保证.&lt;/li>
&lt;li>生产的消息在写入到所有的同步分区上后被认为是&lt;strong>已提交&lt;/strong> (不需要刷到硬盘). 生产者可以选择在消息提交完成后接收broker的确认, 是写入leader之后, 或者所有的副本&lt;/li>
&lt;li>只要有一个副本存在, 提交的消息就不会丢失&lt;/li>
&lt;li>消费者只能读取到已提交的消息&lt;/li>
&lt;/ul>
&lt;h2 id="复制">复制&lt;/h2>
&lt;p>Kafka的复制机制保证每个分区有多个副本, 每个副本可以作为leader或者follower的角色存在. 为了保证副本的同步, 需要做到:&lt;/p>
&lt;ul>
&lt;li>保持到zk的连接会话: 每隔6s向zk发送心跳, 时间可配置&lt;/li>
&lt;li>每隔10s向leader拉取消息, 时间可配置&lt;/li>
&lt;li>从leader拉取最近10s的写入的消息. 保持不间断的从leader获取消息是不够的, 必须保证几乎没有延迟&lt;/li>
&lt;/ul>
&lt;h2 id="broker配置">Broker配置&lt;/h2>
&lt;h3 id="复制因子">复制因子&lt;/h3>
&lt;p>&lt;code>default.replication.factor&lt;/code> broker级别的副本数设置, 通过这个配置来控制&lt;strong>自动创建&lt;/strong>的topic的副本数. 为N的时候, 可以容忍失去N-1个副本, 保证topic的可读写.&lt;/p>
&lt;h3 id="脏副本的leader选举">脏副本的leader选举&lt;/h3>
&lt;p>&lt;code>unclean.leader.election.enable&lt;/code> 0.11.0.0之前的版本, 默认为true; 之后的版本默认为false. 这个设置控制不同步的副本能否参与leader的选举. 如果设置为true, 当没有同步副本可用的时候, 不同步的副本会成为leader, 意味着有数据丢失. 如果设置为false, 则意味着系统会处于不可用的状态, 该部分没有leader提供服务. 需要在&lt;strong>可用性&lt;/strong>和&lt;strong>一致性&lt;/strong>之间做取舍.&lt;/p>
&lt;h3 id="最小同步副本数">最小同步副本数&lt;/h3>
&lt;p>&lt;code>min.insync.replicas&lt;/code> 这个设置可以作用于broker和topic级别. 假如broker数为3, 最小同步副本数为2. 当2个同步副本中的一个出现问题, 集群便不会再接受生产者的发送消息请求. 同事客户端会收到&lt;code>NotEnoughReplicasException&lt;/code>. 此时, 消费者还可以继续读取存在的数据. 唯一的同步副本变成只读.&lt;/p>
&lt;h2 id="可靠系统中使用生产者">可靠系统中使用生产者&lt;/h2>
&lt;h3 id="发送确认">发送确认&lt;/h3>
&lt;p>&lt;code>acks&lt;/code> 可选0, 1或者all. 设置影响吞吐和一致性.&lt;/p>
&lt;ul>
&lt;li>&lt;code>acks=0&lt;/code> 意味着消息发送出去后就认为是成功写入topic.&lt;/li>
&lt;li>&lt;code>acks=1&lt;/code> 发送后等待leader写入后确认&lt;/li>
&lt;li>&lt;code>acks=all&lt;/code> 发送后等待所有副本写入后确认&lt;/li>
&lt;/ul>
&lt;h3 id="重试">重试&lt;/h3>
&lt;p>&lt;code>retries&lt;/code> 消息发送后会收到成功或者错误码. 错误有两种, 可重试的和不可重试的. 对于可重试的错误, 生产者会重复发送, 而&lt;code>reties&lt;/code>控制重试的次数. 比如borker返回&lt;code>LEADER_NOT_AVAILABLE&lt;/code>错误, 生产者会自动进行重试(retries不等于0), 因为broker之后会选择新的leader. 如果返回&lt;code>INVALID_CONFIG&lt;/code>, 重试也不会解决问题.
同时&lt;code>retries&lt;/code>有可能导致消息重复, 这就是Kafka消息的&lt;code>at least once&lt;/code>保证. 在0.11.0.0之后, 提供了幂等的特性, 保证消息的&lt;code>exactly one&lt;/code>. 对于跨数据中心的复制(比如MirrorMaker), 默认设置为&lt;code>Integer.MAX_VALUE&lt;/code>&lt;/p>
&lt;h3 id="额外的错误处理">额外的错误处理&lt;/h3>
&lt;p>使用生产者内置的重试是一个正确处理多种错误而不丢失消息的简单途径. 但是开发者还需要处理其他的错误, 比如:&lt;/p>
&lt;ul>
&lt;li>不可重试错误&lt;/li>
&lt;li>发送之前的错误&lt;/li>
&lt;li>场试完所有的重试次数后还是未成功发送.&lt;/li>
&lt;/ul>
&lt;h2 id="可靠系统中使用消费者">可靠系统中使用消费者&lt;/h2>
&lt;p>&lt;strong>已提交消息&lt;/strong>和&lt;strong>已提交偏移量&lt;/strong>
完全不同的两个概念, 前者是对生产者有效, 后者是对消费者有效.&lt;/p>
&lt;h3 id="重要设置">重要设置&lt;/h3>
&lt;ul>
&lt;li>&lt;code>group.id&lt;/code> 两个有相同&lt;code>group.id&lt;/code>并且订阅同一个topic的消费者, 会分配到topic下分区的一个子集, 并且是独立的子集.&lt;/li>
&lt;li>&lt;code>auto.offset.reset&lt;/code> 这个参数控制当broker端没有发现任何提交的偏移量的时候, 消费者应该从什么位置开始读取消息. 接受&lt;code>earliest&lt;/code>和&lt;code>latest&lt;/code>两种设置. &lt;code>earliest&lt;/code>意思是会从0开始读取, 而&lt;code>latest&lt;/code>意思是从最末尾开始.&lt;/li>
&lt;li>&lt;code>enable.auto.commit&lt;/code> 按照时间计划提交偏移量或者代码中手动提交. 对consumer来说这是一个&lt;strong>重大&lt;/strong>的决定. 自动提交会保证只提交循环中已经处理的数据, 但是有可能会在下次提交始前系统崩溃. 这就导致已经被处理的消息的偏移量没有提交到broker. 下次拉取的时候(consumer重新上线或者rebalance时候由其他消费者处理该分区)会重新拉取已经处理过的消息, &lt;strong>重复消费&lt;/strong>. 假如你是将拉取的消息交由其他的线程处理, 那自动提交可能会到时消息被拉取, 却没有被处理. 自动提交的好处是吞吐量大.&lt;/li>
&lt;li>&lt;code>auto.commit.interval.ms&lt;/code> 当&lt;code>enable.auto.commit&lt;/code>设置为&lt;strong>true&lt;/strong>的时候, 通过这个配置控制自动提交的时间间隔. 越大吞吐就越大, 一致性就越低. 越小, 则会增加提交的次数, 影响吞吐, 但是会提高一致性.&lt;/li>
&lt;/ul>
&lt;h3 id="准确提交偏移量">准确提交偏移量&lt;/h3>
&lt;h4 id="总是提交已经处理过得消息">总是提交已经处理过得消息&lt;/h4>
&lt;p>假如你是在循环中处理所有的消息, 并且不需要维护跨多次轮询的状态, 会比较容易实现. 可以使用自动提交, 或者在轮询循环的末尾进行偏移量提交.&lt;/p>
&lt;h4 id="提交频率是性能和系统崩溃时重复的消息数量间的取舍">提交频率是性能和系统崩溃时重复的消息数量间的取舍&lt;/h4>
&lt;p>一次轮询循环中可以进行多次偏移量提交, 甚至每处理一条提交一次. 或者几个轮询提交一次. 提交会有性能上的开销, 类似生产者的&lt;code>acks=all&lt;/code>&lt;/p>
&lt;h4 id="保证你清楚的了解将要提交什么偏移量">保证你清楚的了解将要提交什么偏移量&lt;/h4>
&lt;p>常见的一个陷阱就是一次轮询循环中的偏移量提交了读到的最大偏移量, 而不是已经处理过得最大偏移量. 会导致消息丢失.&lt;/p>
&lt;h3 id="再平衡">再平衡&lt;/h3>
&lt;p>准确处理consumer的再平衡(consumer上线或者下线). 再平衡会引起先从消费者上摘取某些分区, 然后在分配某些分区. 通过实现RebalanceListener接口来实现控制.&lt;/p>
&lt;h3 id="消费者可能需要重试">消费者可能需要重试&lt;/h3>
&lt;p>某些场景下, 暂时不提交偏移量, 下次轮询的时候会重复拉取消息. 比如数据库连接暂时不可用的情况下.&lt;/p>
&lt;h3 id="消费者可能需要维护状态">消费者可能需要维护状态&lt;/h3>
&lt;p>某些场景下, 需要在多个轮询间存在聚合运算.&lt;/p>
&lt;h3 id="处理长时间的处理">处理长时间的处理&lt;/h3>
&lt;p>有些时候, 消息的处理耗时较长, 比如与其他系统交互或者进行比较复杂的运算.
某些Kafka版本的消费者, 两次轮询的间隔不能太长 (0.10.0.0之前版本的消费者没有单独的心跳进程, 是通过轮询同时达到心跳目的). 太长, 消费者则会被认为是下线, 会发生再平衡.&lt;/p>
&lt;h3 id="有且只有一次的消息投递">有且只有一次的消息投递&lt;/h3>
&lt;p>有些场景需要至少一次的语义(没有消息丢失); 而某些场景则需要有些只有一次的语义. 但是当前Kafka没有提供完美的有且只有一次的支持. 需要与其他系统结合一起实现, 比如使用唯一的key写入数据库或者redis等存储中.&lt;/p></description></item><item><title>Spring Cloud - Eureka Client源码分析</title><link>https://atbug.com/spring-cloud-eureka-client-source-code-analysis/</link><pubDate>Sat, 14 Oct 2017 22:04:59 +0000</pubDate><guid>https://atbug.com/spring-cloud-eureka-client-source-code-analysis/</guid><description>
&lt;p>准备做个Spring Cloud源码分析系列, 作为Spring Cloud的源码分析笔记.&lt;/p>
&lt;p>这一篇是Eureka的客户端.&lt;/p>
&lt;h2 id="客户端">客户端&lt;/h2>
&lt;p>两种方式, 最终的实现基本一样.&lt;/p>
&lt;h3 id="显示指定服务发现的实现类型">显示指定服务发现的实现类型&lt;/h3>
&lt;p>使用&lt;code>@EnableEurekaClient&lt;/code>注解显示的指定使用Eureka作为服务发现的实现, 并实例化&lt;code>EurekaClient&lt;/code>实例. 实际上使用的是&lt;code>@EnableDiscoveryClient&lt;/code>注解.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Target&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ElementType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TYPE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Retention&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetentionPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RUNTIME&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Documented&lt;/span>
&lt;span class="nd">@Inherited&lt;/span>
&lt;span class="nd">@EnableDiscoveryClient&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nd">@interface&lt;/span> &lt;span class="n">EnableEurekaClient&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="动态配置实现">动态配置实现&lt;/h3>
&lt;p>使用&lt;code>@EnableDiscoveryClient&lt;/code>注解来配置服务发现的实现.&lt;/p>
&lt;h4 id="源码分析">源码分析&lt;/h4>
&lt;p>&lt;strong>EnableDiscoveryClient&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Target&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ElementType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TYPE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Retention&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetentionPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RUNTIME&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Documented&lt;/span>
&lt;span class="nd">@Inherited&lt;/span>
&lt;span class="nd">@Import&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EnableDiscoveryClientImportSelector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nd">@interface&lt;/span> &lt;span class="n">EnableDiscoveryClient&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>EnableDiscoveryClient&lt;/code>注解的作用主要是用来引入&lt;code>EnableDiscoveryClientImportSelector&lt;/code>&lt;/p>
&lt;p>&lt;strong>EnableDiscoveryClientImportSelector&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Order&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Ordered&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LOWEST_PRECEDENCE&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">100&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EnableDiscoveryClientImportSelector&lt;/span>
&lt;span class="kd">extends&lt;/span> &lt;span class="n">SpringFactoryImportSelector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">EnableDiscoveryClient&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEnabled&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RelaxedPropertyResolver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getEnvironment&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="s">&amp;#34;spring.cloud.discovery.enabled&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Boolean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Boolean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TRUE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">hasDefaultFactory&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>EnableDiscoveryClientImportSelector&lt;/code>继承了&lt;code>SpringFactoryImportSelector&lt;/code>并指定了泛型&lt;code>EnableDiscoveryClient&lt;/code>. &lt;strong>这里的泛型是重点&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>SpringFactoryImportSelector&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SpringFactoryImportSelector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kd">implements&lt;/span> &lt;span class="n">DeferredImportSelector&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BeanClassLoaderAware&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EnvironmentAware&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ClassLoader&lt;/span> &lt;span class="n">beanClassLoader&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">annotationClass&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="nf">SpringFactoryImportSelector&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">annotationClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;)&lt;/span> &lt;span class="n">GenericTypeResolver&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">resolveTypeArgument&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">SpringFactoryImportSelector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">selectImports&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AnnotationMetadata&lt;/span> &lt;span class="n">metadata&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里只截取了部分变量和方法
&lt;code>SpringFactoryImportSelector&lt;/code>是spring cloud common包中的一个抽象类, 主要作用是检查泛型T是否有指定的factory实现, 即spring.factories中有对应类的配置.&lt;/p>
&lt;p>&lt;strong>spring.factories&lt;/strong>&lt;/p>
&lt;p>在&lt;code>spring-cloud-netflix-eureka-client.jar!/META-INF/spring.factories&lt;/code>中&lt;code>EnableDiscoveryClient&lt;/code>的指定factory实现是&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.springframework.cloud.netflix.eureka.config.EurekaClientConfigServerAutoConfiguration,\
org.springframework.cloud.netflix.eureka.config.EurekaDiscoveryClientConfigServiceAutoConfiguration,\
org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration,\
org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration
org.springframework.cloud.bootstrap.BootstrapConfiguration=\
org.springframework.cloud.netflix.eureka.config.EurekaDiscoveryClientConfigServiceBootstrapConfiguration
org.springframework.cloud.client.discovery.EnableDiscoveryClient=\
org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时&lt;code>EnableAutoConfiguration&lt;/code>中包含了&lt;code>org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration&lt;/code>, &lt;code>EurekaClientAutoConfiguration&lt;/code>会为&lt;code>EurekaDiscoveryClientConfiguration&lt;/code>的实例依赖进行初始化, 如EurekaClient. EurekaClient在构造时会启动一个HeartBeat线程, 线程在运行的时候会做renew的操作, 将Application的信息注册更新到Eureka的服务端.&lt;/p>
&lt;p>&lt;strong>EurekaDiscoveryClientConfiguration&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@EnableConfigurationProperties&lt;/span>
&lt;span class="nd">@ConditionalOnClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EurekaClientConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@ConditionalOnProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;eureka.client.enabled&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">matchIfMissing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@CommonsLog&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EurekaDiscoveryClientConfiguration&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">SmartLifecycle&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Ordered&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Raft算法学习</title><link>https://atbug.com/learning-raft/</link><pubDate>Sat, 14 Oct 2017 05:57:34 +0000</pubDate><guid>https://atbug.com/learning-raft/</guid><description>
&lt;h1 id="raft">Raft&lt;/h1>
&lt;p>强一致性算法&lt;/p>
&lt;h2 id="名词">名词&lt;/h2>
&lt;h3 id="复制状态机">复制状态机&lt;/h3>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/mw690/4858d6a8ly1fbxcex0w1fj20gt08vwfr.jpg" alt="复制状态机的架构">
复制状态机是通过复制日志来实现的, 按照日志中的命令的顺序来执行这些命令. 相同的状态机执行相同的日志命令, 获得相同的执行结果.&lt;/p>
&lt;h3 id="任期号-currentterm">任期号 (currentTerm)&lt;/h3>
&lt;p>每个成员都会保存一个任期号, 称为&lt;strong>服务器最后知道的任期号&lt;/strong>.&lt;/p>
&lt;h3 id="投票的候选人id-votedfor">投票的候选人id (votedFor)&lt;/h3>
&lt;p>当前任期内, 投票的候选人id, 即响应投票请求(见下文)返回true时的候选人id.&lt;/p>
&lt;h3 id="已被提交的最大日志条目的索引值-commitindex">已被提交的最大日志条目的索引值 (commitIndex)&lt;/h3>
&lt;p>每个成员都会持有已被提交的最大日志条目的索引值&lt;/p>
&lt;h3 id="被状态机执行的最日志条的索引值-lastapplied">被状态机执行的最⼤日志条⽬的索引值 (lastApplied)&lt;/h3>
&lt;p>每个成员都会持有被状态机执行的最⼤日志条⽬的索引值&lt;/p>
&lt;h3 id="请求">请求&lt;/h3>
&lt;h4 id="日志复制请求-appendentries-rpc">日志复制请求 (AppendEntries RPC)&lt;/h4>
&lt;p>由领导人发送给其他服务器, 也用作heartbeat&lt;/p>
&lt;p>&lt;strong>请求内容&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>term 领导人的任期号&lt;/li>
&lt;li>leaderId 领导人的id&lt;/li>
&lt;li>prevLogIndex 已经被状态机执行的最大索引值, 即最新日志之前的日志的索引值.&lt;/li>
&lt;li>preLogTerm 最新日志之前的日志的领导人的任期号&lt;/li>
&lt;li>entries[] 需要被复制的日志条目&lt;/li>
&lt;li>leaderCommit 领导人提交的日志条目索引值&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>响应内容&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>term 当前的任期号, 用于领导人更新自己的任期号&lt;/li>
&lt;li>success 目标服务器是否能够匹配prevLogIndex和preLogTerm&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>接受者的处理&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>如果term &amp;lt; currentTerm返回false, 即发送请求的领导人任期号小于服务器最后知道的任期号, 意味着领导人发生了变更.&lt;/li>
&lt;li>如果prevLogIndex和preLogTerm不匹配, 返回false. 即发送请求的领导人的日志不是最新的,&lt;/li>
&lt;li>如果有一条已经存在的⽇志与新的冲突（index 相同但是任期号 term不同），则删除已经存在的⽇志和它之后所有的日志&lt;/li>
&lt;li>添加任何在已有的日志中不存在的条目&lt;/li>
&lt;li>如果leaderCommit &amp;gt; commitIndex, 则更新commitIndex为leaderCommit和最新日志条目索引值中较小的一个&lt;/li>
&lt;/ol>
&lt;h4 id="发起投票请求-requestvote-rpc">发起投票请求 (RequestVote RPC)&lt;/h4>
&lt;p>由候选人发起的, 发给集群中已知的其他成员&lt;/p>
&lt;p>&lt;strong>请求内容&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>term 候选人的任期号 (在变更为领导人之前的保存的任期号的基础上加1)&lt;/li>
&lt;li>candidatedId 请求投票的候选人id&lt;/li>
&lt;li>lastLogIndex 候选人最新日志条目的索引值&lt;/li>
&lt;li>lastLogTerm 候选人最新日志条目对应的任期号&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>响应内容&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>term 目前的任期号, 用于候选人更新自己的任期号&lt;/li>
&lt;li>voteGranted 收到选票为true&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>接受者的处理&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>如果term &amp;lt; currentTerm 返回voteGranted为false&lt;/li>
&lt;li>如果votedFor为空, 并且lastLogIndex和lastLogTerm匹配成功, 则为该候选人投票, 返回voteGranted为true. 并更新为候选人id&lt;/li>
&lt;/ol>
&lt;h4 id="安装快照请求-instalsnapshotrpc">安装快照请求 (InstalSnapshotRPC)&lt;/h4>
&lt;p>在领导人发送快照给跟随者时使用, 按顺序发送.&lt;/p>
&lt;p>&lt;strong>请求内容&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>term 领导人的任期号&lt;/li>
&lt;li>leaderId 领导人id&lt;/li>
&lt;li>lastIncludedIndex 快照中包含的最后日志条目的索引值&lt;/li>
&lt;li>lastIncludedTerm 快照中包含的最后日志条目的任期号&lt;/li>
&lt;li>offset 分块在快照块中的偏移量&lt;/li>
&lt;li>data[] 快照的原始数据&lt;/li>
&lt;li>done 如果是最后一块数据则为true&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>响应内容&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>term 目标服务器的currentTerm, 用于领导人更新自己&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>接受者的处理&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>如果term &amp;lt; currentTerm 立刻回复&lt;/li>
&lt;li>如果是第一个分块(offset为0)则创建新的快照&lt;/li>
&lt;li>在指定的偏移量写入数据&lt;/li>
&lt;li>如果done未false, 则回复并继续等待之后的数据&lt;/li>
&lt;li>保存快照文件, 丢弃所有存在的或者部分有着更新索引号的快照&lt;/li>
&lt;li>如果现存的日志拥有相同的最后任期号和索引值, 则后面的数据继续保留并且回复&lt;/li>
&lt;li>丢弃全部日志&lt;/li>
&lt;li>能够使用快照来恢复状态机 (并且装载快照中的集群配置)&lt;/li>
&lt;/ol>
&lt;h2 id="约束原则">约束/原则&lt;/h2>
&lt;ul>
&lt;li>选举安全原则 Election Safety: 一个任期内最多只有一个领导人当选&lt;/li>
&lt;li>领导人只增加原则 Leader Append-Only: 领导人永远不会覆盖或者删除自己的日志, 它只会增加条目&lt;/li>
&lt;li>日志匹配原则 Log Matching: 如果两个日志在相同的索引位置上的日志条目的任期号相同, 那么我们就认为日志从头到这个索引位置之间的条目完全相同&lt;/li>
&lt;li>领导人完全原则 Leader Completeness: 如果一个日志条目在一个给定任期内被提交, 那么这个条目一定会出现在所有任期号更大的领导人中&lt;/li>
&lt;li>状态机安全原则 State Machine Safety: 如果一个服务器已经将给定索引位置的日志条目应用到状态机中, 则所有的其他服务器不会在该索引位置应用不同的条目&lt;/li>
&lt;/ul>
&lt;h2 id="领导人选举-leader-election">领导人选举 (Leader election)&lt;/h2>
&lt;h3 id="集群成员的状态">集群成员的状态&lt;/h3>
&lt;ul>
&lt;li>领导人&lt;/li>
&lt;li>候选人&lt;/li>
&lt;li>追随者.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://wx2.sinaimg.cn/mw690/4858d6a8ly1fc9uv9fx6wj20hn07xt9z.jpg" alt="状态转换">&lt;/p>
&lt;p>在同一时间, 成员只会属于其中的一种状态. 并且集群中只会存在一个领导人.&lt;/p>
&lt;p>有领导人时: 一个领导人, n-1个追随者
无领导人时: x个候选人, n-x个追随者&lt;/p>
&lt;h3 id="约束">约束&lt;/h3>
&lt;ul>
&lt;li>集群中最多存在一个领导人&lt;/li>
&lt;li>追随者不会发送请求, 只会接受来自领导人的AppendEntries RPC请求, 和候选人的RequestVote RPC请求. &lt;em>AppendEntries RPC请求同时提供heartbeat机制&lt;/em>&lt;/li>
&lt;li>领导人只接受来自客户端的请求&lt;/li>
&lt;/ul>
&lt;h3 id="任期">任期&lt;/h3>
&lt;p>&lt;img src="http://wx3.sinaimg.cn/mw690/4858d6a8ly1fc9vx0s6l6j20ef05odg9.jpg" alt="时间流">&lt;/p>
&lt;p>时间被划分为一个个的任期, 每一个任期的开始都是领导人的选举.&lt;/p>
&lt;p>随机的选举超时时间 例如150~300毫秒, 防止无限选举失败.&lt;/p>
&lt;h2 id="日志复制">日志复制&lt;/h2>
&lt;h3 id="约束-1">约束&lt;/h3>
&lt;p>日志的流向只会是从领导人到追随者. 领导人不会覆盖自己的日志.&lt;/p>
&lt;h3 id="流程">流程&lt;/h3>
&lt;p>领导人接受来自客户端的请求, 把请求中的命令作为日志条目加入到自己的日志中, 然后向追随者发送AppendEnties RPC请求, 要求追随者复制这条日志条目. 追随者复制完成后会响应领导人. 所有的请求都会响应后, 领导人会将该条目应用到状态机中, 并响应客户端. 假如有追随者没有响应, 领导人会无限地重试AppendEnties RPC请求直到所有的追随者都复制了该条目.&lt;/p>
&lt;h2 id="安全性">安全性&lt;/h2>
&lt;p>没有包含全部日志的服务器不会赢得选举, 即某些投票请求的响应返回false.&lt;/p>
&lt;h2 id="日志压缩">日志压缩&lt;/h2>
&lt;p>把当前的系统状态写入快照(snapshot)中, 并持久化到存储中, 然后丢弃之前的全部日志.&lt;/p>
&lt;p>&lt;img src="http://wx2.sinaimg.cn/mw690/4858d6a8ly1fccdvbs2y7j20g70ae75i.jpg" alt="保存条目1-5到快照中">&lt;/p>
&lt;p>快照中包含了最后的索引值和任期号.&lt;/p>
&lt;p>增量压缩(incremental approaches)&lt;/p>
&lt;p>领导人必须偶尔地发送快照给一些落后的跟随者. 运行非常缓慢或者新加入的跟随者不能与领导人保持同步, 可以通过发送快照的方式让跟随者更新到最新的状态.&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;p>&lt;a href="http://www.infoq.com/cn/articles/raft-paper">Raft 一致性算法论文译文&lt;/a>&lt;/p></description></item><item><title>Kafka发送不同确认方式的性能差异</title><link>https://atbug.com/kafka-producer-acknowledge-benchmark/</link><pubDate>Tue, 10 Oct 2017 11:49:58 +0000</pubDate><guid>https://atbug.com/kafka-producer-acknowledge-benchmark/</guid><description>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>Kafka的性能众所周知，Producer支持acknowledge模式。即Kafka会想Producer返回消息发送的结果。但是在Java Client中，acknowledge的确认有两种：同步和异步。
同步是通过调用future.get()实现的；异步则是通过提供callback方法来实现。写了个简单的程序测试一下单线程中吞吐差异能有多大。&lt;strong>注意这里只考虑横向对比。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>发送端单线程&lt;/li>
&lt;li>Kafka为单集群节点&lt;/li>
&lt;li>topic的分区数为1&lt;/li>
&lt;li>key长度1&lt;/li>
&lt;li>payload长度100&lt;/li>
&lt;/ul>
&lt;h2 id="测试工具">测试工具&lt;/h2>
&lt;ul>
&lt;li>JMeter&lt;/li>
&lt;li>&lt;a href="https://github.com/addozhang/kafka-meter">Kafka Meter&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="futureget--batch-size-1">future.get() + batch size =1&lt;/h3>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15076056852541.jpg" alt="">&lt;/p>
&lt;h3 id="futureget--batch-size--16k">future.get() + batch size = 16K&lt;/h3>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15076057041954.jpg" alt="">&lt;/p>
&lt;h3 id="callback--batch-size--16k">callback + batch size = 16k&lt;/h3>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15076057158000.jpg" alt="">&lt;/p>
&lt;h3 id="callback--batch-size--1">callback + batch size = 1&lt;/h3>
&lt;p>&lt;img src="http://7xvxng.com1.z0.glb.clouddn.com/15076057250088.jpg" alt="">&lt;/p></description></item><item><title>Kafka消息消费一致性</title><link>https://atbug.com/kafka-consumer-consistency/</link><pubDate>Tue, 26 Sep 2017 19:13:48 +0000</pubDate><guid>https://atbug.com/kafka-consumer-consistency/</guid><description>
&lt;p>Kafka消费端的offset主要由consumer来控制, Kafka降每个consumer所监听的tocpic的partition的offset保存在__consumer_offsets主题中. consumer需要将处理完成的消息的offset提交到服务端, 主要有ConsumerCoordinator完成的.&lt;/p>
&lt;p>每次从kafka拉取数据之前, 假如是异步提交offset, 会先调用已经完成的offset commit的callBack, 然后检查ConsumerCoordinator的连接状态. 如果设置了&lt;strong>自动&lt;/strong>提交offset, 会继续上次从服务端获取的数据的offset&lt;strong>异步&lt;/strong>提交到服务端. 这里需要注意的是会有几种情况出现:&lt;/p>
&lt;ul>
&lt;li>消息处理耗时较多, 假如处理单条消息的耗时为t, 拉取的消息个数为n. t * n &amp;gt; auto_commit_interval_ms, 会导致没有处理完的消息的offset被commit到服务端. 假如此时消费端挂掉, 没有处理完的数据将会丢失.&lt;/li>
&lt;li>假如消息处理完成, offset还未commit到服务端的时候消费端挂掉, 已经处理完的消息会被再次消费.&lt;/li>
&lt;/ul>
&lt;p>下面配置影响着数据一致性和性能, 因此需要结合业务场景合理配置一下参数, 进行取舍.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>enable.auto.commit&lt;/code> 默认为true&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>auto.commit.interval.ms&lt;/code> 默认为5000 ms (5s)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>max.poll.records&lt;/code> 默认为500&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>fetch.max.bytes&lt;/code> 默认为52428800 bytes (50Mib).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="一致性">一致性&lt;/h3>
&lt;p>这里我们针对前面出现的两个问题给出解决方案.&lt;/p>
&lt;h4 id="kafka-java-client">Kafka Java Client&lt;/h4>
&lt;p>把&lt;code>enable.auto.commit&lt;/code>设置为&lt;code>false&lt;/code>, 并在每处理完一条数据后手动提交offset.&lt;/p>
&lt;p>&lt;strong>这里需要主意的时, 提交的offset是对当前消息的offset基础上进行加1.&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ConsumerTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Properties&lt;/span> &lt;span class="n">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Properties&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BOOTSTRAP_SERVERS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;192.168.31.186:9092&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GROUP_ID_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">AUTO_OFFSET_RESET_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">OffsetResetStrategy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NONE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toLowerCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Locale&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ROOT&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ENABLE_AUTO_COMMIT_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">KEY_DESERIALIZER_CLASS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;org.apache.kafka.common.serialization.StringDeserializer&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">VALUE_DESERIALIZER_CLASS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;org.apache.kafka.common.serialization.StringDeserializer&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">KafkaConsumer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">consumer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">KafkaConsumer&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">consumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">subscribe&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;my-topic&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ConsumerRecords&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">records&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">consumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">poll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">100&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">records&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerRecord&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">record&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">records&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;offset = %d, key = %s, value = %s%n&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">offset&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//Manually commit each record
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">consumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">commitSync&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singletonMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">TopicPartition&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">topic&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">partition&lt;/span>&lt;span class="o">()),&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">OffsetAndMetadata&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">offset&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="spring-kafka">Spring Kafka&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>把&lt;code>enable.auto.commit&lt;/code>设置为&lt;code>false&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>设置&lt;code>ContainerProperties&lt;/code>的&lt;code>ackMode&lt;/code>为&lt;code>MANUAL_IMMEDIATE&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用AcknowledgingMessageListener作为listener, 并在消息处理完成后调用acknowledgment.acknowledge().&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SpringConsumerTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">bootstrapServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;192.168.31.186:9092&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">groupId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;spring-consumer-group&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">ContainerProperties&lt;/span> &lt;span class="n">containerProperties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ContainerProperties&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;my-topic&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">containerProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAckMode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AbstractMessageListenerContainer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">AckMode&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MANUAL_IMMEDIATE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">containerProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setMessageListener&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="o">(&lt;/span>&lt;span class="n">AcknowledgingMessageListener&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;)&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">consumerRecord&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">acknowledgment&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">consumerRecord&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">acknowledgment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">acknowledge&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">consumerConfigs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">consumerConfigs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BOOTSTRAP_SERVERS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bootstrapServer&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">consumerConfigs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GROUP_ID_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">groupId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">consumerConfigs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ENABLE_AUTO_COMMIT_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">consumerConfigs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SESSION_TIMEOUT_MS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">10&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">1000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">consumerConfigs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">AUTO_OFFSET_RESET_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;earliest&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">consumerConfigs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">METADATA_MAX_AGE_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">10&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">1000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">consumerConfigs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">KEY_DESERIALIZER_CLASS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">StringDeserializer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">consumerConfigs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">VALUE_DESERIALIZER_CLASS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">StringDeserializer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">KafkaMessageListenerContainer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">listenerContainer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">KafkaMessageListenerContainer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">DefaultKafkaConsumerFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">consumerConfigs&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="n">containerProperties&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">listenerContainer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Kafka 恰好一次发送和事务消费示例</title><link>https://atbug.com/kafka-exactly-once-delivery-and-transactional-messaging-example/</link><pubDate>Fri, 22 Sep 2017 18:03:43 +0000</pubDate><guid>https://atbug.com/kafka-exactly-once-delivery-and-transactional-messaging-example/</guid><description>
&lt;h3 id="核心思想">核心思想&lt;/h3>
&lt;ul>
&lt;li>生产端一致性: 开启幂等和事务, 包含重试, 发送确认, 同一个连接的最大未确认请求数.&lt;/li>
&lt;li>消费端一致性: 通过设置读已提交的数据和同时处理完成每一条消息之后手动提交offset.&lt;/li>
&lt;/ul>
&lt;h3 id="生产端">生产端&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ProducerTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Properties&lt;/span> &lt;span class="n">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Properties&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ProducerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BOOTSTRAP_SERVERS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;192.168.31.186:9092&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ProducerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TRANSACTIONAL_ID_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;my-transactional-id&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ProducerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ACKS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;all&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ProducerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RETRIES_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ProducerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Producer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">producer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">KafkaProducer&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringSerializer&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringSerializer&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initTransactions&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">beginTransaction&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Future&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RecordMetadata&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">send&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">producer&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ProducerRecord&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="s">&amp;#34;my-topic&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">)));&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">offset&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1000L&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">commitTransaction&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ProducerFencedException&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">OutOfOrderSequenceException&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">AuthorizationException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// We can&amp;#39;t recover from these exceptions, so our only option is to close the producer and exit.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">KafkaException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// For all other exceptions, just abort the transaction and try again.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">abortTransaction&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="消费端">消费端&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ConsumerTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Properties&lt;/span> &lt;span class="n">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Properties&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BOOTSTRAP_SERVERS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;192.168.31.186:9092&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GROUP_ID_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">AUTO_OFFSET_RESET_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">OffsetResetStrategy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NONE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toLowerCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Locale&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ROOT&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ENABLE_AUTO_COMMIT_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">KEY_DESERIALIZER_CLASS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;org.apache.kafka.common.serialization.StringDeserializer&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">VALUE_DESERIALIZER_CLASS_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;org.apache.kafka.common.serialization.StringDeserializer&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ISOLATION_LEVEL_CONFIG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IsolationLevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">READ_COMMITTED&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toLowerCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Locale&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ROOT&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">KafkaConsumer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">consumer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">KafkaConsumer&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">consumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">subscribe&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;my-topic&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ConsumerRecords&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">records&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">consumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">poll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">100&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">records&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ConsumerRecord&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">record&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">records&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;offset = %d, key = %s, value = %s%n&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">offset&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//Manually commit each record
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">consumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">commitSync&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singletonMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">TopicPartition&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">topic&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">partition&lt;/span>&lt;span class="o">()),&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">OffsetAndMetadata&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">offset&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>恰好一次发送和事务消息(译)</title><link>https://atbug.com/kafka-exactly-once-delivery-and-transactional-messaging/</link><pubDate>Tue, 19 Sep 2017 19:13:26 +0000</pubDate><guid>https://atbug.com/kafka-exactly-once-delivery-and-transactional-messaging/</guid><description>
&lt;p>Kafka提供“至少一次”交付语义, 这意味着发送的消息可以传送一次或多次. 人们真正想要的是“一次”语义,因为重复的消息没有被传递。&lt;/p>
&lt;p>普遍地发声重复消息的情况有两种:&lt;/p>
&lt;ul>
&lt;li>如果客户端尝试向集群发送消息并获取网络错误, 则重试可能会导致重复. 如果在发送消息之前发生网络错误, 则不会发生重复. 但是, 如果在将消息附加到日志之后发生网络错误, 但在将响应发送给发件人之前, 发件人将不知道发生了什么. 唯一的选择是重试和冒险重复或放弃并声明消息丢失。&lt;/li>
&lt;li>如果客户端尝试向集群发送消息并获取网络错误, 则重试可能会导致重复. 如果在发送消息之前发生网络错误, 则不会发生重复. 但是, 如果在将消息附加到日志之后发生网络错误, 但在将响应发送给发件人之前, 发件人将不知道发生了什么. 唯一的选择是重试和冒险重复或放弃并声明消息丢失。&lt;/li>
&lt;/ul>
&lt;p>第二种情况可以通过使用Kafka提供的偏移量由消费者处理. 他们可以将偏移量与其输出进行存储, 然后确保新消费者始终从最后存储的偏移量中提取. 或者, 他们可以使用偏移量作为一种关键字, 并使用它来对其输出的任何最终目标系统进行重复数据删除。&lt;/p>
&lt;h2 id="producer-api改动">Producer API改动&lt;/h2>
&lt;p>&lt;strong>KafkaProducer.java&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Producer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Closeable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Needs to be called before any of the other transaction methods. Assumes that
&lt;/span>&lt;span class="cm"> * the transactional.id is specified in the producer configuration.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * This method does the following:
&lt;/span>&lt;span class="cm"> * 1. Ensures any transactions initiated by previous instances of the producer
&lt;/span>&lt;span class="cm"> * are completed. If the previous instance had failed with a transaction in
&lt;/span>&lt;span class="cm"> * progress, it will be aborted. If the last transaction had begun completion,
&lt;/span>&lt;span class="cm"> * but not yet finished, this method awaits its completion.
&lt;/span>&lt;span class="cm"> * 2. Gets the internal producer id and epoch, used in all future transactional
&lt;/span>&lt;span class="cm"> * messages issued by the producer.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @throws IllegalStateException if the TransactionalId for the producer is not set
&lt;/span>&lt;span class="cm"> * in the configuration.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">initTransactions&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Should be called before the start of each new transaction.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @throws ProducerFencedException if another producer is with the same
&lt;/span>&lt;span class="cm"> * transactional.id is active.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">beginTransaction&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ProducerFencedException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Sends a list of consumed offsets to the consumer group coordinator, and also marks
&lt;/span>&lt;span class="cm"> * those offsets as part of the current transaction. These offsets will be considered
&lt;/span>&lt;span class="cm"> * consumed only if the transaction is committed successfully.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * This method should be used when you need to batch consumed and produced messages
&lt;/span>&lt;span class="cm"> * together, typically in a consume-transform-produce pattern.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @throws ProducerFencedException if another producer is with the same
&lt;/span>&lt;span class="cm"> * transactional.id is active.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">sendOffsetsToTransaction&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TopicPartition&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">OffsetAndMetadata&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">offsets&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">consumerGroupId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ProducerFencedException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Commits the ongoing transaction.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @throws ProducerFencedException if another producer is with the same
&lt;/span>&lt;span class="cm"> * transactional.id is active.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">commitTransaction&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ProducerFencedException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Aborts the ongoing transaction.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @throws ProducerFencedException if another producer is with the same
&lt;/span>&lt;span class="cm"> * transactional.id is active.
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">abortTransaction&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ProducerFencedException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Send the given record asynchronously and return a future which will eventually contain the response information.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param record The record to send
&lt;/span>&lt;span class="cm"> * @return A future which will eventually contain the response information
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Future&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RecordMetadata&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ProducerRecord&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Send a record and invoke the given callback when the record has been acknowledged by the server
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Future&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RecordMetadata&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ProducerRecord&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Callback&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="outofsequenceexception">OutOfSequenceException&lt;/h3>
&lt;p>如果broker检测到数据丢失，生产者将抛出OutOfOrderSequenceException。 换句话说，如果它接收到大于其预期的序列的序列号。 未来将返回此异常，并传递给回调（如果有）。 这是一个致命的异常，新的Producer方法如send，beginTransaction，commitTransaction等将会抛出IlegalStateException。&lt;/p>
&lt;h3 id="应用示例">应用示例&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">KafkaTransactionsExample&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">KafkaConsumer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">consumer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">KafkaConsumer&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">consumerConfig&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// Note that the ‘transactional.id’ configuration _must_ be specified in the
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// producer config in order to use transactions.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">KafkaProducer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">producer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">KafkaProducer&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">producerConfig&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// We need to initialize transactions once per producer instance. To use transactions,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// it is assumed that the application id is specified in the config with the key
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// transactional.id.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// This method will recover or abort transactions initiated by previous instances of a
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// producer with the same app id. Any other transactional messages will report an error
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// if initialization was not performed.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// The response indicates success or failure. Some failures are irrecoverable and will
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// require a new producer instance. See the documentation for TransactionMetadata for a
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// list of error codes.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initTransactions&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ConsumerRecords&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">records&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">consumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">poll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CONSUMER_POLL_TIMEOUT&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">records&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Start a new transaction. This will begin the process of batching the consumed
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// records as well
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// as an records produced as a result of processing the input records.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// We need to check the response to make sure that this producer is able to initiate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// a new transaction.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">beginTransaction&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// Process the input records and send them to the output topic(s).
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ProducerRecord&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">outputRecords&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">processRecords&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">records&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ProducerRecord&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">outputRecord&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">outputRecords&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">outputRecord&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// To ensure that the consumed and produced messages are batched, we need to commit
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// the offsets through
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// the producer and not the consumer.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// If this returns an error, we should abort the transaction.
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">sendOffsetsResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendOffsetsToTransaction&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getUncommittedOffsets&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">// Now that we have consumed, processed, and produced a batch of messages, let&amp;#39;s
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// commit the results.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// If this does not report success, then the transaction will be rolled back.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">producer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">endTransaction&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="新增配置">新增配置&lt;/h3>
&lt;h4 id="broker配置">Broker配置&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>配置&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>transactional.id.timeout.ms&lt;/td>
&lt;td>事务协调器在主动过期生成器TransactionalId之前等待的最大时间（以ms为单位），而不从中接收任何事务状态更新。默认为604800000（7天）。 这允许定期的每周生产者工作来维护其ID。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>max.transaction.timeout.ms&lt;/td>
&lt;td>允许的最大的事务超时时间. 如果一个客户端的事务请求超出这个设置, broker会在InitPidRequest的时候返回一个InvalidTransactionTimeout. 这样可以防止客户端太大的超时，这可能会延迟消费者从包含在事务中的主题中读取消息. 默认值为900000（15分钟）。 这是在消息的交易需要发送的时间段内的保守上限。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>transaction.state.log.replication.factor&lt;/td>
&lt;td>事务状态主题(__transaction_state)的副本数, 默认为3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>transaction.state.log.num.partitions&lt;/td>
&lt;td>事务状态主题(__transaction_state)的的分区数, 默认为50&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>transaction.state.log.min.isr&lt;/td>
&lt;td>事务状态主题的每个分区的最小数量的异步副本需要被视为联机的。 默认为2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>transaction.state.log.segment.bytes&lt;/td>
&lt;td>事务状态主题的段大小。默认值：104857600字节。100m&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="生产者配置">生产者配置&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>配置&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>enable.idempotence&lt;/td>
&lt;td>是否启用幂等（默认情况下为false）。 如果禁用，生产者将不会在生成请求中设置PID字段，并且当前的生产者传递语义将生效。 请注意，必须启用幂等才能使用事务。当启用幂等时，我们强制执行acks = all，retries&amp;gt; 1和max.inflight.requests.per.connection = 1。 没有这些配置的这些值，我们不能保证幂等。 如果这些设置未被应用程序显式覆盖，则在启用幂等时，生产者将设置acks = all，retries = Integer.MAX_VALUE和max.inflight.requests.per.connection = 1。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>transaction.timeout.ms&lt;/td>
&lt;td>在主动中止正在进行的事务之前，事务协调器将等待生产者的事务状态更新的最长时间（以ms为单位）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>transactional.id&lt;/td>
&lt;td>用于事务传递的TransactionalId。 这使得可以跨越多个生产者会话的可靠性语义，因为它允许客户端保证在开始任何新事务之前使用相同的TransactionalId的事务已经完成。 如果没有提供TransactionalId，则生产者被限制为幂等传递。请注意，如果配置了TransactionalId，则必须启用enable.idempotence。默认值为空，这意味着无法使用事务。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="消费者配置">消费者配置&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>配置&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>isolation.level&lt;/td>
&lt;td>以下是可能的值（默认为read_uncommitted）：read_uncommitted：在偏移顺序中消费已提交和未提交的消息; read_committed：仅以偏移顺序消耗非事务性消息或已提交事务消息。 为了保持偏移顺序，该设置意味着我们必须缓冲消费者中的消息，直到我们看到给定事务中的所有消息。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="2">2&lt;/h4>
&lt;h2 id="idempotent-producer">Idempotent Producer&lt;/h2>
&lt;h3 id="幂等生产者保障">幂等生产者保障&lt;/h3>
&lt;p>为了实现幂等生产者语义, 引入了&lt;code>producer id&lt;/code>的概念, 下面称&lt;code>PID&lt;/code>. 每个producer在初始化的时候会被分配一个唯一PID. PID的分配对用户来说是完全透明的, 且没有被客户端暴露.&lt;/p>
&lt;p>PID是从0开始单调递增的, 还有一个将要将要接受消息的主题分区的序号. 序号会随着producer向broker发送消息增长. broker在内存中维护着从每个PID中发过来的序号. 如果序号不是比上次提交PID/TopicParition组中的的序号大一, broker会拒绝producer的请求. 带有较小序号的消息会引发重复错误, producer可以忽略该错误. 带有较大的序号的消息会导致超出序号的错误, 意味着存在消息丢失, 这是致命的错误.&lt;/p>
&lt;p>为了保证每条消息都被恰好一次地持久化在log中, producer需要在失败的时候重试请求. 每个生产者实例都会得到一个新的唯一的PID, 因此我们只能在单一的生产者会话中保证幂等.&lt;/p>
&lt;p>这些幂等生成器语义对于无状态应用程序（如指标跟踪和审计）是非常有用的。&lt;/p>
&lt;h3 id="事务保障">事务保障&lt;/h3>
&lt;p>在核心上, 事务保证使应用程序能够以原子方式生成多个主题分区, 对这些主题分区的所有写入将成功或失败作为一个单元。&lt;/p>
&lt;p>此外, 由于消费者进度被记录为对偏移主题的写入, 所以利用上述能力来使得应用能够将消费和产生的消息批量化成单个原子单元. 只有整个“消费变换产品”全部执行, 才能将消息集合视为消费。&lt;/p>
&lt;p>为了跨多个生产者会话实现幂等, 需要提供一个在应用层面可以稳定的跨多个会话的transactionalId. transactionalId由用户提供.&lt;/p>
&lt;p>有transactionalId后, Kafka可以保证:&lt;/p>
&lt;ol>
&lt;li>一个给定的transactionalId只有一个活跃的producer. 如果有新的使用同一个transactionalId的producer实例上线, 旧的实例会被隔离.&lt;/li>
&lt;li>跨应用会话的事务恢复, 当一个应用实例死掉后, broker会结束(取消或者提交)未完成的事务以保护新上线的实例, 在恢复工作之前将新实例置于干净的状态.&lt;/li>
&lt;/ol>
&lt;p>注意这里提到的事务保障是从producer的角度. 在consumer端, 保障就会弱一些. 特别是, 我们不能保证承诺事务的所有消息都将一起被消费。原因如下:&lt;/p>
&lt;ol>
&lt;li>对于压缩主题, 事务的一些消息可能被较新版本覆盖。&lt;/li>
&lt;li>事务可能跨越日志段. 因此, 当旧段删除时, 我们可能会在事务的第一部分丢失一些消息。&lt;/li>
&lt;li>消费者可能会在事务中寻求任意的offset, 因此缺少一些初始消息。&lt;/li>
&lt;li>消费者可能不会从参与事务的所有分区中消费. 因此, 他们永远无法读取包含该事务的所有消息。&lt;/li>
&lt;/ol>
&lt;h2 id="关键概念">关键概念&lt;/h2>
&lt;p>实现事务, 即确保一组消息以原子方式产生和消费, 我们介绍几个新概念：&lt;/p>
&lt;ol>
&lt;li>我们引进一个称为事务协调器(Transaction Coordinator)的新实体。与消费者组协调器类似, 每个生产者都被分配一个事务协调器, 所有分配PID和管理事务的逻辑都由事务协调器完成。&lt;/li>
&lt;li>我们引入一个名为事务日志(Transaction Log)的新的内部kafka主题(__transaction_state)。与Consumer Offsets主题(__consumer_offsets)类似, 事务日志是每个事务的持久和复制记录。事务日志是事务协调器的状态存储, 最新版本的日志的快照封装了每个活动事务的当前状态。&lt;/li>
&lt;li>我们引入控制消息(Control Messages)的概念。这些是写入用户主题的特殊消息, 由客户端处理, 但不会暴露给用户。例如, 它们被用于让broker向消费者表明先前提取的消息是否已经原子性地提交。以前在&lt;a href="https://issues.apache.org/jira/browse/KAFKA-1639">这里&lt;/a>提出控制消息。&lt;/li>
&lt;li>我们引入了TransactionalId的概念, 使用户能够以持续的方式唯一地识别生产者。具有相同TransactionalId的生产者的不同实例将能够恢复（或中止）由上一个实例实例化的任何事务。&lt;/li>
&lt;li>我们引入生产者代(producer epoch)的概念, 这使我们能够确保只有一个具有给定的TransactionalId的生产者的合法活动实例, 从而使我们能够在发生故障的情况下维护事务保证。&lt;/li>
&lt;/ol>
&lt;p>除了上述新概念之外, 我们还引入了新的请求类型, 新版本的现有请求以及新版本的核心消息格式, 以支持事务。所有这些的细节将推迟到其他文档。&lt;/p>
&lt;h2 id="数据流">数据流&lt;/h2>
&lt;p>&lt;img src="https://cwiki.apache.org/confluence/download/attachments/66854913/Kafka%20Transactions%20Data%20Flow.png?version=1&amp;amp;modificationDate=1487185558000&amp;amp;api=v2" alt="img">&lt;/p>
&lt;p>在上图中, 尖锐的边框表示不同的机器. 底部的圆形盒子表示Kafka TopicPartitions, 而对角圆形的框代表在broker内部运行的逻辑实体。&lt;/p>
&lt;p>每个箭头表示RPC或写入Kafka主题. 这些操作按照每个箭头旁边的数字表示的顺序进行. 下面的部分编号为与上图中的操作相匹配, 并描述相关操作。&lt;/p>
&lt;h3 id="1-查找一个事务协调器--findcoordinatorrequest">1. 查找一个事务协调器 — FindCoordinatorRequest&lt;/h3>
&lt;p>事务协调器是分配PIDs和管理事务的核心组件, producer的第一件事是发送一个FindCoordinatorRequest请求(之前被称为GroupCoordinatorRequest, 但是现在更名为更一般的用法)到broker去获取其coordinator的位置. 译者补充比如ip, port.&lt;/p>
&lt;h3 id="2-获取一个producer-id--initpidrequest">2. 获取一个Producer Id — InitPidRequest&lt;/h3>
&lt;p>获取到coordinator位置之后, 下一步是获取producer的PID. 这个通过发送InitPidRequest请求到事务协调器完成.&lt;/p>
&lt;h4 id="21当有指定transactionlid时">2.1当有指定TransactionlId时&lt;/h4>
&lt;p>如果有配置transactionl.id, TransactionalId会随着InitPidRequest请求发出, 同时在2a中将PID和TransactionalId的对应关系保存在事务日志中. 这使我们能够将TransactionalId返回相同的PID给生产者的未来实例, 因此可以恢复或中止以前不完整的事务。&lt;/p>
&lt;p>除了返回PID之外, InitPidRequest还执行以下任务：&lt;/p>
&lt;pre>&lt;code> 1. 提升PID的代, 使生产者的任何之前的僵尸实例被隔离起来, 不能处理事务.
2. 恢复(向前滚动或回滚)由生产者的上一个实例没有完成的任务事务.
&lt;/code>&lt;/pre>
&lt;p>InitPIDRequest的处理是同步完成的. 一旦返回, producer可以发送数据和开始新的事务.&lt;/p>
&lt;h4 id="22当没有指定transactionalid">2.2当没有指定TransactionalId&lt;/h4>
&lt;p>如果没有配置TransactionalId, 会分配一个新的PID. 这是producer只在单一的session中实现了幂等语义和事务语义.&lt;/p>
&lt;h3 id="3-启动事务--begintransaction-api">3. 启动事务 — beginTransaction() API&lt;/h3>
&lt;p>新的&lt;code>KafkaProducer&lt;/code>有一个beginTransaction()方法用来发出开始事务的信号. 生产者记录指示交易已经开始的本地状态, 但是在发送第一条记录之前, 在协调器看来事务还没有开始.&lt;/p>
&lt;h3 id="4-消费-转换-生产循环">4. 消费-转换-生产循环&lt;/h3>
&lt;p>在这个阶段, producer开始执行组成事务消费-转换-生产消息的流程. 这是一个很长的阶段, 可能包含多个请求&lt;/p>
&lt;h4 id="41-addpartitionstotxnrequest">4.1 AddPartitionsToTxnRequest&lt;/h4>
&lt;p>作为事务的一部分，生产者首次将新的TopicPartition作为事务的一部分发送给事务协调器。 协调器在步骤4.1a中记录了将此TopicPartition添加到事务中。 我们需要这些信息，以便我们可以将提交或中止标记写入每个TopicPartition（有关详细信息，请参阅第5.2节）。 如果这是添加到事务的第一个分区，协调器也将启动事务计时器。&lt;/p>
&lt;h4 id="42-producerequest">4.2 ProduceRequest&lt;/h4>
&lt;p>生产者通过一个或多个ProduceRequests（从生产者的发送方法触发）向用户的主题分区写入一堆消息。 这些请求包括如4.2a所示的PID，代和序号。&lt;/p>
&lt;h4 id="43-addoffsetcommitstotxnrequest">4.3 AddOffsetCommitsToTxnRequest&lt;/h4>
&lt;p>生产者有一个新的KafkaProducer.sendOffsetsToTransaction API方法，它可以批量消费和生成的消息。 此方法接受Map &amp;lt;TopicPartitions，OffsetAndMetadata&amp;gt;和groupId参数。&lt;/p>
&lt;p>sendOffsetsToTransaction方法向事务协调器发送一个带有groupId的AddOffsetCommitsToTxnRequests，从而可以在内部__consumer-offsets主题中推导出该消费者组的TopicPartition。 事务协调器将在步骤4.3a中将该主题分区添加到事务日志中。&lt;/p>
&lt;h4 id="44-txnoffsetcommitrequest">4.4 TxnOffsetCommitRequest&lt;/h4>
&lt;p>另外作为sendOffset的一部分，生产者将向消费者协调器发送一个TxnOffsetCommitRequest，以在__consumer-offsets主题中保留偏移量（步骤4.4a）。 消费者协调员通过使用作为该请求的一部分发送的PID和生产者代来验证生产者是否允许发出请求（而不是僵尸）。&lt;/p>
&lt;p>消费的offsets在事务提交之前不可见，这是我们现在将讨论的过程。&lt;/p>
&lt;h3 id="5-提交或者终结事务">5. 提交或者终结事务&lt;/h3>
&lt;p>一旦写入数据，用户必须调用KafkaProducer的新的commitTransaction或abortTransaction API方法。 这些方法将分别开始提交或中止事务。&lt;/p>
&lt;h4 id="51-endtxnrquest">5.1 EndTxnRquest&lt;/h4>
&lt;p>当生产者完成事务时，必须调用新引入的KafkaProducer.endTransaction或KafkaProducer.abortTransaction API方法。 前者使得&lt;code>步骤4&lt;/code>中生产的数据可用于下游消费者。 后者有效地从日志中擦除生成的数据: 用户永远不可访问。 下游消费者将读取并丢弃已中止的消息。&lt;/p>
&lt;p>无论调用哪个生产者方法，生产者向事务协调器发出一个EndTxnRequest请求，附加数据指示事务是提交还是中止。 在收到此请求后，协调器：&lt;/p>
&lt;ol>
&lt;li>将PREPARE_COMMIT或PREPARE_ABORT消息写入事务日志。 (步骤5.1a)&lt;/li>
&lt;li>通过WriteTxnMarkerRequest开始向用户日志写入称为COMMIT(或ABORT)标记的命令消息的过程。 (见下文第5.2节)。&lt;/li>
&lt;li>最后将COMMITTED（或ABORTED）消息写入事务日志。 (见下文5.3)。&lt;/li>
&lt;/ol>
&lt;h4 id="52-writetxnmarkerrequest">5.2 WriteTxnMarkerRequest&lt;/h4>
&lt;p>该请求由事务协调器发送给作为事务一部分的每个主题分配的leader. 在收到此请求后, 每个代理将向日志写入COMMIT(PID)或ABORT(PID)控制消息。 (步骤5.2a)&lt;/p>
&lt;p>该消息向消费者指示具有给定PID的消息是否必须传递给用户或丢弃。 因此，消费者将缓冲具有PID的消息，直到它读取相应的COMMIT或ABORT消息，此时它将分别递送或丢弃消息。&lt;/p>
&lt;p>请注意，如果__consumer-offsets主题是事务中的TopicPartition之一，则提交（或中止）标记也将写入日志，并且通知消费者协调器，以便在以下情况下实现这些偏移量 在中止情况下提交或忽略它们（左侧的步骤5.2a）。&lt;/p>
&lt;h4 id="53-writing-the-final-commit-or-abort-message">5.3 Writing the final Commit or Abort Message&lt;/h4>
&lt;p>在所有提交或中止标记写入数据日志之后，事务协调器将最后的COMMITTED或ABORTED消息写入事务日志，指示事务完成（图中的步骤5.3）。 此时，可以删除与事务日志中的事务有关的大多数消息。&lt;/p>
&lt;p>我们只需要保留完成的事务的PID以及时间戳，所以我们最终可以删除生产者的TransactionalId-&amp;gt; PID映射。 请参阅下面的过期PID部分。&lt;/p>
&lt;h2 id="简单的实现代码">简单的实现代码&lt;/h2>
&lt;p>&lt;a href="http://atbug.com/kafka-exactly-once-delivery-and-transactional-messaging-example/">这里&lt;/a>&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-98+-+Exactly+Once+Delivery+and+Transactional+Messaging">Exactly Once Delivery and Transactional Messaging&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Kafka Producer配置解读</title><link>https://atbug.com/kafka-producer-config/</link><pubDate>Tue, 19 Sep 2017 15:38:03 +0000</pubDate><guid>https://atbug.com/kafka-producer-config/</guid><description>
&lt;p>按照重要性分类, 基于版本0.11.0.0&lt;/p>
&lt;h2 id="高">高&lt;/h2>
&lt;h3 id="bootstrapservers">bootstrap.servers&lt;/h3>
&lt;p>一组host和port用于初始化连接. 不管这里配置了多少台server, 都只是用作发现整个集群全部server信息. 这个配置不需要包含集群所有的机器信息. 但是最好多于一个, 以防服务器挂掉.&lt;/p>
&lt;h3 id="keyserializer">key.serializer&lt;/h3>
&lt;p>用来序列化key的&lt;code>Serializer&lt;/code>接口的实现类.&lt;/p>
&lt;h3 id="valueserializer">value.serializer&lt;/h3>
&lt;p>用来序列化value的&lt;code>Serializer&lt;/code>接口的实现类&lt;/p>
&lt;h3 id="acks">acks&lt;/h3>
&lt;p>producer希望leader返回的用于确认请求完成的确认数量. 可选值 all, -1, 0 1. 默认值为1&lt;/p>
&lt;ul>
&lt;li>&lt;code>acks=0&lt;/code> 不需要等待服务器的确认. 这是&lt;code>retries&lt;/code>设置无效. 响应里来自服务端的offset总是-1. producer只管发不管发送成功与否。延迟低，容易丢失数据。&lt;/li>
&lt;li>&lt;code>acks=1&lt;/code> 表示leader写入成功（但是并没有刷新到磁盘）后即向producer响应。延迟中等，一旦leader副本挂了，就会丢失数据。&lt;/li>
&lt;li>&lt;code>acks=all&lt;/code>等待数据完成副本的复制, 等同于&lt;code>-1&lt;/code>. 假如需要保证消息不丢失, 需要使用该设置. 同时需要设置&lt;code>unclean.leader.election.enable&lt;/code>为true, 保证当ISR列表为空时, 选择其他存活的副本作为新的leader.&lt;/li>
&lt;/ul>
&lt;h3 id="buffermemory">buffer.memory&lt;/h3>
&lt;p>producer可以使用的最大内存来缓存等待发送到server端的消息. 如果消息速度大于producer交付到server端的阻塞时间&lt;code>max.block.ms&lt;/code>, 将会抛出异常. 默认值33554432 byte (32m). 这个设置不是一个严格的边界, 因为producer除了用来缓存消息, 还要用来进行压缩.&lt;/p>
&lt;h3 id="compressiontype">compression.type&lt;/h3>
&lt;p>producer压缩数据的类型, 默认为none, 就是不压缩. 可选&lt;code>none&lt;/code>, &lt;code>gzip&lt;/code>, &lt;code>snappy&lt;/code> 和&lt;code>lz4&lt;/code>. 压缩整个batch的数据, 因此batch的效果对压缩率也有影响. 更多的批处理意味着更好的压缩&lt;/p>
&lt;h3 id="retries">retries&lt;/h3>
&lt;p>设置大于零的值将导致客户端重新发送其发送失败并发生潜在的瞬时错误的记录. 相当于client在发送失败的时候会重新发行. 如果设置了&lt;code>retries&lt;/code>而没有将&lt;code>max.in.flight.request.per.connection&lt;/code>设置为1, 在两个batch发送到同一个partition时有可能打乱消息的发送顺序(第一个发送失败, 而第二个发送成功)&lt;/p>
&lt;h2 id="中">中&lt;/h2>
&lt;h3 id="batchsize">batch.size&lt;/h3>
&lt;p>producer会尝试批量发送属于同一个partition的消息以减少请求的数量. 这样可以提升客户端和服务端的性能. 默认大小是16348 byte (16k).&lt;/p>
&lt;p>发送到broker的请求可以包含多个batch, 每个batch的数据属于同一个partition.&lt;/p>
&lt;p>太小的batch会降低吞吐. 太大会浪费内存.&lt;/p>
&lt;h3 id="clientid">client.id&lt;/h3>
&lt;p>发送请求时传递给服务端的id字符. 用来追溯请求源, 除了使用ip/port. 服务端的请求日志中会包含一个合理的应用名. 默认为空&lt;/p>
&lt;h3 id="lingerms">linger.ms&lt;/h3>
&lt;p>在正常负载的情况下, 要想减少请求的数量. 加上一个认为的延迟: 不是立即发送消息, 而是延迟等待更多的消息一起批量发送. 类似TCP中的Nagle算法. 当获得了&lt;code>batch.size&lt;/code>的同一partition的消息会立即发送, 不管&lt;code>linger.ms&lt;/code>的设置. 假如要发送的消息比较少, 会等待指定的时间以获取更多的消息.&lt;/p>
&lt;p>默认设置为0 ms(没有延迟).&lt;/p>
&lt;h4 id="maxblockms">max.block.ms&lt;/h4>
&lt;p>控制&lt;code>KafkaProducer.send()&lt;/code>和&lt;code>KafkaProducer.partitionsFor()&lt;/code>的阻塞时间. 这些方法会因为buffer满了或者metadata不可用而阻塞. 用户设置在serializers或者partitioner中的阻塞不会计算在内.&lt;/p>
&lt;h4 id="maxrequestsize">max.request.size&lt;/h4>
&lt;p>请求的最大大小（以字节为单位）。 此设置将限制生产者在单个请求中发送的记录批次数，以避免发送巨大的请求。 这也是最大记录批量大小的上限。 请注意，服务器拥有自己的记录批量大小，可能与此不同。&lt;/p>
&lt;h4 id="partitionerclass">partitioner.class&lt;/h4>
&lt;p>&lt;code>Partitioner&lt;/code>接口的实现类, 默认是&lt;code>org.apache.kafka.clients.producer.internals.DefaultPartitioner&lt;/code>. 需要处理数据倾斜等原因调整分区逻辑的时候使用.&lt;/p>
&lt;h4 id="requesttimeoutms">request.timeout.ms&lt;/h4>
&lt;p>配置控制客户端等待请求响应的最长时间。 如果在超时之前未收到响应，客户端将在必要时重新发送请求，如果重试耗尽，则该请求将失败。 这应该大于replica.lag.time.max.ms(broker配置)，以减少由于不必要的生产者重试引起的消息重复的可能性。&lt;/p>
&lt;h2 id="低">低&lt;/h2>
&lt;h4 id="enableidempotence">enable.idempotence&lt;/h4>
&lt;p>设置为&amp;rsquo;true', 将开启&lt;code>exactly-once&lt;/code>模式. 设置为&amp;rsquo;false'(默认值), producer会因为borker失败等原因重试发送, 可能会导致消息重复.&lt;/p>
&lt;p>设置为&amp;rsquo;true&amp;rsquo;时需要结合&lt;code>max.in.flight.requests.per.connection&lt;/code>设为'1&amp;rsquo;和&lt;code>retires&lt;/code>不能为'0', 同时&lt;code>acks&lt;/code>需要设置为&amp;rsquo;all&amp;rsquo;或者''-1'.&lt;/p>
&lt;h4 id="interceptorclasses">interceptor.classes&lt;/h4>
&lt;p>一组&lt;code>ProducerInterceptor&lt;/code>接口的实现类, 默认为null. 可以通过该接口的实现类去拦截(可能需要修改)producer要发送的消息在发送到服务端之前.&lt;/p>
&lt;h4 id="maxinflightrequestsperconnection">max.in.flight.requests.per.connection&lt;/h4>
&lt;p>没有被确认unacknowledge的batch数, 如果设置大于1在&lt;code>retries&lt;/code>设置了的情况下会出现消息发送顺序错误.&lt;/p>
&lt;h4 id="retrybackoffms">retry.backoff.ms&lt;/h4>
&lt;p>失败请求重试的间隔时间. 默认是100毫秒&lt;/p>
&lt;h4 id="transactiontimeoutms">transaction.timeout.ms&lt;/h4>
&lt;p>事务协调器等待producer更新事务状态的最大毫秒数, 超过的话事务协调器会终止进行中的事务. 如果设置的时间大于broker的&lt;code>max.transaction.timeout.ms&lt;/code>会收到&lt;code>InvalidTransactionTimeout&lt;/code>错误.&lt;/p>
&lt;h4 id="transactionalid">transactional.id&lt;/h4>
&lt;p>用于事务传递的TransactionalId。 这使得可以跨越多个生产者会话的可靠性语义，因为它允许客户端保证在开始任何新事务之前使用相同的TransactionalId的事务已经完成。 如果没有提供TransactionalId，则生产者被限制为幂等传递。 请注意，如果配置了TransactionalId，则必须启用enable.idempotence。 默认值为空，这意味着无法使用事务。&lt;/p></description></item><item><title>JSON Patch</title><link>https://atbug.com/json-patch/</link><pubDate>Sun, 27 Aug 2017 14:41:44 +0000</pubDate><guid>https://atbug.com/json-patch/</guid><description>
&lt;p>JSON Path是在使用Kubernetes API的过程中首次使用的. 使用API做扩缩容的时候, 发送整个Deployment的全文不是个明智的做法, 虽然可行. 因此便使用了JSON Patch.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">JsonObject&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JsonObject&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">item&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JsonPrimitive&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;replace&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">item&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JsonPrimitive&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/spec/replicas&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">item&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JsonPrimitive&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">instances&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">JsonArray&lt;/span> &lt;span class="n">body&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JsonArray&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">body&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">appsV1beta1Api&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">patchNamespacedScaleScale&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">namespace&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>fabric8s提供的kubernetes-client中使用的&lt;a href="https://github.com/flipkart-incubator/zjsonpatch">zjsonpatch&lt;/a>则封装了JSON Patch操作. 例如在做扩缩容的时候或者当前的deployment, 修改replicas的值. 然后比较对象的不同(JsonDiff.asJson(sourceJsonNode, targetJsonNode)).&lt;/p>
&lt;p>下面的内容部分翻译自&lt;a href="http://jsonpatch.com">JSON PATH&lt;/a>, 有兴趣的可以跳转看原文.&lt;/p>
&lt;h2 id="什么是json-patch">什么是JSON Patch&lt;/h2>
&lt;p>JSON Path是一直描述JSON文档变化的格式. 使用它可以避免在只需要修改某一部分的时候发送整个文档内容. 当与HTTP PATCH方法混合使用的时候, 它允许在标准规范的基础上使用HTTP APIs进行部分更新.&lt;/p>
&lt;p>补丁(Patch)内容的格式也是JSON.&lt;/p>
&lt;p>JSON Patch由IETF在&lt;a href="http://tools.ietf.org/html/rfc6902">RFC 6902&lt;/a>中规范.&lt;/p>
&lt;h3 id="简单的例子">简单的例子&lt;/h3>
&lt;h4 id="原始文档">原始文档&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;baz&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;qux&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;bar&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="补丁">补丁&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;replace&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/baz&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;boo&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;add&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/hello&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;world&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;remove&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/foo&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="结果">结果&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;baz&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;boo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;world&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="如何实现">如何实现&lt;/h2>
&lt;p>一个JSON Path文档是一个包含了一组patch操作的JSON文件. 支持的patch操作包括&amp;quot;add&amp;quot;, &amp;ldquo;remove&amp;rdquo;, &amp;ldquo;replace&amp;rdquo;, &amp;ldquo;move&amp;rdquo;, &amp;ldquo;copy&amp;quot;和&amp;quot;test&amp;rdquo;. 这些patch操作是按照顺序应用的: 如果有任何一个操作失败, 整个patch都会被终止.&lt;/p>
&lt;h4 id="json-pointer指针">JSON Pointer(指针)&lt;/h4>
&lt;p>JSON指针&lt;a href="http://tools.ietf.org/html/rfc6901">IETF RFC 6901&lt;/a>定义了一个如何在JSON文档中定位指定值的字符格式. 用来在所有的JSON Patch操作中指定要修改的文档部分.&lt;/p>
&lt;p>JSON指针是使用&lt;code>/&lt;/code>分隔的token字符串, 这些token指定了对象的key或者是数组的索引. 例如, 给定JSON&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;biscuits&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Digestive&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Choco Leibniz&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>/biscuits&lt;/code>将指向数组biscuits, 同时&lt;code>/biscuits/1/name&lt;/code>指向&lt;code>Choco Leibniz&lt;/code>.&lt;/p>
&lt;p>要指向JSON文档的根要使用一个空的字符串&lt;code>''&lt;/code>. 指针&lt;code>/&lt;/code>并不是指向根, 而是指向根上key为&lt;code>&amp;quot;&amp;quot;&lt;/code>的位置(在JSON中是非法的).&lt;/p>
&lt;h3 id="操作">操作&lt;/h3>
&lt;h4 id="add">Add&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;add&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/biscuits/1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Ginger Nut&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在对象上增加一个值, 或者数组中插入数据. 如果是数组, 值将被插入到给定位置的前面. &lt;code>-&lt;/code>用来表示插入到数组的尾部.&lt;/p>
&lt;h4 id="remove">Remove&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;remove&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/biscuits&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>删除对象或者数组中的值.&lt;/p>
&lt;h4 id="replace">Replace&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;replace&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/biscuits/0/name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Chocolate Digestive&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>替换一个值. 等同于先删除再增加.&lt;/p>
&lt;h4 id="copy">Copy&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;copy&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/biscuits/0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/best_biscuit&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从一个位置(from)复制数据到指定的位置(path)上. &lt;code>from&lt;/code>和&lt;code>to&lt;/code>都是JSON指针.&lt;/p>
&lt;h4 id="move">Move&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;move&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/biscuits&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/cookies&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从一个位置(from)移动数据到指定的位置(path)上. &lt;code>from&lt;/code>和&lt;code>to&lt;/code>都是JSON指针.&lt;/p>
&lt;h4 id="test">Test&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span> &lt;span class="nt">&amp;#34;op&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/best_biscuit/name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Choco Leibniz&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查某个位置的值是否是指定的值.如果失败, 整个Patch操作就会终止.&lt;/p>
&lt;h3 id="库">库&lt;/h3>
&lt;h4 id="javascript">JavaScript&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="http://jsonpatchjs.com/">jsonpatch.js&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://bruth.github.com/jsonpatch-js/">jsonpatch-js&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/cujojs/jiff">jiff&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Starcounter-Jack/Fast-JSON-Patch">Fast-JSON-Patch&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/JSON8/patch">JSON8 Patch&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/MarketsWorld/json-patch-utils">JSON Patch Utils&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="python">Python&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/stefankoegl/python-json-patch">python-json-patch&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="php">PHP&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/mikemccabe/json-patch-php">json-patch-php&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/raphaelstolt/php-jsonpatch">php-jsonpatch/php-jsonpatch&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/xp-forge/json-patch">xp-forge/json-patch&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gamringer/JSONPatch">JSONPatch&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="ruby">Ruby&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jasnell/json-tools">json_tools&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rubygems.org/gems/json_patch">json_patch&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tenderlove/hana">hana&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="perl">Perl&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/zigorou/perl-json-patch">perl-json-patch&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="c">C&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/DaveGamble/cJSON">cJSON&lt;/a> (JSON library in C, includes JSON Patch support in cJSON_Utils)&lt;/li>
&lt;/ul>
&lt;h4 id="java">Java&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/flipkart-incubator/zjsonpatch">zjsonpatch&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/fge/json-patch">json-patch&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="scala">Scala&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gnieh/diffson">diffson&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="c-1">C++&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/nlohmann/json">JSON&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="c-2">C####&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/JornWildt/Ramone">Ramone&lt;/a> (a framework for consuming REST services, includes a JSON Patch implementation)&lt;/li>
&lt;li>&lt;a href="https://github.com/myquay/JsonPatch">JsonPatch&lt;/a> (Adds JSON Patch support to ASP.NET Web API)&lt;/li>
&lt;li>&lt;a href="https://starcounter.io/">Starcounter&lt;/a> (In-memory Application Engine, uses JSON Patch with OT for client-server sync)&lt;/li>
&lt;li>&lt;a href="https://github.com/DSaunders/Nancy.JsonPatch">Nancy.JsonPatch&lt;/a> (Adds JSON Patch support to NancyFX)&lt;/li>
&lt;/ul>
&lt;h4 id="go">Go&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/evanphx/json-patch">json-patch&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/mattbaird/jsonpatch">jsonpatch&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="haskell">Haskell&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/GallagherCommaJack/Haskell-JSON-Patch">Haskell-JSON-Patch&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="erlang">Erlang&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/marianoguerra/json-patch.erl">json-patch.erl&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="elm">Elm&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="http://package.elm-lang.org/packages/norpan/elm-json-patch/latest">norpan/elm-json-patch&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="测试套件">测试套件&lt;/h2>
&lt;p>github上维护的一组一致性测试 &lt;a href="https://github.com/json-patch/json-patch-tests">github.com/json-patch/json-patch-tests&lt;/a>&lt;/p></description></item><item><title>如何在Openshift中使用hostPath</title><link>https://atbug.com/how-to-use-hostpath-in-openshift/</link><pubDate>Wed, 23 Aug 2017 19:29:51 +0000</pubDate><guid>https://atbug.com/how-to-use-hostpath-in-openshift/</guid><description>
&lt;p>使用openshift搭建的k8s的api创建Deployment，在启动的时候报下面的错误：&lt;/p>
&lt;blockquote>
&lt;p>Invalid value: &amp;ldquo;hostPath&amp;rdquo;: hostPath volumes are not allowed to be used]&lt;/p>
&lt;/blockquote>
&lt;p>解决方案：&lt;/p>
&lt;p>一个方案是将user加入&lt;code>privileged&lt;/code> scc中，另一个方案就是：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">oc edit scc restricted
#添加下面这行
allowHostDirVolumePlugin: true
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Kubernetes — 持久卷</title><link>https://atbug.com/kubernetes-persistent-volumes/</link><pubDate>Sun, 20 Aug 2017 22:25:40 +0000</pubDate><guid>https://atbug.com/kubernetes-persistent-volumes/</guid><description>
&lt;h1 id="persistent-volume">Persistent Volume&lt;/h1>
&lt;p>译自&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/">Persistent Volumes&lt;/a>&lt;/p>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>管理存储是管理计算的独特问题。 PersistentVolume子系统为用户和管理员提供了一个API，其中提供了如何从如何使用存储提供存储的详细信息。为此，我们介绍两种新的API资源：PersistentVolume和PersistentVolumeClaim。&lt;/p>
&lt;p>PersistentVolume（PV）是由管理员配置的集群中的一段存储。它是集群中的一种资源就像一个节点是一个集群的资源。 PV是类似Volumes的卷插件，但是具有独立于使用PV的任何单个pod的生命周期。该API对象捕获存储的实现细节，即NFS，iSCSI或云提供商特定的存储系统。&lt;/p>
&lt;p>PersistentVolumeClaim（PVC）是用户存储的请求。它类似于pod。 Pod消耗节点资源，PVC消耗PV资源。Pods可以请求特定级别的资源（CPU和内存）。声明可以请求特定的大小和访问模式（例如，一次读写或者多次只读）。&lt;/p>
&lt;p>虽然PersistentVolumeClaims允许用户使用抽象存储资源，但是常见的是，用户需要具有不同属性（如性能）的PersistentVolumes，用于不同的问题。 集群管理员需要能够提供多种彼此不同的PersistentVolumes，而不仅仅是大小和访问模式，而不会使用户了解这些卷的实现细节。 对于这些需求，有一个StorageClass资源。&lt;/p>
&lt;p>StorageClass为管理员提供了一种描述他们提供的存储的“类”的方法。 不同的类可能映射到服务质量级别，或备份策略，或者由群集管理员确定的任意策略。 Kubernetes本身对于什么类别代表是不言而喻的。 这个概念有时在其他存储系统中称为“配置文件”。&lt;/p>
&lt;p>请参阅&lt;a href="https://kubernetes.io/docs/user-guide/persistent-volumes/walkthrough/">详细演练与工作示例&lt;/a>。&lt;/p>
&lt;h2 id="存储和声明的生命周期">存储和声明的生命周期&lt;/h2>
&lt;p>PVs是集群中的资源；PVCs是对这种资源的声明，同时也扮演者对资源声明的检查。PVs和PVCs之前的交互遵循生命周期：供应、绑定、使用中、重新申请。&lt;/p>
&lt;p>集群管理员创建多个PV。它们携带可供集群用户使用的真实存储的详细信息。它们存在于Kubernetes API中，可用于消费。&lt;/p>
&lt;h3 id="供应provisioning">供应(Provisioning)&lt;/h3>
&lt;p>PVs会以两种方式供应：静态和动态。&lt;/p>
&lt;h4 id="静态">静态&lt;/h4>
&lt;p>集群管理员创建多个PV。 它们携带可供集群用户使用的真实存储的详细信息。 它们存在于Kubernetes API中，可被使用。&lt;/p>
&lt;h4 id="动态">动态&lt;/h4>
&lt;p>当管理员创建的静态PV都不匹配用户的PersistentVolumeClaim时，集群可能会尝试为PVC指定动态配置卷。 此配置基于StorageClasses：PVC必须指定一个类，并且管理员必须已创建并配置该类才能进行动态配置。 要求该类的声明有效地为自己禁用动态配置。&lt;/p>
&lt;h3 id="绑定binding">绑定(Binding)&lt;/h3>
&lt;p>当用户创建、或已经创建了一个PersistenVolumenClaim并指定大小和访问类型。Master中的控制循环会检测新的PVC，找到一个匹配的PV（如果可能的话），并将它们绑定在一起。如果一个PV被动态地供应某个PVC，循环将总是把这个PV和该PVC绑定。否则，用户总是至少得到他们要求的内容，但是卷可能超出了要求。一旦绑定，PersistentVolumeClaim绑定是排他的，不管用于绑定它们的模式。&lt;/p>
&lt;p>如果匹配的卷不存在，请求将无限期地保持。 随着匹配卷变得可用，请求将被绑定。 例如，提供许多50Gi PV的集群将不匹配要求100Gi的PVC。 当集群中添加100Gi PV时，可以绑定PVC。&lt;/p>
&lt;h3 id="使用使用">使用(使用)&lt;/h3>
&lt;p>PODs把PVC当做volume使用。集群检查声明以找到绑定的卷并为POD挂载该卷。 对于支持多种访问模式的卷，用户在将其声明用作pod中的卷时指定所需的模式。&lt;/p>
&lt;p>一旦用户有声明并且该声明被绑定，绑定的PV属于用户，只要他们需要它。 用户通过在其Pod的卷块中包含persistentVolumeClaim来安排Pods并访问其声明的PV。 请参阅下面的语法详细信息：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mypod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">myfrontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dockerfile/nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/var/www/html&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mypd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mypd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">myclaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="回收reclaiming">回收(Reclaiming)&lt;/h3>
&lt;p>当用户使用完volume，可以通过请求允许回收资源的API来删除该PVC对象。PersistentVolume的回收策略告诉集群如何处理当声明释放PV后。目前，卷可以被保留，回收或删除。&lt;/p>
&lt;h4 id="保留retaining">保留(Retaining)&lt;/h4>
&lt;p>保留回收策略允许手动回收资源。 当PersistentVolumeClaim被删除时，PersistentVolume仍然存在，并且该卷被认为是“释放的”。 但是，由于上一个声明者的数据仍保留在卷上，因此尚不可用于其他声明。 管理员可以通过以下步骤手动回收卷。&lt;/p>
&lt;ul>
&lt;li>删除PersistentVolume。 删除PV后，外部基础设施（如AWS EBS，GCE PD，Azure Disk或Cinder卷）中的关联存储资产仍然存在。&lt;/li>
&lt;li>相应地手动清理相关存储资产上的数据。&lt;/li>
&lt;li>手动删除关联的存储资产，或者如果要重用相同的存储资产，请使用存储资产定义创建一个新的PersistentVolume。&lt;/li>
&lt;/ul>
&lt;h4 id="回收recycling">回收(Recycling)&lt;/h4>
&lt;p>如果受相应的卷插件支持，回收将对卷执行基本的擦除（rm -rf / thevolume / *），并使其再次可用于新的声明。
但是，管理员可以使用Kubernetes控制器管理器命令行参数来配置自定义的回收器pod模板，如&lt;a href="https://kubernetes.io/docs/admin/kube-controller-manager/">这里&lt;/a>所述。 定制回收站模板必须包含卷规范，如下例所示：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pv-recycler-&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Never&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">vol&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/any/path/it/will/be/replaced&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pv-recycler&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;gcr.io/google_containers/busybox&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/bin/sh&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;test -e /scrub &amp;amp;&amp;amp; rm -rf /scrub/..?* /scrub/.[!.]* /scrub/* &amp;amp;&amp;amp; test -z \&amp;#34;$(ls -A /scrub)\&amp;#34; || exit 1&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">vol&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/scrub&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是，卷部分中的自定义回收器pod模板中指定的特定路径将替换为正在回收的卷的特定路径。&lt;/p>
&lt;h4 id="删除deleting">删除(Deleting)&lt;/h4>
&lt;p>对于支持“删除回收”策略的卷插件，删除将从Kubernetes中删除PersistentVolume对象，并删除外部基础架构（如AWS EBS，GCE PD，Azure Disk或Cinder卷）中关联的存储资产。 动态配置的卷始终被删除。 如果不希望这样做，目前唯一的选择是在创建PV之后编辑或修补PV。 请参阅&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/change-pv-reclaim-policy/">更改PersistentVolume的回收策略&lt;/a>。&lt;/p>
&lt;h3 id="persistent-volume的类型">Persistent Volume的类型&lt;/h3>
&lt;ul>
&lt;li>GCEPersistentDisk&lt;/li>
&lt;li>AWSElasticBlockStore&lt;/li>
&lt;li>AzureFile&lt;/li>
&lt;li>AzureDisk&lt;/li>
&lt;li>FC (Fibre Channel)&lt;/li>
&lt;li>FlexVolume&lt;/li>
&lt;li>Flocker&lt;/li>
&lt;li>NFS&lt;/li>
&lt;li>iSCSI&lt;/li>
&lt;li>RBD (Ceph Block Device)&lt;/li>
&lt;li>CephFS&lt;/li>
&lt;li>Cinder (OpenStack block storage)&lt;/li>
&lt;li>Glusterfs&lt;/li>
&lt;li>VsphereVolume&lt;/li>
&lt;li>Quobyte Volumes&lt;/li>
&lt;li>HostPath (single node testing only – local storage is not supported in any way and WILL NOT WORK in a multi-node cluster)&lt;/li>
&lt;li>VMware Photon&lt;/li>
&lt;li>Portworx Volumes&lt;/li>
&lt;li>ScaleIO Volumes&lt;/li>
&lt;li>StorageOS&lt;/li>
&lt;/ul>
&lt;h2 id="persistent-volumes">Persistent Volumes&lt;/h2>
&lt;p>每个PV都包含规格和状态，这是规格和状态。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolume&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pv0003&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">capacity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">5Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeReclaimPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Recycle&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storageClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">slow&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nfs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">172.17.0.2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="容量">容量&lt;/h3>
&lt;p>通常，PV将具有特定的存储容量。这是使用PV的&lt;code>capacity&lt;/code>属性设置的。看到Kubernetes的&lt;a href="https://git.k8s.io/community/contributors/design-proposals/resources.md">资源模型&lt;/a>，以了解容量使用的单位。&lt;/p>
&lt;p>目前，存储大小是唯一可以设置或请求的资源。未来的属性可能包括IOPS，吞吐量等。&lt;/p>
&lt;h3 id="访问模式">访问模式&lt;/h3>
&lt;p>PersistentVolume可以以资源提供者支持的任何方式安装在主机上。 如下表所示，提供者将具有不同的特性，每个PV的访问模式都被设置为该特定卷支持的特定模式。 例如，NFS可以支持多个读/写客户端，但是特定的NFS PV可能会以只读方式在服务器上导出。 每个PV都有自己的一组访问模式来描述具体的PV功能。&lt;/p>
&lt;p>访问模式：&lt;/p>
&lt;ul>
&lt;li>ReadWriteOnce - 卷可以由单个节点作为读写装载&lt;/li>
&lt;li>ReadOnlyMany - 许多节点可以只读容量&lt;/li>
&lt;li>ReadWriteMany - 卷可以通过许多节点的读写装载&lt;/li>
&lt;/ul>
&lt;p>在CLI中，访问模式缩写为：&lt;/p>
&lt;ul>
&lt;li>RWO - ReadWriteOnce&lt;/li>
&lt;li>ROX - ReadOnlyMany&lt;/li>
&lt;li>RWX - ReadWriteMany&lt;/li>
&lt;/ul>
&lt;p>重要！一个卷只能一次使用一种访问模式进行挂载，即使它支持很多。例如，GCEPersistentDisk可以由单个节点挂载为ReadWriteOnce或多个节点挂载为ReadOnlyMany，但不能同时使用两种。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Volume插件&lt;/th>
&lt;th>单节点读写&lt;/th>
&lt;th>多个节点只读&lt;/th>
&lt;th>多个节点读写&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>AWSElasticBlockStore&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AzureFile&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AzureDisk&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CephFS&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cinder&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FC&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FlexVolume&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Flocker&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GCEPersistentDisk&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Glusterfs&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HostPath&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iSCSI&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PhotonPersistentDisk&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Quobyte&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NFS&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RBD&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VsphereVolume&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PortworxVolume&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ScaleIO&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StorageOS&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="类型">类型&lt;/h3>
&lt;p>PV可以有一个类型，通过将storageClassName属性设置为StorageClass的名称来指定。 特定类型的PV只能绑定到请求该类型的PVC。 没有storageClassName的PV没有类型，只能绑定到不需要特定类型的PVC。
在过去，使用了注释volume.beta.kubernetes.io/storage-class而不是storageClassName属性。 该注释仍然可以工作，但将来Kubernetes版本将不再适用。&lt;/p>
&lt;h3 id="回收策略">回收策略&lt;/h3>
&lt;p>目前的回收策略是：&lt;/p>
&lt;ul>
&lt;li>Retain - 手动回收&lt;/li>
&lt;li>Recycle - 基本擦洗（“rm -rf / thevolume / *”）&lt;/li>
&lt;li>Delete - 相关联的存储资产，如AWS EBS，GCE PD，Azure Disk或OpenStack Cinder卷被删除&lt;/li>
&lt;/ul>
&lt;p>目前，只有NFS和HostPath支持回收。 AWS EBS，GCE PD，Azure Disk和Cinder卷支持删除。&lt;/p>
&lt;h3 id="阶段">阶段&lt;/h3>
&lt;p>卷将处于以下阶段之一：&lt;/p>
&lt;ul>
&lt;li>Available 可用 - 一个尚未绑定到索赔的免费资源&lt;/li>
&lt;li>Bound 绑定 - 音量必须是声明&lt;/li>
&lt;li>Released 释放 - 声明已被删除，但资源尚未被集群回收&lt;/li>
&lt;li>Failed 失败 - 卷自动回收失败&lt;/li>
&lt;/ul>
&lt;p>CLI将显示绑定到PV的PVC的名称。&lt;/p>
&lt;h3 id="挂载选项">挂载选项&lt;/h3>
&lt;p>Kubernetes管理员可以指定在一个节点上挂载一个持久卷时的其他挂载选项。&lt;/p>
&lt;p>您可以通过使用持久卷上的注释volume.beta.kubernetes.io/mount-options来指定安装选项。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;v1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;PersistentVolume&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gce-disk-1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volume.beta.kubernetes.io/mount-options&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;discard&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">capacity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;10Gi&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;ReadWriteOnce&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gcePersistentDisk&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fsType&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;ext4&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pdName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;gce-disk-1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装选项是一个字符串，在将卷安装到磁盘时将被累积地连接和使用。&lt;/p>
&lt;p>请注意，并非所有Persistent卷类型都支持挂载选项。 在Kubernetes 1.6版中，以下卷类型支持挂载选项。&lt;/p>
&lt;ul>
&lt;li>GCEPersistentDisk&lt;/li>
&lt;li>AWSElasticBlockStore&lt;/li>
&lt;li>AzureFile&lt;/li>
&lt;li>AzureDisk&lt;/li>
&lt;li>NFS&lt;/li>
&lt;li>iSCSI&lt;/li>
&lt;li>RBD (Ceph Block Device)&lt;/li>
&lt;li>CephFS&lt;/li>
&lt;li>Cinder (OpenStack block storage)&lt;/li>
&lt;li>Glusterfs&lt;/li>
&lt;li>VsphereVolume&lt;/li>
&lt;li>Quobyte Volumes&lt;/li>
&lt;li>VMware Photon&lt;/li>
&lt;/ul>
&lt;h2 id="persistentvolumeclaims">PersistentVolumeClaims&lt;/h2>
&lt;p>每个PVC包含规格和状态，这是声明的规范和状态。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PersistentVolumeClaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">myclaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ReadWriteOnce&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">8Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">storageClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">slow&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">release&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;stable&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- {&lt;span class="nt">key: environment, operator: In, values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">dev]}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="访问模式-1">访问模式&lt;/h3>
&lt;p>当请求具有特定访问模式的存储时，声明使用与卷相同的约定。&lt;/p>
&lt;h3 id="资源">资源&lt;/h3>
&lt;p>声明（就像pods）可以请求特定数量的资源。 在这种情况下，请求用于存储。 相同的资源模型适用于卷和声明。&lt;/p>
&lt;h3 id="选择器">选择器&lt;/h3>
&lt;p>声明可以指定标签选择器以进一步过滤Volumes集。 只有标签与选择器匹配的卷才能绑定到声明。 选择器可以由两个字段组成：&lt;/p>
&lt;ul>
&lt;li>matchLabels - 卷必须具有带此值的标签&lt;/li>
&lt;li>matchExpressions - 通过指定关键字和值的关键字，值列表和运算符所做的要求列表。 有效运算符包括In，NotIn，Exists和DoesNotExist。&lt;/li>
&lt;/ul>
&lt;p>所有来自matchLabels和matchExpressions的要求是组合在一起的，所有这些要求都必须满足才能匹配。&lt;/p>
&lt;h3 id="类型-1">类型&lt;/h3>
&lt;p>声明可以通过使用属性storageClassName指定StorageClass的名称来请求特定的类型。只有所请求的类型的PV，与PVC相同的storageClassName的PV可以绑定到PVC。&lt;/p>
&lt;p>PVC不一定要求一个类型。 它的storageClassName设置为等于“”的PVC总是被解释为请求没有类型的PV，因此它只能绑定到没有类型的PV（没有注释或一个等于“”）。 没有storageClassName的PVC不完全相同，并且根据是否启用了DefaultStorageClass admission插件，集群的处理方式不同。&lt;/p>
&lt;ul>
&lt;li>如果admission插件已打开，则管理员可以指定默认的StorageClass。 没有storageClassName的所有PVC只能绑定到该默认的PV。 通过将StorageClass对象中的注解storageclass.kubernetes.io/is-default-class设置为“true”来指定默认的StorageClass。 如果管理员没有指定默认值，则集群会对PVC创建做出响应，就像admission插件被关闭一样。 如果指定了多个默认值，则admission插件禁止创建所有PVC。&lt;/li>
&lt;li>如果admission插件已关闭，则不存在默认StorageClass的概念。 没有&lt;code>storageClassName&lt;/code>的所有PVC只能绑定到没有类的PV。 在这种情况下，没有&lt;code>storageClassName&lt;/code>的PVC的处理方式与将其&lt;code>storageClassName&lt;/code>设置为“”的PVC相同。&lt;/li>
&lt;/ul>
&lt;p>根据挂载方法，挂载过程中可以通过addon manager在Kubernetes群集中部署默认的&lt;code>StorageClass&lt;/code>。&lt;/p>
&lt;p>当PVC指定一个选择器，除了请求一个&lt;code>StorageClass&lt;/code>之外，这些要求被AND组合在一起：只有所请求的类和所请求的标签的PV可能被绑定到PVC。 请注意，当前，具有非空选择器的PVC不能为其动态配置PV。&lt;/p>
&lt;p>在过去，使用了注解&lt;code>volume.beta.kubernetes.io/storage-class&lt;/code>，而不是&lt;code>storageClassName&lt;/code>属性。 该注解仍然可以工作，但在未来的Kubernetes版本中它将不被支持。&lt;/p>
&lt;h2 id="claims-vs-volumes">Claims VS Volumes&lt;/h2>
&lt;p>Pods通过将声明用作卷来访问存储。 声明必须存在于与使用声明的pod相同的命名空间中。 集群在pod的命名空间中查找声明，并使用它来获取支持声明的&lt;code>PersistentVolume&lt;/code>。 然后将卷挂载到主机并进入pod。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mypod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">myfrontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dockerfile/nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/var/www/html&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mypd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mypd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persistentVolumeClaim&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">claimName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">myclaim&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="关于命名空间的注意">关于命名空间的注意&lt;/h3>
&lt;p>&lt;code>PersistentVolumes&lt;/code>绑定是独占的，并且由于&lt;code>PersistentVolumeClaims&lt;/code>是命名空间对象，因此只能在一个命名空间内挂载“many”模式（ROX，RWX）的声明。&lt;/p>
&lt;h2 id="storageclasses">StorageClasses&lt;/h2>
&lt;p>每个&lt;code>StorageClass&lt;/code>包含字段&lt;code>provisioninger&lt;/code>和&lt;code>parameter&lt;/code>，当属于类型的&lt;code>PersistentVolume&lt;/code>需要动态配置时使用。&lt;/p>
&lt;p>&lt;code>StorageClass&lt;/code>对象的名称很重要，用户可以如何请求特定的类。 管理员在首次创建&lt;code>StorageClass&lt;/code>对象时设置类的名称和其他参数，并且在创建对象后无法更新对象。&lt;/p>
&lt;p>管理员可以仅为不要求任何特定类绑定的PVC指定默认的StorageClass：有关详细信息，请参阅&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims">PersistentVolumeClaim&lt;/a>部分。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">StorageClass&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">storage.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">standard&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">provisioner&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetes.io/aws-ebs&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">parameters&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gp2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="供应者provisioner">供应者(Provisioner)&lt;/h3>
&lt;p>存储类有一个供应者，它确定用于配置PV的卷插件。必须指定此字段。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Volume Plugin&lt;/th>
&lt;th>Internal Provisioner&lt;/th>
&lt;th>Config Example&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>AWSElasticBlockStore&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#aws">AWS&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AzureFile&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#azure-file">Azure File&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AzureDisk&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#azure-disk">Azure Disk&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CephFS&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cinder&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#openstack-cinder">OpenStack Cinder&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FC&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FlexVolume&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Flocker&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GCEPersistentDisk&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#gce">GCE&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Glusterfs&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#glusterfs">Glusterfs&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iSCSI&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PhotonPersistentDisk&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Quobyte&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#quobyte">Quobyte&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NFS&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RBD&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#ceph-rbd">Ceph RBD&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VsphereVolume&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#vsphere">vSphere&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PortworxVolume&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#portworx-volume">Portworx Volume&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ScaleIO&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#scaleio">ScaleIO&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>你不限于指定此处列出的“internal”供应者（其名称前缀为“kubernetes.io”并与Kubernetes一起发送）。 你还可以运行和指定外部提供程序，它们是遵循Kubernetes定义的规范的独立程序。 外部提供者的作者对代码的生命周期，供应商的运输状况，运行状况以及使用的卷插件（包括Flex）等都有充分的自主权。存储库kubernetes-incubator /外部存储库包含一个库 用于编写实施大部分规范的外部提供者以及各种社区维护的外部提供者。&lt;/p>
&lt;p>例如，NFS不提供内部提供程序，但可以使用外部提供程序。 一些外部提供者列在存储库kubernetes-incubator/external-storage中。 还有第三方存储供应商提供自己的外部供应商的情况。&lt;/p>
&lt;h3 id="回收策略-1">回收策略&lt;/h3>
&lt;p>由存储类动态创建的持久卷将具有&lt;code>delete&lt;/code>的回收策略。 如果不希望这样做，唯一的当前选项是在创建PV之后编辑PV。&lt;/p>
&lt;p>通过存储类手动创建和管理的持久卷将具有在创建时分配的任何回收策略。&lt;/p>
&lt;h3 id="参数">参数&lt;/h3>
&lt;p>存储类型具有描述属于存储类型的卷的参数。 取决于供应者，可以接受不同的参数。 例如，参数类型的值io1和参数iopsPerGB特定于EBS。 当省略参数时，使用一些默认值。&lt;/p></description></item><item><title>Kubernetes学习 — Macos安装Kubernetes</title><link>https://atbug.com/install-kubernetes-on-macos/</link><pubDate>Thu, 17 Aug 2017 09:44:17 +0000</pubDate><guid>https://atbug.com/install-kubernetes-on-macos/</guid><description>
&lt;h1 id="kubernetes">Kubernetes&lt;/h1>
&lt;h2 id="安装">安装&lt;/h2>
&lt;h2 id="macos">macos&lt;/h2>
&lt;h3 id="检查环境">检查环境&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">sysctl -a &lt;span class="p">|&lt;/span> grep machdep.cpu.features &lt;span class="p">|&lt;/span> grep VMX
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装virtualbox">安装VirtualBox&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">http://download.virtualbox.org/virtualbox/5.1.26/Oracle_VM_VirtualBox_Extension_Pack-5.1.26-117224.vbox-extpack
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装minikube">安装minikube&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.21.0/minikube-darwin-amd64 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chmod +x minikube &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo mv minikube /usr/local/bin/
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建集群">创建集群&lt;/h3>
&lt;p>默认使用virtualbox。&lt;/p>
&lt;p>主机的ip是&lt;code>192.168.31.186&lt;/code>， &lt;code>1087&lt;/code>是proxy的端口。需要将ss的http代理监听地址从&lt;code>127.0.0.1&lt;/code>改为主机的ip。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#启动&lt;/span>
minikube start
&lt;span class="c1">#使用私有库&lt;/span>
minikube start --insecure-registry&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.31.34&amp;#34;&lt;/span>
&lt;span class="c1">#使用proxy，用于获取镜像&lt;/span>
minikube start --docker-env &lt;span class="nv">HTTP_PROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.31.186:1087&amp;#34;&lt;/span> --docker-env &lt;span class="nv">HTTPS_PROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.31.186:1087&amp;#34;&lt;/span> --docker-env &lt;span class="nv">NO_PROXY&lt;/span>&lt;span class="o">=&lt;/span>192.168.99.0/24
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装kubectl">安装kubectl&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">curl -Lo kubectl http://storage.googleapis.com/kubernetes-release/release/v1.7.3/bin/darwin/amd64/kubectl &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chmod +x kubectl &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo mv kubectl /usr/local/bin/
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="oh-my-zsh-tab-completion">oh-my-zsh tab completion&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">vi ~/.zshrc
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>添加到plugin部分&lt;br>
plugins=(git zsh-completions kubectl)&lt;/p>
&lt;/blockquote>
&lt;h2 id="使用">使用&lt;/h2>
&lt;h3 id="minikube">minikube&lt;/h3>
&lt;h4 id="检查版本">检查版本&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube version
&lt;span class="c1">#minikube version: v0.21.0&lt;/span>
kubectl version
&lt;span class="c1">#Client Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;3&amp;#34;, GitVersion:&amp;#34;v1.3.0&amp;#34;, GitCommit:&amp;#34;283137936a498aed572ee22af6774b6fb6e9fd94&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2016-07-01T19:26:38Z&amp;#34;, GoVersion:&amp;#34;go1.6.2&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;darwin/amd64&amp;#34;}&lt;/span>
&lt;span class="c1">#Server Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;7&amp;#34;, GitVersion:&amp;#34;v1.7.0&amp;#34;, GitCommit:&amp;#34;d3ada0119e776222f11ec7945e6d860061339aad&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2017-07-26T00:12:31Z&amp;#34;, GoVersion:&amp;#34;go1.8.3&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="获取集群地址">获取集群地址&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube ip
192.168.99.100
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="获取服务列表">获取服务列表&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube service list
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="打开dashboard">打开dashboard&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">minikube dashboard
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kubectl">kubectl&lt;/h2>
&lt;h4 id="部署dashboard-ui">部署Dashboard UI&lt;/h4>
&lt;p>默认minikube会自动部署dashboard&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl create -f https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="启动proxy">启动proxy&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl proxy
&lt;span class="c1">#Starting to serve on 127.0.0.1:8001&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="获取pod信息">获取pod信息&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl get pods --namespace kube-system
NAME READY STATUS RESTARTS AGE
kube-addon-manager-minikube 0/1 Running &lt;span class="m">0&lt;/span> 1h
kubernetes-dashboard-3313488171-90s64 0/1 Running &lt;span class="m">0&lt;/span> 20m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果STATUS一直处于&lt;strong>ContainerCreating&lt;/strong>状态，应该是pull image失败。默认是去gcr.io拉镜像，被墙了。需要在启动minikube的时候设置docker使用的代理。&lt;/p>
&lt;h4 id="获取pod详细信息">获取pod详细信息&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl describe pod kubernetes-dashboard-3313488171-90s64 --namespace kube-system
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="查看log">查看log&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">kubectl logs -f kubernetes-dashboard-3313488171-90s64
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>暴力停止ExecutorService的线程</title><link>https://atbug.com/stop-a-thread-of-executor-service/</link><pubDate>Wed, 19 Jul 2017 22:25:19 +0000</pubDate><guid>https://atbug.com/stop-a-thread-of-executor-service/</guid><description>
&lt;p>停止，stop，这里说的是真的停止。如何优雅的结束，这里就不提了。&lt;/p>
&lt;p>这里要用&lt;code>Thread.stop()&lt;/code>。众所周知，stop()方法在JDK中是废弃的。&lt;/p>
&lt;blockquote>
&lt;p>该方法天生是不安全的。使用thread.stop()停止一个线程，导致释放（解锁）所有该线程已经锁定的监视器（因沿堆栈向上传播的未检查异常ThreadDeath而解锁）。如果之前受这些监视器保护的任何对象处于不一致状态，则不一致状态的对象（受损对象）将对其他线程可见，这可能导致任意的行为。&lt;/p>
&lt;/blockquote>
&lt;p>有时候我们会有这种需求，不需要考虑线程执行到哪一步。一般这种情况是外部执行stop，比如执行业务的线程因为各种原因假死或者耗时较长，由于设计问题又无法响应优雅的停止指令。&lt;/p>
&lt;p>现在大家在项目中都很少直接使用线程，而是通过concurrent包中的类来实现多线程，例如ExecutorService的各种实现类。&lt;/p>
&lt;p>一个简单的停止线程的例子：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ExecutorServiceTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ExecutorService&lt;/span> &lt;span class="n">executor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Executors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newSingleThreadExecutor&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicReference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicReference&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">Future&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">firstFuture&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">executor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">submit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Thread&lt;/span> &lt;span class="n">currentThread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">currentThread&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">firstFuture&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">500&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isAlive&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">stop&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">50&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">executor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">submit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;submit again&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="n">executor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">shutdown&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你运行了上面的代码就会发现程序假死了，通过stack dump看是发生了死锁：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;#34;pool-1-thread-2&amp;#34; #11 prio=5 os_prio=31 tid=0x00007fa91006e800 nid=0x5903 waiting on condition [0x00007000060f8000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for &amp;lt;0x000000076ab76ea0&amp;gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>死锁发生在第二次submit后，在LinkedBlockingQueue.take()时，LinkedBlockingQueue在ThreadPoolExecutor中用来暂存task的。真正执行任务线程的时候再从队列中取出。我们都知道LinkedBlockingQueue是线程的安全的，其高并发和线程安全是通过一个ReentrantLock代替内置锁来实现的（减小了锁的粒度）。submit第二个task时，再次执行take会再次获取锁。但是由于stop直接杀死了线程，没有释放当次执行take方法时获取ReentrantLock锁，导致了死锁。&lt;/p>
&lt;p>stop直接停止了线程，抛出了&lt;code>ThreadDeath&lt;/code>。&lt;code>ThreadDeath&lt;/code>是Error，不是Exception。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ThreadDeath&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Error&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">serialVersionUID&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">4417128565033088268L&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种情况下，原有的ExecutorService实例就不能再使用了，因为我们无法通过程序来释放未释放的锁（由虚拟机的GC来解决）。如此，便需要重建ExecutorService实例。&lt;/p>
&lt;p>对上面的代码做了修改：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ExecutorServiceTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ExecutorService&lt;/span> &lt;span class="n">executor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Executors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newSingleThreadExecutor&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicReference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ExecutorService&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">es&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicReference&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">es&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">executor&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicReference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicReference&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">Future&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">future&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">es&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">submit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Thread&lt;/span> &lt;span class="n">currentThread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">currentThread&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">currentThread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setUncaughtExceptionHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UncaughtExceptionHandler&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">uncaughtException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">ThreadDeath&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">IllegalMonitorStateException&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">es&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">shutdownNow&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">es&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newSingleThreadExecutor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">future&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">500&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isAlive&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">stop&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">50&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">es&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">submit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;submit again&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="n">es&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">shutdown&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注：这个例子只考虑了ExecutorService实例在单线程环境中的使用，如果需要在多线程环境中需要考虑重建实例时的排他性。&lt;/strong>&lt;/p>
&lt;p>修改后的核心是UncaughtExceptionHandler：&lt;/p>
&lt;blockquote>
&lt;p>当线程由于未捕获的异常突然终止而调用处理程序的接口。
当线程由于未捕获的异常即将终止时，Java虚拟机将使用Thread.getUncaughtExceptionHandler（）向线程查询其UncaughtExceptionHandler，并将调用处理程序的uncaughtException方法，将线程和异常作为参数传递。 如果一个线程没有显示它的UncaughtExceptionHandler，那么它的ThreadGroup对象充当它的UncaughtExceptionHandler。 如果ThreadGroup对象没有处理异常的特殊要求，它可以将调用转发到默认的未捕获的异常处理程序。&lt;/p>
&lt;/blockquote></description></item><item><title>私有构造函数捕获模式</title><link>https://atbug.com/private-constructor-capture-idiom/</link><pubDate>Wed, 24 May 2017 06:50:44 +0000</pubDate><guid>https://atbug.com/private-constructor-capture-idiom/</guid><description>
&lt;p>《Java并发编程实践》的注解中有提到这一概念。&lt;/p>
&lt;blockquote>
&lt;p>The private constructor exists to avoid the race condition that would occur if the copy constructor were implemented as this (p.x, p.y); this is an example of the private constructor capture idiom (Bloch and Gafter, 2005).&lt;/p>
&lt;/blockquote>
&lt;p>结合原文代码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@ThreadSafe&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SafePoint&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="nd">@GuardedBy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;this&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nf">SafePoint&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">]);&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SafePoint&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">};&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的构造器&lt;code>public SafePoint(SafePoint p) { this (p.get()); }&lt;/code>是为了捕获另一个实例的状态。get()方法是一个同步方法，为了避免竞态没有分别提供x、y的公有getter方法。&lt;/p>
&lt;p>为了保证SafePoint的多线程安全性，在使用另一个实例构造新的实例时，使用了一个私有的构造器。&lt;/p>
&lt;p>首先为什么不用下面这种，还是为了避免竞态（p.x和p.y调用不是原子操作）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SafePoint&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">y&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同理，这种也不行，两次调用get()方法不是原子操作。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SafePoint&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">()[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">()[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">])&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为什么不用直接用数组，编译不通过：&lt;code>Call to &amp;quot;this()&amp;quot; must be first statement in constructor body&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SafePoint&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为什么接受数组为参数的构造器不能公开，数组a是有外部传入的，并不能保证数组内容不会其他线程修改。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然我们可以使用下面这种代替私有的构造器，这种方法是安全的，但是会产生重复的初始化代码。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">SafePoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SafePoint&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再回头看SafePoint的线程安全性，SafePoint有两个状态变量x、y。为了保证线程安全性，没有为其分别提供getter和setter方法，而是将其封装后发布并使用内置锁保护。&lt;/p>
&lt;p>可以参考&lt;a href="%5Bhttps://stackoverflow.com/questions/12028925/private-constructor-to-avoid-race-condition/12037506">stackoverflow&lt;/a>上的示例代码。&lt;/p></description></item><item><title>Docker快速构建Cassandra和Java操作</title><link>https://atbug.com/java-operate-cassandra-deployed-in-docker/</link><pubDate>Thu, 18 May 2017 23:33:24 +0000</pubDate><guid>https://atbug.com/java-operate-cassandra-deployed-in-docker/</guid><description>
&lt;h3 id="搭建cassandra">搭建Cassandra&lt;/h3>
&lt;p>使用docker创建Cassandra，方便快捷&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker pull cassandra:latest
docker run -d --name cassandra -p 9042:9042 cassandra
docker &lt;span class="nb">exec&lt;/span> -it cassandra bash
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建keyspacetable">创建keyspace、table&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-cql" data-lang="cql">&lt;span class="o">#&lt;/span>&lt;span class="n">cqlsh&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">keyspace&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEYSPACE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">REPLICATION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;class&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;SimpleStrategy&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;replication_factor&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">USE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contact&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">UUID&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">TEXT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="查看表数据">查看表数据&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cqlsh:contacts&amp;gt; SELECT * FROM contact&lt;span class="p">;&lt;/span>
email &lt;span class="p">|&lt;/span> id
-------+----
&lt;span class="o">(&lt;/span>&lt;span class="m">0&lt;/span> rows&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="java客户端">Java客户端&lt;/h3>
&lt;h4 id="引入依赖">引入依赖&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.datastax.cassandra&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>cassandra-driver-core&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>3.2.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="连接到cassandra并插入数据">连接到Cassandra并插入数据&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Cluster&lt;/span> &lt;span class="n">cluster&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Cluster&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">addContactPoint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Session&lt;/span> &lt;span class="n">session&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cluster&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">connect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;contacts&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">insert&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;INSERT INTO contact (id, email) &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34;VALUES (&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34;bd297650-2885-11e4-8c21-0800200c9a66,&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34;&amp;#39;contact@example.com&amp;#39; &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34;);&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="查看表数据-1">查看表数据&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cqlsh:contacts&amp;gt; SELECT * FROM contact&lt;span class="p">;&lt;/span>
email &lt;span class="p">|&lt;/span> id
---------------------+--------------------------------------
contact@example.com &lt;span class="p">|&lt;/span> bd297650-2885-11e4-8c21-0800200c9a66
&lt;span class="o">(&lt;/span>&lt;span class="m">1&lt;/span> rows&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>从零开始用docker运行spring boot应用</title><link>https://atbug.com/run-spring-boot-app-in-docker/</link><pubDate>Thu, 20 Apr 2017 21:58:42 +0000</pubDate><guid>https://atbug.com/run-spring-boot-app-in-docker/</guid><description>
&lt;p>假设已经安装好Docker&lt;/p>
&lt;h3 id="springboot应用">Springboot应用&lt;/h3>
&lt;h4 id="pom添加依赖和构建插件">pom添加依赖和构建插件&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;parent&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-parent&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.5.3.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/parent&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-web&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;build&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;plugins&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/build&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="应用代码">应用代码&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.atbug.spring.boot.test&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.boot.SpringApplication&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.boot.web.servlet.FilterRegistrationBean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.bind.annotation.RequestMapping&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.bind.annotation.RestController&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Created by addo on 2017/5/15.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="nd">@RestController&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Application&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">home&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Application&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="应用构建">应用构建&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">mvn clean package
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="centos-7-with-java8">Centos 7 with Java8&lt;/h3>
&lt;h4 id="获取centos7-镜像">获取Centos7 镜像&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker pull centos:7
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="准备centos-java8的dockerfile">准备centos-java8的dockerfile&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">FROM centos:7
MAINTAINER Addo Zhang &lt;span class="s2">&amp;#34;duwasai@gmail.com&amp;#34;&lt;/span>
&lt;span class="c1"># Set correct environment variables.&lt;/span>
ENV HOME /root
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8
RUN yum install -y curl&lt;span class="p">;&lt;/span> yum upgrade -y&lt;span class="p">;&lt;/span> yum update -y&lt;span class="p">;&lt;/span> yum clean all
ENV JDK_VERSION 8u11
ENV JDK_BUILD_VERSION b12
RUN curl -LO &lt;span class="s2">&amp;#34;http://download.oracle.com/otn-pub/java/jdk/&lt;/span>&lt;span class="nv">$JDK_VERSION&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$JDK_BUILD_VERSION&lt;/span>&lt;span class="s2">/jdk-&lt;/span>&lt;span class="nv">$JDK_VERSION&lt;/span>&lt;span class="s2">-linux-x64.rpm&amp;#34;&lt;/span> -H &lt;span class="s1">&amp;#39;Cookie: oraclelicense=accept-securebackup-cookie&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rpm -i jdk-&lt;span class="nv">$JDK_VERSION&lt;/span>-linux-x64.rpm&lt;span class="p">;&lt;/span> rm -f jdk-&lt;span class="nv">$JDK_VERSION&lt;/span>-linux-x64.rpm&lt;span class="p">;&lt;/span> yum clean all
ENV JAVA_HOME /usr/java/default
RUN yum remove curl&lt;span class="p">;&lt;/span> yum clean all
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="创建centos-java8镜像">创建centos-java8镜像&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker build -t addo/centos-java8 .
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="docker中运行应用">Docker中运行应用&lt;/h3>
&lt;h4 id="准备应用镜像的dockerfile">准备应用镜像的dockerfile&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">FROM addo/centos-java8
ADD target/boot-test-1.0-SNAPSHOT.jar /opt/app.jar
EXPOSE &lt;span class="m">8080&lt;/span>
CMD java -jar /opt/app.jar
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="构建应用镜像">构建应用镜像&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker build -t temp/spring-boot-app .
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="运行">运行&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --name spring-boot-app -p 8080:8080 temp/spring-boot-app
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Jasig CAS Web and Proxy flow</title><link>https://atbug.com/jasig-cas-web-and-proxy-flow/</link><pubDate>Tue, 18 Apr 2017 10:36:16 +0000</pubDate><guid>https://atbug.com/jasig-cas-web-and-proxy-flow/</guid><description>
&lt;p>最近因为需求在看CAS相关的只是，由于需要后端调用，用到proxy（代理）模式。整理了下web flow和proxy web flow的流程。&lt;/p>
&lt;h2 id="web-flow">Web Flow&lt;/h2>
&lt;p>&lt;img src="../media/CAS-Service-Ticket.jpg" alt="Web Flow">&lt;/p>
&lt;h2 id="proxy-web-flow">Proxy Web Flow&lt;/h2>
&lt;p>&lt;img src="../media/CAS-Proxy-Ticket.jpg" alt="Proxy Web Flow">&lt;/p></description></item><item><title>MetaspaceSize的坑</title><link>https://atbug.com/java8-metaspace-size-issue/</link><pubDate>Thu, 13 Apr 2017 11:55:14 +0000</pubDate><guid>https://atbug.com/java8-metaspace-size-issue/</guid><description>
&lt;p>这几天生产上有台机器的Metaspace一直在告警，Metaspace使用达到了97%。使用&lt;code>-XX:MetaspaceSize=512m&lt;/code>，告警也还在在持续，查看MC只有81536.0，显然这个参数没起作用。&lt;/p>
&lt;p>也有人遇到类似的问题，并在openjdk上提过类似的bug，其实是一个注释的bug，最终在&lt;a href="https://bugs.openjdk.java.net/browse/JDK-8151845">JDK-8151845&lt;/a>中修复了。&lt;/p>
&lt;blockquote>
&lt;p>Class metadata is deallocated when the corresponding Java class is unloaded. Java classes are unloaded as a result of garbage collection, and garbage collections may be induced in order to unload classes and deallocate class metadata. When the space committed for class metadata reaches a certain level (a high-water mark), a garbage collection is induced. After the garbage collection, the high-water mark may be raised or lowered depending on the amount of space freed from class metadata. The high-water mark would be raised so as not to induce another garbage collection too soon. The high-water mark is initially set to the value of the command-line option MetaspaceSize. It is raised or lowered based on the options MaxMetaspaceFreeRatio and MinMetaspaceFreeRatio. If the committed space available for class metadata as a percentage of the total committed space for class metadata is greater than MaxMetaspaceFreeRatio, then the high-water mark will be lowered. If it is less than MinMetaspaceFreeRatio, then the high-water mark will be raised.&lt;/p>
&lt;/blockquote>
&lt;p>查看了Oracle的手册，Metaspace的GC会在committed size达到high-water mark之后发生。并且GC之后high-water mark会变化：变大或者变小，变大的话会防止下次GC发生得太早。high-water mark的默认初始大小20.8M，通过&lt;strong>MetaspaceSize&lt;/strong>来设置，可见MetaspaceSize是控制Metaspace发生GC的阈值。GC后high-water mark的变化，通过MaxMetaspaceFreeRatio和MinMetaspaceFreeRatio控制。&lt;/p>
&lt;p>MaxMetaspaceSize默认为-1，无限大。不过如果没有限制的话，一直增大会被系统干掉进程。最好还是设置一下，比如1G。&lt;/p>
&lt;p>下面是我测试了分别设置MetaspaceSize、MaxMetaspaceSize、InitialBootClassLoaderMetaspaceSize为1G，Metaspace的变化。&lt;/p>
&lt;p>&lt;code>-XX:MetaspaceSize=1024m&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>committed: 29360128
init: 0
max: -1
used: 28440648&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>-XX:MaxMetaspaceSize=1024m&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>committed: 29360128
init: 0
max: 1073741824
used: 28503552&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>-XX:InitialBootClassLoaderMetaspaceSize=1024m&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>committed: 1087635456
init: 0
max: -1
used: 28500344&lt;/p>
&lt;/blockquote>
&lt;p>三个参数都是没有改变init的大小，但是InitialBootClassLoaderMetaspaceSize改变了committed的大小，其实也是最终我们要的设置。&lt;/p>
&lt;p>关于这个参数，可以看你假笨的关于&lt;a href="http://lovestblog.cn/blog/2016/10/29/metaspace/">Metaspace的源码解读&lt;/a>，发现的有点晚了。&lt;/p>
&lt;p>最后的解决方案是使用这个配置：&lt;code>-XX:MaxMetaspaceSize=1024m -XX:InitialBootClassLoaderMetaspaceSize=256m&lt;/code>。&lt;/p></description></item><item><title>一个Tomcat类加载问题</title><link>https://atbug.com/one-tomcat-class-load-issue/</link><pubDate>Wed, 12 Apr 2017 10:40:01 +0000</pubDate><guid>https://atbug.com/one-tomcat-class-load-issue/</guid><description>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>一个Tomcat实例中运行了三个应用，其中一个对接了Apereo的CAS系统。现在要求另外两个系统也对接CAS系统，问题就出现了：&lt;/p>
&lt;blockquote>
&lt;p>应用启动后打开其中两个应用的任何一个，登录完成后系统都没有问题。唯独首选打开第三个，其他两个报错ClassNotFoundException: org.apache.xerces.parsers.SAXParser。&lt;/p>
&lt;/blockquote>
&lt;p>发现这个类来自&lt;code>xerces:xercesImpl:jar:2.6.2&lt;/code>，使用&lt;code>mvn dependency:tree&lt;/code>发现是被xom:xom:1.1简洁引用。&lt;/p>
&lt;h2 id="分析">分析&lt;/h2>
&lt;p>CAS client jar中使用XMLReaderFactory创建XMLReader，首次创建会从classpath中查找&lt;code>META-INF/services/org.xml.sax.driver&lt;/code>文件，这个文件里的内容是一个类的全名。比如xercesImpl中该文件的内容是&lt;code>org.apache.xerces.parsers.SAXParser&lt;/code>。&lt;/p>
&lt;p>找到之后会将类名保存在XMLReaderFactory的静态变量_clsFromJar，并标记不会再查找org.xml.sax.driver文件。找不到的话则使用&lt;code>com.sun.org.apache.xerces.internal.parsers.SAXParser&lt;/code>类。&lt;/p>
&lt;p>然后再使用当前线程的ContextClassLoader对类进行加载，这里的的ContextClassLoader是一个WebAppClassLoader的实例。&lt;/p>
&lt;p>同时XMLReaderFactory类是被BootStrapClassLoader加载的，为三个应用共享。&lt;/p>
&lt;h2 id="tomcat类记载机制">Tomcat类记载机制&lt;/h2>
&lt;p>Tomcat中有四个位置可以存放Java类库：/commons、/server、/shared和各Web应用的WEB-INF/lib目录。&lt;/p>
&lt;blockquote>
&lt;p>/commons目录中的类库可以被Tomcat和所有Web应用使用
/server目录中的类库只能被Tomcat使用
/shared目录中的可以被所有Web应用的使用，但是对Tomcat不可见
各Web应用的WEB-INF/lib目录中的类库则只能被该的应用使用&lt;/p>
&lt;/blockquote>
&lt;p>Tomcat的使用CommonClassLoader、CatalinaClassLoader、SharedClassLoader、WebAPPClassLoader加载对应目录中的类库。&lt;/p>
&lt;p>Bootstrap、Extension、Application是虚拟机使用的系统类加载器。&lt;/p>
&lt;p>类的加载使用双亲委派机制(Parent-Delegation)。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"> Bootstrap
|
Extension
|
Application
|
System
|
Common
/ \
Catalina Shared
/ \
WebApp1 ... WebApp2
| |
Jasper Jasper
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;p>在另外两个应用中添加&lt;code>xerces:xercesImpl:jar:2.6.2&lt;/code>依赖。&lt;/p></description></item><item><title>Scala笔记：用函数字面量块调用高阶函数</title><link>https://atbug.com/call-high-order-function-in-function-literal/</link><pubDate>Tue, 11 Apr 2017 10:15:15 +0000</pubDate><guid>https://atbug.com/call-high-order-function-in-function-literal/</guid><description>
&lt;p>这里会用到几个概念高阶函数、函数字面量、参数组&lt;/p>
&lt;h2 id="高阶函数">高阶函数&lt;/h2>
&lt;p>high-order function 函数的一种，简单来说它包含了一个函数类型的参数或者返回值。&lt;/p>
&lt;p>所谓的高阶是跟一阶函数相比，深入一下：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>一个或多个参数是函数，并返回一个值。&lt;/li>
&lt;li>返回一个函数，但没有参数是函数。&lt;/li>
&lt;li>上述两者叠加：一个或多个参数是函数，并返回一个函数。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="k">def&lt;/span> &lt;span class="n">stringSafeOp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nc">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">s&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//stringSafeOp: (s: String, f: String =&amp;gt; String)String
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="n">reverse&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reverse&lt;/span>
&lt;span class="c1">//reverse: (s: String)String
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">stringSafeOp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Ready&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">reverse&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//res86: String = ydaeR
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="函数字面量">函数字面量&lt;/h2>
&lt;p>function literal，其他名字：匿名函数、Lambda表达式等。
函数字面量可以存储在函数值和变量中，或者也可以定义为高阶函数调用的一部分。在任何接受函数类型的地方都可以使用函数字面量。&lt;/p>
&lt;p>reverse的函数字面量定义：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="k">val&lt;/span> &lt;span class="n">reverse&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="k">:&lt;/span>&lt;span class="kt">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">=&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reverse&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>(s:String) =&amp;gt; s.reverse&lt;/code>定义了一个有类型的输入参数（s:String）和函数体（s.reverse）。&lt;/p>
&lt;p>定义为高阶函数调用的一部分：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="n">stringSafeOp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Ready&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="k">:&lt;/span>&lt;span class="kt">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">=&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reverse&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于已经定义了参数f的类型&lt;code>String =&amp;gt; String&lt;/code>，可以从函数字面量中删除显示类型，交由编译器自动推导其类型。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="n">stringSafeOp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Ready&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="k">=&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reverse&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="占位符语法">占位符语法&lt;/h3>
&lt;p>Placeholder syntax是函数字面量的一种缩写形式，将命名参数替换为通配符（_）。&lt;/p>
&lt;p>使用条件：&lt;/p>
&lt;blockquote>
&lt;p>函数的显示类型在字面量之外指定&lt;/p>
&lt;p>参数最多只使用一次&lt;/p>
&lt;/blockquote>
&lt;p>前面的例子正好符合条件：&lt;/p>
&lt;blockquote>
&lt;p>stringSafeOp定义中指定了字面量的类型（字面量之外） &lt;code>String =&amp;gt; String&lt;/code>&lt;/p>
&lt;p>参数s只使用一次 &lt;code>s.reverse&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="n">stringSafeOp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Ready&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">_&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reverse&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参数组">参数组&lt;/h2>
&lt;p>parameter groups 函数的参数列表的另一种形式：分解并使用小括号分隔。&lt;/p>
&lt;p>stringSafeOp的参数组表示：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="k">def&lt;/span> &lt;span class="n">stringSafeOp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">String&lt;/span>&lt;span class="o">)(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nc">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">s&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//stringSafeOp: (s: String)(f: String =&amp;gt; String)String
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="用函数字面量块调用高阶函数">用函数字面量块调用高阶函数&lt;/h2>
&lt;p>组合上面的特性，就有了&lt;strong>用函数字面量块调用高阶函数&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="k">val&lt;/span> &lt;span class="n">newStringSafeOp&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">stringSafeOp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Ready&amp;#34;&lt;/span>&lt;span class="o">){&lt;/span>&lt;span class="k">_&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reverse&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="进阶">进阶&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="k">def&lt;/span> &lt;span class="n">timer&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="kt">A&lt;/span>&lt;span class="o">](&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="n">now&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="nc">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currentTimeMillis&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="n">end&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">now&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">s&amp;#34;Executed int &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="n">end&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s"> ms&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">a&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="n">veryRandomAmount&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">timer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">util&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="nc">Random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setSeed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currentTimeMillis&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">&amp;lt;-&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="mi">100000&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">util&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="nc">Random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nextDouble&lt;/span>
&lt;span class="n">util&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="nc">Random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nextDouble&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>timer方法对方法调用进行时间记录，对目标代码没有侵入性。&lt;/p></description></item><item><title>GreenPlum JDBC和C3P0数据源</title><link>https://atbug.com/greenplum-jdbc-and-c3p0-datasource/</link><pubDate>Mon, 10 Apr 2017 08:29:00 +0000</pubDate><guid>https://atbug.com/greenplum-jdbc-and-c3p0-datasource/</guid><description>
&lt;p>在网上搜索GreenPlum（GPDB）的数据源配置的时候，发现搜索结果都是用postgresql的配置。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.mchange.v2.c3p0.DataSources&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.sql.DataSource&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.sql.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Properties&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Created by addo on 2017/4/10.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">JDBCTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">POSTGRESQL_URL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;jdbc:postgresql://192.168.56.101:5432/example&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">POSTGRESQL_USERNAME&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;dbuser&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">POSTGRESQL_PASSWORD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">GPDB_URL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;jdbc:pivotal:greenplum://192.168.56.101:5432;DatabaseName=test&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">GPDB_USERNAME&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;dbuser&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">GPDB_PASSWORD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Postgresql Connection
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> * @throws ClassNotFoundException
&lt;/span>&lt;span class="cm"> * @throws SQLException
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Connection&lt;/span> &lt;span class="nf">postgresqlConnection&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ClassNotFoundException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;org.postgresql.Driver&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">DriverManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">POSTGRESQL_URL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">POSTGRESQL_USERNAME&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">POSTGRESQL_PASSWORD&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * GreenPlum Connection
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> * @throws ClassNotFoundException
&lt;/span>&lt;span class="cm"> * @throws SQLException
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Connection&lt;/span> &lt;span class="nf">gpdbConnection&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ClassNotFoundException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;com.pivotal.jdbc.GreenplumDriver&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">DriverManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GPDB_URL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GPDB_USERNAME&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GPDB_PASSWORD&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * GreenPlud C3P0 Datasource Connection
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> * @throws SQLException
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Connection&lt;/span> &lt;span class="nf">gpdbC3P0Connection&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Properties&lt;/span> &lt;span class="n">c3p0Props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Properties&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;driverClass&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;com.pivotal.jdbc.GreenplumDriver&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbcUrl&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GPDB_URL&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GPDB_USERNAME&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GPDB_PASSWORD&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;acquireIncrement&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;5&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;initialPoolSize1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;maxIdleTime&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;60&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;maxPoolSize&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;50&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;minPoolSize&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;idleConnectionTestPeriod&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;60&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">DataSources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">unpooledDataSource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GPDB_URL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">c3p0Props&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getConnection&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ClassNotFoundException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Connection&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">connections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Connection&lt;/span>&lt;span class="o">[]{&lt;/span>&lt;span class="n">postgresqlConnection&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">gpdbConnection&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">gpdbC3P0Connection&lt;/span>&lt;span class="o">()};&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Connection&lt;/span> &lt;span class="n">connection&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">connections&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">CallableStatement&lt;/span> &lt;span class="n">callableStatement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prepareCall&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;select * from user&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">execute&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">callableStatement&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">ResultSet&lt;/span> &lt;span class="n">resultSet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">callableStatement&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getResultSet&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">resultSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">resultSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;current_user&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">callableStatement&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">connection&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://gist.github.com/addozhang/0d83704af6656079878bd5614c82c16c">源代码&lt;/a>&lt;/p></description></item><item><title>Scala笔记：def VS val</title><link>https://atbug.com/def-vs-val-in-scala/</link><pubDate>Sun, 09 Apr 2017 08:24:40 +0000</pubDate><guid>https://atbug.com/def-vs-val-in-scala/</guid><description>
&lt;h2 id="先说原理">先说原理：&lt;/h2>
&lt;blockquote>
&lt;p>val修饰的在定义的时候执行&lt;/p>
&lt;p>def修饰的在调用的时候执行&lt;/p>
&lt;/blockquote>
&lt;h2 id="直观的例子">直观的例子：&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="c1">//注释的行为REPL输出
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nc">Int&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;def called&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">util&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="nc">Random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nextInt&lt;/span>
&lt;span class="o">()&lt;/span> &lt;span class="k">=&amp;gt;&lt;/span> &lt;span class="n">r&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//test: () =&amp;gt; Int
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">//def called
&lt;/span>&lt;span class="c1">//res82: Int = -950077410
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">test&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">//def called
&lt;/span>&lt;span class="c1">//res83: Int = 1027028032
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nc">Int&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;def called&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">util&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="nc">Random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nextInt&lt;/span>
&lt;span class="o">()&lt;/span> &lt;span class="k">=&amp;gt;&lt;/span> &lt;span class="n">r&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//def called
&lt;/span>&lt;span class="c1">//test: () =&amp;gt; Int = $$Lambda$1382/338526071@42f2515d
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">test&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">//res84: Int = 300588352
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">//res84: Int = 300588352
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>def在方法定义的时候除了新的方法没有任何输出；之后每次调用的时候都会执行一次，而且是每次调用都获得一个新的方法（random值不同）&lt;/p>
&lt;p>val在方法定义的时候除了新的方法，还会执行并获得一个方法；之后每次调用都只是执行了定义的时候获得的方法（() =&amp;gt; r，r值固定）&lt;/p>
&lt;/blockquote>
&lt;h3 id="进阶">进阶&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="k">def&lt;/span> &lt;span class="n">timer&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="kt">A&lt;/span>&lt;span class="o">](&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="n">now&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="nc">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currentTimeMillis&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="n">end&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">now&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">s&amp;#34;Executed int &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="n">end&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s"> ms&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">a&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="n">veryRandomAmount&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">timer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">util&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="nc">Random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setSeed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currentTimeMillis&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">&amp;lt;-&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="mi">100000&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">util&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="nc">Random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nextDouble&lt;/span>
&lt;span class="n">util&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="nc">Random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nextDouble&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看过上面的例子就不难理解了，重新定义now是为了使用简洁优雅的方式获取当前毫秒数。&lt;/p>
&lt;ol>
&lt;li>&lt;code>val start = now;&lt;/code> 用val修饰，记录方法执行前的时间到start中。&lt;/li>
&lt;li>&lt;code>val a = f&lt;/code> 用val修饰，执行f方法，并保存数据到a中。&lt;/li>
&lt;li>&lt;code>val end = now&lt;/code> 用vla修饰，记录方法执行结束时间到end中。&lt;/li>
&lt;li>最后返回a，&lt;/li>
&lt;/ol></description></item><item><title>Centos编译安装Redis</title><link>https://atbug.com/install-redis-on-centos/</link><pubDate>Fri, 07 Apr 2017 16:48:46 +0000</pubDate><guid>https://atbug.com/install-redis-on-centos/</guid><description>
&lt;h4 id="版本">版本&lt;/h4>
&lt;blockquote>
&lt;p>Centos7&lt;/p>
&lt;p>Redis3.2.8&lt;/p>
&lt;/blockquote>
&lt;h4 id="编译安装">编译安装&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">wget http://download.redis.io/releases/redis-3.2.8.tar.gz
tar -zxvf redis-3.2.8.tar.gz
&lt;span class="nb">cd&lt;/span> redis-3.2.8
sudo make &lt;span class="nb">test&lt;/span>
sudo make install
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="启动">启动&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">redis-server
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="问题">问题&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>&lt;code>/bin/sh: cc: command not found&lt;/code>&lt;/p>
&lt;p>**原因：**Centos安装时选择的类型是Infrastructure，没有c++的编译工具。&lt;/p>
&lt;p>&lt;strong>解决：&lt;/strong>&lt;code>sudo yum -y install gcc gcc-c++ libstdc++-devel&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>malloc.h:50:31: fatal error: jemalloc/jemalloc.h: No such file or directory&lt;/code>&lt;/p>
&lt;p>**原因：**Redis使用的默认的memory allocator是libc，而Linux系统中默认的是jemalloc，需要制动&lt;code>MALLOC&lt;/code>变量。&lt;/p>
&lt;p>&lt;strong>解决：&lt;/strong>&lt;code>sudo make MALLOC=libc install&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Centos上安装Postgresql</title><link>https://atbug.com/install-postgresql-on-centos/</link><pubDate>Thu, 06 Apr 2017 22:54:17 +0000</pubDate><guid>https://atbug.com/install-postgresql-on-centos/</guid><description>
&lt;h4 id="版本">版本&lt;/h4>
&lt;p>Centos7&lt;/p>
&lt;p>Postgresql9.2&lt;/p>
&lt;h4 id="enable-ssh">Enable ssh&lt;/h4>
&lt;blockquote>
&lt;p>service sshd start&lt;/p>
&lt;/blockquote>
&lt;h4 id="open-firewall-for-22">Open firewall for 22&lt;/h4>
&lt;blockquote>
&lt;p>firewall-cmd —state&lt;/p>
&lt;p>firewall-cmd —list-all&lt;/p>
&lt;p>firewall-cmd —permanent —zone=public —add-port=22/tcp&lt;/p>
&lt;p>firewall-cmd —reload&lt;/p>
&lt;/blockquote>
&lt;h4 id="install-postgresql">Install Postgresql&lt;/h4>
&lt;blockquote>
&lt;p>yum install postgres&lt;/p>
&lt;p>su postgres&lt;/p>
&lt;p>postgres —version&lt;/p>
&lt;/blockquote>
&lt;p>默认会创建postgres:postgres用户和组&lt;/p>
&lt;h4 id="切换用户">切换用户&lt;/h4>
&lt;blockquote>
&lt;p>su - postgres&lt;/p>
&lt;/blockquote>
&lt;h4 id="初始化数据库">初始化数据库&lt;/h4>
&lt;p>通过指定数据文件目录初始化db&lt;/p>
&lt;blockquote>
&lt;p>initdb -D /var/lib/pgsql/data&lt;/p>
&lt;/blockquote>
&lt;h4 id="修改端口防火墙">修改端口防火墙&lt;/h4>
&lt;p>默认端口是5432，需要在防火墙中打开端口&lt;/p>
&lt;blockquote>
&lt;p>firewall-cmd &amp;ndash;permanent &amp;ndash;zone=public &amp;ndash;add-port=5432/tcp&lt;/p>
&lt;/blockquote>
&lt;h4 id="修改监听的ip">修改监听的ip&lt;/h4>
&lt;p>需要外部访问的话，需要修改postgresql.conf中的监听ip，&amp;lsquo;0.0.0.0&amp;rsquo;允许所有ipv4的ip访问，''::&amp;lsquo;&amp;lsquo;允许所有ipv6的ip访问&lt;/p>
&lt;blockquote>
&lt;p>listen_addresses = &amp;ldquo;0.0.0.0&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>修改需要重启postgresql&lt;/p>
&lt;h4 id="启动">启动&lt;/h4>
&lt;blockquote>
&lt;p>postgres -D /var/lib/pgsql/data &amp;gt;logfile 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/p>
&lt;/blockquote>
&lt;h4 id="登录控制台">登录控制台&lt;/h4>
&lt;p>会使用当前系统用户postgres访问，系统提示符会变成&amp;rsquo;postgres=#&amp;rsquo;&lt;/p>
&lt;blockquote>
&lt;p>psql&lt;/p>
&lt;/blockquote>
&lt;p>修改密码&lt;/p>
&lt;blockquote>
&lt;p>\password postgres&lt;/p>
&lt;/blockquote>
&lt;p>创建用户&lt;/p>
&lt;blockquote>
&lt;p>CREATE USER dbuser WITH PASSWORD &amp;lsquo;password&amp;rsquo;;&lt;/p>
&lt;p>CREATE DATABASE example OWNER dbuser;&lt;/p>
&lt;p>GRANT ALL PRIVILEGES ON DATABASE example to dbuser;&lt;/p>
&lt;/blockquote>
&lt;h4 id="客户端权限配置文件">客户端权限配置文件&lt;/h4>
&lt;p>默认只允许本地客户端连接，需要修改pg_hba.conf文件，&lt;/p>
&lt;blockquote>
&lt;p>host all all 127.0.0.1/32 trust&lt;/p>
&lt;p>改为&lt;/p>
&lt;p>host all all 0.0.0.0 /0 trust&lt;/p>
&lt;/blockquote>
&lt;h4 id="客户端连接">客户端连接&lt;/h4>
&lt;blockquote>
&lt;p>psql -U dbuser -d example -h 127.0.0.1 -p 5432&lt;/p>
&lt;/blockquote></description></item><item><title>Key长度对Redis性能影响</title><link>https://atbug.com/redis-performance-key-length/</link><pubDate>Thu, 16 Mar 2017 10:37:03 +0000</pubDate><guid>https://atbug.com/redis-performance-key-length/</guid><description>
&lt;p>最近Redis的使用中用的到key可能比较长，但是Redis的官方文档没提到key长度对性能的影响，故简单做了个测试。&lt;/p>
&lt;h3 id="环境">环境&lt;/h3>
&lt;p>Redis和测试程序都是运行在本地，不看单次的性能，只看不同的长度堆读写性能的影响。&lt;/p>
&lt;h3 id="测试方法">测试方法&lt;/h3>
&lt;p>使用长度分别为10, 100, 500, 1000, 2500, 5000, 7500, 10,000, and 20,000的key，value长度1000，读写1000次。&lt;/p>
&lt;h3 id="结果">结果&lt;/h3>
&lt;p>&lt;img src="../media/14896309668401.jpg" alt="写">&lt;/p>
&lt;p>&lt;img src="../media/14896309585857.jpg" alt="读">&lt;/p>
&lt;p>从结果来看随着长度的增加，读写的耗时都随之增加。&lt;/p>
&lt;ul>
&lt;li>长度为10：写平均耗时0.053ms，读0.040ms&lt;/li>
&lt;li>长度为20000：写平均耗时0.352ms，读0.084ms&lt;/li>
&lt;/ul>
&lt;h3 id="测试代码">测试代码&lt;/h3>
&lt;p>&lt;a href="https://gist.github.com/addozhang/cd8551af4ca008c1f86896b9232c7a3b">源码&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Created by addo on 2017/3/16.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RedisTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">keys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1000&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">randomString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Random&lt;/span> &lt;span class="n">random&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Random&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">chars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toCharArray&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">StringBuilder&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringBuilder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">)]);&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">write&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Jedis&lt;/span> &lt;span class="n">jedis&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">1000&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">randomString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">randomString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">jedis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;put key length %d with value length 1000 in 1000 tims costs: %d ms&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">read&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Jedis&lt;/span> &lt;span class="n">jedis&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">jedis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;get key length %d with value length 1000 in 1000 tims costs: %d ms&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Jedis&lt;/span> &lt;span class="n">jedis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Jedis&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;localhost&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">6379&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">lengths&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">100&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">500&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1000&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">2500&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">5000&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">7500&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">10000&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">20000&lt;/span>&lt;span class="o">};&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">lengths&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">write&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jedis&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lengths&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="n">read&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jedis&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lengths&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="n">keys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1000&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="n">jedis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">flushAll&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>遍历Collection时删除元素</title><link>https://atbug.com/remove-element-while-looping-collection/</link><pubDate>Sun, 05 Mar 2017 22:04:58 +0000</pubDate><guid>https://atbug.com/remove-element-while-looping-collection/</guid><description>
&lt;p>其实标题我想用《为什么foreach边循环边移除元素要用Iterator？》可是太长。&lt;/p>
&lt;p>不用Iterator，用Collection.remove()，会报ConcurrentModificationException错误。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Integer&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//Throw ConcurrentModificationException
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实使用foreach的时候，会自动生成一个Iterator来遍历list。不只是remove，使用add、clear等方法一样会出错。&lt;/p>
&lt;p>拿ArrayList来说，它有一个私有的Iterator接口的内部类Itr：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Itr&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">cursor&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// index of next element to return
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">lastRet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// index of last element returned; -1 if no such
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">expectedModCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">modCount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//sevrval methods
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用Iterator来遍历ArrayList实际上是通过两个指针来遍历ArrayList底层的数组：cursor是下一个返回的元素在数组中的下标；lastRet是上一个元素的下标。还有一个重要的expectedModCount使用的是ArrayList的modCount的（modCount具体是什么意思下文会提到）。&lt;/p>
&lt;p>从Itr的实现来看，有三种情况会抛出ConcurrentModificationException：&lt;/p>
&lt;ul>
&lt;li>cursor超出了数组的最大下标&lt;/li>
&lt;li>expectedModCount不等于modCount&lt;/li>
&lt;li>删除元素最终还是调用ArrayList的remove方法，此方法可能会抛出IndexOutOfBoundsException&lt;/li>
&lt;/ul>
&lt;h3 id="expectedmodcount不等于modcount">expectedModCount不等于modCount&lt;/h3>
&lt;p>开头所说的问题正是是&lt;strong>第二种情况&lt;/strong>下出现的。modCount简单说记录了Collection被修改的次数：添加或者删除元素。&lt;/p>
&lt;p>假如在foreach循环中删除元素，且此时modCount等2：&lt;/p>
&lt;ul>
&lt;li>循环开始创建新Itr实例，expectedModCount=modCount=2&lt;/li>
&lt;li>使用ArrayList.remove()删除元素，modCount加1&lt;/li>
&lt;li>继续调用next()方法指向下一个元素，此时检查expectedModCount是否等于modCount，不等则抛ConcurrentModificationException&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">E&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">checkForComodification&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cursor&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NoSuchElementException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">elementData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">elementData&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">elementData&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcurrentModificationException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">cursor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">elementData&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">lastRet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">checkForComodification&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">modCount&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">expectedModCount&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcurrentModificationException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面提到Iterator的实现中删除元素实际调用的还是ArrayList.remove()方法，为什么不会抛错？&lt;/p>
&lt;p>Itr的remove方法在调用ArrayList.remove()之后，会更新&lt;strong>expectedModCount&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">remove&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">lastRet&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">checkForComodification&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">lastRet&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">cursor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lastRet&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">lastRet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">expectedModCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">modCount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IndexOutOfBoundsException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcurrentModificationException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java Volatile关键字</title><link>https://atbug.com/deep-in-java-volatile-keywork/</link><pubDate>Thu, 02 Mar 2017 08:30:29 +0000</pubDate><guid>https://atbug.com/deep-in-java-volatile-keywork/</guid><description>
&lt;p>volatile通过保证对变量的读或写都是直接从内存中读取或直接写入内存中，保证了可见性；但是volatile并不足以保证线程安全，因为无法保证原子性，如count++操作：&lt;/p>
&lt;ol>
&lt;li>将值从内存读入寄存器中&lt;/li>
&lt;li>进行加1操作，内存保存到寄存器中&lt;/li>
&lt;li>结果从寄存器flush到内存中&lt;/li>
&lt;/ol>
&lt;p>借用一张图来看：&lt;/p>
&lt;p>&lt;img src="http://tutorials.jenkov.com/images/java-concurrency/java-volatile-2.png" alt="123">&lt;/p>
&lt;p>不是volatile的变量的指令执行顺序是1-&amp;gt;2-&amp;gt;3；而声明为volatile的变量，顺序是1-&amp;gt;23。从这里看，volatile保证了一个线程修改了volatile修饰的变量，变化会马上体现在内存中。线程间看到的值是一样的。&lt;/p>
&lt;p>上面说了无法保证原子性是指：多核cpu，线程A执行了指令1，线程B也执行了指令1。A进行了加1操作，结果写入寄存器同时flush到内存；随后B也执行了同样的操作。count本来应该的结果是加2，但是却只加了1。原因就是我们通常所指的读和写不是原子操作。我们最希望看到的是123同时执行，手段就是sychronized或者java.util.concurrent包中的原子数据类型。&lt;/p>
&lt;p>简单拿AtomicInteger来看，其中的一个int类型的value字段声明为volatile，保证了123同时执行。&lt;/p>
&lt;p>参考：&lt;a href="http://tutorials.jenkov.com/java-concurrency/volatile.html">Java Volatile&lt;/a>&lt;/p></description></item><item><title>Haproxy虚拟主机SSL</title><link>https://atbug.com/haproxy-multi-host-with-ssl/</link><pubDate>Mon, 27 Feb 2017 19:31:53 +0000</pubDate><guid>https://atbug.com/haproxy-multi-host-with-ssl/</guid><description>
&lt;p>Haproxy为多个域名配置SSL&lt;/p>
&lt;h2 id="生成自签名证书">生成自签名证书&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">sudo mkdir /etc/ssl/atbug.com
sudo openssl genrsa -out /etc/ssl/atbug.com/atbug.com.key &lt;span class="m">1024&lt;/span>
sudo openssl req -new -key /etc/ssl/atbug.com/atbug.com.key -out /etc/ssl/atbug.com/atbug.com.csr
sudo openssl x509 -req -days &lt;span class="m">365&lt;/span> -in /etc/ssl/atbug.com/atbug.com.csr -singkey /etc/ssl/atbug.com/atbug.com.key -out /etc/ssl/atbug.com/atbug.com.crt
sudo openssl x509 -req -days &lt;span class="m">365&lt;/span> -in /etc/ssl/atbug.com/atbug.com.csr -signkey /etc/ssl/atbug.com/atbug.com.key -out /etc/ssl/atbug.com/atbug.com.crt
sudo cat /etc/ssl/atbug.com/atbug.com.crt /etc/ssl/atbug.com/atbug.com.key &lt;span class="p">|&lt;/span> sudo tee /etc/ssl/atbug.com/atbug.com.pem
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="haproxy配置">Haproxy配置&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">frontend https
bind *:443 ssl crt /etc/ssl/atbug.com/atbug.com.pem
option tcplog
mode http
#option forwardfor
###atbug-https
acl atbug-https hdr_beg(host) -i test.atbug.com
use_backend rome-atbug-https-backend if atbug-https
backend rome-atbug-https-backend
balance roundrobin
mode http
option ssl-hello-chk
server node-1 ip:port cookie dw2-vm-test-apps003 check inter 2000 rise 3 fall 3 weight 50
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>mybatis报错“Result Maps collection already contains value for ***”</title><link>https://atbug.com/duplicate-resultmap-in-mybatis-mapper/</link><pubDate>Wed, 22 Feb 2017 14:12:18 +0000</pubDate><guid>https://atbug.com/duplicate-resultmap-in-mybatis-mapper/</guid><description>
&lt;p>这是工作中遇到的一个问题：测试环境部署出错，报了下面的问题。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Caused&lt;/span> &lt;span class="n">by&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">IllegalArgumentException&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">Result&lt;/span> &lt;span class="n">Maps&lt;/span> &lt;span class="n">collection&lt;/span> &lt;span class="n">already&lt;/span> &lt;span class="n">contains&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">xxx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xxx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xxxRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BaseResultMap&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Configuration$StrictMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">802&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Configuration$StrictMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">774&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addResultMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">556&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MapperBuilderAssistant&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addResultMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MapperBuilderAssistant&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">217&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ResultMapResolver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">resolve&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ResultMapResolver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">47&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xml&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">resultMapElement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">285&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xml&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">resultMapElement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">252&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xml&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">resultMapElements&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">244&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">at&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ibatis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">xml&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configurationElement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">XMLMapperBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">116&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查了对应的mapper文件和java文件，已经8个多月没有修改过了。也检查了内容，没有发现重复的BaseResultMap；select中也resultMap的引用也都正确。&lt;/p>
&lt;p>其实到最后发现跟代码一丁点关系都没有，是部署的时候没有删除旧版本的代码导致两个不同版本的jar同时存在，相应的mapper文件也有两个。&lt;/p>
&lt;p>看了下源码，mybatis在创建SessionFactoryBean解析xml时候，会把xml中的resultMap放入到一个HashMap的子类StrictMap中，key是&lt;strong>mapper的namespace与resultmap的id&lt;/strong>拼接成的。&lt;/p>
&lt;p>StrictMap在put元素的时候，会检查map中是否已存在key。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addResultMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ResultMap&lt;/span> &lt;span class="n">rm&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">resultMaps&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">rm&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">checkLocallyForDiscriminatedNestedResultMaps&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rm&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">checkGloballyForDiscriminatedNestedResultMaps&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rm&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>消费时offset被重置导致重复消费</title><link>https://atbug.com/offset-be-reset-when-consuming/</link><pubDate>Mon, 20 Feb 2017 13:23:49 +0000</pubDate><guid>https://atbug.com/offset-be-reset-when-consuming/</guid><description>
&lt;p>这是实际使用时遇到的问题：kafka api的版本是0.10，发现有重复消费问题；检查log后发现在commit offset的时候发生超时。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">Auto offset commit failed for group test: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured session.timeout.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
15:12:12.364 [main] WARN o.a.k.c.c.i.ConsumerCoordinator - Auto offset commit failed for group test: Commit offsets failed with retriable exception. You should retry committing offsets.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看了Kafka的API文档，发现0.10中提供了新的配置&lt;strong>max.poll.records&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">The maximum number of records returned in a single call to poll().
type: int
default: 2147483647
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果生产端写入很快，消费端处理耗时。一个batch的处理时间大于session.timeout.ms，会导致session time out，引起offset commit失败。&lt;/p></description></item><item><title>TheadPoolExecutor源码分析</title><link>https://atbug.com/threadpoolexecutor-sourcecode-analysis/</link><pubDate>Mon, 20 Feb 2017 09:56:07 +0000</pubDate><guid>https://atbug.com/threadpoolexecutor-sourcecode-analysis/</guid><description>
&lt;h1 id="theadpoolexecutor源码分析">TheadPoolExecutor源码分析&lt;/h1>
&lt;p>ThreadPoolExecutor是多线程中经常用到的类，其使用一个线程池执行提交的任务。&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>没有特殊需求的情况下，通常都是用Executors类的静态方法如newCachedThreadPoll来初始化ThreadPoolExecutor实例：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ExecutorService&lt;/span> &lt;span class="nf">newCachedThreadPool&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MAX_VALUE&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">60L&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">SynchronousQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从Executors的方法实现中看出，BlockingQueue使用的SynchronousQueue，底层使用了栈的实现。值得注意的是，这个SynchronousQueue是没有容量限制的，Executors也将maximumPoolSize设为Integer.MAX_VALUE。&lt;/p>
&lt;p>ThreadPoolExecutor的构造方法：&lt;/p>
&lt;p>按照javadoc的解释：&lt;/p>
&lt;ul>
&lt;li>corePoolSize是池中闲置的最小线程数&lt;/li>
&lt;li>maximumPoolSize是池中允许的最大线程数&lt;/li>
&lt;li>keepAliveTime是线程数大于最小线程数时，过量闲置线程的最大存活时间&lt;/li>
&lt;li>unit是上面存活时间的单位&lt;/li>
&lt;li>workQueue是用来暂时保存运行前的任务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">ThreadPoolExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">corePoolSize&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">maximumPoolSize&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">keepAliveTime&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">TimeUnit&lt;/span> &lt;span class="n">unit&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">BlockingQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">workQueue&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NullPointerException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">workerCountOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">corePoolSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">addWorker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isRunning&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">workQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">offer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">recheck&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span> &lt;span class="n">isRunning&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">recheck&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="n">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">workerCountOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">recheck&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">addWorker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">addWorker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="n">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>除去第一个做任务非空检查的if。&lt;/p>
&lt;p>第二个if，检查当前使用的线程数是否超过corePoolSize。未超过，调用addWorker并指定第二个参数为true。addWorker会再次检查线程数是否超过corePoolSize，如果还未超过，则创建一个新的线程执行任务。&lt;/p>
&lt;p>第三个if，当目前使用的线程数大于等于corePoolSize，将任务保存到workQueue中。保存成功，再次检查是否需要再创建一个线程。&lt;/p>
&lt;p>最后一个else，调用addWorker并指定第二个参数为false。在创建线程前，检查当时线程数是否超过maximumPoolSize，为超过则创建一个新的线程。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">addWorker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">firstTask&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">core&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">retry&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(;;)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">rs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">runStateOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// Check if queue empty only if necessary.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rs&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">SHUTDOWN&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="o">!&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rs&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">SHUTDOWN&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="n">firstTask&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="o">!&lt;/span> &lt;span class="n">workQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">()))&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(;;)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">wc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">workerCountOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">wc&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">CAPACITY&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="n">wc&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">core&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">corePoolSize&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">maximumPoolSize&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">compareAndIncrementWorkerCount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="k">break&lt;/span> &lt;span class="n">retry&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// Re-read ctl
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runStateOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">rs&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">continue&lt;/span> &lt;span class="n">retry&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// else CAS failed due to workerCount change; retry inner loop
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="问题">问题&lt;/h2>
&lt;p>一般场景下，不能使用Integer.MAX_VALUE如此大的线程数。所以需要使用构造器自己进行实例化。&lt;/p>
&lt;p>如指定corePoolSize=5、maximumPoolSize=20&lt;/p>
&lt;p>、keepAliveTime=60L、unit=TimeUnit.SECONDS、workQueue=new SynchronousQueue&lt;!-- raw HTML omitted -->()。&lt;/p>
&lt;p>但是实际执行的时候，线程数一直是5。&lt;/p>
&lt;p>回头看ThreadPoolExecutor的实现，如果想要达到我们想要的效果需要程序进入最后的那个else。那重点就在第三个if里的workQueue.offer(command)。&lt;/p>
&lt;p>看BlockingQueue接口中该方法的描述：将元素插入到队列中，没有超过容量限制则插入并返回true。&lt;/p>
&lt;p>而使用的SynchronousQueue底层实现使用的栈没有容量限制，这就是为什么线程池中的线程数一直是corePoolSize。&lt;/p></description></item><item><title>Kafka Java生产者模型</title><link>https://atbug.com/kafka-java-producer-model/</link><pubDate>Wed, 04 Jan 2017 16:33:02 +0000</pubDate><guid>https://atbug.com/kafka-java-producer-model/</guid><description>
&lt;p>&lt;img src="../media/14835174309242.jpg" alt="">&lt;/p>
&lt;h3 id="producer初始化">Producer初始化&lt;/h3>
&lt;p>初始化KafkaProducer实例，同时通过Config数据初始化MetaData、NetWorkClient、Accumulator和Sender线程。启动Sender线程。&lt;/p>
&lt;h4 id="metadata信息">MetaData信息&lt;/h4>
&lt;p>记录Cluster的相关信息，第一次链接使用Config设置，之后会从远端poll信息回来，比如host.name等信息。&lt;/p>
&lt;h4 id="accumulator实例">Accumulator实例&lt;/h4>
&lt;p>Accumulator持有一个Map实例，key为TopicPartition（封装了topic和partition信息）对象，Value为RecordBatch的Deque集合。&lt;/p>
&lt;h4 id="networkclient实例">NetworkClient实例&lt;/h4>
&lt;p>通过MetaData信息初始化NetworkClient实例，NetworkClient使用NIO模型。&lt;/p>
&lt;h4 id="sender线程">Sender线程&lt;/h4>
&lt;p>sender持有NetworkClient和Accumulator实例，在Producer实例初始化完成之后，持续地将Accumulator中的Batch数据drain到一个List中，调用NetworkClient进行发送。&lt;/p>
&lt;h3 id="发送">发送&lt;/h3>
&lt;p>调用Producer实例进行消息发送，首先将消息序列化之后追加到Accumulator的Deque的最后一个batch中，之后唤醒sender-&amp;gt;client-&amp;gt;Selector进行消息发送。&lt;/p></description></item><item><title>Redis清理缓存</title><link>https://atbug.com/clean-speicified-keys-in-redis/</link><pubDate>Tue, 13 Dec 2016 16:54:41 +0000</pubDate><guid>https://atbug.com/clean-speicified-keys-in-redis/</guid><description>
&lt;p>最近有个需求需要主动的去清理部分缓存，考虑的原子性的问题，用Lua脚本进行实现。&lt;/p>
&lt;p>Lua脚本&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="kd">local&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kr">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="kr">in&lt;/span> &lt;span class="n">ipairs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;KEYS&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;span class="kr">do&lt;/span>
&lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;DEL&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;span class="kr">return&lt;/span> &lt;span class="n">count&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>shell运行&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">redis-cli --eval file.lua ,&lt;span class="o">[&lt;/span>KEY PATTERN&lt;span class="o">]&lt;/span>
&lt;span class="c1">#sample: 清理所有key以Test开头的记录&lt;/span>
redis-cli --eval clear.lua , Test*
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Java&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Jedis&lt;/span> &lt;span class="n">jedis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Jedis&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">6379&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">URL&lt;/span> &lt;span class="n">resource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Resources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;META-INF/scripts/clear.lua&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">lua&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Resources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">resource&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Charsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">eval&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jedis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">eval&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">lua&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Name*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Flume - FileChannel （一）</title><link>https://atbug.com/flume-filechannel-overview/</link><pubDate>Wed, 23 Nov 2016 09:23:57 +0000</pubDate><guid>https://atbug.com/flume-filechannel-overview/</guid><description>
&lt;h3 id="概述">概述&lt;/h3>
&lt;p>当使用Flume的时候，每个流程都包含了输入源、通道和输出。一个典型的例子是一个web服务器将事件通过RPC（搬入&lt;a href="http://flume.apache.org/FlumeUserGuide.html#avro-sink">AvroSource&lt;/a>）写入输入源中，输入源将其写入&lt;a href="http://flume.apache.org/FlumeUserGuide.html#memory-channel">MemoryChannel&lt;/a>，最后&lt;a href="http://flume.apache.org/FlumeUserGuide.html#hdfs-sink">HDFS Sink&lt;/a>消费事件将其写入HDFS中。&lt;/p>
&lt;p>&lt;img src="http://blog.cloudera.com//wp-content/uploads/2012/09/flume1.png" alt="Flume1">&lt;/p>
&lt;p>MemeoryChannel提供了高吞吐量但是在系统崩溃或者断电时会丢失数据。因此需要开发一个可持久话通道。FileChannel是在&lt;a href="https://issues.apache.org/jira/browse/FLUME-1085">FLUME-1085&lt;/a>里实现的。目标是提供一个高可用高吞吐量的通道。FileChannle保证了在失误提交之后，在崩溃或者断电后不丢失数据。&lt;/p>
&lt;p>需要注意的是FileChannel自己不做任何的数据复制，因此它只是和基本的磁盘一样高可用。使用FileChannle的用户需要购买配置更多的硬盘。硬盘最好是RAID、SAN或者类似的。&lt;/p>
&lt;p>很多需要通过损失少量的数据（每隔几秒将内存数据&lt;a href="http://pubs.opengroup.org/onlinepubs/7908799/xsh/fsync.html">fsync&lt;/a>到硬盘）换取高吞吐量。Flume团队决定使用另一种方式实现FileChannel。Flue是一个事务型的系统，在一次存或取的事务中可以操作多个事件。通过改变批量大小来控制吞吐量。使用大的批量，Flume可以以比较高的吞吐量传送数据，同时不丢失数据。批量的大小完全由客户端控制。使用RDBMS的用户对这种方式会比较熟悉。&lt;/p>
&lt;p>一个Flume事务由存或取组成，但不能同时做两种操作，同样提交和回滚也是一样。每个事务实现了存和取的方法。数据源将事件存入通道，输出从通道中将事件取出。&lt;/p>
&lt;h3 id="设计">设计&lt;/h3>
&lt;p>FileChannel在WAL（预写式日志）的基础上添加了一个内存队列。每个事务都被写成一个基于事务类型（存或取）的WAL，内存队列也相应的被更新。每次是事务提交，正确的文件被fsync保证数据被真正地保存到磁盘上，同时该事件的指针也被保存到了内存队列中。这个队列提供的功能跟其他队列没有区别：管理那些还没有被输出消费的事件。在取的过程中，指针被从队列中删除。事件直接从WAL中读取。得益于当前大容量的RAM，从操作系统的文件缓存中读取很常见。&lt;/p>
&lt;p>在系统崩溃之后，WAL可以被重现到队列中保持原来的状态，没有被提交的事务会丢失。重现WAL是耗时的，因此队列也被周期性地写到磁盘上。写队列到磁盘被称作checkpoint。崩溃后，从磁盘读取队列。只有队列保存到磁盘之后提交的事务被重现，这样可以显著的减少需要读取的WAL的数量。&lt;/p>
&lt;p>例如，如下有两个事件的通道：&lt;/p>
&lt;p>&lt;img src="http://blog.cloudera.com//wp-content/uploads/2012/09/flume2-269x300.png" alt="img">&lt;/p>
&lt;p>WAL包含了三个重要的元素：事务id、序列号和事件数据。每个事务都有一个唯一的事务id，每个事件都有一个唯一的序列号。事务id只被用来标识事务中的一组事件，序列号在重演日志的时候被用到。上面的例子中，事务id是1，序列号是1、2、3。&lt;/p>
&lt;p>当队列被保存到硬盘后 &amp;ndash; 一次checkpoint &amp;ndash; 序列号自动增加并同样被保存。在重启时，队列最先被从硬盘上加载，所有序列号大于队列的WAL项被重现。在checkpoint操作时，channle被锁住以保证没有存取操作改变它的状态。如果允许修改，会导致保存到硬盘上的队列快照不一致。&lt;/p>
&lt;p>上面例子中的队列，checkpoint发送在事务1提交之后，因此事件a、b的指针和序列号4被保存到硬盘。&lt;/p>
&lt;p>之后，事件a在事务2中被从队列中取出：&lt;/p>
&lt;p>&lt;img src="http://blog.cloudera.com//wp-content/uploads/2012/09/flume3-296x300.png" alt="img">&lt;/p>
&lt;p>如果这时系统崩溃，队列的checkpoint从硬盘中加载。注意这个checkpoint发生在事务2之前，事件a、b的指针存在队列中。因此WAL中序列号大于4的已提交的事务被重现，事件a指针被从队列中删除。&lt;/p>
&lt;p>上面的设计有两点没提到。checkpoint时发生的存和取操作会丢失。假设checkpoint在取事件a之后发生：&lt;/p>
&lt;p>&lt;img src="http://blog.cloudera.com//wp-content/uploads/2012/09/flume4-296x300.png" alt="img">&lt;/p>
&lt;p>如果这时系统崩溃，根据上面的设计，事件b指针保存在队列中，所有序列号大于5的WAL项被重现：事务2的回滚被重现。但是事务2的取操作不会被重现。因此事件a指针不会被放回队列因而导致数据丢失。存的场景也类似。因此在队列checkpoint的时候，进行中的事务操作也会被重现，这样这种情况能被正确处理。&lt;/p>
&lt;h3 id="实现">实现&lt;/h3>
&lt;p>FileChannel被保存在flume项目的flume-file-channel模块中，他的java包名是org.apache.flume.channel.file。上面提到队列被叫做&lt;a href="https://github.com/apache/flume/blob/trunk/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/FlumeEventQueue.java">FlumeEventQueue&lt;/a>，WAL被叫做 &lt;a href="https://github.com/apache/flume/blob/trunk/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/Log.java">Log&lt;/a>。队列是一个环形数组，使用&lt;a href="https://github.com/apache/flume/blob/trunk/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/EventQueueBackingStoreFile.java">Memory Mapped File&lt;/a>。WAL是一组以&lt;a href="https://github.com/apache/flume/blob/trunk/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/LogFile.java">LogFile&lt;/a>或其子类序列化的文件。&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>FileChannle在硬件、软件和系统故障下的持久化并同时保证高吞吐量。如果这亮点都看中的话，FileChannel是推荐使用的通道。&lt;/p>
&lt;p>&lt;a href="http://blog.cloudera.com/blog/2012/09/about-apache-flume-filechannel/">原文&lt;/a>&lt;/p></description></item><item><title>探索Rabbitmq的Java客户端</title><link>https://atbug.com/deep-in-rabbitmq-java-client/</link><pubDate>Sun, 09 Oct 2016 09:20:07 +0000</pubDate><guid>https://atbug.com/deep-in-rabbitmq-java-client/</guid><description>
&lt;h2 id="amqpconnection">AMQPConnection&lt;/h2>
&lt;h3 id="实例初始化">实例初始化&lt;/h3>
&lt;p>创建Connection时会通过FrameHandlerFacotry创建一个SocketFrameHandler，SocketFrameHandler对Socket进行了封装。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">AMQConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConnectionParams&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FrameHandler&lt;/span> &lt;span class="n">frameHandler&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="n">checkPreconditions&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getUsername&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPassword&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_frameHandler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">frameHandler&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_virtualHost&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getVirtualHost&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_exceptionHandler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getExceptionHandler&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_clientProperties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClientProperties&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requestedFrameMax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestedFrameMax&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requestedChannelMax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestedChannelMax&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requestedHeartbeat&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestedHeartbeat&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">shutdownTimeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getShutdownTimeout&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">saslConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSaslConfig&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getExecutor&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">threadFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getThreadFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_channelManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_brokerInitiatedShutdown&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">_inConnectionNegotiation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// we start out waiting for the first protocol response
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启动连接">启动连接&lt;/h3>
&lt;p>初始化WorkService和HeartBeatSender。&lt;/p>
&lt;p>创建一个channel0的AMQChannel，这个channel&lt;strong>不会被ChannelManager管理&lt;/strong>。&lt;/p>
&lt;p>首先channel0会将一个BlockingRpcContinuation作为当前未完成的Rpc请求，用于接收&lt;strong>handshake&lt;/strong>的响应。&lt;/p>
&lt;p>然后channel0会向socket中写入一条只有header的消息作为&lt;strong>handshake&lt;/strong>，header中包含了客户端的版本号。&lt;/p>
&lt;p>紧接着会启动主循环线程，主循环会通过SocketFrameHandler从socket接收字节流。此时接收到的第一条数据是服务端响应handshake返回的Connection.Start信息（包含服务端版本、机制、基础信息）。&lt;/p>
&lt;p>主循环线程启动后，主线程会阻塞地等待服务端的handshake响应。拿到响应之后会对服务器回传的信息进行比对，然后发送Connection.StartOK的信息去服务端（这个请求也还是阻塞式的），等待服务端回传Connection.Tune（包含最大channel数、最大frame长度和heartbeat间隔）。将这些信息与实例初始化是的设置信息进行对比，初始化ChannelManager&lt;/p>
&lt;p>紧接着发送Connection.TuneOk和Connection.Open消息去服务端，完成connection的建立。&lt;/p>
&lt;blockquote>
&lt;p>Connection &amp;gt; MainLoop &amp;gt; readFrame&lt;/p>
&lt;/blockquote>
&lt;h2 id="消息体">消息体&lt;/h2>
&lt;p>Frame是对AMQP消息的封装：包含frame的type、channel号、消息内容&lt;/p>
&lt;blockquote>
&lt;p>type|channelNumber|payloadSize|payload|frameEndMarker&lt;/p>
&lt;/blockquote>
&lt;p>Payload包含了消息类型、消息头和消息主题&lt;/p>
&lt;blockquote>
&lt;p>method|header|body&lt;/p>
&lt;/blockquote>
&lt;h2 id="消息发送和接收">消息发送和接收&lt;/h2>
&lt;p>消息的发送和接收都要channel来完成。&lt;/p>
&lt;h3 id="创建channel">创建Channel&lt;/h3>
&lt;p>通过Connection的ChannelManager来创建Channel，通过指定的ChannelNumber或者由分配器分配。创建好的Channel实例会放入ChannelManager的Map中，&lt;strong>key为ChannelNumber&lt;/strong>。由此可见Channel是Connection唯一的。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">ChannelN&lt;/span> &lt;span class="nf">createChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AMQConnection&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ChannelN&lt;/span> &lt;span class="nf">createChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AMQConnection&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">channelNumber&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ChannelN&lt;/span> &lt;span class="nf">addNewChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AMQConnection&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">channelNumber&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">ChannelN&lt;/span> &lt;span class="nf">instantiateChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AMQConnection&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">channelNumber&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ConsumerWorkService&lt;/span> &lt;span class="n">workService&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Channel实例化之后会调用Channel.open方法，发送Channel.Open去服务端（阻塞式），等待服务端响应Channel.OpenOk。&lt;/p>
&lt;h3 id="消息发送">消息发送&lt;/h3>
&lt;p>Channel.transmit 发送消息，调用AMQCommand.transmit完成发送。&lt;/p>
&lt;p>AMQCommand.transmit将消息封装成Frame，通过connection的SocketFrameHandler写入OutpuStream。&lt;/p>
&lt;h3 id="消息接收">消息接收&lt;/h3>
&lt;p>主循环线程在链接创建完成后会监听socket，从InputStream中读取二进制流封装成Frame。通过Frame中的ChannelNumber从ChannelManager中获取对应的Channel实例处理Frame。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">_running&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Frame&lt;/span> &lt;span class="n">frame&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_frameHandler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readFrame&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">_missedHeartbeats&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">AMQP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">FRAME_HEARTBEAT&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Ignore it: we&amp;#39;ve already just reset the heartbeat counter.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">channel&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// the special channel
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">_channel0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isOpen&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// If we&amp;#39;re still _running, but not isOpen(), then we
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// must be quiescing, which means any inbound frames
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// for non-zero channels (and any inbound commands on
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// channel zero that aren&amp;#39;t Connection.CloseOk) must
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// be discarded.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ChannelManager&lt;/span> &lt;span class="n">cm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_channelManager&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cm&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">cm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getChannel&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">channel&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Socket timeout waiting for a frame.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Maybe missed heartbeat.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">handleSocketTimeout&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Channel会使用已经准备好的AMQCommand处理Frame，并未下一个Frame准备新的AMQCommand。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Frame&lt;/span> &lt;span class="n">frame&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">AMQCommand&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_command&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// a complete command has rolled off the assembly line
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">_command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AMQCommand&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// prepare for the next one
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">handleCompleteInboundCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>AMQCommad会使用CommandAssembler依次从Frame的payload中检出对应的Method、Header和Body。如果检出了Body，整个Frame会被检出完成。如过未完成，会进入主循环再次处理直至完成。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">handleFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Frame&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">state&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">EXPECTING_METHOD&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">consumeMethodFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">EXPECTING_CONTENT_HEADER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">consumeHeaderFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">EXPECTING_CONTENT_BODY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">consumeBodyFrame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AssertionError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Bad Command State &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">state&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">isComplete&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Frame被检出完后，会根据Method的类型进入不同的异步处理流程。&lt;/p>
&lt;p>Method在channel打开和关闭的情况下会以下的可能：&lt;/p>
&lt;blockquote>
&lt;p>Channel打开：Basic.Deliver, Basic.Return, Basic.Flow, Basic.Ack, Basic.Nack, Basic.RecoveryOk, Basic.Cancel&lt;/p>
&lt;p>Channel关闭：Channel.CloseOk&lt;/p>
&lt;/blockquote>
&lt;h2 id="生产和消费">生产和消费&lt;/h2>
&lt;h3 id="生产">生产&lt;/h3>
&lt;p>调用Channel.basicPublish()方法，指定exchange、routingKey等信息，消息属性、消息体。封装成Baisc.Publish，放入AMQCommand，最后调用transmit方法完成发送。参考&lt;a href="http://atbug.com/deep-in-rabbitmq-java-client/#%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81">消息发送&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">basicPublish&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">exchange&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">routingKey&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">mandatory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">immediate&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">BasicProperties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">nextPublishSeqNo&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">unconfirmedSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getNextPublishSeqNo&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">nextPublishSeqNo&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">BasicProperties&lt;/span> &lt;span class="n">useProps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">props&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">useProps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MessageProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MINIMAL_BASIC&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">transmit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">AMQCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Basic&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Publish&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Builder&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">exchange&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">exchange&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">routingKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routingKey&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">mandatory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mandatory&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">immediate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">immediate&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">(),&lt;/span>
&lt;span class="n">useProps&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="消费">消费&lt;/h3>
&lt;p>创建QueueingConsumer实例，然后调用Channel.basicConsume方法。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">queueingConsumer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">QueueingConsumer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">channel&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">channel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">basicConsume&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;queue_name&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">queueingConsumer&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">QueueingConsumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Delivery&lt;/span> &lt;span class="n">delivery&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">queueingConsumer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextDelivery&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="n">delivery&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getEnvelope&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//消息头
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">delivery&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperties&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//消息属性
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">delivery&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBody&lt;/span>&lt;span class="o">()&lt;/span>&lt;span class="err">；&lt;/span>&lt;span class="c1">//消息体
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>&lt;span class="k">finally&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="c1">//channel.basicAck();
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//channel.basicNack()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>QueueingConsumer实现了Consumer接口。&lt;/p>
&lt;p>Channel.basicConsume方法会封装Channel.Consume消息发送到服务端（阻塞式），等待服务端的Channel.ConsumeOk响应（包含了服务端为Consumer分配的ConsumerTag）。然后将QueueingConsumer放入Map中，&lt;strong>key为ConsumerTag&lt;/strong>。consumer是Channel唯一。&lt;/p>
&lt;p>当客户端接收到消息，参考&lt;a href="http://atbug.com/deep-in-rabbitmq-java-client/#%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6">消息接收&lt;/a>。Basic.Deliver类型的消息（consumerTag、deliveryTag、redelivered、exchange、routingKey）会进入消费处理流程。Channel根据ConsumerTag从Map中获取对应的QueueConsumer实例，由Channel的ConsumerDispatcher通过Connection初始化的WorkService创建新的处理线程，调用QueueConsumer实例的handleDelivery方法。QueueConsumer将消息封装成Delivery对象，放入BlockingQueue中。&lt;/p>
&lt;p>消费线程等待新的Delivery（阻塞式），之后创建新的线程完成消息的处理。&lt;/p></description></item><item><title>Git回车换行</title><link>https://atbug.com/crlf-in-git/</link><pubDate>Wed, 14 Sep 2016 09:16:10 +0000</pubDate><guid>https://atbug.com/crlf-in-git/</guid><description>
&lt;p>最近又个项目，checkout之后，没做任何改动前git status发现已经有modified了，通过git diff发现有两种改动：&lt;/p>
&lt;blockquote>
&lt;p>- warning: CRLF will be replaced by LF in *&lt;em>*&lt;/em>&lt;/p>
&lt;p>- 删除并添加的同样的行&lt;/p>
&lt;/blockquote>
&lt;p>使用git diff -w却没有改动；使用git diff –ws-error-highlight=new,old发现行尾有**^M**&lt;/p>
&lt;p>我本人用的是Linux，其他同事有用Windows，问题就出在平台上。&lt;/p>
&lt;blockquote>
&lt;p>Windows用CR LF来定义换行，Linux用LF。CR全称是Carriage Return ,或者表示为\r, 意思是回车。 LF全称是Line Feed，它才是真正意义上的换行表示符。&lt;/p>
&lt;/blockquote>
&lt;p>git config中关于CRLF有两个设定：core.autocrlf和core.safecrlf。&lt;/p>
&lt;blockquote>
&lt;p>一、AutoCRLF&lt;/p>
&lt;p>#提交时转换为LF，检出时转换为CRLF&lt;/p>
&lt;p>git config –global core.autocrlf true&lt;/p>
&lt;p>#提交时转换为LF，检出时不转换&lt;/p>
&lt;p>git config –global core.autocrlf input&lt;/p>
&lt;p>#提交检出均不转换&lt;/p>
&lt;p>git config –global core.autocrlf false&lt;/p>
&lt;p>二、SafeCRLF&lt;/p>
&lt;p>#拒绝提交包含混合换行符的文件&lt;/p>
&lt;p>git config –global core.safecrlf true&lt;/p>
&lt;p>#允许提交包含混合换行符的文件&lt;/p>
&lt;p>git config –global core.safecrlf false&lt;/p>
&lt;p>#提交包含混合换行符的文件时给出警告&lt;/p>
&lt;p>git config –global core.safecrlf warn&lt;/p>
&lt;/blockquote>
&lt;p>这种情况，把autocrlf置为false，safecrlf也置为false，可以忽略不同平台上回车换行的差异。&lt;/p>
&lt;p>设置完成后，发现第二个问题还是存在。这时要查看代码库中是否存在.gitattributes文件，如果存在打开.gitattributes。&lt;/p>
&lt;p>在该项目的.gitattributes中有几种设定：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>* text=auto !eol 所有带有text属性的文件使用auto的EOL，但是不指定EOL方式（CRLF or LF）&lt;/li>
&lt;li>[path]/file -text 取消文件的text属性&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>如果不指定EOL，git会使用config中的core.eol。如果未设置core.eol，git会使用平台默认的回车换行。&lt;/p>
&lt;p>优先级 core.autocrlf &amp;gt; text=auto + core.eol。&lt;/p>
&lt;p>以下设置的结果相同：&lt;/p>
&lt;blockquote>
&lt;p>core.autocrlf=true&lt;/p>
&lt;p>core.eol=CRLF 同时 * text=auto !eol&lt;/p>
&lt;p>* text=auto CRLF&lt;/p>
&lt;/blockquote>
&lt;p>.gitattributes设置会影响checkout和checkin&lt;/p>
&lt;p>最后的解决方案是直接清空了.gitattributes内容，这个问题应该是在项目从svn迁移到git时迁移工具自动添加的结果。&lt;/p></description></item><item><title>深入剖析HashSet和HashMap实现</title><link>https://atbug.com/deep-in-implementation-of-hashset/</link><pubDate>Mon, 11 Jul 2016 14:57:16 +0000</pubDate><guid>https://atbug.com/deep-in-implementation-of-hashset/</guid><description>
&lt;p>HashSet是一个包含非重复元素的集合，如何实现的，要从底层实现代码看起。&lt;/p>
&lt;h4 id="背景">背景&lt;/h4>
&lt;p>首先非重复元素如何定义，看Set的描述：&lt;/p>
&lt;blockquote>
&lt;p>More formally, sets contain no pair of elements e1 and e2 such that e1.equals(e2), and at most one null element.&lt;/p>
&lt;p>Set不会找到两个元素，并且两个元素满足e1.equals(e2)为true；并且最多只有一个null元素。&lt;/p>
&lt;/blockquote>
&lt;p>如果没有重写equals方法，查看Object类中equal方法的实现，==比较的其实是两个对象在内存中的地址。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>说起equals方法，就不得不说hashCode方法了。Java中对于hashCode有个常规协定&lt;/p>
&lt;blockquote>
&lt;p>The general contract of hashCode is:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>程序执行期间，在同一个对象上执行多次hashCode方法，都返回相同的整数，前提是equals比较中所使用的字段没有被修改。跨应用中的hashCode方法调用返回的整数不要求相同。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果两个对象根据equals方法比较相同，那hashCode返回的整数也必须相同。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果两个对象equals方法比较不相同，调用hashCode返回的整数不需要不同。但是程序员应该知道为不相等的对象生成不同的整数可以提高哈希表的性能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h4 id="hashset的底层实现">HashSet的底层实现&lt;/h4>
&lt;p>HashSet的底层是通过HashMap实现的，将元素作为map的key以达到去重的目的，value使用的是同一个虚拟的Object实例。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kd">transient&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// Dummy value to associate with an Object in the backing Map
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">PRESENT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">PRESENT&lt;/span>&lt;span class="o">)==&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="hashmap的底层实现">HashMap的底层实现&lt;/h4>
&lt;p>{% asset_img hashmap-structure.jpg %}&lt;/p>
&lt;p>到最后我们要看HashMap的实现了，简单说就是一个&lt;strong>数组&lt;/strong>+&lt;strong>链表&lt;/strong>的结合。&lt;/p>
&lt;ul>
&lt;li>默认初始容量16&lt;/li>
&lt;li>默认负荷系数0.75&lt;/li>
&lt;li>Entry数组&lt;/li>
&lt;li>大小&lt;/li>
&lt;li>阈值：初始值等于初始容量&lt;/li>
&lt;li>负荷系数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">DEFAULT_INITIAL_CAPACITY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">4&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">DEFAULT_LOAD_FACTOR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">75f&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;?,?&amp;gt;[]&lt;/span> &lt;span class="n">EMPTY_TABLE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{};&lt;/span>
&lt;span class="kd">transient&lt;/span> &lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;[]&lt;/span> &lt;span class="n">table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;[])&lt;/span> &lt;span class="n">EMPTY_TABLE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">transient&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">threshold&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">loadFactor&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="entry元素">Entry元素&lt;/h5>
&lt;p>Entry是链表的结果，key为Map中的key，value为Map中的value，hash为key的hash结果，next为下一个元素。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">K&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">V&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="添加元素">添加元素&lt;/h5>
&lt;ul>
&lt;li>如果数组为空（即map初始化后第一次添加元素）扩充table&lt;/li>
&lt;li>如果key为null，则调用putForNullKey方法，null位于table的下标0处&lt;/li>
&lt;li>算出key的hash值&lt;/li>
&lt;li>通过hash值算出元素在table中的下标值
&lt;ul>
&lt;li>如果该位置元素不为空，然后需要比较元素的hash值和上面算出的hash值是否相等，同时元素的key对象和要出入的key是否为同一对象（相同的地址 ==比较为true）或者equals方法是否为true。如果满足条件，则更新该entry的value值；若不满足则遍历整个链表。&lt;/li>
&lt;li>如果为空直接添加新的entry。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>JDK8此处有更新，见末尾&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">K&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">table&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">EMPTY_TABLE&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">inflateTable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">threshold&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">putForNullKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">indexFor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hash&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">)))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">V&lt;/span> &lt;span class="n">oldValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">recordAccess&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">oldValue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">modCount&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;span class="n">addEntry&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="扩充table">扩充table&lt;/h5>
&lt;p>对toSzie算出最小的2的幂值，用了Integer.highestOneBit((toSize -1) &amp;laquo; 1)。减一之后左移一位，然后取最高位值，其余为补0。&lt;/p>
&lt;p>为什么数组长度必须为2的幂值，请继续看。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 扩充table
&lt;/span>&lt;span class="cm">**/&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">inflateTable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">toSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// Find a power of 2 &amp;gt;= toSize
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">capacity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">roundUpToPowerOf2&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">toSize&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">threshold&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">min&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">capacity&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">loadFactor&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MAXIMUM_CAPACITY&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Entry&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">capacity&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="n">initHashSeedAsNeeded&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">capacity&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="计算hash值">计算hash值&lt;/h5>
&lt;p>hashSeed值为0，将key的hashCode值做多次位移和异或运算&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hashSeed&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">sun&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">misc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Hashing&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stringHash32&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">h&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// This function ensures that hashCodes that differ only by
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// constant multiples at each bit position have a bounded
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// number of collisions (approximately 8 at default load factor).
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">20&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">12&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">7&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">4&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="计算元素位置">计算元素位置&lt;/h5>
&lt;p>这里的逻辑很简单：将hash值跟数组长度-1做了按位与。&lt;/p>
&lt;p>在进行查找的时候是通过key的hash值，如果我们将元素的位置分布得尽量均匀一些，尽量做到每个位置上只有一个元素，达到O(1)的查找。这种查找通过取余就可以做到，在Java中如何做到比较快的取余呢，答案是位与运算。&lt;/p>
&lt;p>上面扩充数组的时候我们保证长度为2的幂值，那减一之后就是每位都是&lt;strong>1&lt;/strong>。做位与运算就能保证低位不同的hash值会落在不同的位置上，降低冲突（碰撞），最大程度做到均匀分布，减少链表的出现（查找变成O(n)）。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">indexFor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// assert Integer.bitCount(length) == 1 : &amp;#34;length must be a non-zero power of 2&amp;#34;;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="添加entry">添加entry&lt;/h5>
&lt;p>添加新的元素时要检查元素个数是否达到阈值，否则要做扩容处理，新table的容量为当前table长度的两倍。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kt">void&lt;/span> &lt;span class="nf">addEntry&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">K&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">bucketIndex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">threshold&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">bucketIndex&lt;/span>&lt;span class="o">]))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">resize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">bucketIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">indexFor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">createEntry&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bucketIndex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="resize">resize&lt;/h5>
&lt;p>新table的容量为当前table长度的两倍（table.length &amp;gt;= size），将旧数据中的数据迁移到新的数组中，迁移的过程中要重新计算元素在新数组中的位置。网上很多地方提到这个操作rehash，但我觉得reindex反而更恰当一些。JDK中对rehash有额外的定义，就是&lt;strong>initHashSeedAsNeeded&lt;/strong>。当新的容量&amp;gt;=&lt;strong>jdk.map.althashing.threshold&lt;/strong>的配置时，会重新计算key的hash值，即hash(e.key)。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kt">void&lt;/span> &lt;span class="nf">resize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">newCapacity&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Entry&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">oldTable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">oldCapacity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">oldTable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">oldCapacity&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">MAXIMUM_CAPACITY&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">threshold&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MAX_VALUE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">Entry&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">newTable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Entry&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">newCapacity&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="n">transfer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">newTable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">initHashSeedAsNeeded&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">newCapacity&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTable&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">threshold&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">min&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">newCapacity&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">loadFactor&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MAXIMUM_CAPACITY&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="reindex">reindex&lt;/h5>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kt">void&lt;/span> &lt;span class="nf">transfer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">newTable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">rehash&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">newCapacity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rehash&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">indexFor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">newCapacity&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTable&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="n">newTable&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>JDK8 update
添加元素的时候，如果发生哈希冲突，会遍历链表。加入链表的长度大于TREEIFY_THRESHOLD（默认为8），会将链表转成&lt;strong>红黑树&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">final&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="nf">putVal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">K&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">onlyIfAbsent&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">evict&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;[]&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">tab&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">tab&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">resize&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">tab&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newNode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">K&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hash&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="o">((&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">))))&lt;/span>
&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;)&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">putTreeVal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">binCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">binCount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newNode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">binCount&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">TREEIFY_THRESHOLD&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// -1 for 1st
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">treeifyBin&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">tab&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hash&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="o">((&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">))))&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// existing mapping for key
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">oldValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">onlyIfAbsent&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">oldValue&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">afterNodeAccess&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">oldValue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">++&lt;/span>&lt;span class="n">modCount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(++&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">threshold&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">resize&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">afterNodeInsertion&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">evict&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">&amp;lt;!----&amp;gt;&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">treeifyBin&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;[]&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">tab&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">MIN_TREEIFY_CAPACITY&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">resize&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">hd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">tl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">do&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">replacementTreeNode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">tl&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">hd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tl&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">tl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">tl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">tab&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hd&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">hd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">treeify&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">tab&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样，get(key)的时候也会相应的从树中查找元素。&lt;/p></description></item><item><title>多线程下的单例模式+反汇编</title><link>https://atbug.com/singleton-in-multi-threads-programming/</link><pubDate>Wed, 06 Jul 2016 16:57:09 +0000</pubDate><guid>https://atbug.com/singleton-in-multi-threads-programming/</guid><description>
&lt;p>多线程下的单例模式的实现，顺便做了反汇编。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MySingleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">MySingleton&lt;/span> &lt;span class="n">INSTANCE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nf">MySingleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">MySingleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">INSTANCE&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">MySingleton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">INSTANCE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MySingleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">INSTANCE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Compiled&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="s">&amp;#34;MySingleton.java&amp;#34;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MySingleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">MySingleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Code&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">getstatic&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="c1">// Field INSTANCE:LMySingleton; //+获得类的指定域，并压入栈顶
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">ifnonnull&lt;/span> &lt;span class="n">32&lt;/span> &lt;span class="c1">//+不为null时跳转到行号32
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">6&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">ldc_w&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="c1">// class MySingleton //+常量值从常量池中推送至栈顶（宽索引），推送的为地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">9&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">dup&lt;/span> &lt;span class="c1">//+复制栈顶数值，并且复制值进栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">astore_0&lt;/span> &lt;span class="c1">//+将栈顶数值（objectref）存入当前 frame的局部变量数组中指定下标(index）处的变量中，栈顶数值出栈。这里存的是MySingleton类定义的地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">11&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">monitorenter&lt;/span> &lt;span class="c1">//+获得对象锁即MySingleton地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">12&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="c1">// class MySingleton //+创建一个对象，并且其引用进栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">15&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">dup&lt;/span> &lt;span class="c1">//+复制栈顶数值，并且复制值进栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">16&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokespecial&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">4&lt;/span> &lt;span class="c1">// Method &amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V //+调用超类构造方法、实例初始化方法、私有方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">19&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">putstatic&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="c1">// Field INSTANCE:LMySingleton; //+为指定的类的静态域赋值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">22&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_0&lt;/span> &lt;span class="c1">//+当前frame的局部变量数组中下标为 index的引用型局部变量进栈，这里是MySingleton类定义的地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">23&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">monitorexit&lt;/span> &lt;span class="c1">//+释放对象锁
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">24&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">goto&lt;/span> &lt;span class="n">32&lt;/span> &lt;span class="c1">//+跳转到行号32
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">27&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">astore_1&lt;/span> &lt;span class="c1">//+将栈顶数值（objectref）存入当前 frame的局部变量数组中指定下标(index）处的变量中，栈顶数值出栈。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">28&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_0&lt;/span> &lt;span class="c1">//+当前frame的局部变量数组中下标为 0的引用型局部变量进栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">29&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">monitorexit&lt;/span> &lt;span class="c1">//+//+释放对象锁
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">30&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">aload_1&lt;/span> &lt;span class="c1">//+当前frame的局部变量数组中下标为 1的引用型局部变量进栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">31&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">athrow&lt;/span> &lt;span class="c1">//+将栈顶的数值作为异常或错误抛出
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">32&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">getstatic&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="c1">// Field INSTANCE:LMySingleton; //+获得类的指定域，并压入栈顶
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">35&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">areturn&lt;/span> &lt;span class="c1">//+从方法中返回一个对象的引用
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">from&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">target&lt;/span> &lt;span class="n">type&lt;/span>
&lt;span class="n">12&lt;/span> &lt;span class="n">24&lt;/span> &lt;span class="n">27&lt;/span> &lt;span class="n">any&lt;/span>
&lt;span class="n">27&lt;/span> &lt;span class="n">30&lt;/span> &lt;span class="n">27&lt;/span> &lt;span class="n">any&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>使用Kryo替换spring amqp的Java序列化</title><link>https://atbug.com/use-kryo-in-spring-amqp-serialization/</link><pubDate>Wed, 29 Jun 2016 05:29:14 +0000</pubDate><guid>https://atbug.com/use-kryo-in-spring-amqp-serialization/</guid><description>
&lt;p>spring amqp的原生并没有对Kryo加以支持，Kryo的优点就不多说了。&lt;/p>
&lt;p>git地址：&lt;a href="https://github.com/addozhang/spring-kryo-messaeg-converter">https://github.com/addozhang/spring-kryo-messaeg-converter&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">KryoMessageConverter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AbstractMessageConverter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">CONTENT_TYPE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;application/x-kryo&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">DEFAULT_CHARSET&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">defaultCharset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DEFAULT_CHARSET&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">KryoFactory&lt;/span> &lt;span class="n">kryoFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultKryoFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Crate a message from the payload object and message properties provided. The message id will be added to the
&lt;/span>&lt;span class="cm"> * properties if necessary later.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param object the payload
&lt;/span>&lt;span class="cm"> * @param messageProperties the message properties (headers)
&lt;/span>&lt;span class="cm"> * @return a message
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">Message&lt;/span> &lt;span class="nf">createMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">object&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MessageProperties&lt;/span> &lt;span class="n">messageProperties&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Kryo&lt;/span> &lt;span class="n">kryo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kryoFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Output&lt;/span> &lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ByteBufferOutput&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">4096&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">1024&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">kryo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">writeClassAndObject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">object&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toBytes&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">messageProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setContentType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CONTENT_TYPE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">messageProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContentEncoding&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">messageProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setContentEncoding&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">defaultCharset&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">messageProperties&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">fromMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Message&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">MessageConversionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">MessageProperties&lt;/span> &lt;span class="n">properties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMessageProperties&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">properties&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">properties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContentType&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="o">;&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">properties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContentType&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;x-kryo&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Kryo&lt;/span> &lt;span class="n">kryo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kryoFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kryo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readClassAndObject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ByteBufferInput&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBody&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MessageConversionException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Converter not applicable to this message&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DefaultKryoFactory&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">KryoFactory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Kryo&lt;/span> &lt;span class="nf">create&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Kryo&lt;/span> &lt;span class="n">kryo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Kryo&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">kryo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Rabbitmq延迟队列实现</title><link>https://atbug.com/rabbitmq-delay-queue-implementation/</link><pubDate>Wed, 30 Mar 2016 14:27:02 +0000</pubDate><guid>https://atbug.com/rabbitmq-delay-queue-implementation/</guid><description>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>在requeue=false的情况系，消息被client reject&lt;/li>
&lt;li>消息过期&lt;/li>
&lt;li>队列长度超过限制&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted --></description></item><item><title>关于SLF4J</title><link>https://atbug.com/about-slf4j/</link><pubDate>Sat, 18 Apr 2015 11:16:26 +0000</pubDate><guid>https://atbug.com/about-slf4j/</guid><description>
&lt;p>Spring的功能越来越强大，同时也越来越臃肿。比如想快速搭建一个基于Spring的项目，解决依赖问题非常耗时。Spring的项目模板的出现就解决了这个问题，通过&lt;a href="http://dist.springsource.com/release/STS/help/descriptors-3.0.xml">这个描述文件&lt;/a>，可以快速的找到你所需要的模板。&lt;/p>
&lt;p>第一次认识SLF4J就是在这些项目模板里，它的全称是Simple Logging Facade for Java。从字面上可以看出它只是一个Facade，不提供具体的日志解决方案，只服务于各个日志系统。简单说有了它，我们就可以&lt;strong>随意&lt;/strong>的更换日志系统（如java.util.logging、logback、log4j）。比如在开发的时候使用logback，部署的时候可以切换到log4j；如果关闭所有的log，切换到NOP就可以了。只需要更改依赖，提供日志配置文件，免去了修改代码的麻烦。&lt;/p>
&lt;p>首先看如何使用：&lt;/p>
&lt;p>[java]
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;&lt;/p>
&lt;p>public class HelloWorld {
public static void main(String[] args) {
Logger logger = LoggerFactory.getLogger(HelloWorld.class);
logger.info(&amp;quot;Hello World&amp;quot;);
}
}
[/java]&lt;/p>
&lt;p>SLF4J封装了使用起来和其他日志系统一样简单。上面提到过SLF4J不提供具体的日志解决方案，所以使用的时候除了要引用SLF4J包，还要引用具体的日志解决方案包（log4j、logging&amp;ndash;JDK提供、logback），还有所对应的binding包（&lt;em>slf4j-log4j&lt;/em>_、slf4j-jdk14、logback-classic_）。&lt;/p>
&lt;p>以log4j为例，我们看SLF4J的实现方式。&lt;/p>
&lt;p>SLF4J类在初始化的时候会尝试从ClassLoader中&lt;strong>org/slf4j/impl/StaticLoggerBinder.class&lt;/strong>。这个类比较特殊，每个binding包里都有。不同binding包里的StaticLoggerBinder类会去初始化一个相应的实例，如slf4j-log4j里：&lt;/p>
&lt;p>[java]
/**&lt;/p>
&lt;ul>
&lt;li>截取的部分代码
*/
private StaticLoggerBinder() {
loggerFactory = new Log4jLoggerFactory();
}
[/java]&lt;/li>
&lt;/ul>
&lt;p>而Log4jLoggerAdapter实现了SLF4J的Logger接口，使用了Adapter模式对Log4j的Logger进行了封装并暴露了Logger的接口，Log4jLoggerFactory持有了Log4jLoggerAdapter的实例。&lt;/p>
&lt;p>[java]
/**&lt;/p>
&lt;ul>
&lt;li>截取的部分代码
*/
public class Log4jLoggerFactory implements ILoggerFactory {
public Logger getLogger(String name) {
Logger slf4jLogger = null;
// protect against concurrent access of loggerMap
synchronized (this) {
slf4jLogger = (Logger) loggerMap.get(name);
if (slf4jLogger == null) {
org.apache.log4j.Logger log4jLogger;
if(name.equalsIgnoreCase(Logger.ROOT_LOGGER_NAME)) {
log4jLogger = LogManager.getRootLogger();
} else {
log4jLogger = LogManager.getLogger(name);
}
slf4jLogger = new Log4jLoggerAdapter(log4jLogger);
loggerMap.put(name, slf4jLogger);
}
}
return slf4jLogger;
}
}
[/java]&lt;/li>
&lt;/ul>
&lt;p>具体的Log解决方案就不做剖析了。&lt;/p></description></item><item><title>日常工作中使用的chrome插件</title><link>https://atbug.com/chrome-extensions-for-daily-work/</link><pubDate>Sun, 09 Feb 2014 09:26:50 +0000</pubDate><guid>https://atbug.com/chrome-extensions-for-daily-work/</guid><description>
&lt;p>先说下背景，Java程序猿一枚，兼做hybrid app。所以日常工作中免不了要跟浏览器打交道，一般就只用chrome了，看中它的调试功能和庞大的插件库。下面就列出工作中使用的各种插件，排名不分先后。&lt;/p>
&lt;ul>
&lt;li>google帐号要有，而且两个。一个日常生活娱乐，一个工作使用。可以同步各种数据到云端，如app、插件、设置、自动填写数据、密码、访问历史、打开的标签等等。原谅我把同步也当作插件，简直就是插件中的战斗机。&lt;/li>
&lt;li>Developer tool，这个是chrome自带的开发人员工具，集前台设计、代码调试、资源管理等功能。&lt;/li>
&lt;li>&lt;a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb">Adblock Plus&lt;/a> 不管工作还是生活用，这个插件必装。有适合国人使用的屏蔽清单（&lt;a href="https://github.com/chinalist/chinalist">ChinaList+EasyList&lt;/a>），轻松搞定各种广告，尤其是现在的广告无节操，影响工作。&lt;/li>
&lt;li>&lt;a href="https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn">Clear Cache&lt;/a> 开发中常常遇到缓存引起的各种奇葩问题，缓存清理使用方便，可设置快捷键。&lt;/li>
&lt;li>&lt;a href="https://chrome.google.com/webstore/detail/edit-this-cookie/fngmhnnpilhplaeedifhccceomclgfbg">Edit This Cookie&lt;/a> Cookie的修改，不解释。&lt;/li>
&lt;li>&lt;a href="https://chrome.google.com/webstore/detail/gmbgaklkmjakoegficnlkhebmhkjfich">Google Calendar (by Google)&lt;/a> 日程安排管理。&lt;/li>
&lt;li>&lt;a href="https://chrome.google.com/webstore/detail/niloccemoadcdkdjlinkgdfekeahmflj">Pocket&lt;/a> 常说的read it later，用作收藏或者遇到暂时没时间阅读（或者不方便阅读的，你懂的）。跨平台，有移动端应用。非常好用，根本停步下来。&lt;/li>
&lt;li>&lt;a href="https://chrome.google.com/webstore/detail/cpngackimfmofbokmjmljamhdncknpmg">Screen Capture (by Google)&lt;/a> google出品的网页截图插件，强大，可截取整张页面。&lt;/li>
&lt;li>&lt;a href="http://streamus.com/">Streamus™ (Beta!)&lt;/a> 好吧，这是娱乐的，work life balance嘛！公司网络是VPN从香港出境，并block掉各种娱乐非娱乐网站，唯独youtube还在。这个插件可以收听youtube上的音乐，推荐！&lt;/li>
&lt;li>&lt;a href="https://chrome.google.com/webstore/detail/djflhoibgkdhkhhcedjiklpkjnoahfmg">User-Agent Switcher for Chrome&lt;/a> 修改浏览器的user agent，多浏览器调试用。&lt;/li>
&lt;li>&lt;a href="https://chrome.google.com/webstore/detail/%E7%AE%80%E5%8D%95-qr-%E7%94%9F%E6%88%90%E5%99%A8/ajaomcmkalmeeahjfdklkcjbljhbokjl">简单 QR 生成器&lt;/a> 生成当前标签网址的二维码，方便手机扫描。
 &lt;/li>
&lt;/ul></description></item><item><title>About</title><link>https://atbug.com/about/</link><pubDate>Tue, 22 Jan 2013 10:02:37 +0800</pubDate><guid>https://atbug.com/about/</guid><description>
&lt;h3 id="基本信息">基本信息&lt;/h3>
&lt;p>&lt;strong>张晓辉&lt;/strong>&lt;/p>
&lt;p>资深码农，12 年软件开发经验。曾在汇丰软件、唯品会、数人云等公司任职。&lt;/p>
&lt;p>目前就职小鹏汽车，在基础架构团队从事技术中台的研发。&lt;/p>
&lt;p>这里所有的文章都会同步发送到公众号：云编码 (微信号：sevenfeet)&lt;/p>
&lt;p>&lt;img src="https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/23/qrcode.jpg" alt="">&lt;/p></description></item></channel></rss>